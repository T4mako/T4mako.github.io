import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-4cb44655.js";const e={},p=t(`<h2 id="_1、基本介绍" tabindex="-1"><a class="header-anchor" href="#_1、基本介绍" aria-hidden="true">#</a> 1、基本介绍</h2><h3 id="_1-1、shiro-架构" tabindex="-1"><a class="header-anchor" href="#_1-1、shiro-架构" aria-hidden="true">#</a> 1.1、Shiro 架构：</h3><ul><li><p>Subject：任何可以与应用交互的用户</p></li><li><p>SecurityManager ：是 Shiro 的核心</p><p>所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进 行认证、授权、会话及缓存的管理</p></li><li><p>Authenticator：负责 Subject 认证，可以自定义实现；可以使用认证策略（ Authentication Strategy），即什么情况下算用户认证通过了</p></li><li><p>Authorizer：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能</p></li><li><p>Realm：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的 Realm；</p></li><li><p>SessionManager：管理 Session 生命周期的组件；而 Shiro 并不仅仅可以用在 Web环境，也可以用在如普通的 JavaSE 环境</p></li><li><p>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能</p></li><li><p>Cryptography：密码模块， Shiro 提高了一些常见的加密组件用于如密码加密/解密。</p></li></ul><h3 id="_1-2、登录认证" tabindex="-1"><a class="header-anchor" href="#_1-2、登录认证" aria-hidden="true">#</a> 1.2、登录认证</h3><p>在 shiro 中，用户需要提供 principals（身份）和credentials（证明）给 shiro，从而应用能验证用户身份：</p><ul><li>principals：身份，即主体的标识属性，可以是任何属性，如用户名、邮箱等，唯一即可。一个主体可以有多个principals，但只有一个Primary principals，一般是用户名 / 邮箱 / 手机号</li><li>credentials：证明/凭证，即只有主体知道的安全值，如密码/数字证书等</li><li>最常见的 principals 和 credentials 组合就是用户名/密码</li></ul><p>登录认证基本流程：</p><ul><li>收集用户身份/凭证，即如用户名 / 密码</li><li>用 Subject.login 进行登录，如果失败将得到相应的 AuthenticationException 异常，根据异常提示用户错误信息；否则登录成功</li><li>创建自定义的 Realm 类，继承 org.apache.shiro.realm.AuthenticatingRealm 类，实现 doGetAuthenticationInfo() 方法</li></ul><p>自定义登录认证：</p><ul><li>Shiro 默认的登录认证是不带加密的，如果想要实现加密认证需要自定义登录认证，自定义 Realm。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthenticatingRealm</span> <span class="token punctuation">{</span>
<span class="token comment">//自定义的登录认证方法， Shiro 的 login 方法底层会调用该类的认证方法完成登录认证</span>
<span class="token comment">//需要配置自定义的 realm 生效，在 ini 文件中配置，或 Springboot 中配置</span>
<span class="token comment">//该方法只是获取进行对比的信息，认证逻辑还是按照 Shiro 的底层认证逻辑完成认证</span>
	<span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>
		<span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1 获取身份信息</span>
        <span class="token class-name">String</span> principal <span class="token operator">=</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2 获取凭证信息</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        authenticationToken<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;认证用户信息： &quot;</span><span class="token operator">+</span>principal<span class="token operator">+</span><span class="token string">&quot;---&quot;</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3 获取数据库中存储的用户信息</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//3.1 数据库存储的加盐迭代 3 次密码</span>
            <span class="token class-name">String</span> pwdInfo <span class="token operator">=</span> <span class="token string">&quot;7174f64b13022acd3c56e2781e098a5f&quot;</span><span class="token punctuation">;</span>
            <span class="token comment">//3.2 创建封装了校验逻辑的对象，将要比较的数据给该对象</span>
            <span class="token class-name">AuthenticationInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>
            authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            pwdInfo<span class="token punctuation">,</span>
            <span class="token class-name">ByteSource<span class="token punctuation">.</span>Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token string">&quot;salt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> info<span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在shiro.ini中添加配置信息</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">main</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">md5CredentialsMatcher</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.shiro.authc.credential.Md5CredentialsMatcher</span>
<span class="token key attr-name">md5CredentialsMatcher.hashIterations</span><span class="token punctuation">=</span><span class="token value attr-value">3</span>
<span class="token key attr-name">myrealm</span><span class="token punctuation">=</span><span class="token value attr-value">com.atguigu.shirotest.MyRealm</span>
<span class="token key attr-name">myrealm.credentialsMatcher</span><span class="token punctuation">=</span><span class="token value attr-value">$md5CredentialsMatcher</span>
<span class="token key attr-name">securityManager.realms</span><span class="token punctuation">=</span><span class="token value attr-value">$myrealm</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">users</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">zhangsan</span><span class="token punctuation">=</span><span class="token value attr-value">7174f64b13022acd3c56e2781e098a5f,role1,</span>
role2
<span class="token key attr-name">lisi</span><span class="token punctuation">=</span><span class="token value attr-value">l4</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">roles</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">role1</span><span class="token punctuation">=</span><span class="token value attr-value">user:insert,user:select</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3、角色授权" tabindex="-1"><a class="header-anchor" href="#_1-3、角色授权" aria-hidden="true">#</a> 1.3、角色授权</h3><p>在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限 （Permission）、角色（Role）。-</p><ul><li><p>主体（Subject）：</p><p>访问应用的用户，在 Shiro 中使用 Subject 代表该用户。用户只<br> 有授权 后才允许访问相应的资源。</p></li><li><p>资源（Resource)） 在应用中用户可以访问的 URL，查看 / 编辑<br> 某些数据、访问某个业务方法、打印文本等等都是资源。用户只要授权后才能访问。</p></li><li><p>权限（Permission）：安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权力。 即权限表示在应用中用户能不能访问某个资源，（即很多时候都是CRUD（增查改删）式权<br> 限控 制）等。权限代表了用户有没有操作某个资源的权利</p></li><li><p>Shiro 支持粗粒度权限（如用户模块的所有权限）和细粒度权限（操作某个用户的权限， 即实例级别的）</p></li><li><p>角色（Role）： 权限的集合，一般情况下会赋予用户角色而不是权限，即这样用户可以拥有 一组权限，赋予权限时比较方便。典型的如：项目经理、技术总监、 CTO、开发工程师等 都是角色，不同的角色拥有一组不同的权限</p></li></ul><h2 id="_2、shiro-与-sprintboot-整合" tabindex="-1"><a class="header-anchor" href="#_2、shiro-与-sprintboot-整合" aria-hidden="true">#</a> 2、Shiro 与 SprintBoot 整合</h2><p>相关依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-spring-boot-web-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1、自定义-realm" tabindex="-1"><a class="header-anchor" href="#_2-1、自定义-realm" aria-hidden="true">#</a> 2.1、自定义 realm</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>
	<span class="token comment">//自定义授权方法</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span>
        principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">//自定义登录认证方法</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1 获取用户身份信息</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2 调用业务层获取用户信息（数据库中）</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserInfoByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3 判断并将数据完成封装</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">AuthenticationInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>
            token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ByteSource<span class="token punctuation">.</span>Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token string">&quot;salt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> info<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写配置类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">MyRealm</span> myRealm<span class="token punctuation">;</span>
<span class="token comment">//配置 SecurityManager</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DefaultWebSecurityManager</span> <span class="token function">defaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//1 创建 defaultWebSecurityManager 对象</span>
<span class="token class-name">DefaultWebSecurityManager</span> defaultWebSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2 创建加密对象，并设置相关属性</span>
<span class="token class-name">HashedCredentialsMatcher</span> matcher <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.1 采用 md5 加密</span>
matcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">&quot;md5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.2 迭代加密次数</span>
matcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3 将加密对象存储到 myRealm 中</span>
myRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4 将 myRealm 存入 defaultWebSecurityManager 对象</span>
defaultWebSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>myRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//5 返回</span>
<span class="token keyword">return</span> defaultWebSecurityManager<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//配置 Shiro 内置过滤器拦截范围</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DefaultShiroFilterChainDefinition</span>
<span class="token function">shiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">DefaultShiroFilterChainDefinition</span> definition <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">DefaultShiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置不认证可以访问的资源</span>
definition<span class="token punctuation">.</span><span class="token function">addPathDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;/myController/userLogin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
definition<span class="token punctuation">.</span><span class="token function">addPathDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置需要进行登录认证的拦截范围</span>
definition<span class="token punctuation">.</span><span class="token function">addPathDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;authc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> definition<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、多个-realm" tabindex="-1"><a class="header-anchor" href="#_2-2、多个-realm" aria-hidden="true">#</a> 2.2、多个 realm</h3><p>当应用程序配置多个 Realm 时，例如：用户名密码校验、手机号验证码校验等等。Shiro 的 ModularRealmAuthenticator 会使用内部的 AuthenticationStrategy 组件判断认证是成功还是失败</p><p>AuthenticationStrategy 是一个无状态的组件，它在身份验证尝试中被询问 4 次（这 4 次交互所需的任何必要的状态将被作为方法参数）：</p><ul><li>在所有 Realm 被调用之前</li><li>在调用 Realm 的 getAuthenticationInfo 方法之前</li><li>在调用 Realm 的 getAuthenticationInfo 方法之后</li><li>在所有 Realm 被调用之后</li></ul><p>认证策略的另外一项工作就是聚合所有 Realm 的结果信息封装至一个<br> AuthenticationInfo 实例中，并将此信息返回，以此作为 Subject 的身份信息</p><p>Shiro 中定义了 3 种认证策略的实现：</p><ul><li>AtLeastOneSuccessfulStrategy：只要有一个（或更多）的 Realm 验证成功，那么认证将视为成功</li><li>FirstSuccessfulStrategy：第一个 Realm 验证成功，整体认证将视为成功，且后续 Realm 将被忽略</li><li>AllSuccessfulStrategy：所有 Realm 成功，认证才视为成功</li></ul><p>ModularRealmAuthenticator 内置的认证策略默认实现是<br> AtLeastOneSuccessfulStrategy 方式。可以通过配置修改策略</p><p>多个 realm 代码实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//配置 SecurityManager</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DefaultWebSecurityManager</span> <span class="token function">defaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//1 创建 defaultWebSecurityManager 对象</span>
<span class="token class-name">DefaultWebSecurityManager</span> defaultWebSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2 创建认证对象，并设置认证策略</span>
<span class="token class-name">ModularRealmAuthenticator</span> modularRealmAuthenticator <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">ModularRealmAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
modularRealmAuthenticator<span class="token punctuation">.</span><span class="token function">setAuthenticationStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span>
<span class="token class-name">AllSuccessfulStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultWebSecurityManager<span class="token punctuation">.</span><span class="token function">setAuthenticator</span><span class="token punctuation">(</span>modularRealmAuthenticator<span class="token punctuation">)</span>
<span class="token punctuation">;</span>
<span class="token comment">//3 封装 myRealm 集合</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Realm</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myRealm2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4 将 myRealm 存入 defaultWebSecurityManager 对象</span>
defaultWebSecurityManager<span class="token punctuation">.</span><span class="token function">setRealms</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//5 返回</span>
<span class="token keyword">return</span> defaultWebSecurityManager<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3、remember-me" tabindex="-1"><a class="header-anchor" href="#_2-3、remember-me" aria-hidden="true">#</a> 2.3、remember me</h3><p>Shiro 提供了记住我（RememberMe）的功能，比如访问一些网站时，关闭了浏览器，下次再打开时还是能记住你是谁， 下次访问时无需再登录即可访问。 （一般会把 RememberMe 的 Cookie 写到客户端并保存下来； ）</p><p>代码实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 
* 配置类
*/</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">MyRealm</span> myRealm<span class="token punctuation">;</span>
<span class="token comment">//配置 SecurityManager</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DefaultWebSecurityManager</span> <span class="token function">defaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//1 创建 defaultWebSecurityManager 对象</span>
<span class="token class-name">DefaultWebSecurityManager</span> defaultWebSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2 创建加密对象，并设置相关属性</span>
<span class="token class-name">HashedCredentialsMatcher</span> matcher <span class="token operator">=</span> <span class="token keyword">new</span>
    <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.1 采用 md5 加密</span>
matcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">&quot;md5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.2 迭代加密次数</span>
matcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3 将加密对象存储到 myRealm 中</span>
myRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4 将 myRealm 存入 defaultWebSecurityManager 对象</span>
defaultWebSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>myRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4.5 设置 rememberMe</span>
defaultWebSecurityManager<span class="token punctuation">.</span><span class="token function">setRememberMeManager</span><span class="token punctuation">(</span><span class="token function">rememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//5 返回</span>
<span class="token keyword">return</span> defaultWebSecurityManager<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//cookie 属性设置</span>
<span class="token keyword">public</span> <span class="token class-name">SimpleCookie</span> <span class="token function">rememberMeCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">SimpleCookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCookie</span><span class="token punctuation">(</span><span class="token string">&quot;rememberMe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置跨域</span>
<span class="token comment">//cookie.setDomain(domain);</span>
cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookie<span class="token punctuation">.</span><span class="token function">setHttpOnly</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> cookie<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//创建 Shiro 的 cookie 管理对象</span>
<span class="token keyword">public</span> <span class="token class-name">CookieRememberMeManager</span> <span class="token function">rememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">CookieRememberMeManager</span> cookieRememberMeManager <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">CookieRememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookieRememberMeManager<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token function">rememberMeCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookieRememberMeManager<span class="token punctuation">.</span><span class="token function">setCipherKey</span><span class="token punctuation">(</span><span class="token string">&quot;1234567890987654&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> cookieRememberMeManager<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//配置 Shiro 内置过滤器拦截范围</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DefaultShiroFilterChainDefinition</span>
<span class="token function">shiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">DefaultShiroFilterChainDefinition</span> definition <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">DefaultShiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置不认证可以访问的资源</span>
definition<span class="token punctuation">.</span><span class="token function">addPathDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;/myController/userLogin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
definition<span class="token punctuation">.</span><span class="token function">addPathDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;/myController/login&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置需要进行登录认证的拦截范围</span>
definition<span class="token punctuation">.</span><span class="token function">addPathDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;authc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//添加存在用户的过滤器（rememberMe）</span>
definition<span class="token punctuation">.</span><span class="token function">addPathDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> definition<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
* controller
*/</span>
<span class="token comment">//登录认证</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;userLogin&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">userLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span>
<span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token keyword">boolean</span> rememberMe<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//1 获取 Subject 对象</span>
<span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2 封装请求数据到 token 对象中</span>
<span class="token class-name">AuthenticationToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>pwd<span class="token punctuation">,</span>rememberMe<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3 调用 login 方法进行登录认证</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;登录失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token string">&quot;登录失败&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4、授权、角色认证" tabindex="-1"><a class="header-anchor" href="#_2-4、授权、角色认证" aria-hidden="true">#</a> 2.4、授权、角色认证</h3><p>用户登录后， 需要验证是否具有指定角色指定权限。</p><p>通过 Realm 的 doGetAuthorizationInfo 方法进行判断。触发权限判断的有两种方式</p><ul><li>在页面中通过shiro:****属性判断</li><li>在接口服务中通过注解@Requires****进行判断</li></ul><p>后端接口服务注解</p><ul><li><p>@RequiresAuthentication：验证用户是否登录，等同于方法subject.isAuthenticated()</p></li><li><p>@RequiresUser：</p></li></ul><p>验证用户是否被记忆：<br> 登录认证成功 subject.isAuthenticated() 为 true<br> 登录后被记忆 subject.isRemembered() 为 true</p><ul><li><p>@RequiresGuest：验证 subject 是否有相应角色，有角色访问方法，没有则会抛出异常 AuthorizationException</p></li><li><p>@RequiresRoles：</p><p>例如： @RequiresRoles(“aRoleName”)<br> void someMethod();<br> 只有 subject 有 aRoleName 角色才能访问方法 someMethod()</p></li><li><p>@RequiresPermissions：</p><p>验证 subject 是否有相应权限，有权限访问方法，没有则会抛出异常<br> AuthorizationException</p><p>例如： @RequiresPermissions (“file:read”,”wite:aFile.txt”)<br> void someMethod();<br> subject 必须同时含有 file:read 和 wite:aFile.txt 权限才能访问方法someMethod()</p></li></ul>`,46),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","Shiro.html.vue"]]);export{k as default};
