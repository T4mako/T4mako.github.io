import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as c,b as n,d as s,e,f as t}from"./app-03e32318.js";const u={},r=n("p",null,"elasticsearch分布式搜索引擎",-1),d=t('<h2 id="_1、初识elasticsearch" tabindex="-1"><a class="header-anchor" href="#_1、初识elasticsearch" aria-hidden="true">#</a> 1、初识elasticsearch</h2><h3 id="_1-1、了解es" tabindex="-1"><a class="header-anchor" href="#_1-1、了解es" aria-hidden="true">#</a> 1.1、了解ES</h3><h4 id="_1-1-1、elasticsearch的作用" tabindex="-1"><a class="header-anchor" href="#_1-1-1、elasticsearch的作用" aria-hidden="true">#</a> 1.1.1、elasticsearch的作用</h4><p>elasticsearch是一款非常强大的<strong>开源搜索引擎</strong>，具备非常多强大功能，可以帮助我们<strong>从海量数据中快速找到需要的内容</strong>，可以用来实现搜索、日志统计、分析、系统监控等功能</p><h4 id="_1-1-2、elk技术栈" tabindex="-1"><a class="header-anchor" href="#_1-1-2、elk技术栈" aria-hidden="true">#</a> 1.1.2、ELK技术栈</h4><p>elasticsearch结合kibana、Logstash、Beats，也就是<strong>elastic stack（ELK）</strong>。被广泛应用在日志数据分析、实时监控等领域</p><p>而elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329134229.png" alt="" loading="lazy"></p><h4 id="_1-1-3、elasticsearch的发展" tabindex="-1"><a class="header-anchor" href="#_1-1-3、elasticsearch的发展" aria-hidden="true">#</a> 1.1.3、elasticsearch的发展</h4><p>elasticsearch底层是基于<strong>lucene</strong>来实现的。</p>',10),k={href:"https://lucene.apache.org/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[s("Lucene的优势：易扩展，高性能（基于倒排索引）"),n("br"),s(" Lucene的缺点：只限于Java语言开发，学习曲线陡峭，不支持水平扩展")],-1),m={href:"https://www.elastic.co/cn/",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),g=n("br",null,null,-1),h=t(`<h3 id="_1-2、倒排索引" tabindex="-1"><a class="header-anchor" href="#_1-2、倒排索引" aria-hidden="true">#</a> 1.2、倒排索引</h3><p>倒排索引的概念是基于MySQL这样的正向索引而言的。</p><h4 id="_1-2-1、正向索引" tabindex="-1"><a class="header-anchor" href="#_1-2-1、正向索引" aria-hidden="true">#</a> 1.2.1、正向索引</h4><p>如果是根据<strong>id查询</strong>，那么直接走索引，查询<strong>速度非常快</strong></p><p>但如果是基于title做<strong>模糊查询</strong>，只能是逐行扫描数据，流程如下：<br> 1）用户搜索数据，条件是title符合<code>&quot;%手机%&quot;</code><br> 2）逐行获取数据，比如id为1的数据<br> 3）判断数据中的title是否符合用户搜索条件<br> 4）如果符合则放入结果集，不符合则丢弃。回到步骤1</p><p><strong>逐行扫描</strong>，也就是全表扫描，随着数据量增加，其查询效率也会越来越低。当数据量达到数百万时，就是一场灾难。</p><h4 id="_1-2-2、倒排索引" tabindex="-1"><a class="header-anchor" href="#_1-2-2、倒排索引" aria-hidden="true">#</a> 1.2.2、倒排索引</h4><p>倒排索引中两个非常重要的概念：</p><ul><li><strong>文档（<code>Document</code>）</strong>：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li><li><strong>词条（<code>Term</code>）</strong>：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p><strong>创建倒排索引</strong>是对正向索引的一种特殊处理，流程如下：</p><ul><li>将每一个文档的数据利用算法分词，得到一个个词条</li><li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li><li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li></ul><p>如图：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329140151.png" alt="" loading="lazy"></p><p>举例：倒排索引的<strong>搜索流程</strong>如下（以搜索&quot;华为手机&quot;为例）：</p><p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。<br> 2）对用户输入内容<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。<br> 3）拿着词条在倒排索引中查找，可以得到包含词条的文档id：1、2、3。<br> 4）拿着文档id到正向索引中查找具体文档。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329140231.png" alt="" loading="lazy"></p><h4 id="_1-2-3、正向和倒排" tabindex="-1"><a class="header-anchor" href="#_1-2-3、正向和倒排" aria-hidden="true">#</a> 1.2.3、正向和倒排</h4><ul><li><p><strong>正向索引</strong>是最传统的，根据<strong>id索引</strong>的方式。但根据词条查询时，必须<strong>先逐条获取每个文档</strong>，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条</strong>的过程。</p></li><li><p><strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是<strong>根据词条找文档</strong>的过程。</p></li></ul><table><thead><tr><th></th><th>正向索引</th><th><strong>倒排索引</strong></th></tr></thead><tbody><tr><td><strong>优点</strong></td><td>可以给多个字段创建索引<br>根据索引字段搜索、排序速度非常快</td><td>根据词条搜索、模糊搜索时，速度非常快</td></tr><tr><td><strong>缺点</strong></td><td>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</td><td>只能给词条创建索引，而不是字段 <br>无法根据字段做排序</td></tr></tbody></table><h3 id="_1-3、es中的概念" tabindex="-1"><a class="header-anchor" href="#_1-3、es中的概念" aria-hidden="true">#</a> 1.3、es中的概念</h3><h4 id="_1-3-1、文档和字段" tabindex="-1"><a class="header-anchor" href="#_1-3-1、文档和字段" aria-hidden="true">#</a> 1.3.1、文档和字段</h4><p>elasticserch是<strong>面向文档</strong>存储的，可以是数据库的一条商品数据，一个订单信息。<br> 文档数据会被序列化为<strong>json格式</strong>后存储在elasticsearch中</p><p>而Json文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列。</p><h4 id="_1-3-2、索引和映射" tabindex="-1"><a class="header-anchor" href="#_1-3-2、索引和映射" aria-hidden="true">#</a> 1.3.2、索引和映射</h4><p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p><p>例如：<br> 所有用户文档，就可以组织在一起，称为用户的索引；<br> 所有商品的文档，可以组织在一起，称为商品的索引；<br> 所有订单的文档，可以组织在一起，称为订单的索引；</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329141204.png" alt="" loading="lazy"></p><p>因此，我们可以把<strong>索引</strong>当做是数据库中的<strong>表</strong>。</p><p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，<strong>类似表的结构约束</strong>。</p><h4 id="_1-3-3、mysql与elasticsearch" tabindex="-1"><a class="header-anchor" href="#_1-3-3、mysql与elasticsearch" aria-hidden="true">#</a> 1.3.3、mysql与elasticsearch</h4><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性<br> Elasticsearch：擅长海量数据的搜索、分析、计算</p><p>因此在企业中，往往是两者结合使用：<br> 对安全性要求较高的写操作，使用mysql实现<br> 对查询性能要求较高的搜索需求，使用elasticsearch实现<br> 两者再基于某种方式，实现数据的同步，保证一致性</p><h2 id="_2、安装、部署es、kibana" tabindex="-1"><a class="header-anchor" href="#_2、安装、部署es、kibana" aria-hidden="true">#</a> 2、安装、部署es、kibana</h2><h3 id="_2-1-创建网络" tabindex="-1"><a class="header-anchor" href="#_2-1-创建网络" aria-hidden="true">#</a> 2.1.创建网络</h3><p>因为我们还需要部署<strong>kibana容器</strong>，因此需要让es和kibana容器互联。这里先<strong>创建一个网络</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create es-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2、加载镜像" tabindex="-1"><a class="header-anchor" href="#_2-2、加载镜像" aria-hidden="true">#</a> 2.2、加载镜像</h3><p>采用elasticsearch的7.12.1版本的镜像，这个镜像体积非常大，接近1G。不建议大家自己pull</p><p>将课前资料中的es.tar，kibana.tar上传到虚拟机中，然后运行命令加载即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 导入数据</span>
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> es.tar
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> kibana.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3、部署es" tabindex="-1"><a class="header-anchor" href="#_2-3、部署es" aria-hidden="true">#</a> 2.3、部署ES</h3><p>运行docker命令，部署单点es：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
	<span class="token parameter variable">--name</span> es <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token string">&quot;discovery.type=single-node&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> es-data:/usr/share/elasticsearch/data <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> es-plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\\</span>
    <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--network</span> es-net <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\\</span>
elasticsearch:7.12.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
	<span class="token parameter variable">--name</span> es <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="token punctuation">\\</span> <span class="token comment">#内存大小</span>
    <span class="token parameter variable">-e</span> <span class="token string">&quot;discovery.type=single-node&quot;</span> <span class="token punctuation">\\</span> <span class="token comment">#非集群模式</span>
    <span class="token parameter variable">-v</span> es-data:/usr/share/elasticsearch/data <span class="token punctuation">\\</span> <span class="token comment">#挂载逻辑卷，绑定es的数据目录</span>
    <span class="token parameter variable">-v</span> es-plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\\</span> <span class="token comment">#挂载逻辑卷，绑定es的插件目录</span>
    <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span> <span class="token comment">#授予逻辑卷访问权</span>
    <span class="token parameter variable">--network</span> es-net <span class="token punctuation">\\</span> <span class="token comment">#加入一个名为es-net的网络中</span>
    <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token punctuation">\\</span> <span class="token comment">#端口映射配置</span>
    <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\\</span>
elasticsearch:7.12.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令解释：</p><ul><li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置</li></ul>`,47),q={href:"http://192.168.80.130:9200",target:"_blank",rel:"noopener noreferrer"},y=t(`<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329151453.png" alt="" loading="lazy"></p><h3 id="_2-4、部署kibana" tabindex="-1"><a class="header-anchor" href="#_2-4、部署kibana" aria-hidden="true">#</a> 2.4、部署kibana</h3><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。</p><h4 id="_2-4-1、部署" tabindex="-1"><a class="header-anchor" href="#_2-4-1、部署" aria-hidden="true">#</a> 2.4.1、部署</h4><p>运行docker命令，部署kibana</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> kibana <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTICSEARCH_HOSTS</span><span class="token operator">=</span>http://es:9200 <span class="token punctuation">\\</span>
<span class="token parameter variable">--network</span><span class="token operator">=</span>es-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">5601</span>:5601  <span class="token punctuation">\\</span>
kibana:7.12.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><p>kibana启动一般比较慢，需要多等待一会，可以通过命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> kibana
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看运行日志，当查看到下面的日志，说明成功：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230329151658886.png" alt="image-20230329151658886" loading="lazy"></p>`,11),_={href:"http://192.168.80.130:5601",target:"_blank",rel:"noopener noreferrer"},x=t(`<h4 id="_2-4-2、devtools" tabindex="-1"><a class="header-anchor" href="#_2-4-2、devtools" aria-hidden="true">#</a> 2.4.2、DevTools</h4><p>kibana中提供了一个DevTools界面，这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230330194248676.png" alt="image-20230330194248676" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329151743.png" alt="" loading="lazy"></p><div class="language-dsl line-numbers-mode" data-ext="dsl"><pre class="language-dsl"><code>GET _search #get请求，执行一次search
{
  &quot;query&quot;: {
    &quot;match_all&quot;: {}
  }
}

#模拟请求
GET /

#测试分词器
POST /_analyze
{
  &quot;text&quot;:&quot;T4mako太帅了,主打的就是一个无敌&quot;
  , &quot;analyzer&quot;: &quot;ik_smart&quot;
}

POST /_analyze
{
  &quot;text&quot;:&quot;T4mako太帅了,主打的就是一个无敌&quot;
  , &quot;analyzer&quot;: &quot;ik_max_word&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、安装ik分词器" tabindex="-1"><a class="header-anchor" href="#_3、安装ik分词器" aria-hidden="true">#</a> 3、安装IK分词器</h2><p>es在创建倒排索引时需要对文档分词，在搜索时，需要对用户输入内容分词。但默认的分词规则对中文处理并不友好。</p><p>因此，一般会使用IK分词器</p><h3 id="_3-1、在线安装ik插件-较慢" tabindex="-1"><a class="header-anchor" href="#_3-1、在线安装ik插件-较慢" aria-hidden="true">#</a> 3.1、在线安装ik插件（较慢）</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 进入容器内部</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> es /bin/bash

<span class="token comment">## 在线下载并安装</span>
./bin/elasticsearch-plugin  <span class="token function">install</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip

<span class="token comment">#退出</span>
<span class="token builtin class-name">exit</span>
<span class="token comment">#重启容器</span>
<span class="token function">docker</span> restart elasticsearch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2、离线安装ik插件-推荐" tabindex="-1"><a class="header-anchor" href="#_3-2、离线安装ik插件-推荐" aria-hidden="true">#</a> 3.2、离线安装ik插件（推荐）</h3><h4 id="_1-查看数据卷目录" tabindex="-1"><a class="header-anchor" href="#_1-查看数据卷目录" aria-hidden="true">#</a> 1）查看数据卷目录</h4><p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect es-plugins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;CreatedAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-05-06T10:06:34+08:00&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Labels&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Mountpoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/volumes/es-plugins/_data&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es-plugins&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Options&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中。</p><h4 id="_2-解压缩分词器安装包" tabindex="-1"><a class="header-anchor" href="#_2-解压缩分词器安装包" aria-hidden="true">#</a> 2）解压缩分词器安装包</h4><p>把课前资料中的ik分词器解压缩，重命名为ik</p><h4 id="_3-上传到es容器的插件数据卷中" tabindex="-1"><a class="header-anchor" href="#_3-上传到es容器的插件数据卷中" aria-hidden="true">#</a> 3）上传到es容器的插件数据卷中</h4><p>也就是<code>/var/lib/docker/volumes/es-plugins/_data </code>：</p><h4 id="_4-重启容器" tabindex="-1"><a class="header-anchor" href="#_4-重启容器" aria-hidden="true">#</a> 4）重启容器</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 4、重启容器</span>
<span class="token function">docker</span> restart es
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 查看es日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> es
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-测试" tabindex="-1"><a class="header-anchor" href="#_5-测试" aria-hidden="true">#</a> 5）测试</h4><p>IK分词器包含两种模式：<br><strong><code>ik_smart</code>：智能切分，组粒度<br><code>ik_max_word</code>：最细切分，细粒度</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_analyze
<span class="token punctuation">{</span>
  <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;程序员学习java&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3、扩展、停用词词典" tabindex="-1"><a class="header-anchor" href="#_3-3、扩展、停用词词典" aria-hidden="true">#</a> 3.3、扩展、停用词词典</h3><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。<br> 所以我们的<strong>词汇</strong>字典也需要<strong>不断的更新</strong>，IK分词器提供了<strong>扩展词汇</strong>的功能。</p><p>1）打开IK分词器config目录：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329153523.png" alt="" loading="lazy"></p><p>2）在IKAnalyzer.cfg.xml配置文件内容添加：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">properties</span> <span class="token name">SYSTEM</span> <span class="token string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">&gt;</span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--可以在这配置自己的扩展字典 *** 添加扩展词典--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ext_dict<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>ext.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--可以在这配置扩展停止词 *** 添加停用词词典--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ext_stopwords<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>stopword.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）<strong>新建ext.dic，stopword.dic</strong>可以参考config目录下复制一个配置文件进行修改</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>T4mako
白嫖
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4）重启elasticsearch</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart es

<span class="token comment">## 查看 日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> elasticsearch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志中已经成功加载ext.dic配置文件</p><p>5）测试效果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_analyze
<span class="token punctuation">{</span>
  <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;传智播客Java就业超过90%,奥力给！&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意当前文件的编码必须是 <strong>UTF-8</strong> 格式，严禁使用Windows记事本编辑</p></blockquote><h2 id="_4、索引库操作" tabindex="-1"><a class="header-anchor" href="#_4、索引库操作" aria-hidden="true">#</a> 4、索引库操作</h2><p><strong>索引库</strong>就类似<strong>数据库表</strong>，<strong>mapping映射</strong>就类似<strong>表的结构</strong>。<br> 我们要向es中存储数据，必须先创建“库”和“表”。</p><h3 id="_4-1、mapping属性" tabindex="-1"><a class="header-anchor" href="#_4-1、mapping属性" aria-hidden="true">#</a> 4.1、mapping属性</h3><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p><ul><li><strong>type</strong>：字段<strong>数据类型</strong>，常见的简单类型有： <ul><li><strong>字符串</strong>：<br><strong>text</strong>（可分词的文本）<br><strong>keyword</strong>（不分词，是精确值，例如：品牌、国家、ip地址）</li><li><strong>数值</strong>：<br><strong>long、integer、short、byte、double、float</strong></li><li>布尔：<br> boolean</li><li>日期：<br> date</li><li>对象：<br> object</li></ul></li><li><strong>index</strong>：是否创建<strong>倒排索引</strong>，默认为true，false：将来不会参与搜索</li><li><strong>analyzer</strong>：使用哪种<strong>分词器</strong></li><li><strong>properties</strong>：该字段的<strong>子字段</strong></li></ul><p>例如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token comment">//Integer类型，参与搜索（index为true），无需分词器</span>
    <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">52.1</span><span class="token punctuation">,</span> <span class="token comment">//float</span>
    <span class="token property">&quot;isMarried&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//boolean</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Tmako&quot;</span><span class="token punctuation">,</span> <span class="token comment">//text，分词器可以用ik_smart</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AA@itcast.cn&quot;</span><span class="token punctuation">,</span> <span class="token comment">//字符串</span>
    <span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">99.1</span><span class="token punctuation">,</span> <span class="token number">99.5</span><span class="token punctuation">,</span> <span class="token number">98.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//float</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//object</span>
        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;三&quot;</span><span class="token punctuation">,</span> <span class="token comment">//name.firstName；类型为字符串但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</span>
        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张&quot;</span> <span class="token comment">//name.lastName；类型为字符串</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、创建索引库" tabindex="-1"><a class="header-anchor" href="#_4-2、创建索引库" aria-hidden="true">#</a> 4.2、创建索引库</h3><p>ES中通过<strong>Restful请求操作索引库、文档</strong>。请求内容用DSL语句来表示。创建索引库和mapping的DSL语法如下：</p><p>请求方式：PUT<br> 请求路径：/索引库名，可以自定义<br> 请求参数：mapping映射</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /索引库名称
<span class="token punctuation">{</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;字段名2&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;false&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;字段名3&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;子字段&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// ...略</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//举例</span>
PUT /test
<span class="token punctuation">{</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;falsae&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// ... 略</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、修改索引库" tabindex="-1"><a class="header-anchor" href="#_4-2、修改索引库" aria-hidden="true">#</a> 4.2、修改索引库</h3><p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改mapping</strong>。</p><p>虽然无法修改mapping中已有的字段，但是却<strong>允许添加新的字段</strong>到mapping中，因为不会对倒排索引产生影响。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /索引库名/_mapping
<span class="token punctuation">{</span>
  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;新字段名&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、查询索引库" tabindex="-1"><a class="header-anchor" href="#_4-3、查询索引库" aria-hidden="true">#</a> 4.3、查询索引库</h3><p><strong>基本语法</strong>：</p><ul><li><p>请求方式：GET</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式</strong>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /索引库名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-4、总结" tabindex="-1"><a class="header-anchor" href="#_4-4、总结" aria-hidden="true">#</a> 4.4、总结</h3><p>索引库的操作：<br> 创建索引库：PUT /索引库名<br> 查询索引库：GET /索引库名<br> 删除索引库：DELETE /索引库名<br> 添加字段：PUT /索引库名/_mapping</p><h2 id="_5、文档操作" tabindex="-1"><a class="header-anchor" href="#_5、文档操作" aria-hidden="true">#</a> 5、文档操作</h2><h3 id="_5-1、新增文档" tabindex="-1"><a class="header-anchor" href="#_5-1、新增文档" aria-hidden="true">#</a> 5.1、新增文档</h3><p><strong>POST</strong></p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /索引库名/_doc/文档id
<span class="token punctuation">{</span>
    <span class="token property">&quot;字段1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;字段2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;字段3&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;子属性1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值3&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;子属性2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值4&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /heima/_doc/<span class="token number">1</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员Java讲师&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zy@itcast.cn&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;云&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;赵&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210720212933362.png" alt="" loading="lazy"></p><h3 id="_5-2、查询文档" tabindex="-1"><a class="header-anchor" href="#_5-2、查询文档" aria-hidden="true">#</a> 5.2、查询文档</h3><p>根据rest风格，查询是<strong>GET</strong>，不过查询一般都需要条件，这里我们把文档id带上。</p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /<span class="token punctuation">{</span>索引库名称<span class="token punctuation">}</span>/_doc/<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>通过kibana查看数据：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /heima/_doc/<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3、删除文档" tabindex="-1"><a class="header-anchor" href="#_5-3、删除文档" aria-hidden="true">#</a> 5.3、删除文档</h3><p>删除使用<strong>DELETE</strong>请求，同样，需要根据id进行删除：</p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>DELETE /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_doc/id值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>## 根据id删除数据
DELETE /heima/_doc/<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4、修改文档" tabindex="-1"><a class="header-anchor" href="#_5-4、修改文档" aria-hidden="true">#</a> 5.4、修改文档</h3><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>增量修改：修改文档中的部分字段</li></ul><h4 id="_5-4-1、全量修改" tabindex="-1"><a class="header-anchor" href="#_5-4-1、全量修改" aria-hidden="true">#</a> 5.4.1、全量修改</h4><p>全量修改是覆盖原来的文档，其本质是：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><blockquote><p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会<strong>执行</strong>，也就<strong>从修改变成了新增</strong>操作了。</p></blockquote><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_doc/文档id
<span class="token punctuation">{</span>
    <span class="token property">&quot;字段1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;字段2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值2&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// ... 略</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /heima/_doc/<span class="token number">1</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员高级Java讲师&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zy@itcast.cn&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;云&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;赵&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-4-2、增量修改" tabindex="-1"><a class="header-anchor" href="#_5-4-2、增量修改" aria-hidden="true">#</a> 5.4.2、增量修改</h4><p>增量修改是只修改指定id匹配的文档中的部分字段。</p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_update/文档id
<span class="token punctuation">{</span>
    <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span> <span class="token string">&quot;新的值&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /heima/_update/<span class="token number">1</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ZhaoYun@itcast.cn&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5、总结" tabindex="-1"><a class="header-anchor" href="#_5-5、总结" aria-hidden="true">#</a> 5.5、总结</h3><p>文档操作有哪些？</p>`,103),f=n("ul",null,[n("li",{json文档:""},"创建文档：POST /{索引库名}/_doc/文档id "),n("li",null,"查询文档：GET /{索引库名}/_doc/文档id"),n("li",null,"删除文档：DELETE /{索引库名}/_doc/文档id"),n("li",null,[s("修改文档： "),n("ul",null,[n("li",{json文档:""},"全量修改：PUT /{索引库名}/_doc/文档id"),n("li",null,'增量修改：POST /{索引库名}/_update/文档id { "doc": {字段}}')])])],-1),w=n("h2",{id:"_6、restapi",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6、restapi","aria-hidden":"true"},"#"),s(" 6、RestAPI")],-1),j={href:"https://www.elastic.co/guide/en/elasticsearch/client/index.html",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>其中的Java Rest Client又包括两种：</p><ul><li>Java Low Level Rest Client</li><li>Java High Level Rest Client</li></ul><p>我们学习的是Java HighLevel Rest Client客户端API</p><p>利用JavaRestClient实现创建、删除索引库，判断索引是否存在<br> 根据课前资料提供的数据创建索引库，名称为hotel，mapping属性根据数据库结构定义。<br> 基本步骤入下：<br> 1、导入课前资料Demo<br> 2、分析数据结构，定义mapping属性<br> 3、初始化JavaRestClient<br> 4、利用JavaRestClient创建索引库<br> 5、利用JavaRestClient删除索引库<br> 6、利用JavaRestClient判断索引库是否存在</p><h3 id="_6-0、导入、配置demo工程" tabindex="-1"><a class="header-anchor" href="#_6-0、导入、配置demo工程" aria-hidden="true">#</a> 6.0、导入、配置Demo工程</h3><h4 id="_6-0-1、导入工程" tabindex="-1"><a class="header-anchor" href="#_6-0-1、导入工程" aria-hidden="true">#</a> 6.0.1、导入工程</h4><p>首先导入课前资料提供的数据库数据（tb_hotel.sql）</p><p>然后导入课前资料提供的项目（hotel-demo）</p><h4 id="_6-0-2、mapping映射分析" tabindex="-1"><a class="header-anchor" href="#_6-0-2、mapping映射分析" aria-hidden="true">#</a> 6.0.2、mapping映射分析</h4><p>创建索引库，最关键的是mapping映射，而mapping映射要考虑的信息包括：</p><ul><li>字段名</li><li>字段数据类型</li><li>是否参与搜索</li><li>是否需要分词</li><li>如果分词，分词器是什么？</li></ul><p>其中：</p><ul><li>字段名、字段数据类型，可以参考数据表结构的名称和类型</li><li>是否参与搜索要分析业务来判断，例如图片地址，就无需参与搜索</li><li>是否分词呢要看内容，内容如果是一个整体就无需分词，反之则要分词</li><li>分词器，我们可以统一使用ik_max_word</li></ul><p>酒店数据的<strong>索引库结构</strong>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /hotel
<span class="token punctuation">{</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span> <span class="token comment">//id设置成keyword数据类型，不参与分词</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> 
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span> <span class="token comment">//参与分词，ik分词器</span>
        <span class="token property">&quot;copy_to&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//不参与搜索</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;score&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;brand&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;copy_to&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;copy_to&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;starName&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;business&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;location&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;geo_point&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;pic&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;all&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特殊字段说明：<br> location：地理坐标，里面包含精度、纬度<br><strong>all</strong>：一个<strong>组合字段</strong>，其目的是将多字段的值 <strong>利用copy_to合并</strong>，提供给用户搜索（多字段搜索）</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210720222110126.png" alt="" loading="lazy"></p><p>字段拷贝可以使用<strong>copy_to</strong>属性<strong>将当前字段拷贝到指定字段</strong></p><h4 id="_6-0-3、初始化javarestclient" tabindex="-1"><a class="header-anchor" href="#_6-0-3、初始化javarestclient" aria-hidden="true">#</a> 6.0.3、初始化JavaRestClient</h4><p>1、导入es的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、因为SpringBoot默认的ES版本是7.6.2，所以我们需要覆盖默认的ES版本：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elasticsearch.version</span><span class="token punctuation">&gt;</span></span>7.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elasticsearch.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、初始化RestHighLevelClient：</p><p>初始化核心代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span><span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
        <span class="token class-name">HttpHost</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.80.130:9200&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：为了单元测试方便，我们创建一个测试类HotelIndexTest，然后将初始化的代码编写在@BeforeEach方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotelIndexTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">RestHighLevelClient</span> client<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span><span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
                <span class="token class-name">HttpHost</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.150.101:9200&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterEach</span>
    <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1、创建索引库" tabindex="-1"><a class="header-anchor" href="#_6-1、创建索引库" aria-hidden="true">#</a> 6.1、创建索引库</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210720223049408.png" alt="" loading="lazy"></p><p>代码分为三步：<br> 1、创建Request对象。Request是<strong>CreateIndexRequest</strong><br> 2、添加请求参数，其实就是<strong>DSL的JSON参数</strong>部分。因为json字符串很长，这里是定义了<strong>静态字符串常量</strong>MAPPING_TEMPLATE，让代码看起来更加优雅。<br> 3、发送请求，**client.indices()**方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。</p><h3 id="_6-2、删除索引库" tabindex="-1"><a class="header-anchor" href="#_6-2、删除索引库" aria-hidden="true">#</a> 6.2、删除索引库</h3><p>与删除的Java代码流程是类似的。依然是三步走：<br> 1、创建Request对象。这次是<strong>GetIndexRequest</strong>对象<br> 2、准备参数。这里是<strong>无参</strong><br> 3、<strong>发送请求。改用exists方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//删除</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testDeleteHotelIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、创建Request对象</span>
    <span class="token class-name">DeleteIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2、发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3、判断索引库是否存在" tabindex="-1"><a class="header-anchor" href="#_6-3、判断索引库是否存在" aria-hidden="true">#</a> 6.3、判断索引库是否存在</h3><p>判断索引库是否存在，本质就是查询，对应的DSL：GET /hotel</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//判断是否存在</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testExistHotelIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、创建Request对象</span>
    <span class="token class-name">GetIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2、发送请求</span>
    <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3、输出</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token operator">?</span> <span class="token string">&quot;存在&quot;</span><span class="token operator">:</span> <span class="token string">&quot;不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、restclient操作文档" tabindex="-1"><a class="header-anchor" href="#_7、restclient操作文档" aria-hidden="true">#</a> 7、RestClient操作文档</h2><p>利用JavaRestClient事项文档的CRUD</p><p>数据库查询酒店数据，导入到hotel索引库，实现酒店数据的CRUD</p><p>基本步骤：<br> 1、初始化JavaRestClient<br> 2、利用JavaRestClient新增酒店数据<br> 3、利用哦JavaRestClient根据id查询酒店数据<br> 4、利用JavaRestClient删除酒店数据<br> 5、利用JavaRestClient修改酒店数据</p><h3 id="_7-1、新增文档" tabindex="-1"><a class="header-anchor" href="#_7-1、新增文档" aria-hidden="true">#</a> 7.1、新增文档</h3><p>将数据库的酒店数据查询出来，写入elasticsearch中</p><p>注意准备<strong>两个实体类</strong>，Hotel，HotelDoc<br> Hotel类型与<strong>索引库结构存在差异</strong>：<br> longitude和latitude需要合并为location<br> 因此，我们需要定义一个新的类型，与索引库结构吻合</p><p>新增文档的DSL语句如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_doc/<span class="token number">1</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">21</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的java代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testAddDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//根据id查询酒店数据</span>
    <span class="token class-name">Hotel</span> hotel <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">61083L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//装换为文档类型</span>
    <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">(</span>hotel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//1、准备Request对象</span>
    <span class="token class-name">IndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2、准备Json文档</span>
    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3、发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),R=n("br",null,null,-1),S=n("br",null,null,-1),E=n("br",null,null,-1),D=n("br",null,null,-1),I={href:"http://xn--client-vt9in98k266am0d6y0gd5e.xxx",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="_7-2、查询文档" tabindex="-1"><a class="header-anchor" href="#_7-2、查询文档" aria-hidden="true">#</a> 7.2、查询文档</h3><p>根据id查询到文档数据时json，需要反序列化为java对象</p><p>查询的DSL语句如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /hotel/_doc/<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与之前类似，也是三步走：<br> 1）准备Request对象。这次是查询，所以是GetRequest<br> 2）发送请求，得到结果。因为是查询，这里调用client.get()方法<br> 3）解析结果，就是对JSON做反序列化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testGetDocumentById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、准备Request</span>
    <span class="token class-name">GetRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;61083&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2、发送请求，得到响应</span>
    <span class="token class-name">GetResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3、解析响应结果</span>
    <span class="token class-name">String</span> json <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3、修改文档" tabindex="-1"><a class="header-anchor" href="#_7-3、修改文档" aria-hidden="true">#</a> 7.3、修改文档</h3><p>根据id修改数据的方式有两种：<br> 方式一：全量修改：本质是先根据id删除，再新增<br> 方式二：增量修改：修改文档中的指定字段值</p><p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：<br> 如果新增时，ID已经存在，则修改<br> 如果新增时，ID不存在，则新增</p><p>增量修改：<br> 与之前类似，也是三步走：<br> 1）准备Request对象。这次是修改，所以是UpdateRequest<br> 2）准备参数。也就是JSON文档，里面包含要修改的字段<br> 3）更新文档。这里调用client.update()方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testUpdateDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1、准备Request</span>
    <span class="token class-name">UpdateRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;61083&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2、准备请求参数</span>
    request<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>
        <span class="token string">&quot;price&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;952&quot;</span><span class="token punctuation">,</span> <span class="token comment">//注意逗号隔开</span>
        <span class="token string">&quot;starName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;四钻&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3、发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4、删除文档" tabindex="-1"><a class="header-anchor" href="#_7-4、删除文档" aria-hidden="true">#</a> 7.4、删除文档</h3><p>删除的DSL为是这样的：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>DELETE /hotel/_doc/<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>依然是三步走：<br> 1）准备Request对象，因为是删除，这次是DeleteRequest对象。要指定索引库名和id<br> 2）准备参数，无参<br> 3）发送请求。因为是删除，所以是client.delete()方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testDeleteDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.准备Request</span>
    <span class="token class-name">DeleteRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;61083&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-5、批量导入文档" tabindex="-1"><a class="header-anchor" href="#_7-5、批量导入文档" aria-hidden="true">#</a> 7.5、批量导入文档</h3><p>批量查询数据，然后批量导入索引库中：<br> 思路：<br> 1、利用mybatis-plus查询酒店数据<br> 2、将查询到的数据（Bean）装换为文档数据类型（BeanDOC）<br> 3、利用JavaRequestClient的Bulk批处理，实现批量新增文档</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testBulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 批量查询酒店数据</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Hotel</span><span class="token punctuation">&gt;</span></span> hotels <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 1.创建Request</span>
    <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.准备参数，添加多个新增的Request</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Hotel</span> hotel <span class="token operator">:</span> hotels<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2.1.转换为文档类型HotelDoc</span>
        <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">(</span>hotel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.2.创建新增文档的Request对象</span>
        request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function O(C,J){const a=o("ExternalLinkIcon");return i(),l("div",null,[r,c(" more "),d,n("p",null,[s("**"),n("a",k,[s("Lucene"),e(a)]),s("**是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发。")]),v,n("p",null,[s("**"),n("a",m,[s("elasticsearch"),e(a)]),s("**的发展历史："),b,s(" 2004年Shay Banon基于Lucene开发了Compass"),g,s(" 2010年Shay Banon 重写了Compass，取名为Elasticsearch。")]),h,n("p",null,[s("在浏览器中输入："),n("a",q,[s("http://192.168.80.130:9200"),e(a)]),s(" 即可看到elasticsearch的响应结果：")]),y,n("p",null,[s("此时，在浏览器输入地址访问："),n("a",_,[s("http://192.168.80.130:5601"),e(a)]),s("，即可看到结果")]),x,f,w,n("p",null,[s("ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址："),n("a",j,[s("https://www.elastic.co/guide/en/elasticsearch/client/index.html"),e(a)])]),T,n("p",null,[s("三步走："),R,s(" 1）创建Request对象"),S,s(" 2）准备请求参数，也就是DSL中的JSON文档"),E,s(" 3）发送请求"),D,s(" 变化的地方在于，"),n("a",I,[s("这里直接使用client.xxx"),e(a)]),s("()的API")]),L])}const N=p(u,[["render",O],["__file","Elasticsearch.html.vue"]]);export{N as default};
