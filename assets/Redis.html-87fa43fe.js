import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as s,d as n,e,f as a}from"./app-5f8bfd0b.js";const l={},u=a('<p>Redis的安装位置：<br><strong>/usr/local/bin</strong></p><p><strong>启动 redis：</strong><br> cd /usr/local/bin<br> redis-server /etc/redis.conf<br><strong>连接redis</strong>：<br> /usr/local/bin/redis-cli</p><h2 id="_1、nosql数据库简介" tabindex="-1"><a class="header-anchor" href="#_1、nosql数据库简介" aria-hidden="true">#</a> 1、NoSQL数据库简介</h2><h3 id="_1-1、技术发展" tabindex="-1"><a class="header-anchor" href="#_1-1、技术发展" aria-hidden="true">#</a> 1.1、技术发展</h3><p>技术的分类：<br> 1、解决 <strong>功能性</strong> 的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN<br> 2、解决 <strong>扩展性</strong> 的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis<br> 3、解决 <strong>性能</strong> 的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</p><h4 id="_1-1-1、web1-0-时代" tabindex="-1"><a class="header-anchor" href="#_1-1-1、web1-0-时代" aria-hidden="true">#</a> 1.1.1、Web1.0 时代</h4><p>Web1.0的时代，数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。</p><h4 id="_1-1-2-、web2-0-时代" tabindex="-1"><a class="header-anchor" href="#_1-1-2-、web2-0-时代" aria-hidden="true">#</a> 1.1.2.、Web2.0 时代</h4><p>随着Web2.0的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。</p><h4 id="_1-1-3、-解决-cpu-及内存压力" tabindex="-1"><a class="header-anchor" href="#_1-1-3、-解决-cpu-及内存压力" aria-hidden="true">#</a> 1.1.3、 解决 CPU 及内存压力</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230212180730.png" alt="" loading="lazy"></p><h4 id="_1-1-4、解决-io-压力" tabindex="-1"><a class="header-anchor" href="#_1-1-4、解决-io-压力" aria-hidden="true">#</a> 1.1.4、解决 IO 压力</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230212180815.png" alt="" loading="lazy"></p><h3 id="_1-2、nosql-数据库" tabindex="-1"><a class="header-anchor" href="#_1-2、nosql-数据库" aria-hidden="true">#</a> 1.2、NoSQL 数据库</h3><h4 id="_1-2-1、nosql-数据库概述" tabindex="-1"><a class="header-anchor" href="#_1-2-1、nosql-数据库概述" aria-hidden="true">#</a> 1.2.1、NoSQL 数据库概述</h4><p>NoSQL(<strong>Not Only SQL</strong>)，意即“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。<br> NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p><p>不遵循SQL标准。<br> 不支持ACID。<br> 远超于SQL的性能。</p><h4 id="_1-2-2、nosql适用场景" tabindex="-1"><a class="header-anchor" href="#_1-2-2、nosql适用场景" aria-hidden="true">#</a> 1.2.2、NoSQL适用场景</h4><p>对数据高并发的读写<br> 海量数据的读写<br> 对数据高可扩展性的</p><h4 id="_1-2-3、nosql不适用场景" tabindex="-1"><a class="header-anchor" href="#_1-2-3、nosql不适用场景" aria-hidden="true">#</a> 1.2.3、NoSQL不适用场景</h4><p>需要<strong>事务</strong>支持<br> 基于sql的<strong>结构化查询存储</strong>，处理复杂的关系,需要即席查询。<br><em><strong>（用不着sql的和用了sql也不行的情况，请考虑用NoSql）</strong></em></p><h4 id="_1-2-4、常见的nosql数据库" tabindex="-1"><a class="header-anchor" href="#_1-2-4、常见的nosql数据库" aria-hidden="true">#</a> 1.2.4、常见的NoSQL数据库</h4><p>Memcache：|<br> 很早出现的NoSql数据库<br> 数据都在内存中，一般不持久化<br> 支持简单的key-value模式，支持类型单一<br> 一般是作为缓存数据库辅助持久化的数据库</p><p><strong>Redis：</strong><br> 几乎覆盖了Memcached的绝大部分功能<br> 数据都在内存中，支持持久化，主要用作备份恢复<br> 除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。<br> 一般是作为缓存数据库辅助持久化的数据库</p><p>MongoDB：<br> 高性能、开源、模式自由(schema free)的<strong>文档型数据库</strong><br> 数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘<br> 虽然是key-value模式，但是对value（尤其是<strong>json</strong>）提供了丰富的查询功能<br> 支持二进制数据及大型对象<br> 可以根据数据的特点<strong>替代RDBMS</strong> ，成为独立的数据库。或者配合RDBMS，存储特定的数据。</p><h3 id="_1-3、行式存储数据库-大数据时代" tabindex="-1"><a class="header-anchor" href="#_1-3、行式存储数据库-大数据时代" aria-hidden="true">#</a> 1.3、行式存储数据库（大数据时代）</h3><h4 id="_1-3-1、行式数据库" tabindex="-1"><a class="header-anchor" href="#_1-3-1、行式数据库" aria-hidden="true">#</a> 1.3.1、行式数据库</h4><p>各有利弊</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230212204234.png" alt="" loading="lazy"></p><h4 id="_1-3-2、列式数据库" tabindex="-1"><a class="header-anchor" href="#_1-3-2、列式数据库" aria-hidden="true">#</a> 1.3.2、列式数据库</h4><p>各有利弊</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230212204335.png" alt="" loading="lazy"></p><h5 id="_1-3-2-1、hbase" tabindex="-1"><a class="header-anchor" href="#_1-3-2-1、hbase" aria-hidden="true">#</a> 1.3.2.1、Hbase</h5><p>HBase是<strong>Hadoop</strong>项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。<br> HBase的目标就是处理数据量<strong>非常庞大</strong>的表，可以用<strong>普通的计算机</strong>处理超过<strong>10</strong>亿行数据**，还可处理有数百万**列元素的数据表。</p><h5 id="_1-3-2-2、cassandra" tabindex="-1"><a class="header-anchor" href="#_1-3-2-2、cassandra" aria-hidden="true">#</a> 1.3.2.2、Cassandra</h5><p>Apache Cassandra是一款免费的开源NoSQL数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的海量数据集(数据量通常达到<strong>PB级别</strong>)。在众多显著特性当中，Cassandra最为卓越的长处是对写入及读取操作进行规模调整，而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。</p><h3 id="_1-4、图关系型数据库" tabindex="-1"><a class="header-anchor" href="#_1-4、图关系型数据库" aria-hidden="true">#</a> 1.4、图关系型数据库</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230212204638.png" alt="" loading="lazy"></p><h2 id="_2、redis概述安装" tabindex="-1"><a class="header-anchor" href="#_2、redis概述安装" aria-hidden="true">#</a> 2、Redis概述安装</h2><h3 id="_2-1、概述" tabindex="-1"><a class="header-anchor" href="#_2-1、概述" aria-hidden="true">#</a> 2.1、概述</h3><p>Redis是一个开源的key-value存储系统<br> 和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）<br> 这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些<strong>操作</strong>都是<strong>原子性</strong>的<br> 在此基础上，Redis支持各种不同方式的<strong>排序</strong><br> 与memcached一样，为了保证效率，数据都是<strong>缓存在内存</strong>中<br><strong>区别</strong>的是Redis会<strong>周期性</strong>的把更新的数据<strong>写入磁盘</strong>或者把修改操作写入追加的记录文件<br> 并且在此基础上实现了<strong>master-slave(主从)同步</strong></p><h3 id="_2-2、安装步骤" tabindex="-1"><a class="header-anchor" href="#_2-2、安装步骤" aria-hidden="true">#</a> 2.2、安装步骤</h3><p>不用考虑在windows环境下对Redis的支持</p><p>下载redis 6</p><p><strong>①使用Xftp上传文件：</strong><br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230213153223.png" alt="" loading="lazy"></p><p>（使用老师的Redis）</p><p><strong>②使用Xshell进入终端</strong></p><p>准备工作：<strong>下载安装最新版的gcc编译器</strong><br><strong>yum install gcc</strong></p><p>测试 gcc版本：<br><strong>gcc --version</strong><br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230213153850.png" alt="" loading="lazy"></p><p>下载redis-6.2.1.tar.gz放/opt目录<br> 解压命令：<strong>tar -zxvf redis-6.2.1.tar.gz</strong><br> 解压完成后进入目录：<strong>cd redis-6.2.1</strong><br> 在redis-6.2.1目录下再次执行<strong>make</strong>命令（只是编译好）<br> 跳过make test 继续执行: <strong>make install</strong></p><h3 id="_2-3、安装目录-usr-local-bin" tabindex="-1"><a class="header-anchor" href="#_2-3、安装目录-usr-local-bin" aria-hidden="true">#</a> 2.3、安装目录：/usr/local/bin</h3><p>查看默认安装目录：<br> redis-benchmark:性能测试工具，可以在自己本地运行，看看自己本子性能如何<br> redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲<br> redis-check-dump：修复有问题的dump.rdb文件<br> redis-sentinel：Redis集群使用<br><strong>redis-server</strong>：Redis服务器启动命令<br><strong>redis-cli</strong>：客户端，操作入口</p><h3 id="_2-4、前台使用-不推荐" tabindex="-1"><a class="header-anchor" href="#_2-4、前台使用-不推荐" aria-hidden="true">#</a> 2.4、前台使用（不推荐）</h3><p>前台启动，命令行窗口不能关闭，否则服务器停止<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230213155313486.png" alt="image-20230213155313486" loading="lazy"></p><p>使用ctrl+c停止服务</p><h3 id="_2-5、后台启动" tabindex="-1"><a class="header-anchor" href="#_2-5、后台启动" aria-hidden="true">#</a> 2.5、后台启动</h3><h4 id="_2-5-1、备份redis-conf" tabindex="-1"><a class="header-anchor" href="#_2-5-1、备份redis-conf" aria-hidden="true">#</a> 2.5.1、备份redis.conf</h4><p>拷贝一份redis.conf到其他目录<br> cp /opt/redis-3.2.5/redis.conf /etc/redis.conf</p><h4 id="_2-5-2、后台启动设置daemonize-no改成yes" tabindex="-1"><a class="header-anchor" href="#_2-5-2、后台启动设置daemonize-no改成yes" aria-hidden="true">#</a> 2.5.2、后台启动设置daemonize no改成yes</h4><p>修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</p><p>cd /etc<br> vim redis.conf</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230213160945.png" alt="" loading="lazy"></p><h4 id="_2-5-3、redis启动" tabindex="-1"><a class="header-anchor" href="#_2-5-3、redis启动" aria-hidden="true">#</a> 2.5.3、Redis启动</h4><p>cd /usr/local/bin<br> redis-server /etc/redis.conf</p><p>查看进程：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230213161309.png" alt="" loading="lazy"></p><h4 id="_2-5-4、用客户端访问redis-cli" tabindex="-1"><a class="header-anchor" href="#_2-5-4、用客户端访问redis-cli" aria-hidden="true">#</a> 2.5.4、用客户端访问redis-cli</h4><h4 id="_2-5-5、多个端口可以-redis-cli-p6379" tabindex="-1"><a class="header-anchor" href="#_2-5-5、多个端口可以-redis-cli-p6379" aria-hidden="true">#</a> 2.5.5、多个端口可以：redis-cli -p6379</h4><h4 id="_2-5-6、测试验证-ping" tabindex="-1"><a class="header-anchor" href="#_2-5-6、测试验证-ping" aria-hidden="true">#</a> 2.5.6、测试验证：ping</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230213161433861.png" alt="image-20230213161433861" loading="lazy"></p><h4 id="_2-5-7、reds关闭" tabindex="-1"><a class="header-anchor" href="#_2-5-7、reds关闭" aria-hidden="true">#</a> 2.5.7、Reds关闭</h4><p>单实例关闭：redis-cli shutdown</p><p>也可以进入终端后通过进程kill再关闭</p><p>多实例关闭，指定端口关闭：redis-cli -p 6379 shutdown</p><h3 id="_2-6、redis介绍相关知识" tabindex="-1"><a class="header-anchor" href="#_2-6、redis介绍相关知识" aria-hidden="true">#</a> 2.6、Redis介绍相关知识</h3><p>端口<em><strong>6379</strong></em>从何而来：Alessia Merz（6379）</p><p>默认16个数据库，类似数组下标从0开始，初始默认使用0号库<br> 使用命令 select 来切换数据库。如: select 8<br> 统一密码管理，所有库同样密码<br> dbsize查看当前数据库的key的数量<br><strong>flushdb</strong>清空当前库<br><strong>flushall</strong>通杀全部库</p><p>edis是单线程+多路IO复用技术</p><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p><p><strong>串行 vs 多线程+锁（memcached） vs 单线程+多路IO复用(Redis)</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230213162353213.png" alt="image-20230213162353213" loading="lazy"></p><h2 id="_3、常用5大数据类型" tabindex="-1"><a class="header-anchor" href="#_3、常用5大数据类型" aria-hidden="true">#</a> 3、常用5大数据类型</h2>',81),r={href:"http://www.redis.cn/commands.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<p><strong>启动redis：</strong><br> cd /usr/local/bin<br> redis-server /etc/redis.conf<br><strong>连接redis</strong>：<br> /usr/local/bin/redis-cli</p><h3 id="_3-1、键-key" tabindex="-1"><a class="header-anchor" href="#_3-1、键-key" aria-hidden="true">#</a> 3.1、键(key)</h3><p>keys *： 查看当前库所有key (匹配：keys *1)<br> exists key： 判断某个key是否存在<br> type key： 查看你的key是什么类型<br> del key： 删除指定的key数据<br> unlink key： 根据value选择<strong>非阻塞删除</strong>（仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。）<br> expire key 10：10秒钟：为给定的key设置过期时间<br> ttl key： 查看还有多少秒过期，-1表示永不过期，-2表示已过期<br> select： 命令切换数据库（默认有15可库）<br> dbsize： 查看当前数据库的key的数量<br><strong>flushdb</strong>： 清空当前库<br> flushall： 通杀全部库</p><h3 id="_3-2、字符串-string" tabindex="-1"><a class="header-anchor" href="#_3-2、字符串-string" aria-hidden="true">#</a> 3.2、字符串（String）</h3><h4 id="_3-2-1、简介" tabindex="-1"><a class="header-anchor" href="#_3-2-1、简介" aria-hidden="true">#</a> 3.2.1、简介</h4><p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p><p>String类型是<strong>二进制安全</strong>的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是<strong>512M</strong></p><h4 id="_3-2-2、常用命令" tabindex="-1"><a class="header-anchor" href="#_3-2-2、常用命令" aria-hidden="true">#</a> 3.2.2、常用命令</h4><p>set &lt;key&gt; &lt;value&gt;： 添加键值对<br> get &lt;key&gt;： 查询对应键值<br> append &lt;key&gt;&lt;value&gt;：将给定的&lt;value&gt;：追加到原值的末尾<br> strlen &lt;key&gt;： 获得值的长度<br> setnx &lt;key&gt; &lt;value&gt;： 只有在 key 不存在时 设置 key 的值<br> incr &lt;key&gt;： 将 key 中储存的数字值减1，只能对数字值操作，如果为空，新增值为-1decr &lt;key&gt;：将 key 中储存的数字值减1，只能对数字值操作，如果为空，新增值为-1<br> incrby / decrby &lt;key&gt; &lt;步长&gt;： 将 key 中储存的数字值增减，自定义步长<br> mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;...： 同时设置一个或多个 key-value对<br> mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt;...： 同时获取一个或多个 value<br> msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;...： 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。<br> getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;： 获得值的范围，类似java中的substring，<strong>左闭右闭</strong><br> setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;： 用 &lt;value&gt; <strong>覆写</strong>&lt;key&gt;所储存的字符串值，从&lt;起始位置&gt;开始(索引从0开始)。<br> setex &lt;key&gt;&lt;过期时间&gt;&lt;value&gt;： 设置键值的同时，设置过期时间，单位秒<br> getset &lt;key&gt;&lt;value&gt;： 以新换旧，设置了新值同时获得旧值</p><p><strong>redis操作时原子性的（单线程，多路IO复用）</strong></p><h4 id="_3-2-3、底层数据结构" tabindex="-1"><a class="header-anchor" href="#_3-2-3、底层数据结构" aria-hidden="true">#</a> 3.2.3、底层数据结构</h4><p>tring的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配</p><p>内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h3 id="_3-3、列表-list" tabindex="-1"><a class="header-anchor" href="#_3-3、列表-list" aria-hidden="true">#</a> 3.3、列表（List）</h3><h4 id="_3-3-1、简介" tabindex="-1"><a class="header-anchor" href="#_3-3-1、简介" aria-hidden="true">#</a> 3.3.1、简介</h4><p><strong>单键多值</strong><br> Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br> 它的底层实际是个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><h4 id="_3-3-2、常用命令" tabindex="-1"><a class="header-anchor" href="#_3-3-2、常用命令" aria-hidden="true">#</a> 3.3.2、常用命令</h4><p>lpush/rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; ....：从左边/右边插入一个或多个值<br> lpop/rpop &lt;key&gt;：从左边/右边吐出一个值。<strong>值在键在，值光键亡</strong><br> rpoplpush &lt;key1&gt;&lt;key2&gt;：从&lt;key1&gt;列表右边吐出一个值，插到&lt;key2&gt;列表左边<br> lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;：按照索引下标获得元素(从左到右)<br> lrange &lt;key&gt; 0 -1：0左边第一个，-1右边第一个，（<strong>0-1表示获取所有</strong>）<br> lindex &lt;key&gt;&lt;index&gt;：按照索引下标获得元素(从左到右)<br> llen &lt;key&gt;：获得列表长度<br> linsert &lt;key&gt; before/after &lt;value&gt; &lt;newvalue&gt;：在&lt;value&gt;的前、后面插入&lt;newvalue&gt;插入值<br> lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;：从左边删除n个value(从左到右)<br> lset&lt;key&gt;&lt;index&gt;&lt;value&gt;：将列表key下标为index的值替换成value</p><h4 id="_3-3-3、底层数据结构" tabindex="-1"><a class="header-anchor" href="#_3-3-3、底层数据结构" aria-hidden="true">#</a> 3.3.3、底层数据结构</h4><p>List的数据结构为快速链表quickList<br> 首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。<br> 它将所有的元素紧挨着一起存储，分配的是一块连续的内存。<br> 当数据量比较多的时候才会改成quicklist。<br> 因为普通的链表需要的附加指针空间太大，会比较浪费空间。<br> Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h3 id="_3-4、集合-set" tabindex="-1"><a class="header-anchor" href="#_3-4、集合-set" aria-hidden="true">#</a> 3.4、集合（Set）</h3><h4 id="_3-4-1、简介" tabindex="-1"><a class="header-anchor" href="#_3-4-1、简介" aria-hidden="true">#</a> 3.4.1、简介</h4><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动去重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的复杂度都是<strong>O(1)</strong>。</p><h4 id="_3-4-2、常用命令" tabindex="-1"><a class="header-anchor" href="#_3-4-2、常用命令" aria-hidden="true">#</a> 3.4.2、常用命令</h4><p>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ...：将一个或多个 member 元素加入到集合 key 中，已经存在的 member元素将被忽略<br> smembers &lt;key&gt;：取出该集合的所有值。<br> sismember &lt;key&gt;&lt;value&gt;：判断集合&lt;key&gt;是否为含有该&lt;value&gt;值，有1，没有0<br> scard&lt;key&gt;：返回该集合的元素个数。<br> srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ...： 删除集合中的某个元素。<br> spop &lt;key&gt;：<strong>随机</strong>从该集合中吐出一个值<br> srandmember &lt;key&gt;&lt;n&gt;：随机从该集合中取出n个值。不会从集合中删除 。<br> smove &lt;key1&gt;&lt;key2&gt;&lt;value&gt;：把集合中一个值从一个集合移动到另一个集合<br> sinter &lt;key1&gt;&lt;key2&gt;：返回两个集合的交集元素。<br> sunion &lt;key1&gt;&lt;key2&gt;：返回两个集合的并集元素。<br> sdiff &lt;key1&gt;&lt;key2&gt;：返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</p><h4 id="_3-4-3、底层数据结构" tabindex="-1"><a class="header-anchor" href="#_3-4-3、底层数据结构" aria-hidden="true">#</a> 3.4.3、底层数据结构</h4><p>Set数据结构是dict字典，字典是用哈希表实现的<br> Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p><h3 id="_3-5、哈希-hash" tabindex="-1"><a class="header-anchor" href="#_3-5、哈希-hash" aria-hidden="true">#</a> 3.5、哈希（Hash）</h3><p>Redis hash 是一个键值对集合。<br> Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br> 类似Java里面的Map&lt;String,Object&gt;</p><h4 id="_3-5-1、简介" tabindex="-1"><a class="header-anchor" href="#_3-5-1、简介" aria-hidden="true">#</a> 3.5.1、简介</h4><p>Redis hash 是一个键值对集合。<br> Redis hash的value是一个string类型的<strong>field和value的映射表</strong>，hash特别适合用于存储对象。<br> 类似Java里面的<strong>Map&lt;String,Object&gt;</strong><br> 用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储</p><p>不同的存储方式：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230215162617.png" alt="" loading="lazy"></p><h4 id="_3-5-2、常用命令" tabindex="-1"><a class="header-anchor" href="#_3-5-2、常用命令" aria-hidden="true">#</a> 3.5.2、常用命令</h4><p>hset &lt;key&gt;&lt;field&gt;&lt;value&gt;：给&lt;key&gt;集合中的 &lt;field&gt;键赋值&lt;value&gt;<br> hget &lt;key1&gt;&lt;field&gt;：从&lt;key1&gt;集合&lt;field&gt;取出 value<br> hmset &lt;key1&gt;&lt;field1&gt;&lt;value1&gt;&lt;field2&gt;&lt;value2&gt;... ：批量设置hash的值<br> hexists&lt;key1&gt;&lt;field&gt;：查看哈希表 key 中，给定域 field 是否存在。<br> hkeys &lt;key&gt;：列出该hash集合的所有field<br> hvals &lt;key&gt;：列出该hash集合的所有value<br> hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;：为哈希表 key 中的域 field 的值加上增量 1 -1<br> hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;：将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</p><h4 id="_3-5-3、底层数据结构" tabindex="-1"><a class="header-anchor" href="#_3-5-3、底层数据结构" aria-hidden="true">#</a> 3.5.3、底层数据结构</h4><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p><h3 id="_3-6、有序集合zset-sorted-set" tabindex="-1"><a class="header-anchor" href="#_3-6、有序集合zset-sorted-set" aria-hidden="true">#</a> 3.6、有序集合Zset（sorted set）</h3><h4 id="_3-6-1、简介" tabindex="-1"><a class="header-anchor" href="#_3-6-1、简介" aria-hidden="true">#</a> 3.6.1、简介</h4><p>Redis有序集合zset与普通集合set非常相似，是一个<strong>没有重复元素</strong>的字符串集合。<br> 不同之处是有序集合的每个成员都关联了一个<strong>评分（score）</strong>,这个评分（score）被用来按照从最低分到最高分的方式<strong>排序</strong>集合中的成员。集合的成员是唯一的，但是<strong>评分可以是重复</strong>了 。</p><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h4 id="_3-6-2、常用命令" tabindex="-1"><a class="header-anchor" href="#_3-6-2、常用命令" aria-hidden="true">#</a> 3.6.2、常用命令</h4><p>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…：将一个或多个 member 元素及其 score 值加入到有序集 key 当中。<br> zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES]：返回有序集 key 中，下标在&lt;start&gt;&lt;stop&gt;之间的元素。带WITHSCORES，可以让分数一起和值返回到结果集。<br> zrangebyscore key &lt;min&gt; &lt;max&gt; [withscores] [limit offset count]：返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。<br> zrevrangebyscore key &lt;max&gt; &lt;min&gt; [withscores] [limit offset count] ：同上，改为从大到小排列。<br> zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;：为元素的score加上增量<br> zrem &lt;key&gt;&lt;value&gt;：删除该集合下，指定值的元素<br> zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;：统计该集合，分数区间内的元素个数<br> zrank &lt;key&gt;&lt;value&gt;：返回该值在集合中的排名，从0开始。</p><h4 id="_3-6-3、底层数据结构" tabindex="-1"><a class="header-anchor" href="#_3-6-3、底层数据结构" aria-hidden="true">#</a> 3.6.3、底层数据结构</h4><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构：<br> （1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。<br> （2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p><h4 id="_3-6-4、跳跃表-调表" tabindex="-1"><a class="header-anchor" href="#_3-6-4、跳跃表-调表" aria-hidden="true">#</a> 3.6.4、跳跃表（调表）</h4><p>Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230215171716.png" alt="" loading="lazy"></p><p>例如查找元素51：<br> 从第2层开始，1节点比51节点小，向后比较。<br> 21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层<br> 在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下<br> 在第0层，51节点为要查找的节点，节点被找到，共查找4次。</p><h2 id="_4、redis配置文件" tabindex="-1"><a class="header-anchor" href="#_4、redis配置文件" aria-hidden="true">#</a> 4、Redis配置文件</h2><p>自己设置的redis配置文件的位置：/etc/redis.conf</p><h3 id="_4-1、units单位" tabindex="-1"><a class="header-anchor" href="#_4-1、units单位" aria-hidden="true">#</a> 4.1、Units单位</h3><p>配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit<br> 大小写不敏感</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216150107283.png" alt="image-20230216150107283" loading="lazy"></p><h3 id="_4-2、includes包含" tabindex="-1"><a class="header-anchor" href="#_4-2、includes包含" aria-hidden="true">#</a> 4.2、INCLUDES包含</h3><p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216150215092.png" alt="image-20230216150215092" loading="lazy"></p><h3 id="_4-3、网络相关配置" tabindex="-1"><a class="header-anchor" href="#_4-3、网络相关配置" aria-hidden="true">#</a> 4.3、网络相关配置</h3><h4 id="_4-3-1、bind" tabindex="-1"><a class="header-anchor" href="#_4-3-1、bind" aria-hidden="true">#</a> 4.3.1、bind</h4><p>默认情况<strong>bind=127.0.0.1</strong>只能接受本机的访问请求<br> 不写的情况下，无限制接受任何ip地址的访问<br> 生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其<strong>注释掉</strong><br> 如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216150324687.png" alt="image-20230216150324687" loading="lazy"></p><p>保存配置，停止服务，重启启动查看进程，不再是本机访问了</p><h4 id="_4-3-2、protected-mode" tabindex="-1"><a class="header-anchor" href="#_4-3-2、protected-mode" aria-hidden="true">#</a> 4.3.2、protected-mode</h4><p>将本机访问护模式设置no</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216150406973.png" alt="image-20230216150406973" loading="lazy"></p><h4 id="_4-3-3、port" tabindex="-1"><a class="header-anchor" href="#_4-3-3、port" aria-hidden="true">#</a> 4.3.3、port</h4><p>端口号，默认 6379</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216150437268.png" alt="image-20230216150437268" loading="lazy"></p><h4 id="_4-3-4、tcp-backlog" tabindex="-1"><a class="header-anchor" href="#_4-3-4、tcp-backlog" aria-hidden="true">#</a> 4.3.4、tcp-backlog</h4><p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。</p><p>在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p><p>注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</p><h4 id="_4-3-5、timeout" tabindex="-1"><a class="header-anchor" href="#_4-3-5、timeout" aria-hidden="true">#</a> 4.3.5、timeout</h4><p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即永不关闭。</p><h4 id="_4-3-6、tcp-keepalive" tabindex="-1"><a class="header-anchor" href="#_4-3-6、tcp-keepalive" aria-hidden="true">#</a> 4.3.6、tcp-keepalive</h4><p>对访问客户端的一种心跳检测，每个n秒检测一次。<br> 单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60</p><h3 id="_4-4、general通用" tabindex="-1"><a class="header-anchor" href="#_4-4、general通用" aria-hidden="true">#</a> 4.4、GENERAL通用</h3><h4 id="_4-4-1、daemonize" tabindex="-1"><a class="header-anchor" href="#_4-4-1、daemonize" aria-hidden="true">#</a> 4.4.1、daemonize</h4><p>是否为后台进程，设置为yes<br> 守护进程，后台启动</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216150656768.png" alt="image-20230216150656768" loading="lazy"></p><h4 id="_4-4-2、pidfile" tabindex="-1"><a class="header-anchor" href="#_4-4-2、pidfile" aria-hidden="true">#</a> 4.4.2、pidfile</h4><p>存放pid文件的位置，每个实例会产生一个不同的pid文件</p><h4 id="_4-4-3、loglevel" tabindex="-1"><a class="header-anchor" href="#_4-4-3、loglevel" aria-hidden="true">#</a> 4.4.3、loglevel</h4><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为<strong>notice</strong></p><p>四个级别根据使用阶段来选择，生产环境选择notice 或者warning</p><h4 id="_4-4-4、logfile" tabindex="-1"><a class="header-anchor" href="#_4-4-4、logfile" aria-hidden="true">#</a> 4.4.4、logfile</h4><p>日志文件名称</p><h4 id="_4-4-5、database-16" tabindex="-1"><a class="header-anchor" href="#_4-4-5、database-16" aria-hidden="true">#</a> 4.4.5、database 16</h4><p>设定库的数量 默认16，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</p><h3 id="_4-5、security-安全" tabindex="-1"><a class="header-anchor" href="#_4-5、security-安全" aria-hidden="true">#</a> 4.5、SECURITY 安全</h3><h4 id="_4-5-1、设置密码" tabindex="-1"><a class="header-anchor" href="#_4-5-1、设置密码" aria-hidden="true">#</a> 4.5.1、设置密码</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216151109341.png" alt="image-20230216151109341" loading="lazy"></p><p>访问密码的查看、设置和取消<br> 在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。<br> 永久设置，需要再配置文件中进行设置。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216151302849.png" alt="image-20230216151302849" loading="lazy"></p><h3 id="_4-6、limits限制" tabindex="-1"><a class="header-anchor" href="#_4-6、limits限制" aria-hidden="true">#</a> 4.6、LIMITS限制</h3><h4 id="_4-6-1、maxclients" tabindex="-1"><a class="header-anchor" href="#_4-6-1、maxclients" aria-hidden="true">#</a> 4.6.1、maxclients</h4><p>设置redis同时可以与多少个客户端进行连接。</p><p>默认情况下为10000个客户端。</p><p>如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</p><h4 id="_4-6-2、maxmeory" tabindex="-1"><a class="header-anchor" href="#_4-6-2、maxmeory" aria-hidden="true">#</a> 4.6.2、maxmeory</h4><p>建议<strong>必须设置</strong>，否则，将内存占满，造成服务器宕机</p><p>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过<strong>maxmemory-policy</strong>来指定。</p><p>如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。</p><p>但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</p><h4 id="_4-6-3、maxmemory-policy" tabindex="-1"><a class="header-anchor" href="#_4-6-3、maxmemory-policy" aria-hidden="true">#</a> 4.6.3、maxmemory-policy</h4><p>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）<br> allkeys-lru：在所有集合key中，使用LRU算法移除key<br> volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键<br> allkeys-random：在所有集合key中，移除随机的key<br> volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key<br> noeviction：不进行移除。针对写操作，只是返回错误信息</p><h4 id="_4-6-4、maxmemory-samples" tabindex="-1"><a class="header-anchor" href="#_4-6-4、maxmemory-samples" aria-hidden="true">#</a> 4.6.4、maxmemory-samples</h4><p>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。</p><p>一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。</p><h2 id="_5、redis发布和订阅" tabindex="-1"><a class="header-anchor" href="#_5、redis发布和订阅" aria-hidden="true">#</a> 5、Redis发布和订阅</h2><h3 id="_5-1、什么是发布和订阅" tabindex="-1"><a class="header-anchor" href="#_5-1、什么是发布和订阅" aria-hidden="true">#</a> 5.1、什么是发布和订阅</h3><p>Redis 发布订阅 (pub/sub) 是一种<strong>消息通信模式</strong>：<br> 发送者 (pub) 发送消息<br> 订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><h3 id="_5-2、redis的发布和订阅" tabindex="-1"><a class="header-anchor" href="#_5-2、redis的发布和订阅" aria-hidden="true">#</a> 5.2、Redis的发布和订阅</h3><p>客户端可以订阅频道：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230216152128.png" alt="" loading="lazy"></p><p>当给这个频道发布消息后，消息就会发送给订阅的客户端：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230216152211.png" alt="" loading="lazy"></p><h3 id="_5-3、发布订阅命令的实现" tabindex="-1"><a class="header-anchor" href="#_5-3、发布订阅命令的实现" aria-hidden="true">#</a> 5.3、发布订阅命令的实现</h3><p>1、打开一个客户端订阅channel1：</p><p>subscribe channel1</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216152925974.png" alt="image-20230216152925974" loading="lazy"></p><p>2、打开另一个客户端，给channel1发布消息hello</p><p>publish channel1 hello<br> 返回的1是订阅者数量</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216152950911.png" alt="image-20230216152950911" loading="lazy"></p><h2 id="_6、redis6新数据类型" tabindex="-1"><a class="header-anchor" href="#_6、redis6新数据类型" aria-hidden="true">#</a> 6、Redis6新数据类型</h2><h3 id="_6-1、bitmaps" tabindex="-1"><a class="header-anchor" href="#_6-1、bitmaps" aria-hidden="true">#</a> 6.1、Bitmaps</h3><h4 id="_6-1-1、简介" tabindex="-1"><a class="header-anchor" href="#_6-1-1、简介" aria-hidden="true">#</a> 6.1.1、简介</h4><p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：<br> （1） Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以<strong>对字符串的位进行操作</strong>。<br> （2）Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个7<strong>以位为单位的数组</strong>， 数组的<strong>每个单元只能存储0和1</strong>， 数组的<strong>下标</strong>在Bitmaps中叫做<strong>偏移量</strong></p><h4 id="_6-1-2、命令" tabindex="-1"><a class="header-anchor" href="#_6-1-2、命令" aria-hidden="true">#</a> 6.1.2、命令</h4><p>1、setbit</p><p>格式：setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt; 设置bitmaps中某个偏移量的值（0或1）<br> offset:偏移量从0开始</p><p>举例：将key为users:20210101的1、6、11、15、19位设置为1</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216161852940.png" alt="image-20230216161852940" loading="lazy"></p><p>2、getbit</p><p>格式：getbit&lt;key&gt;&lt;offset&gt;获取Bitmaps中某个偏移量的值</p><p>获取键的第offset位的值（从0开始算）：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216161935200.png" alt="image-20230216161935200" loading="lazy"></p><p>3、bitcount</p><p>统计<strong>字符串</strong>被设置为1的bit数<br> 通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行<br> -1 表示最后一个位，-2 表示倒数第二个位</p><p>格式：bitcount&lt;key&gt;[start end] 统计字符串从<strong>start字节</strong>到<strong>end字节</strong>比特值为1的数量</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216162108342.png" alt="image-20230216162108342" loading="lazy"></p><p>4、bitop</p><p>格式：bitop and(or/not/xor) &lt;destkey&gt; [key…]<br> bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><p>举例：<br> 2020-11-04 日访问网站的userid=1,2,5,9<br> setbit unique:users:20201104 1 1<br> setbit unique:users:20201104 2 1<br> setbit unique:users:20201104 5 1<br> setbit unique:users:20201104 9 1</p><p>2020-11-03 日访问网站的userid=0,1,4,9<br> setbit unique:users:20201103 0 1<br> setbit unique:users:20201103 1 1<br> setbit unique:users:20201103 4 1<br> setbit unique:users:20201103 9 1</p><p>计算出两天都访问过网站的用户数量：<br> bitop and unique:users:and:20201104_03 unique:users:20201103 unique:users:20201104</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216165709921.png" alt="image-20230216165709921" loading="lazy"></p><h4 id="_6-1-3、bitmaps与set对比" tabindex="-1"><a class="header-anchor" href="#_6-1-3、bitmaps与set对比" aria-hidden="true">#</a> 6.1.3、bitmaps与set对比</h4><p>用户多时或存储独立用户使用Bitmap节省很多空间<br> 若活跃用户较少，那大部分都是0，用集合节省空间</p><h3 id="_6-2、hyperloglog" tabindex="-1"><a class="header-anchor" href="#_6-2、hyperloglog" aria-hidden="true">#</a> 6.2、HyperLogLog</h3><h4 id="_6-2-1、简介" tabindex="-1"><a class="header-anchor" href="#_6-2-1、简介" aria-hidden="true">#</a> 6.2.1、简介</h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为<strong>基数问题</strong></p><p>基数：所有非重复数字</p><p>解决基数问题有很多种方案：<br> （1）数据存储在MySQL表中，使用distinct count计算不重复个数<br> （2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够降低一定的精度来平衡存储空间？Redis推出了<strong>HyperLogLog</strong></p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><h4 id="_6-2-2、命令" tabindex="-1"><a class="header-anchor" href="#_6-2-2、命令" aria-hidden="true">#</a> 6.2.2、命令</h4><p>1、pfadd</p><p>格式：pfadd &lt;key&gt;&lt;element&gt; [element ...] 添加指定元素到 HyperLogLog 中</p><p>举例：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216171619915.png" alt="image-20230216171619915" loading="lazy"></p><p>如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><p>2、pfcount</p><p>格式：pfcount&lt;key&gt; [key ...] 计算HLL的近似基数</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216171824571.png" alt="image-20230216171824571" loading="lazy"></p><p>3、pfmerge</p><p>格式：pfmerge&lt;destkey&gt;&lt;sourcekey&gt; [sourcekey ...] 将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216172107315.png" alt="image-20230216172107315" loading="lazy"></p><h3 id="_6-3、geospatial" tabindex="-1"><a class="header-anchor" href="#_6-3、geospatial" aria-hidden="true">#</a> 6.3、Geospatial</h3><h4 id="_6-3-1、简介" tabindex="-1"><a class="header-anchor" href="#_6-3-1、简介" aria-hidden="true">#</a> 6.3.1、简介</h4><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h4 id="_6-3-2、命令" tabindex="-1"><a class="header-anchor" href="#_6-3-2、命令" aria-hidden="true">#</a> 6.3.2、命令</h4><p>1、geoadd</p><p>格式：geoadd&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;&lt;member&gt; [longitude latitude member...] 添加地理位置（经度，纬度，名称）</p><p>举例：<br> geoadd china:city 121.47 31.23 shanghai<br> geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。<br> 有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。<br> 已经添加的数据，是无法再次往里面添加的。</p><p>2、geopos</p><p>格式：geopos &lt;key&gt;&lt;member&gt; [member...] 获得指定地区的坐标值</p><p>举例：<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216173526297.png" alt="image-20230216173526297" loading="lazy"></p><p>3、geodist</p><p>格式：geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt; [m|km|ft|mi ] 获取两个位置之间的直线距离</p><p>举例：<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216173915212.png" alt="image-20230216173915212" loading="lazy"></p><p>单位：<br> m 表示单位为米[默认值]。<br> km 表示单位为千米。<br> mi 表示单位为英里。<br> ft 表示单位为英尺。<br> 如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p><p>4、georadius</p><p>格式：georadius&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;radius m|km|ft|mi 以给定的经纬度为中心，找出某一半径内的元素（经度 纬度 距离 单位）</p><p>举例：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230216174034734.png" alt="image-20230216174034734" loading="lazy"></p><h2 id="_7、jedis入门" tabindex="-1"><a class="header-anchor" href="#_7、jedis入门" aria-hidden="true">#</a> 7、Jedis入门</h2><h3 id="_7-1、jedis所需jar包" tabindex="-1"><a class="header-anchor" href="#_7-1、jedis所需jar包" aria-hidden="true">#</a> 7.1、Jedis所需jar包</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2、连接redis注意事项" tabindex="-1"><a class="header-anchor" href="#_7-2、连接redis注意事项" aria-hidden="true">#</a> 7.2、连接Redis注意事项</h3><p><strong>禁用Linux的防火墙</strong>：Linux(CentOS7)里执行命令</p><p><em><strong>systemctl stop/disable firewalld.service</strong></em></p><p>redis.conf中注释掉bind 127.0.0.1 ,然后 protected-mode no</p><h3 id="_7-3、jedis常用操作" tabindex="-1"><a class="header-anchor" href="#_7-3、jedis常用操作" aria-hidden="true">#</a> 7.3、Jedis常用操作</h3><h4 id="_7-3-1、创建maven工程" tabindex="-1"><a class="header-anchor" href="#_7-3-1、创建maven工程" aria-hidden="true">#</a> 7.3.1、创建maven工程</h4><h4 id="_7-3-2、创建测试程序" tabindex="-1"><a class="header-anchor" href="#_7-3-2、创建测试程序" aria-hidden="true">#</a> 7.3.2、创建测试程序</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisDemo1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建Jedis对象</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//测试</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4、测试相关数据类型" tabindex="-1"><a class="header-anchor" href="#_7-4、测试相关数据类型" aria-hidden="true">#</a> 7.4、测试相关数据类型</h3><h4 id="_7-4-1、key、string" tabindex="-1"><a class="header-anchor" href="#_7-4-1、key、string" aria-hidden="true">#</a> 7.4.1、Key、String</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加</span>
    jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//设置多个key-value</span>
    jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;k2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mget <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mget<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//遍历key</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-2、list" tabindex="-1"><a class="header-anchor" href="#_7-4-2、list" aria-hidden="true">#</a> 7.4.2、List</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mary&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> key1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-3、set" tabindex="-1"><a class="header-anchor" href="#_7-4-3、set" aria-hidden="true">#</a> 7.4.3、set</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">&quot;names&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">&quot;names&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-4、hash" tabindex="-1"><a class="header-anchor" href="#_7-4-4、hash" aria-hidden="true">#</a> 7.4.4、hash</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> hget <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hget<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-5、zset" tabindex="-1"><a class="header-anchor" href="#_7-4-5、zset" aria-hidden="true">#</a> 7.4.5、zset</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">&quot;china&quot;</span><span class="token punctuation">,</span><span class="token number">100d</span><span class="token punctuation">,</span><span class="token string">&quot;shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> china <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrange</span><span class="token punctuation">(</span><span class="token string">&quot;china&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>china<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、jedis实例" tabindex="-1"><a class="header-anchor" href="#_8、jedis实例" aria-hidden="true">#</a> 8、Jedis实例</h2><p>完成一个手机验证码功能</p><p>要求：<br> 1、输入手机号，点击发送后随机生成6位数字码，2分钟有效<br> 2、输入验证码，点击验证，返回成功或失败<br> 3、每个手机号每天只能输入3次</p><p>分析：<br> 1、生成随机数：random<br> 2、验证码二分钟有效：把验证码放入redis，设置过期时间120s<br> 3、判断验证码是否一致：从redis获取验证码和输入的验证码进行比较<br> 4、每个手机只能发送三次验证码：incr每次发送后+1，大于2的时候，提交不能发送</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneCode</span> <span class="token punctuation">{</span>

    <span class="token comment">//1、生成6为数字验证码</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            code <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            code <span class="token operator">+=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//2、每个手机只能发送三次，验证码放到redis中，设置过期时间</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">verifyCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//连接redis</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//拼接key</span>
        <span class="token comment">//手机发送次数key</span>
        <span class="token class-name">String</span> countKey <span class="token operator">=</span> <span class="token string">&quot;VerifyCode&quot;</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">&quot;:count&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//验证码key</span>
        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token string">&quot;VerfyCode&quot;</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">&quot;:code&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">//每个手机只能发送三次</span>
        <span class="token class-name">String</span> count <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//没有发送次数，第一次发送</span>
            <span class="token comment">//设置发送次数是1</span>
            jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>countKey<span class="token punctuation">,</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//发送次数+1</span>
            jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;今天的发送次数已超过三次&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//发送的验证码放到redis里</span>
        <span class="token class-name">String</span> vcode <span class="token operator">=</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span>vcode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//3、验证码校验</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRedisCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span><span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//从redis中获取验证码</span>
        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token string">&quot;VerifyCode&quot;</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">&quot;:count&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> redisCode <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//判断</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>redisCode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、springboot整合redis" tabindex="-1"><a class="header-anchor" href="#_9、springboot整合redis" aria-hidden="true">#</a> 9、SpringBoot整合Redis</h2><h3 id="_9-1、-添加依赖" tabindex="-1"><a class="header-anchor" href="#_9-1、-添加依赖" aria-hidden="true">#</a> 9.1、 添加依赖</h3><p>在spring boot中，可以使用Spring Data Redis来简化Redis操作</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230315210937.png" alt="" loading="lazy"></p><p>在pom.xml文件中引入redis相关依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- redis --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2、application中的配置" tabindex="-1"><a class="header-anchor" href="#_9-2、application中的配置" aria-hidden="true">#</a> 9.2、application中的配置</h3><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#Redis服务器地址</span>
<span class="token key attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.80.130</span>
<span class="token comment">#Redis服务器连接端口</span>
<span class="token key attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token value attr-value">6379</span>
<span class="token comment">#Redis数据库索引（默认为0）</span>
<span class="token key attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token comment">#连接超时时间（毫秒）</span>
<span class="token key attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token value attr-value">1800000</span>
<span class="token comment">#连接池最大连接数（使用负值表示没有限制）</span>
<span class="token key attr-name">spring.redis.lettuce.pool.max-active</span><span class="token punctuation">=</span><span class="token value attr-value">20</span>
<span class="token comment">#最大阻塞等待时间(负数表示没限制)</span>
<span class="token key attr-name">spring.redis.lettuce.pool.max-wait</span><span class="token punctuation">=</span><span class="token value attr-value">-1</span>
<span class="token comment">#连接池中的最大空闲连接</span>
<span class="token key attr-name">spring.redis.lettuce.pool.max-idle</span><span class="token punctuation">=</span><span class="token value attr-value">5</span>
<span class="token comment">#连接池中的最小空闲连接</span>
<span class="token key attr-name">spring.redis.lettuce.pool.min-idle</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3、添加redis配置类" tabindex="-1"><a class="header-anchor" href="#_9-3、添加redis配置类" aria-hidden="true">#</a> 9.3、添加redis配置类</h3><p>更改Redis的序列化器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//开启缓存</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token comment">//配置类</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span><span class="token constant">NON_FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//key序列化方式</span>
        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//value序列化</span>
        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//value hashmap序列化</span>
        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//解决查询缓存转换异常的问题</span>
        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span><span class="token constant">NON_FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span>
        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RedisCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4、测试" tabindex="-1"><a class="header-anchor" href="#_9-4、测试" aria-hidden="true">#</a> 9.4、测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/redisTest&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTestController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//设置值到redis</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//从redis获取值</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//操作hash</span>
        <span class="token class-name">HashOperations</span> hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;002&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;002&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;002&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jiangsu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> hashOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;002&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取hash结构中的所有字段</span>
        <span class="token class-name">Set</span> keys <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token number">002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//获取hash结构中的所有值</span>
        <span class="token class-name">List</span> values <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token string">&quot;002&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//操作list</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ListOperations</span> listOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//存值</span>
        listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">&quot;mylief&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        listOperations<span class="token punctuation">.</span><span class="token function">leftPushAll</span><span class="token punctuation">(</span><span class="token string">&quot;mylist&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//取值</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mylist <span class="token operator">=</span> listOperations<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token string">&quot;mylist&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> o <span class="token operator">:</span> mylist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//获得列表的长度llen</span>
        <span class="token class-name">Long</span> size <span class="token operator">=</span> listOperations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token string">&quot;mylist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">LSize</span> <span class="token operator">=</span> size<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//出队列</span>
        <span class="token class-name">Object</span> mylist1 <span class="token operator">=</span> listOperations<span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">&quot;mylist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">LSize</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> element <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> listOperations<span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">&quot;mylist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token comment">//操作Set类型的数据</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">SetOperations</span> setOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//存值</span>
    setOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;myset&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//删除成员</span>
    setOperations<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;myset&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//取值</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mySet <span class="token operator">=</span> setOperations<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token string">&quot;mySet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> mySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">//操作Zset类型的数据</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testZset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ZSetOperations</span> zSetOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//存值</span>
    zSetOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;myZset&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zSetOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;myZset&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zSetOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;myZset&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token number">12.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zSetOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;myZset&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//取值</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> myZset <span class="token operator">=</span> zSetOperations<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token string">&quot;myZset&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> myZset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//修改分数</span>
    zSetOperations<span class="token punctuation">.</span><span class="token function">incrementScore</span><span class="token punctuation">(</span><span class="token string">&quot;myZset&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//删除成员</span>
    zSetOperations<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;myZset&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//通用操作，针对不同数类型都可以操作</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//获取哦Reds中所有的key</span>
    <span class="token class-name">Set</span> keys <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判断某个key是否存在</span>
    <span class="token class-name">Boolean</span> itcast <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//删除指定的key</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;myZset&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取指定key对应的value的数据类型</span>
    <span class="token class-name">DataType</span> myset <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&quot;myset&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、redis事务" tabindex="-1"><a class="header-anchor" href="#_10、redis事务" aria-hidden="true">#</a> 10、Redis事务</h2><h3 id="_10-1、redis的事务定义" tabindex="-1"><a class="header-anchor" href="#_10-1、redis的事务定义" aria-hidden="true">#</a> 10.1、Redis的事务定义</h3><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br> Redis事务的主要作用就是<strong>串联多个命令，防止别的命令插队</strong>。</p><h3 id="_10-2、multi、exec、discard" tabindex="-1"><a class="header-anchor" href="#_10-2、multi、exec、discard" aria-hidden="true">#</a> 10.2、Multi、Exec、discard</h3><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。<br> 组队的过程中可以通过discard来放弃组队。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230219140612333.png" alt="image-20230219140612333" loading="lazy"></p><p>举例：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230219141038.png" alt="" loading="lazy"></p><h3 id="_10-3、事务错误处理" tabindex="-1"><a class="header-anchor" href="#_10-3、事务错误处理" aria-hidden="true">#</a> 10.3、事务错误处理</h3><p>（1）组队阶段报错，提交失败<br> 组队中某个命令出现了报告错误，执行时整个的<strong>所有</strong>队列都会被取消。</p><p>举例：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230219141437027.png" alt="image-20230219141437027" loading="lazy"></p><p>（2）组队成功，提交有成功有失败情况<br> 如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p>举例：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230219141445831.png" alt="image-20230219141445831" loading="lazy"></p><h3 id="_10-4、事务冲突的问题" tabindex="-1"><a class="header-anchor" href="#_10-4、事务冲突的问题" aria-hidden="true">#</a> 10.4、事务冲突的问题</h3><h4 id="_10-4-1、悲观锁" tabindex="-1"><a class="header-anchor" href="#_10-4-1、悲观锁" aria-hidden="true">#</a> 10.4.1、悲观锁</h4><p><strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以<strong>每次在拿数据的时候都会上锁</strong>，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p><p><strong>Redis默认不能直接使用悲观锁</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230219150245282.png" alt="image-20230219150245282" loading="lazy"></p><h4 id="_10-4-2、乐观锁" tabindex="-1"><a class="header-anchor" href="#_10-4-2、乐观锁" aria-hidden="true">#</a> 10.4.2、乐观锁</h4><p><strong>乐观锁(Optimistic Lock)</strong>, 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用<strong>版本号</strong>等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230219150305527.png" alt="image-20230219150305527" loading="lazy"></p><h4 id="_10-4-3、watch-key-key" tabindex="-1"><a class="header-anchor" href="#_10-4-3、watch-key-key" aria-hidden="true">#</a> 10.4.3、WATCH key [key...]</h4><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在<strong>事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230219151206.png" alt="" loading="lazy"></p><h3 id="_10-5、redis事务三特性" tabindex="-1"><a class="header-anchor" href="#_10-5、redis事务三特性" aria-hidden="true">#</a> 10.5、Redis事务三特性</h3><p>①单独的隔离操作：<br><strong>事务</strong>中的<strong>所有命令</strong>都会<strong>序列化</strong>、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>②没有隔离级别的概念：<br> 队列中的命令<strong>没有提交之前都不会实际被执行</strong>，因为事务提交前任何指令都不会被实际执行</p><p>③不保证原子性<br> 事务中如果有一<strong>条命令执行失败</strong>，<strong>其后的命令仍然会被执行</strong>，**没有回滚 **</p><h2 id="_11、redis事务案例" tabindex="-1"><a class="header-anchor" href="#_11、redis事务案例" aria-hidden="true">#</a> 11、Redis事务案例</h2><p>秒杀案例</p><h3 id="_11-1、解决计数器和人员记录的事务操作" tabindex="-1"><a class="header-anchor" href="#_11-1、解决计数器和人员记录的事务操作" aria-hidden="true">#</a> 11.1、解决计数器和人员记录的事务操作</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230219152515148.png" alt="image-20230219152515148" loading="lazy"></p><h3 id="_11-2、并发模拟工具" tabindex="-1"><a class="header-anchor" href="#_11-2、并发模拟工具" aria-hidden="true">#</a> 11.2、并发模拟工具</h3><p>压力测试：<br> 使用工具ab模拟测试：<br> CentOS6 默认安装<br> CentOS7需要手动安装</p><h4 id="_11-2-1、有网络-yum-install-httpd-tools" tabindex="-1"><a class="header-anchor" href="#_11-2-1、有网络-yum-install-httpd-tools" aria-hidden="true">#</a> 11.2.1、有网络：yum install httpd-tools</h4><h4 id="_11-2-3、无网络" tabindex="-1"><a class="header-anchor" href="#_11-2-3、无网络" aria-hidden="true">#</a> 11.2.3、无网络：</h4><p>（1） 进入cd /run/media/root/CentOS 7 x86_64/Packages（路径跟centos6不同）<br> （2） 顺序安装<br> apr-1.4.8-3.el7.x86_64.rpm<br> apr-util-1.5.2-6.el7.x86_64.rpm<br> httpd-tools-2.4.6-67.el7.centos.x86_64.rpm</p><h4 id="_11-2-4、测试" tabindex="-1"><a class="header-anchor" href="#_11-2-4、测试" aria-hidden="true">#</a> 11.2.4、测试</h4><h5 id="_11-2-4-1、通过ab测试" tabindex="-1"><a class="header-anchor" href="#_11-2-4-1、通过ab测试" aria-hidden="true">#</a> 11.2.4.1、通过ab测试</h5><p>使用<strong>ab --help</strong>查看ab的使用方式</p><p>通过<strong>vim postfile</strong> 在~文件夹下创建文件：模拟表单提交参数,以&amp;符号结尾;存放当前目录<br> 内容：prodid=1010&amp;</p>`,273),k={href:"http://192.168.137.221:8080/seckill",target:"_blank",rel:"noopener noreferrer"},m=s("br",null,null,-1),g=a(`<h3 id="_11-3、超时问题" tabindex="-1"><a class="header-anchor" href="#_11-3、超时问题" aria-hidden="true">#</a> 11.3、超时问题</h3><p>连接超时，通过连接池解决：</p><p>节省每次连接redis服务带来的消耗，把连接好的实例反复利用。<br> 通过参数管理连接的行为</p><p>JedisPoolUtil工具类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPoolConfig</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtil</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">JedisPool</span> jedisPool <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">JedisPoolUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JedisPool</span> <span class="token function">getJedisPoolInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> jedisPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JedisPoolUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> jedisPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token class-name">JedisPoolConfig</span> poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					poolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					poolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					poolConfig<span class="token punctuation">.</span><span class="token function">setBlockWhenExhausted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					poolConfig<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ping  PONG</span>
				 
					jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>poolConfig<span class="token punctuation">,</span> <span class="token string">&quot;192.168.44.168&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> <span class="token number">60000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> jedisPool<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">,</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> jedis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			jedisPool<span class="token punctuation">.</span><span class="token function">returnResource</span><span class="token punctuation">(</span>jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链接池参数<br> MaxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了MaxTotal个jedis实例，则此时pool的状态为exhausted。</p><p>maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；</p><p>MaxWaitMillis：表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛JedisConnectionException</p><p>testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的</p><h3 id="_11-4、超卖问题" tabindex="-1"><a class="header-anchor" href="#_11-4、超卖问题" aria-hidden="true">#</a> 11.4、超卖问题</h3><p>利用乐观锁淘汰用户，解决超卖问题</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230219161241564.png" alt="image-20230219161241564" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//增加乐观锁</span>
jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>qtkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//判断库存</span>
<span class="token class-name">String</span> qtkeystr <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>qtkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>qtkeystr<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>qtkeystr<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未初始化库存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> qt <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>qtkeystr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>qt<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已经秒光&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//增加事务</span>
<span class="token class-name">Transaction</span> multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//减少库存</span>
<span class="token comment">//jedis.decr(qtkey);</span>
multi<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span>qtkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//加人</span>
<span class="token comment">//jedis.sadd(usrkey, uid);</span>
multi<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span>usrkey<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//执行事务</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//判断事务提交是否失败</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-5、库存遗留问题" tabindex="-1"><a class="header-anchor" href="#_11-5、库存遗留问题" aria-hidden="true">#</a> 11.5、库存遗留问题</h3><p>乐观锁会造成库存遗留问题，乐观锁导致很多请求都失败。先点的没秒到，后点的可能秒到了。</p><h4 id="_11-5-1、lua脚本" tabindex="-1"><a class="header-anchor" href="#_11-5-1、lua脚本" aria-hidden="true">#</a> 11.5.1、LUA脚本</h4><p><strong>Lua</strong>是一个小巧的<strong>脚本语言</strong>，Lua脚本可以很容易的<strong>被C/C++ 代码调用</strong>，也可以反过来<strong>调用C/C++的函数</strong>，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为<strong>嵌入式脚本语言</strong>。</p><p>很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。</p><h4 id="_11-5-2、lua脚本在redis中的优势" tabindex="-1"><a class="header-anchor" href="#_11-5-2、lua脚本在redis中的优势" aria-hidden="true">#</a> 11.5.2、LUA脚本在Redis中的优势</h4><p>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，<strong>减少反复连接redis的次数</strong>。提升性能</p><p>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作</p><p>但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用</p><p>利用lua脚本淘汰用户，解决超卖问题</p><p>redis 2.6版本以后，通过lua脚本解决<strong>争抢问题</strong>，实际上是<strong>redis</strong> <strong>利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230219162833961.png" alt="image-20230219162833961" loading="lazy"></p><p>LUA脚本：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> userid<span class="token operator">=</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">local</span> prodid<span class="token operator">=</span>KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> qtkey<span class="token operator">=</span><span class="token string">&quot;sk:&quot;</span><span class="token operator">..</span>prodid<span class="token operator">..</span><span class="token string">&quot;:qt&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> usersKey<span class="token operator">=</span><span class="token string">&quot;sk:&quot;</span><span class="token operator">..</span>prodid<span class="token punctuation">.</span>&quot;<span class="token punctuation">:</span>usr&#39;<span class="token punctuation">;</span> 
<span class="token keyword">local</span> userExists<span class="token operator">=</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;sismember&quot;</span><span class="token punctuation">,</span>usersKey<span class="token punctuation">,</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>userExists<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">then</span> 
  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">local</span> num<span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span> <span class="token punctuation">,</span>qtkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token keyword">then</span> 
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">else</span> 
  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;decr&quot;</span><span class="token punctuation">,</span>qtkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;sadd&quot;</span><span class="token punctuation">,</span>usersKey<span class="token punctuation">,</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12、redis持久化之rdb" tabindex="-1"><a class="header-anchor" href="#_12、redis持久化之rdb" aria-hidden="true">#</a> 12、Redis持久化之RDB</h2><p>Redis 提供了2个不同形式的持久化方式：<br> RDB（Redis DataBase）<br> AOF（Append Of File）</p><h3 id="_12-1、rdb介绍" tabindex="-1"><a class="header-anchor" href="#_12-1、rdb介绍" aria-hidden="true">#</a> 12.1、RDB介绍</h3><p>RDB（Redis DataBase）</p><p>在指定的<strong>时间间隔</strong>内将内存中的数据集<strong>快照写入磁盘</strong>， 也就是行话讲的Snapshot快照，它恢复时是将<strong>快照文件直接读到内存</strong>里</p><h3 id="_12-2、备份是如何执行的" tabindex="-1"><a class="header-anchor" href="#_12-2、备份是如何执行的" aria-hidden="true">#</a> 12.2、备份是如何执行的</h3><p>Redis会单独创建（<strong>fork</strong>）一个<strong>子进程</strong>来进行持久化，会先将数据<strong>写入到一个临时文件中</strong>，待持久化过程都结束了，再用这个<em>临时文件替换上次持久化好的文件</em>。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230220162243.png" alt="" loading="lazy"></p><h3 id="_12-3、fork" tabindex="-1"><a class="header-anchor" href="#_12-3、fork" aria-hidden="true">#</a> 12.3、Fork</h3><p>Fork的作用是<strong>复制</strong>一个与当前<strong>进程</strong>一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并<strong>作为原进程的子进程</strong></p><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>（先写入一个临时文件，替换文件的过程）”</p><p><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要<strong>发生变化</strong>时，才会将<strong>父进程的内容复制一份给子进程</strong>。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230220162351.png" alt="" loading="lazy"></p><h3 id="_12-4、dump-rdb文件" tabindex="-1"><a class="header-anchor" href="#_12-4、dump-rdb文件" aria-hidden="true">#</a> 12.4、dump.rdb文件</h3><p>在redis.conf中：vim /etc/redis.conf</p><p>查找到snapshotting：</p><p>rdb的默认文件名：dump.rdb<br> rdb文件位置：redis的启动目录中（/usr//local/bin/）<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230220163011.png" alt="" loading="lazy"></p><h3 id="_12-5、如何触发rdb快照-保持策略" tabindex="-1"><a class="header-anchor" href="#_12-5、如何触发rdb快照-保持策略" aria-hidden="true">#</a> 12.5、如何触发RDB快照；保持策略</h3><p>配置文件中默认的快照配置：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230220163918.png" alt="" loading="lazy"></p><h4 id="_12-5-1、命令save-vs-bgsave" tabindex="-1"><a class="header-anchor" href="#_12-5-1、命令save-vs-bgsave" aria-hidden="true">#</a> 12.5.1、命令save VS bgsave</h4><p><strong>save</strong> ：save时只管保存，其它不管，全部阻塞，手动保存，不建议。</p><p><strong>bgsave</strong>：Redis会在后台异步进行<strong>快照操作</strong>，快照同时还可以响应客户端请求。可以通过lastsave 命令获取最后一次成功执行快照的时间</p><p>save格式：save 秒钟 写操作次数</p><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，<strong>默认是1分钟内改了1万次，或5分钟内改了10次，或15分钟内改了1次</strong>。<br> 禁用<br> 不设置save指令，或者给save传入空字符串</p><h4 id="_12-5-2、flushall命令" tabindex="-1"><a class="header-anchor" href="#_12-5-2、flushall命令" aria-hidden="true">#</a> 12.5.2、flushall命令</h4><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p><h4 id="_12-5-3、stop-writes-on-bgsave-error" tabindex="-1"><a class="header-anchor" href="#_12-5-3、stop-writes-on-bgsave-error" aria-hidden="true">#</a> 12.5.3、stop-writes-on-bgsave-error</h4><p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p><h4 id="_12-5-4、rdbcompression-压缩文件" tabindex="-1"><a class="header-anchor" href="#_12-5-4、rdbcompression-压缩文件" aria-hidden="true">#</a> 12.5.4、rdbcompression 压缩文件</h4><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p><h4 id="_12-5-5、-rdbchecksum-检查完整性" tabindex="-1"><a class="header-anchor" href="#_12-5-5、-rdbchecksum-检查完整性" aria-hidden="true">#</a> 12.5.5、 rdbchecksum 检查完整性</h4><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。推荐yes.</p><h5 id="_12-5-6、dump-rdb的备份、恢复" tabindex="-1"><a class="header-anchor" href="#_12-5-6、dump-rdb的备份、恢复" aria-hidden="true">#</a> 12.5.6、dump.rdb的备份、恢复</h5><p>将rdb文件目录下（/usr/loacl/bin）的*.rdb的文件拷贝到别的地方<br> rdb的恢复：①关闭redis②先把备份的文件拷贝到工作目录下（ cp dump2.rdb dump.rdb）③启动Redis, 备份数据会直接加载</p><h3 id="_12-6、rdb的优势" tabindex="-1"><a class="header-anchor" href="#_12-6、rdb的优势" aria-hidden="true">#</a> 12.6、RDB的优势</h3><p>①适合大规模的数据恢复<br> ②对数据完整性和一致性要求不高更适合使用<br> ③节省磁盘空间<br> ④恢复速度快</p><h3 id="_12-7、rdb的劣势" tabindex="-1"><a class="header-anchor" href="#_12-7、rdb的劣势" aria-hidden="true">#</a> 12.7、RDB的劣势</h3><p>①Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑<br> ②虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能<br> ③在备份周期在一定间隔时间做一次备份，所以<strong>如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改</strong></p><h3 id="_12-8、停止rdb" tabindex="-1"><a class="header-anchor" href="#_12-8、停止rdb" aria-hidden="true">#</a> 12.8、停止RDB</h3><p>动态停止RDB：redis-cli config set save &quot;&quot;#save后给空值，表示禁用保存策略</p><h3 id="_12-9、总结" tabindex="-1"><a class="header-anchor" href="#_12-9、总结" aria-hidden="true">#</a> 12.9、总结</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230220170054543.png" alt="image-20230220170054543" loading="lazy"></p><h2 id="_13、redis持久化之aof" tabindex="-1"><a class="header-anchor" href="#_13、redis持久化之aof" aria-hidden="true">#</a> 13、Redis持久化之AOF</h2><h3 id="_13-1、aof简介" tabindex="-1"><a class="header-anchor" href="#_13-1、aof简介" aria-hidden="true">#</a> 13.1、AOF简介</h3><p>AOF（Append Only File）</p><p>以<strong>日志</strong>的形式来记录每个<strong>写操作</strong>（增量保存），将Redis执行过的<strong>所有写指令</strong>记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h3 id="_13-2、aof持久化流程" tabindex="-1"><a class="header-anchor" href="#_13-2、aof持久化流程" aria-hidden="true">#</a> 13.2、AOF持久化流程</h3><h3 id="_13-3、aof的开启" tabindex="-1"><a class="header-anchor" href="#_13-3、aof的开启" aria-hidden="true">#</a> 13.3、AOF的开启</h3><p>AOF默认不开启，可以在redis.conf中配置文件名称，默认为<strong>appendonly.aof</strong><br> AOF文件的保存路径，同RDB的路径一致。</p><h3 id="_13-4、aof和rdb同时开启-系统默认取aof的数据-数据不会存在丢失" tabindex="-1"><a class="header-anchor" href="#_13-4、aof和rdb同时开启-系统默认取aof的数据-数据不会存在丢失" aria-hidden="true">#</a> 13.4、AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</h3><h3 id="_13-5、aof启动-修复-恢复" tabindex="-1"><a class="header-anchor" href="#_13-5、aof启动-修复-恢复" aria-hidden="true">#</a> 13.5、AOF启动/修复/恢复</h3><p>启动：AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载</p><p>恢复：<br> 正常恢复：<br> 修改默认的appendonly no，改为yes<br> 将有数据aof文件名复制一份保存到对应目录（查看目录：config get dir）<br> 重启redis然后重新加载<br> 异常恢复：<br> 修改默认的n appendonly no，改为yes<br> 如遇到<strong>AOF文件损坏</strong>，通过/usr/local/bin/<strong>redis-check-aof--fix appendonly.aof</strong>进行恢复<br> 备份写坏的AOF文件<br> 恢复：重启redis，然后重新加载</p><h3 id="_13-6、aof同步频率设置" tabindex="-1"><a class="header-anchor" href="#_13-6、aof同步频率设置" aria-hidden="true">#</a> 13.6、AOF同步频率设置</h3><p>在配置文件中：<br> appendfsync always：始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好<br> appendfsync everysec：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。<br> appendfsync no：redis不主动进行同步，把同步时机交给操作系统。</p><h3 id="_13-7、rewrite重写压缩" tabindex="-1"><a class="header-anchor" href="#_13-7、rewrite重写压缩" aria-hidden="true">#</a> 13.7、Rewrite重写压缩</h3><p>1、Rewrite：<br> 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p><p>2、重写原理：<br> AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作</p><p>no-appendfsync-on-rewrite：<br> 如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）<br> 如果 no-appendfsync-on-rewrite=no, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p><p>触发机制，何时重写：<br> Redis会记录上次重写时的AOF大小，默认配置是当*<strong>AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</strong></p><p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写：<br> auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）<br> auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。</p><p>3、重写流程：<br> （1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。<br> （2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。<br> （3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。<br> （4）1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。（5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230220175403234.png" alt="image-20230220175403234" loading="lazy"></p><h3 id="_13-8、aof优势" tabindex="-1"><a class="header-anchor" href="#_13-8、aof优势" aria-hidden="true">#</a> 13.8、AOF优势</h3><p>备份机制更稳健，丢失数据概率更低。<br> 可读的日志文本，通过操作AOF稳健，可以处理误操作。</p><h3 id="_13-9、aof劣势" tabindex="-1"><a class="header-anchor" href="#_13-9、aof劣势" aria-hidden="true">#</a> 13.9、AOF劣势</h3><p>比起RDB占用更多的磁盘空间。<br> 恢复备份速度要慢。<br> 每次读写都同步的话，有一定的性能压力。<br> 存在个别Bug，造成恢复不能。</p><h3 id="_13-10、总结" tabindex="-1"><a class="header-anchor" href="#_13-10、总结" aria-hidden="true">#</a> 13.10、总结</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230220175717896.png" alt="image-20230220175717896" loading="lazy"></p><p><strong>RDB，AOF使用建议</strong><br> 官方推荐两个都启用<br> 如果对数据不敏感，可以选单独用RDB<br> 不建议单独用 AOF，因为可能会出现Bug<br> 如果只是做纯内存缓存，可以都不用</p><h2 id="_14、redis主从复制" tabindex="-1"><a class="header-anchor" href="#_14、redis主从复制" aria-hidden="true">#</a> 14、Redis主从复制</h2><h3 id="_14-1、主从复制的概念" tabindex="-1"><a class="header-anchor" href="#_14-1、主从复制的概念" aria-hidden="true">#</a> 14.1、主从复制的概念</h3><p>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制（主从机制），<strong>Master(主)以写为主，Slave(从)以读为主</strong></p><p>一主多从：主服务器只能有一台，从服务器可以有多台<br> 集群：多个一主多从</p><h3 id="_14-2、主从复制的作用" tabindex="-1"><a class="header-anchor" href="#_14-2、主从复制的作用" aria-hidden="true">#</a> 14.2、主从复制的作用</h3><p>1、读写分离（在不同服务器进行读操作，写操作），性能扩展<br> 2、容灾快速恢复</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230221173858332.png" alt="image-20230221173858332" loading="lazy"></p><h3 id="_14-3、主从复制的实现" tabindex="-1"><a class="header-anchor" href="#_14-3、主从复制的实现" aria-hidden="true">#</a> 14.3、主从复制的实现</h3><p>搭建一主两从的服务器：</p><p>①开启redis<br> ②创建/myredis文件夹<br> ③复制redis.conf配置文件到/myredis文件夹中<br> 开启daemonize yes<br> 关闭AOF，设置：appendpnly no<br> ④配置一主多从（一主两从），创建三个配置文件：<br> redis6379.conf<br> redis6380.conf<br> redis6381.conf</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230221190907287.png" alt="image-20230221190907287" loading="lazy"></p><p>⑤在三个配置文件中写入内容（不同文件修改不同数字)</p><p>Pid文件名，指定端口port，dump.rdb名字</p><div class="language-vim line-numbers-mode" data-ext="vim"><pre class="language-vim"><code><span class="token builtin">include</span> <span class="token operator">/</span>myredis<span class="token operator">/</span>redis<span class="token operator">.</span><span class="token keyword">conf</span>
pidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_6379<span class="token operator">.</span>pid
port <span class="token number">6379</span>
dbfilename dump6379<span class="token operator">.</span>rdb	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑥启动三台redis</p><p>redis-server redis6379.conf</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230221191343334.png" alt="image-20230221191343334" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230221191548.png" alt="" loading="lazy"></p><p>⑦查看三台主机运行情况</p><p>连接不同的redis服务器：<strong>redis-cli -p 6379</strong><br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230221191905.png" alt="" loading="lazy"></p><p><strong>info replication</strong>：打印主从复制的相关信息<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230221192038152.png" alt="image-20230221192038152" loading="lazy"></p><p>在从机上执行命令，开启主从关系：slaveof 主机ip 端口号</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230221192429.png" alt="" loading="lazy"></p><p><strong>在主机上可以做读写（set，get）操作，在从机上只能做读（get）操作</strong></p><h3 id="_14-4、主从复制常用操作" tabindex="-1"><a class="header-anchor" href="#_14-4、主从复制常用操作" aria-hidden="true">#</a> 14.4、主从复制常用操作</h3><h4 id="_14-4-1、一主二从" tabindex="-1"><a class="header-anchor" href="#_14-4-1、一主二从" aria-hidden="true">#</a> 14.4.1、一主二从</h4><p>①当从服务器挂掉后（shutdown），主服务器写入数据。重启从服务器，默认为主服务器，需要创建主从关系：slaveof 主机ip 端口号，成为从服务器后，可以看到主服务器新加的数据。</p><p>②当主服务器挂掉后（shutdown），从服务器不会成为主服务器</p><h4 id="_14-4-2、薪火相传" tabindex="-1"><a class="header-anchor" href="#_14-4-2、薪火相传" aria-hidden="true">#</a> 14.4.2、薪火相传</h4><p>一台从服务器作为另一台从服务器的从服务器，使用slaveof 主机ip 端口号</p><p>与一主二从相同，主服务器挂掉，从服务器不会上位，主服务器开启，仍为主服务器。一旦某个slave宕机，后面的slave都没法备份</p><h4 id="_14-4-3、反客为主" tabindex="-1"><a class="header-anchor" href="#_14-4-3、反客为主" aria-hidden="true">#</a> 14.4.3、反客为主</h4><p>当一个主服务器宕机后，后面的从服务器可以立刻升为主服务器：<strong>slaveof no one</strong>，其后面的从服务器不用做任何修改。</p><h3 id="_14-5、主从复制原理" tabindex="-1"><a class="header-anchor" href="#_14-5、主从复制原理" aria-hidden="true">#</a> 14.5、主从复制原理</h3><p>1、当从连接上主服务器后，从服务器向主服务器发送进行数据同步消息<br> 2、主服务器接到从服务器发送过来同步消息，把从服务器数据进行持久化，把rdb文件发送给从服务器，从服务器进行读取<br> 3、每次主服务器进行写操作后，向从服务器进行数据同步（主服务器发起的）</p><p>两个名词：<br> 全量复制：slave服务器在接收到数据库文件数据后，将其存盘并加载到内存中。<br> 增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</p><h3 id="_14-6、哨兵模式-自动反客为主" tabindex="-1"><a class="header-anchor" href="#_14-6、哨兵模式-自动反客为主" aria-hidden="true">#</a> 14.6、哨兵模式（自动反客为主）</h3><p>哨兵模式为<strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230221201438282.png" alt="image-20230221201438282" loading="lazy"></p><h4 id="_14-6-1、哨兵模式的启用" tabindex="-1"><a class="header-anchor" href="#_14-6-1、哨兵模式的启用" aria-hidden="true">#</a> 14.6.1、哨兵模式的启用</h4><p>①调整为一主二仆模式，6379带着6380、6381</p><p>②自定义的/myredis目录下新建<strong>sentinel.conf</strong>文件，名字固定不能错<br> 配置哨兵，填写内容：<strong>sentinel monitor mymaster 127.0.0.1 6379 1</strong></p><p>sentinel（哨兵）monitor（监控）<br> 其中mymaster为监控对象起的服务器名称， 1为至少有多少个哨兵同意迁移的数量（投票）。</p><p>③启动哨兵</p><p><strong>redis-sentinel sentinel.conf</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230221202821446.png" alt="image-20230221202821446" loading="lazy"></p><p>当主机挂掉，从机选举中产生新的主机<br> (大概10秒左右可以看到哨兵窗口日志，切换了新的主机)<br> 哪个从机会被选举为主机呢？根据优先级别：slave-priority<br> 原主机重启后会变为从机。</p><h4 id="_14-6-2、复制延时" tabindex="-1"><a class="header-anchor" href="#_14-6-2、复制延时" aria-hidden="true">#</a> 14.6.2、复制延时</h4><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h4 id="_14-6-3、故障恢复" tabindex="-1"><a class="header-anchor" href="#_14-6-3、故障恢复" aria-hidden="true">#</a> 14.6.3、故障恢复</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230221203932529.png" alt="image-20230221203932529" loading="lazy"></p><p><strong>优先级</strong>在redis.conf中默认：<strong>replica-priority 100</strong>，值越小优先级越高<br><strong>偏移量</strong>是指获得原主机数据最全的<br> 每个redis实例启动后都会随机生成一个40位的<strong>runid</strong></p><h4 id="_14-6-4、在java中进行主从复制" tabindex="-1"><a class="header-anchor" href="#_14-6-4、在java中进行主从复制" aria-hidden="true">#</a> 14.6.4、在java中进行主从复制</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JedisSentinelPool</span> jedisSentinelPool<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token class-name">Jedis</span> <span class="token function">getJedisFromSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>jedisSentinelPool<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sentinelSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sentinelSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.11.103:26379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IP，端口号</span>

        <span class="token class-name">JedisPoolConfig</span> jedisPoolConfig <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最大可用连接数</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最大闲置连接数</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最小闲置连接数</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setBlockWhenExhausted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//连接耗尽是否等待</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待时间</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取连接的时候进行一下测试 ping pong</span>

        jedisSentinelPool<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JedisSentinelPool</span><span class="token punctuation">(</span><span class="token string">&quot;mymaster&quot;</span><span class="token punctuation">,</span>sentinelSet<span class="token punctuation">,</span>jedisPoolConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> jedisSentinelPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> jedisSentinelPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15、redis集群" tabindex="-1"><a class="header-anchor" href="#_15、redis集群" aria-hidden="true">#</a> 15、Redis集群</h2><h3 id="_15-1、问题引出" tabindex="-1"><a class="header-anchor" href="#_15-1、问题引出" aria-hidden="true">#</a> 15.1、问题引出</h3><p>Redis容量不够，redis如何进行扩容<br> 并发写操作难，redis如何分摊<br> 主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息</p><p>之前通过<strong>代理主机</strong>来解决，但是redis3.0中提供了解决方案。就是<strong>无中心化集群</strong>配置。</p><p><strong>Redis集群的好处：实现扩容、分摊压力、无中心配置相对简单</strong></p><p>代理主机：8台服务器<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222125830.png" alt="" loading="lazy"></p><p><strong>无中心化集群：6台服务器</strong><br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222130125.png" alt="" loading="lazy"></p><h3 id="_15-2、redis集群的概念" tabindex="-1"><a class="header-anchor" href="#_15-2、redis集群的概念" aria-hidden="true">#</a> 15.2、Redis集群的概念</h3><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。<br> Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><h3 id="_15-3、redis集群的实践" tabindex="-1"><a class="header-anchor" href="#_15-3、redis集群的实践" aria-hidden="true">#</a> 15.3、redis集群的实践</h3><h4 id="_15-3-1、删除所有rdb-aof文件" tabindex="-1"><a class="header-anchor" href="#_15-3-1、删除所有rdb-aof文件" aria-hidden="true">#</a> 15.3.1、删除所有rdb，aof文件</h4><p>cd /myredis<br> rm -rf dump63*</p><h4 id="_15-3-2、制作六个实例-修改配置" tabindex="-1"><a class="header-anchor" href="#_15-3-2、制作六个实例-修改配置" aria-hidden="true">#</a> 15.3.2、制作六个实例，修改配置</h4><p>创建6个实例：6379,6380,6381,6389,6390,6391</p><p><strong>配置基本信息：</strong><br> 开启daemonize yes、pidfile 文件名、指定端口、Dump.rdb 名字、Dump.rdb名字、Appendonly 关掉或者换名字<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222131536.png" alt="" loading="lazy"></p><p><strong>配置修改：</strong><br> cluster-enabled yes 打开集群模式<br> cluster-config-file nodes-6379.conf 设定节点配置文件名<br> cluster-node-timeout 15000 设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222131818.png" alt="" loading="lazy"></p><p>修改这六个配置文件<br> vi编辑器的替换操作：<em>:%s/6379/6380</em></p><h4 id="_15-3-3、启动6个redis服务" tabindex="-1"><a class="header-anchor" href="#_15-3-3、启动6个redis服务" aria-hidden="true">#</a> 15.3.3、启动6个redis服务</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222132601.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222132631.png" alt="" loading="lazy"></p><h4 id="_15-3-4、将六个节点合成一个集群" tabindex="-1"><a class="header-anchor" href="#_15-3-4、将六个节点合成一个集群" aria-hidden="true">#</a> 15.3.4、将六个节点合成一个集群</h4><p>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常</p><p>进入redis一开始安装的src（cd /opt/redis-6.2.1）<br> cd src</p><p>集成只能在src目录下进行</p><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>redis-cli --cluster create --cluster-replicas 1 192.168.80.130:6379 192.168.80.130:6380 192.168.80.130:6381 192.168.80.130:6389 192.168.80.130:6390 192.168.80.130:6391
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处不要用127.0.0.1， 请用真实IP地址<br> --replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222133458.png" alt="" loading="lazy"></p><h4 id="_15-3-5、集群登录" tabindex="-1"><a class="header-anchor" href="#_15-3-5、集群登录" aria-hidden="true">#</a> 15.3.5、集群登录</h4><p>普通登录方式：<br> redis-cli -p 端口号：可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。</p><p><strong>集群方式登录：redis-cli -c -p 集群中任意一台端口号</strong><br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222133832.png" alt="" loading="lazy"></p><h4 id="_15-3-6、查看集群信息" tabindex="-1"><a class="header-anchor" href="#_15-3-6、查看集群信息" aria-hidden="true">#</a> 15.3.6、查看集群信息</h4><p>通过 <strong>cluster nodes</strong> 命令查看集群信息<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222134148.png" alt="" loading="lazy"></p><h3 id="_15-4、redis-cluster如何分配这六个节点" tabindex="-1"><a class="header-anchor" href="#_15-4、redis-cluster如何分配这六个节点" aria-hidden="true">#</a> 15.4、redis cluster如何分配这六个节点</h3><p>一个集群至少要有三个主节点。</p><p>选项 --cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p><p><strong>分配原则</strong>尽量保证每个<strong>主数据库运行在不同的IP</strong>地址，每个<strong>从库和主库不在一个IP地址上</strong>。</p><h3 id="_15-5、slots" tabindex="-1"><a class="header-anchor" href="#_15-5、slots" aria-hidden="true">#</a> 15.5、slots</h3><p>一个 <strong>Redis 集群</strong>包含 <strong>16384 个插槽</strong>（hash slot），插槽平均分配， 数据库中的每个键都属于这 16384 个插槽的其中一个</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222135222.png" alt="" loading="lazy"></p><p>集群使用公式 CRC16(key) % 16384 来<strong>计算键 key 属于哪个槽</strong>， 其中CRC16(key) 语句用于计算键 key 的 CRC16 校验和</p><p><strong>集群中的每个节点负责处理一部分插槽</strong>。<br> 举个例子， 如果一个集群可以有主节点， 其中：<br> 节点 A 负责处理 0 号至 5460 号插槽。<br> 节点 B 负责处理 5461 号至 10922 号插槽。<br> 节点 C 负责处理 10923 号至 16383 号插槽。</p><h3 id="_15-6、在集群中录入值" tabindex="-1"><a class="header-anchor" href="#_15-6、在集群中录入值" aria-hidden="true">#</a> 15.6、在集群中录入值</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222135735.png" alt="" loading="lazy"></p><p>不在一个slot下的键值，是<strong>不能使用mget,mset等多键操作</strong>。</p><p>可以通过{}来定义组的概念，从而使key中**{}内相同内容的键值对<strong>放到</strong>一个slot**中去<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222140513.png" alt="" loading="lazy"></p><h3 id="_15-7、查询集群中的值" tabindex="-1"><a class="header-anchor" href="#_15-7、查询集群中的值" aria-hidden="true">#</a> 15.7、查询集群中的值</h3><p>cluster keyslot k1：根据k1查询slot值<br> cluster countkeysinslot 4847：查询插槽内key的个数（不同端口只能看<strong>自己插槽中的值</strong>）<br> luster getkeysinslot 4847 5：返回对应插槽（4847）中对应数目（5）的key</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230222141328.png" alt="" loading="lazy"></p><h3 id="_15-8、故障恢复" tabindex="-1"><a class="header-anchor" href="#_15-8、故障恢复" aria-hidden="true">#</a> 15.8、故障恢复</h3><p>如果主节点下线，从节点自动升为主节点，(15秒超时,15秒内重启好还是主机，否则为从机）<br> 主节点挂掉后重新上线，会变成从机<br> 如果某一段插槽的主从都挂掉：<br><em>redis.conf中的参数 cluster-require-full-coverage</em><br> 如果cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉<br> 如果cluster-require-full-coverage 为no ，那么，<strong>该插槽</strong>数据全都不能使用，也无法存储，<strong>其他插槽能够提供服务</strong></p><h3 id="_15-9、集群的jedis开发" tabindex="-1"><a class="header-anchor" href="#_15-9、集群的jedis开发" aria-hidden="true">#</a> 15.9、集群的Jedis开发</h3><p>关闭Linux防火墙<br><strong>systemctl stop firewalld.service</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">redisClusterDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//创建对象</span>
    <span class="token class-name">HostAndPort</span> hostAndPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.80.130&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JedisCluster</span> jedisCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisCluster</span><span class="token punctuation">(</span>hostAndPort<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//进行操作</span>
    jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;b1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> value<span class="token operator">=</span> jedisCluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;b1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;value:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    jedisCluster<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-10、redis-集群的优劣" tabindex="-1"><a class="header-anchor" href="#_15-10、redis-集群的优劣" aria-hidden="true">#</a> 15.10、Redis 集群的优劣</h3><p>redis集群的好处：<br><strong>实现扩容、分摊压力、无中心配置相对简单</strong></p><p>redis集群的不足：<br> 多键操作是不被支持的<br> 多键的Redis事务是不被支持的。lua脚本不被支持<br> 由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p><h2 id="_16、应用问题解决" tabindex="-1"><a class="header-anchor" href="#_16、应用问题解决" aria-hidden="true">#</a> 16、应用问题解决</h2><h3 id="_16-1、缓存穿透" tabindex="-1"><a class="header-anchor" href="#_16-1、缓存穿透" aria-hidden="true">#</a> 16.1、缓存穿透</h3><h4 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述" aria-hidden="true">#</a> 问题描述</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230222145050453.png" alt="image-20230222145050453" loading="lazy"></p><p>现象：<br> 1、应用服务器压力变大<br> 2、redis命中率降低<br> 3、一直查询数据库</p><p>原因：<br> 1、redis查询不到数据库<br> 2、出现很非正常url访问（如rest风格频繁访问不存在资源，而在缓存中找不到，所以一直访问数据库，失去了缓存的意义）</p><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h4><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据<strong>每次请求都要到存储层去查询</strong>，失去了缓存的意义</p><p><em>解决方案：</em></p><p><strong>（1）</strong> <strong>对空值缓存：</strong><br> 如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟（应急方案）</p><p><strong>（2）</strong> <strong>设置可访问的名单（白名单）：</strong><br> 使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。（效率不高）</p><p><strong>（3）</strong> <strong>采用布隆过滤器</strong>：<br> 与方案二类似<br> (布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。<br> 布隆过滤器可以用于检索一个元素是否在一个集合中。它的<strong>优点是空间效率和查询时间都远远超过一般的算法</strong>，<strong>缺点是有一定的误识别率和删除困难</strong>。)</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p><p><strong>（4）</strong> <strong>进行实时监控：</strong><br> 当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p><h3 id="_16-2、缓存击穿" tabindex="-1"><a class="header-anchor" href="#_16-2、缓存击穿" aria-hidden="true">#</a> 16.2、缓存击穿</h3><h4 id="问题描述-1" tabindex="-1"><a class="header-anchor" href="#问题描述-1" aria-hidden="true">#</a> 问题描述</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230222150301413.png" alt="image-20230222150301413" loading="lazy"></p><p>现象：<br> 1、数据库访问压力瞬时增大<br> 2、redis里面没有出现大量ket过期<br> 3、redis正常运行</p><p>原因：<br> 1、redis某个key过期了，大量访问都要使用这个key</p><h4 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1" aria-hidden="true">#</a> 解决方案</h4><p>key可能会在某些时间点被超高并发地访问，是一种<strong>非常“热点”的数据</strong>。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p><p>解决方案：</p><p><strong>（1）预先设置热门数据</strong>：<br> 在redis高峰访问之前，把一些热门数据提前存入到redis里面，<strong>加大这些热门数据key的时长</strong></p><p><strong>（2）实时调整</strong>：<br> 现场<strong>监控哪些数据热门</strong>，实时<strong>调整key的过期时长</strong></p><p><strong>（3）使用锁：</strong><br> ① 就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。<br> ② 先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key<br> ③ 当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；<br> ④ 当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</p><p><strong>缺点：效率低</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230222151053788.png" alt="image-20230222151053788" loading="lazy"></p><h3 id="_16-3、缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_16-3、缓存雪崩" aria-hidden="true">#</a> 16.3、缓存雪崩</h3><h4 id="问题描述-2" tabindex="-1"><a class="header-anchor" href="#问题描述-2" aria-hidden="true">#</a> 问题描述</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230222151421251.png" alt="image-20230222151421251" loading="lazy"></p><p>现象：<br> 1、数据库压力变大，导致服务器崩溃</p><p>原因：<br> 1、在极少时间段内，查询大量key的集中过期</p><h4 id="解决方案-2" tabindex="-1"><a class="header-anchor" href="#解决方案-2" aria-hidden="true">#</a> 解决方案</h4><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p><p>解决方案：</p><p><strong>（1）</strong> <strong>构建多级缓存架构：</strong><br> nginx缓存 + redis缓存 +其他缓存（ehcache等）（构建复杂）</p><p><strong>（2）</strong> <strong>使用锁或队列：</strong><br> 用<strong>加锁</strong>或者队列的方式保证来保证不会有<strong>大量的线程对数据库一次性进行读写</strong>，从而避免失效时大量的并发请求落到底层存储系统上。<strong>效率极低，不适用高并发情况</strong></p><p><strong>（3）</strong> <strong>设置过期标志更新缓存：</strong><br> 记录缓存数据是否过期（设置提前量），<strong>如果过期</strong>会触发通知另外的线程在后台去<strong>更新实际key的缓存</strong>。</p><p><strong>（4）</strong> <strong>将缓存失效时间分散开：</strong><br> 比如我们可以<strong>在原有的失效时间基础上增加一个随机值</strong>，比如1-5分钟随机，这样每一个缓存的<strong>过期时间的重复率就会降低</strong>，就很难引发集体失效的事件。</p><h3 id="_16-4、分布式锁" tabindex="-1"><a class="header-anchor" href="#_16-4、分布式锁" aria-hidden="true">#</a> 16.4、分布式锁</h3><h4 id="_16-4-1、问题描述" tabindex="-1"><a class="header-anchor" href="#_16-4-1、问题描述" aria-hidden="true">#</a> 16.4.1、问题描述</h4><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分<strong>布式系统多线程、多进程</strong>并且分布在不同机器上，这将使原<strong>单机</strong>部署情况下的<strong>并发控制锁策略失效</strong>，单纯的<strong>Java API并不能提供分布式锁的能力</strong>。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p><strong>分布式锁：加一把锁，对整个集群都有效</strong></p><p>分布式锁主流的实现方案：<br> 1、基于数据库实现分布式锁<br> 2、基于缓存（Redis等）<br> 3、基于Zookeeper</p><p>每一种分布式锁解决方案都有各自的优缺点：<br> 性能：redis最高<br> 可靠性：zookeeper最高</p><p>这里，我们就<strong>基于redis实现分布式锁</strong></p><h4 id="_16-4-2、使用redis实现分布式锁" tabindex="-1"><a class="header-anchor" href="#_16-4-2、使用redis实现分布式锁" aria-hidden="true">#</a> 16.4.2、使用redis实现分布式锁</h4><p>使用<strong>setnx上锁</strong>，使用<strong>del释放锁</strong><br> 不设置过期时间，锁会一直没有释放，因此要<strong>设置key的过期时间</strong>，自动释放<br> 在上锁之后，突然出现异常，无法设置过期时间。该<strong>原子操作没有完成</strong>。因此，要上锁的同时设置过期时间</p><p>redis命令：<br> setnx key value：上锁（只有当key不存在时才设置value）<br> del key： 释放锁， 删除指定的key数据<br> pire key 10：为给定的key设置过期时间10秒</p><p><em><strong>set key value nx ex time：上锁的同时设置过期时间</strong></em></p><p>多个客户端（index）获取锁的情况：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230223085248497.png" alt="image-20230223085248497" loading="lazy"></p><h4 id="_16-4-3、jedis演示" tabindex="-1"><a class="header-anchor" href="#_16-4-3、jedis演示" aria-hidden="true">#</a> 16.4.3、Jedis演示</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;testLock&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//1获取锁，setnx，设置过期时间</span>
    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2获取锁成功、查询num的值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.1判断num为空return</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//2.2有值就转成成int</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.3把redis的num加1</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">,</span> <span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.4释放锁，del</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">//3获取锁失败、每隔0.1秒再获取</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,261),h=s("br",null,null,-1),b={href:"http://192.168.137.1:8080/test/testLock",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>问题：setnx刚好获取到锁，业务逻辑出现异常，导致锁无法释放<br> 解决：<strong>设置过期时间，自动释放锁</strong>。</p><h4 id="_16-4-4、优化之uuid防误删" tabindex="-1"><a class="header-anchor" href="#_16-4-4、优化之uuid防误删" aria-hidden="true">#</a> 16.4.4、优化之UUID防误删</h4><p>问题引入：<br> 有三个操作，a操作拿到锁后未进行操作，导致锁10s过期，被操作b上锁，a的操作未进行</p><p>解决方案：引入uuid</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230223134600.png" alt="" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;testLock&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//1获取锁，setnx，设置过期时间</span>
    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2获取锁成功、查询num的值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.1判断num为空return</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//2.2有值就转成成int</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.3把redis的num加1</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">,</span> <span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.4释放锁，del</span>
        <span class="token comment">//比较uuid值是否一样</span>
        <span class="token class-name">String</span> lockUuid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lockUuid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">//3获取锁失败、每隔0.1秒再获取</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_16-4-5、优化之lua脚本保证删除的原子性" tabindex="-1"><a class="header-anchor" href="#_16-4-5、优化之lua脚本保证删除的原子性" aria-hidden="true">#</a> 16.4.5、优化之LUA脚本保证删除的原子性</h4><p>问题引入：<br> a，b两个操作，当a操作完后，判断uuid相同，而锁正好过期，b上锁，导致删除了b的锁</p><p>解决方案：lua脚本保证原子性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;testLockLua&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1 声明一个uuid ,将做为一个value 放入我们的key所对应的值中</span>
    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span>
    <span class="token class-name">String</span> skuId <span class="token operator">=</span> <span class="token string">&quot;25&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 访问skuId 为25号的商品 100008348542</span>
    <span class="token class-name">String</span> locKey <span class="token operator">=</span> <span class="token string">&quot;lock:&quot;</span> <span class="token operator">+</span> skuId<span class="token punctuation">;</span> <span class="token comment">// 锁住的是每个商品的数据</span>

    <span class="token comment">// 3 获取锁</span>
    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>locKey<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 第一种： lock 与过期时间中间不写任何的代码。</span>
    <span class="token comment">// redisTemplate.expire(&quot;lock&quot;,10, TimeUnit.SECONDS);//设置过期时间</span>
    <span class="token comment">// 如果true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行的业务逻辑开始</span>
        <span class="token comment">// 获取缓存中的num 数据</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果是空直接返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 不是空 如果说在这出现了异常！ 那么delete 就删除失败！ 也就是说锁永远存在！</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使num 每次+1 放入缓存</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*使用lua脚本来锁*/</span>
        <span class="token comment">// 定义lua 脚本</span>
        <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用redis执行lua执行</span>
        <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置一下返回值类型 为Long</span>
        <span class="token comment">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span>
        <span class="token comment">// 那么返回字符串与0 会有发生错误。</span>
        redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>locKey<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 其他线程等待</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 睡眠</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 睡醒了之后，调用方法。</span>
            <span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_16-4-6、总结" tabindex="-1"><a class="header-anchor" href="#_16-4-6、总结" aria-hidden="true">#</a> 16.4.6、总结</h4><p>1、加锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 从redis中获取锁</span>
<span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用lua释放锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2. 释放锁 del</span>
<span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 设置lua脚本返回的数据类型</span>
<span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置lua脚本返回类型为Long</span>
redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、重试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p><p>①互斥性。在任意时刻，<strong>只有一个客户端能持有锁</strong><br> ②不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。（设置<strong>过期时间</strong>）<br> ③解铃还须系铃人。<strong>加锁和解锁必须是同一个客户端</strong>，客户端自己不能把别人加的锁给解了<br> ④加锁和解锁必须具有<strong>原子性</strong></p>`,19);function f(y,_){const t=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("redis常见数据类型操作命令"),s("a",r,[n("http://www.redis.cn/commands.html"),e(t)])]),d,s("p",null,[n("ab -n 1000 -c 100 -p ~/postfile -T application/x-www-form-urlencoded "),s("a",k,[n("http://192.168.137.221:8080/seckill"),e(t)]),m,n(" 表示一共有一千个请求，有100个请求是并发的")]),g,s("p",null,[n("重启，服务集群，通过网关压力测试，查看num值"),h,n(" ab -n 1000 -c 100 "),s("a",b,[n("http://192.168.137.1:8080/test/testLock"),e(t)])]),v])}const q=p(l,[["render",f],["__file","Redis.html.vue"]]);export{q as default};
