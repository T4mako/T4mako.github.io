const n=JSON.parse('{"key":"v-625a09d6","path":"/code/java/Java%20%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/14%E3%80%81%E6%B3%9B%E5%9E%8B.html","title":"14、泛型","lang":"zh-CN","frontmatter":{"title":"14、泛型","icon":"java","order":14,"date":"2022-07-15T00:00:00.000Z","category":["java"],"tag":["基础语法","java"],"description":"泛型 1、泛型的使用 jdk5.0新增的特性，在集合中使用泛型 public class GenericTest { //集合使用泛型之前的情况 @Test public void test(){ ArrayList list = new ArrayList(); //存放学生成绩 list.add(78); list.add(76); list.add(77); list.add(86); //问题一：类型不安全 //list.add(\\"aaa\\"); for(Object obj : list){ //问题二：强转时出现ClassCastException int stuScore = (Integer) obj; System.out.println(stuScore); } } @Test public void test2(){ ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(78); list.add(90); list.add(74); list.add(69); //编译时就会进行类型检查，保证数据安全 //list.add(\\"aaa\\"); for(Integer score : list){ //避免了强转操作 int stuScore = score; } Iterator&lt;Integer&gt; iterator = list.iterator(); while (iterator.hasNext()){ System.out.println(iterator.next()); } } @Test public void test3(){ Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;(); map.put(\\"AAA\\",80); map.put(\\"BBB\\",85); map.put(\\"CCC\\",75); //泛型的嵌套 //Entry是Map的一个内部接口，所以用Map.Entry Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entry = map.entrySet(); Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entry.iterator(); while (iterator.hasNext()){ Map.Entry&lt;String, Integer&gt; e = iterator.next(); String key = e.getKey(); Integer value = e.getValue(); System.out.println(key+\\"---\\"+value); } } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/code/java/Java%20%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/14%E3%80%81%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"14、泛型"}],["meta",{"property":"og:description","content":"泛型 1、泛型的使用 jdk5.0新增的特性，在集合中使用泛型 public class GenericTest { //集合使用泛型之前的情况 @Test public void test(){ ArrayList list = new ArrayList(); //存放学生成绩 list.add(78); list.add(76); list.add(77); list.add(86); //问题一：类型不安全 //list.add(\\"aaa\\"); for(Object obj : list){ //问题二：强转时出现ClassCastException int stuScore = (Integer) obj; System.out.println(stuScore); } } @Test public void test2(){ ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(78); list.add(90); list.add(74); list.add(69); //编译时就会进行类型检查，保证数据安全 //list.add(\\"aaa\\"); for(Integer score : list){ //避免了强转操作 int stuScore = score; } Iterator&lt;Integer&gt; iterator = list.iterator(); while (iterator.hasNext()){ System.out.println(iterator.next()); } } @Test public void test3(){ Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;(); map.put(\\"AAA\\",80); map.put(\\"BBB\\",85); map.put(\\"CCC\\",75); //泛型的嵌套 //Entry是Map的一个内部接口，所以用Map.Entry Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entry = map.entrySet(); Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entry.iterator(); while (iterator.hasNext()){ Map.Entry&lt;String, Integer&gt; e = iterator.next(); String key = e.getKey(); Integer value = e.getValue(); System.out.println(key+\\"---\\"+value); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-24T12:06:56.000Z"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"基础语法"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2022-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-24T12:06:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"14、泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-24T12:06:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"1、泛型的使用","slug":"_1、泛型的使用","link":"#_1、泛型的使用","children":[]},{"level":3,"title":"2、自定义泛型类","slug":"_2、自定义泛型类","link":"#_2、自定义泛型类","children":[]},{"level":3,"title":"3、泛型在继承方面的体现","slug":"_3、泛型在继承方面的体现","link":"#_3、泛型在继承方面的体现","children":[]},{"level":3,"title":"4、通配符的使用","slug":"_4、通配符的使用","link":"#_4、通配符的使用","children":[]}]}],"git":{"createdTime":1690200416000,"updatedTime":1690200416000,"contributors":[{"name":"T4mako","email":"1536954632@qq.com","commits":1}]},"readingTime":{"minutes":6.19,"words":1858},"filePathRelative":"code/java/Java 基础/语法基础/14、泛型.md","localizedDate":"2022年7月15日","excerpt":"<h2> 泛型</h2>\\n<h3> 1、泛型的使用</h3>\\n<p>jdk5.0新增的特性，在集合中使用泛型</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">GenericTest</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//集合使用泛型之前的情况</span>\\n    <span class=\\"token annotation punctuation\\">@Test</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">ArrayList</span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//存放学生成绩</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">78</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">76</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">77</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">86</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//问题一：类型不安全</span>\\n        <span class=\\"token comment\\">//list.add(\\"aaa\\");</span>\\n        <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> obj <span class=\\"token operator\\">:</span> list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">//问题二：强转时出现ClassCastException</span>\\n            <span class=\\"token keyword\\">int</span> stuScore <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">)</span> obj<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>stuScore<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token annotation punctuation\\">@Test</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">78</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">90</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">74</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">69</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//编译时就会进行类型检查，保证数据安全</span>\\n        <span class=\\"token comment\\">//list.add(\\"aaa\\");</span>\\n        <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Integer</span> score <span class=\\"token operator\\">:</span> list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">//避免了强转操作</span>\\n            <span class=\\"token keyword\\">int</span> stuScore <span class=\\"token operator\\">=</span> score<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token class-name\\">Iterator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> iterator <span class=\\"token operator\\">=</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">iterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasNext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token annotation punctuation\\">@Test</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test3</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> map <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"AAA\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">80</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"BBB\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">85</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"CCC\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">75</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//泛型的嵌套</span>\\n        <span class=\\"token comment\\">//Entry是Map的一个内部接口，所以用Map.Entry</span>\\n        <span class=\\"token class-name\\">Set</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> entry <span class=\\"token operator\\">=</span> map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">entrySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Iterator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> iterator <span class=\\"token operator\\">=</span> entry<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">iterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasNext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> e <span class=\\"token operator\\">=</span> iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> key <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">Integer</span> value <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"---\\"</span><span class=\\"token operator\\">+</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
