import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as n,d as s,e as t,f as e}from"./app-184a2d19.js";const l={},u=e(`<h2 id="_1、webapis介绍" tabindex="-1"><a class="header-anchor" href="#_1、webapis介绍" aria-hidden="true">#</a> 1、WebAPIs介绍</h2><p>严格意义上讲，我们在 JavaScript 阶段学习的知识绝大部分属于 ECMAScript 的知识体系，ECMAScript 简称 ES 它提供了一套语言标准规范，如变量、数据类型、表达式、语句、函数等语法规则都是由 ECMAScript 规定的。浏览器将 ECMAScript 大部分的规范加以实现，并且在此基础上又扩展一些实用的功能，这些被扩展出来的内容我们称为 Web APIs。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/guide.png" alt="" loading="lazy"></p><p>ECMAScript 运行在浏览器中然后再结合 Web APIs 才是真正的 JavaScript，Web APIs 的核心是 DOM 和 BOM。</p><h2 id="_2、dom概念" tabindex="-1"><a class="header-anchor" href="#_2、dom概念" aria-hidden="true">#</a> 2、DOM概念</h2><p>**DOM（Document Object Model）**是将整个 HTML 文档的每一个标签元素视为一个对象，这个对象下包含了许多的属性和方法，通过操作这些属性或者调用这些方法实现对 HTML 的动态更新，为实现网页特效以及用户交互提供技术支撑。<br> 简言之 DOM 是用来动态修改 HTML 的，其目的是开发网页特效及用户交互。</p><h3 id="_2-1、dom树" tabindex="-1"><a class="header-anchor" href="#_2-1、dom树" aria-hidden="true">#</a> 2.1、DOM树</h3><p>将 HTML 文档以树状结构直观的表现出来，我们称之为文档树或 DOM 树，<strong>文档树直观的体现了标签与标签之间的关系。</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/web-api.jpg" alt="" loading="lazy"></p><h3 id="_2-2、dom-对象" tabindex="-1"><a class="header-anchor" href="#_2-2、dom-对象" aria-hidden="true">#</a> 2.2、DOM 对象</h3><p>DOM对象：浏览器根据html标签生成的JS对象<br> 所有的标签属性都可以在这个对象上面找到<br> 修改这个对象的属性会自动映射到标签身上</p><p>DOM的核心思想：把网页内容当做对象来处理</p><h3 id="_2-3、dom-节点" tabindex="-1"><a class="header-anchor" href="#_2-3、dom-节点" aria-hidden="true">#</a> 2.3、DOM 节点</h3><p><strong>每一个节点都是一个 DOM 对象</strong>，主要分为元素节点、属性节点、文本节点等。</p><ol><li>【元素节点】其实就是 HTML 标签，如上图中 <code>head</code>、<code>div</code>、<code>body</code> 等都属于元素节点。</li><li>【属性节点】是指 HTML 标签中的属性，如上图中 <code>a</code> 标签的 <code>href</code> 属性、<code>div</code> 标签的 <code>class</code> 属性。</li><li>【文本节点】是指 HTML 标签的文字内容，如 <code>title</code> 标签中的文字。</li><li>【根节点】特指 <code>html</code> 标签。</li><li>其它...</li></ol><h3 id="_2-4、document对象" tabindex="-1"><a class="header-anchor" href="#_2-4、document对象" aria-hidden="true">#</a> 2.4、document对象</h3><p><strong><code>document</code><strong>对象 DOM里提供的一个对象，它提供的</strong>属性和方法</strong>都是用来<strong>访问和操作网页内容</strong>的</p><p>网页所有内容都在document内容里</p><h2 id="_3、dom-对象的获取" tabindex="-1"><a class="header-anchor" href="#_3、dom-对象的获取" aria-hidden="true">#</a> 3、DOM 对象的获取</h2><h3 id="_3-1、根据css选择器获取" tabindex="-1"><a class="header-anchor" href="#_3-1、根据css选择器获取" aria-hidden="true">#</a> 3.1、根据CSS选择器获取</h3><h4 id="_3-1-1、queryselector" tabindex="-1"><a class="header-anchor" href="#_3-1-1、queryselector" aria-hidden="true">#</a> 3.1.1、querySelector</h4><p>querySelector 选择匹配的<strong>第一个</strong>元素</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;css选择器&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：包含一个或多个有效的CSS选择器的<strong>字符串</strong></p><p>返回值：一个HTMLElement<strong>对象</strong></p><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> box2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> box3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#nav&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-2、queryselectorall" tabindex="-1"><a class="header-anchor" href="#_3-1-2、queryselectorall" aria-hidden="true">#</a> 3.1.2、querySelectorAll</h4><p>querySelectorAll 满足条件的元素集合 返回 <strong>伪数组</strong></p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;css选择器&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：包含一个或多个有效的CSS选择器<strong>字符串</strong></p><p>返回值：<strong>NodeList 对象集合</strong> 的 <strong>伪数组</strong><br> 伪数组：有长度和索引，没有pop()，push()等数组方法<br> 要得到里面的每一个对象，需要for遍历</p><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;ul li&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2、其他方法-了解" tabindex="-1"><a class="header-anchor" href="#_3-2、其他方法-了解" aria-hidden="true">#</a> 3.2、其他方法（了解）</h3><p>getElementById<br> getElementsByTagName<br> getElementsByClassName</p><h2 id="_4、dom-操作元素内容" tabindex="-1"><a class="header-anchor" href="#_4、dom-操作元素内容" aria-hidden="true">#</a> 4、DOM 操作元素内容</h2><h3 id="_4-1、innertext" tabindex="-1"><a class="header-anchor" href="#_4-1、innertext" aria-hidden="true">#</a> 4.1、innerText</h3><p><code>innerText</code> 将文本内容添加、更新到任意标签位置，<strong>文本中包含的标签不会被解析。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> intro <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.intro&#39;</span><span class="token punctuation">)</span>
intro<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;嗨~ 我叫李雷！&#39;</span>
intro<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;&lt;h4&gt;嗨~ 我叫李雷！&lt;/h4&gt;&#39;</span> <span class="token comment">//标签不会被解析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、innerhtml" tabindex="-1"><a class="header-anchor" href="#_4-2、innerhtml" aria-hidden="true">#</a> 4.2、innerHTML</h3><p><code>innerHTML</code> 将文本内容添加、更新到任意标签位置，<strong>文本中包含的标签会被解析。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> intro <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.intro&#39;</span><span class="token punctuation">)</span>
intro<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;嗨~ 我叫韩梅梅！&#39;</span>
intro<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;h4&gt;嗨~ 我叫韩梅梅！&lt;/h4&gt;&#39;</span> <span class="token comment">//标签会被解析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果文本内容中包含 <code>html</code> 标签时推荐使用 <code>innerHTML</code>，否则建议使用 <code>innerText</code> 属性。</p><h2 id="_5、dom-操作元素属性" tabindex="-1"><a class="header-anchor" href="#_5、dom-操作元素属性" aria-hidden="true">#</a> 5、DOM 操作元素属性</h2><h3 id="_5-1、常用属性" tabindex="-1"><a class="header-anchor" href="#_5-1、常用属性" aria-hidden="true">#</a> 5.1、常用属性</h3><p>通过属性名修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 获取 img 对应的 DOM 元素</span>
<span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.img&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 修改属性</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;./A.jpg&#39;</span>
img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;500px&#39;</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>alt <span class="token operator">=</span> <span class="token string">&#39;图片不见了...&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2、css样式" tabindex="-1"><a class="header-anchor" href="#_5-2、css样式" aria-hidden="true">#</a> 5.2、CSS样式</h3><h4 id="_5-2-1、通过style修改css" tabindex="-1"><a class="header-anchor" href="#_5-2-1、通过style修改css" aria-hidden="true">#</a> 5.2.1、通过style修改CSS</h4><p>通过修改行内样式 <strong>style</strong> 属性，实现对样式的动态修改。<br> 通过元素节点获得的 <strong>style</strong> 属性本身的数据类型也是对象，如 <strong>box.style.color</strong>、<strong>box.style.width</strong><br> 如要遇到 css 属性中包含字符 <code>-</code> 时，要将 <code>-</code> 去掉并将其后面的字母<strong>改成大写</strong>，如 <code>background-color</code> 要写成 <code>box.style.backgroundColor</code></p><p>通过这种方式生成的是<strong>行内样式</strong>，优先级高</p><p>该方式缺点：修改多个样式比较复杂</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;300px&#39;</span> <span class="token comment">//注意是字符串</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&#39;hotpink&#39;</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&#39;skyblue&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-2、通过类名操作css" tabindex="-1"><a class="header-anchor" href="#_5-2-2、通过类名操作css" aria-hidden="true">#</a> 5.2.2、通过类名操作CSS</h4><p>如果修改的样式比较多，可以借助css类名的形式</p><p>缺点：多个类名操作麻烦</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>元素<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;css类名&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：<br> 1、又去class是关键字，所以使用className去代替<br> 2、className是使用 <strong>新值换旧值</strong> ，如果添加一个类，之前的类会作废，如果要保留，需要添加之前的类名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取元素</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//添加类名</span>
div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;box&#39;</span> <span class="token comment">//css类名为box，将.box中的属性给div</span>
div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;nav box&#39;</span> <span class="token comment">//保留之前的类名，新增box</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-3、通过classlist操作类控制css" tabindex="-1"><a class="header-anchor" href="#_5-2-3、通过classlist操作类控制css" aria-hidden="true">#</a> 5.2.3、通过classList操作类控制CSS</h4><p>为了解决className容易覆盖之前的类名，可以通过<strong>classList</strong>方式<strong>追加</strong>和<strong>删除</strong>类名</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 追加一个类</span>
元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;类名&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 删除一个类</span>
元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;类名&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 切换一个类</span>
元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;类名&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1、获取元素</span>
<span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//2.1、追加类（add()，类名不加点，并且是字符串）</span>
box<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;nav&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//2.2、删除类 remove()</span>
box<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//2.3、切换类 toggle() 有就删，没有就加上</span>
box<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3、表单元素属性" tabindex="-1"><a class="header-anchor" href="#_5-3、表单元素属性" aria-hidden="true">#</a> 5.3、表单元素属性</h3><p>表单很多情况，也需要修改属性</p><p>正常有取值的属性跟其他的标签属性没有任何区别</p><p>获取:DOM对象.属性名<br> 设置:DOM对象.属性名= 新值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取元素</span>
<span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//设置值</span>
input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;小米手机&#39;</span>
input<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;password&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表单属性中添加就有效果，移除就没有效果，一律使用<strong>布尔值表示</strong><br> 如果为true，代表添加了该属性，如果是false代表移除了该属性<br> 比如：<strong>disabled，checked，selected</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> ipt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
    ipt<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">//只接收布尔值</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4、自定义属性" tabindex="-1"><a class="header-anchor" href="#_5-4、自定义属性" aria-hidden="true">#</a> 5.4、自定义属性</h3><p>标准属性：标签天生自带的属性</p><p>自定义属性：<br> 在html5中推出来了专门的data-<strong>自定义属性</strong><br> 在<strong>标签上</strong>一律以<strong>data-<strong>开头<br> 在</strong>DOM对象</strong>上一律以<strong>dataset</strong>对象方式获取</p><p>举例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-spm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>AAA<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> one <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>spm<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、间歇函数" tabindex="-1"><a class="header-anchor" href="#_6、间歇函数" aria-hidden="true">#</a> 6、间歇函数</h2><h3 id="_6-1、定时器的使用" tabindex="-1"><a class="header-anchor" href="#_6-1、定时器的使用" aria-hidden="true">#</a> 6.1、定时器的使用</h3><p><strong>setInterval()</strong> 是 JavaScript 中内置的函数，它的作用是间隔固定的时间自动重复执行另一个函数，也叫<strong>定时器函数</strong>。</p><p>语法：<strong>setInterval(函数，间隔时间)</strong></p><blockquote><p>注：函数为函数名时，<strong>不要加小括号</strong></p></blockquote><p>作用：每间隔一段时间调用这个函数<br> 间隔时间单位为<strong>毫秒</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1sec&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// setInterval(函数名,间隔时间) 函数名不要加小括号</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span>fn  <span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2、关闭定时器" tabindex="-1"><a class="header-anchor" href="#_6-2、关闭定时器" aria-hidden="true">#</a> 6.2、关闭定时器</h3><p>定时器的返回值是一个唯一的id</p><p>通过该id可以开启或关闭定时器</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> 变量 <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>函数<span class="token punctuation">,</span>间隔时间<span class="token punctuation">)</span>
<span class="token function">clearInterval</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token function">clearInterval</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">//关闭定时器</span>
n <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">//再次开启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3、-延时函数-settimeout" tabindex="-1"><a class="header-anchor" href="#_6-3、-延时函数-settimeout" aria-hidden="true">#</a> 6.3、 延时函数 setTimeout</h3><p>js内置的一个用来代码延迟执行的函数，叫 <strong>setTimeout</strong></p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">,</span>等待的毫秒数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>setTImeout 仅仅<strong>执行一次</strong>，可以理解为就是把一段代码延迟执行，平时省略window</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;时间到了&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>，<span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值<code>timeoutID</code>是一个正整数，表示定时器的编号。这个值可以传递给 <code>clearTimeout()</code>来取消该定时器</p><h2 id="_7、事件" tabindex="-1"><a class="header-anchor" href="#_7、事件" aria-hidden="true">#</a> 7、事件</h2><p><strong>事件</strong>：是在编程时，系统内发生的<strong>动作</strong>或者发生的事情（比如单击按钮）</p><p><strong>事件监听</strong>：结合 DOM 使用事件时，需要为 DOM 对象添加事件监听，等待事件发生（触发）时，便立即调用一个函数。</p><h3 id="_7-1、事件监听" tabindex="-1"><a class="header-anchor" href="#_7-1、事件监听" aria-hidden="true">#</a> 7.1、事件监听</h3><h4 id="_7-1-1、addeventlistener" tabindex="-1"><a class="header-anchor" href="#_7-1-1、addeventlistener" aria-hidden="true">#</a> 7.1.1、addEventListener</h4><p><strong>addEventListener</strong> 是 DOM 对象专门用来添加事件监听的方法，它的两个参数分别为【事件类型】和【事件回调】。</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>元素对象<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;事件类型&#39;</span><span class="token punctuation">,</span>要执行的函数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要执行的函数有函数名，直接填写函<strong>数名，不需要加括号</strong></p><p>案例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> btn <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hi&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：在事件中定义的const类型常量会随着事件的结束被垃圾回收，每次事件发生都是独立的</p></blockquote><h4 id="_7-1-2、事件监听三要素" tabindex="-1"><a class="header-anchor" href="#_7-1-2、事件监听三要素" aria-hidden="true">#</a> 7.1.2、事件监听三要素</h4><p>​ <strong>事件源</strong>：那个dom元素被事件触发了，要<strong>获取dom元素</strong><br> ​ <strong>事件类型</strong>：用什么<strong>方式触发</strong>（click，mouseover）<br> ​ <strong>事件调用函数</strong>：要<strong>做什么事</strong></p><p>注意：<br> 1、<strong>事件类型</strong>要加<strong>引号</strong><br> 2、函数是点击之后再去执行，每次点击都会执行一次</p><h4 id="_7-1-3、事件监听版本" tabindex="-1"><a class="header-anchor" href="#_7-1-3、事件监听版本" aria-hidden="true">#</a> 7.1.3、事件监听版本</h4><p>DOM L0：事件源.on事件 = function(){ }<br> DOM L2：事件源.addEventListener(事件,事件处理函数)</p><p>区别：<br> on 方法会被覆盖（一个按钮绑定多个事件，只执行一个）<br> **addEventListenrer **方式可绑定多次，拥有时间更多特性（推荐）</p><h3 id="_7-3、鼠标事件" tabindex="-1"><a class="header-anchor" href="#_7-3、鼠标事件" aria-hidden="true">#</a> 7.3、鼠标事件</h3><table><thead><tr><th>事件类型</th><th>解释</th></tr></thead><tbody><tr><td><strong>&#39;click&#39;</strong></td><td>单击事件</td></tr><tr><td><strong>&#39;mouseenter&#39;</strong></td><td>鼠标经过（推荐）</td></tr><tr><td><strong>&#39;mouseleave&#39;</strong></td><td>鼠标离开（推荐）</td></tr><tr><td>‘mouseover’</td><td>鼠标经过（有冒泡效果）</td></tr><tr><td>‘mouseout’</td><td>鼠标离开（有冒泡效果）</td></tr><tr><td>&#39;mousemove&#39;</td><td>鼠标移动</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//单击事件</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hi&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//鼠标经过</span>
div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseenter&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//鼠标离开</span>
div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseleave&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4、焦点事件" tabindex="-1"><a class="header-anchor" href="#_7-4、焦点事件" aria-hidden="true">#</a> 7.4、焦点事件</h3><p><strong>焦点事件</strong>常用于输入框 <strong>input</strong></p><table><thead><tr><th>事件类型</th><th>解释</th></tr></thead><tbody><tr><td><strong>&#39;focus&#39;</strong></td><td>有焦点出发</td></tr><tr><td><strong>&#39;blur&#39;</strong></td><td>失去焦点触发</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ipt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
ipt<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;焦点触发&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
ipt<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;失去焦点&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例：列表的显示隐藏：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取按钮、菜单</span>
<span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;[type=search]&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.list&#39;</span><span class="token punctuation">)</span>
input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//显示隐藏菜单</span>
    ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span>
    input<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//隐藏菜单</span>
    ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span>
    input<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-5、键盘事件" tabindex="-1"><a class="header-anchor" href="#_7-5、键盘事件" aria-hidden="true">#</a> 7.5、键盘事件</h3><table><thead><tr><th>事件类型</th><th>解释</th></tr></thead><tbody><tr><td><strong>&#39;keydown&#39;</strong></td><td>键盘按下触发</td></tr><tr><td><strong>&#39;keyup&#39;</strong></td><td>键盘抬起触发</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;按下键盘&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;抬起键盘&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-6、文本框输入事件" tabindex="-1"><a class="header-anchor" href="#_7-6、文本框输入事件" aria-hidden="true">#</a> 7.6、文本框输入事件</h3><table><thead><tr><th>事件类型</th><th>解释</th></tr></thead><tbody><tr><td><strong>&#39;input&#39;</strong></td><td>文本框输入触发</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//用户输入文本事件</span>
<span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-7、页面加载事件" tabindex="-1"><a class="header-anchor" href="#_7-7、页面加载事件" aria-hidden="true">#</a> 7.7、页面加载事件</h3><h4 id="_7-7-1、load" tabindex="-1"><a class="header-anchor" href="#_7-7-1、load" aria-hidden="true">#</a> 7.7.1、load</h4><p>加载外部资源（如图片，外联css和js等）加载完毕时触发的事件</p><p>事件名：<strong>&#39;load&#39;</strong></p><p>监听页面所有资源加载完毕：<br><strong>给window添加load事件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//等待页面中所有资源加载完毕，就回去执行回调函数</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//执行的操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-7-2、domcontentloaded" tabindex="-1"><a class="header-anchor" href="#_7-7-2、domcontentloaded" aria-hidden="true">#</a> 7.7.2、DOMContentLoaded</h4><p>当初始的HTML文档被完全加载和解析完成后，<strong>DOMContentLoaded</strong> 事件被触发，而无需等待演示表，图像等完成加载</p><p>事件名：<strong>&#39;DOMContentLoaded&#39;</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//执行的操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-8、页面滚动事件" tabindex="-1"><a class="header-anchor" href="#_7-8、页面滚动事件" aria-hidden="true">#</a> 7.8、页面滚动事件</h3><h4 id="_7-8-1、scroll" tabindex="-1"><a class="header-anchor" href="#_7-8-1、scroll" aria-hidden="true">#</a> 7.8.1、scroll</h4><p>滚动条在滚动时持续触发的事件</p><p>事件名：<strong>&#39;scroll&#39;</strong></p><p>监听整个页面滚动：（给 window 或 document 添加 scroll 事件）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//页面滚动事件</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//执行的操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听某个元素的内部读懂直接给某个元素添加即可</p><h4 id="_7-8-2、scrollleft-和-scrolltop-属性" tabindex="-1"><a class="header-anchor" href="#_7-8-2、scrollleft-和-scrolltop-属性" aria-hidden="true">#</a> 7.8.2、scrollLeft 和 scrollTop 属性</h4><p><strong>document.documentElement.scrollTop/scrollLeft</strong></p><blockquote><p>注：document.documentElement：返回<strong>HTML</strong></p></blockquote><p><strong>scrollLeft</strong> 和 <strong>scrollTop</strong> 属性：<br> 获取被卷去的大小<br> 获取元素内容往左，往上滚出去看不到的距离<br> 这两个值是可 <strong>读写</strong> 的</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230411201122.png" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">/*页面滚动了多少像素*/</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token comment">//n为被卷去的像素，数字型，不带单位</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
    
    <span class="token comment">//可读写：</span>
    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//回到页面顶部</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-9、页面尺寸事件" tabindex="-1"><a class="header-anchor" href="#_7-9、页面尺寸事件" aria-hidden="true">#</a> 7.9、页面尺寸事件</h3><h4 id="_7-9-1、resize" tabindex="-1"><a class="header-anchor" href="#_7-9-1、resize" aria-hidden="true">#</a> 7.9.1、resize</h4><p>会在窗口尺寸改变的时候触发事件：<strong>&#39;resize&#39;</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;rexize&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-9-2、屏幕宽度" tabindex="-1"><a class="header-anchor" href="#_7-9-2、屏幕宽度" aria-hidden="true">#</a> 7.9.2、屏幕宽度</h4><p>检测屏幕宽度属性：<strong>document.documentElement.clientWidth</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;rexize&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">let</span> w <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-9-3、元素宽高" tabindex="-1"><a class="header-anchor" href="#_7-9-3、元素宽高" aria-hidden="true">#</a> 7.9.3、元素宽高</h4><p>获取元素的部分宽高（<strong>不包含border，margin，滚动条等</strong>）</p><p>元素宽高：<strong>clientWidth</strong> 和 <strong>clientHeight</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-9-4、元素尺寸与位置" tabindex="-1"><a class="header-anchor" href="#_7-9-4、元素尺寸与位置" aria-hidden="true">#</a> 7.9.4、元素尺寸与位置</h4><h5 id="获取宽高" tabindex="-1"><a class="header-anchor" href="#获取宽高" aria-hidden="true">#</a> 获取宽高：</h5><p>​ 获取元素的自身宽高（<strong>包含</strong>元素自身设置的<strong>宽高</strong> + <strong>padding</strong> + <strong>border</strong> 、滚动条）：<strong>offsetWidth</strong> 和 <strong>offsetHeight</strong><br> ​ 获取出来的是<strong>数值</strong>，方便计算</p><blockquote><p>注意：获取的是<strong>可视宽高</strong>，如果盒子是隐藏的，获取的结果是0</p></blockquote><h5 id="获取位置" tabindex="-1"><a class="header-anchor" href="#获取位置" aria-hidden="true">#</a> 获取位置：</h5><p>获取元素距离自己 <strong>定位父级</strong> 元素的 <strong>左、上距离</strong><br><strong>offsetLeft</strong> 和 <strong>offsetTop</strong>，注意是<strong>只读属性</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> doocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//检测盒子位置，最近一级带有定位的祖先元素</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="尺寸与位置" tabindex="-1"><a class="header-anchor" href="#尺寸与位置" aria-hidden="true">#</a> 尺寸与位置：</h5><p>element.<strong>getBoundingClientRect</strong>()<br> 方法返回元素大小及 <strong>相对于视口</strong> 的位置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230412140703.png" alt="" loading="lazy"></p><h3 id="_7-10、事件对象" tabindex="-1"><a class="header-anchor" href="#_7-10、事件对象" aria-hidden="true">#</a> 7.10、事件对象</h3><p><strong>事件对象</strong>是一个<strong>对象</strong>，这个对象里有<strong>事件触发时的相关信息</strong></p><p>例如：鼠标点击事件中，事件对象存储了鼠标点在哪个位置等信息<br> 使用场景：<br> 判断用户按下哪个按键，判断鼠标点击了哪个元素</p><h4 id="_7-10-1、获取事件对象" tabindex="-1"><a class="header-anchor" href="#_7-10-1、获取事件对象" aria-hidden="true">#</a> 7.10.1、获取事件对象</h4><p>在事件绑定的回调函数的<strong>第一个参数</strong>就是<strong>事件对象</strong><br> 一般命名为 <code>event</code>、<code>ev</code> 、<code>ev</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-10-2、常见的事件对象属性" tabindex="-1"><a class="header-anchor" href="#_7-10-2、常见的事件对象属性" aria-hidden="true">#</a> 7.10.2、常见的事件对象属性</h4><table><thead><tr><th>事件对象属性</th><th>含义</th></tr></thead><tbody><tr><td>type</td><td>当前事件类型</td></tr><tr><td>clientX/clientY</td><td>光标相对于浏览器可见窗口左上角位置</td></tr><tr><td>offsetX/offetcY</td><td>光标相对于DOM元素左上角位置</td></tr><tr><td>key</td><td>用户按下键盘键的值（不提倡使用keyCode）</td></tr><tr><td>target</td><td>用户点击的对象</td></tr></tbody></table><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;Entry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;按下了回车键&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>                   
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-11、环境对象" tabindex="-1"><a class="header-anchor" href="#_7-11、环境对象" aria-hidden="true">#</a> 7.11、环境对象</h3><p>环境对象：指定是 <strong>函数内部</strong> 的变量 <strong>this</strong> ，它代表着当前函数运行时所处的环境</p><p>每个函数里都有 <code>this</code> 环境对象 普通函数里this指向的是window<br><strong>谁调用，<code>this</code> 就是谁</strong> (粗略概念)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span> <span class="token comment">//this指btn</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-12、回调函数" tabindex="-1"><a class="header-anchor" href="#_7-12、回调函数" aria-hidden="true">#</a> 7.12、回调函数</h3><p>将函数A作为参数给函数B时，称函数A为回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    consloe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//fn传递给了setInterval，fn是回调函数</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>

box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    consloe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是回调函数&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-13、m端事件-了解" tabindex="-1"><a class="header-anchor" href="#_7-13、m端事件-了解" aria-hidden="true">#</a> 7.13、M端事件（了解）</h3><p>M端：移动端</p><p>移动端有触屏事件 touch</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230413203541.png" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touchstart&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&#39;触摸&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touched&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&#39;离开&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touchmove&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&#39;移动&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-14、window-confirm" tabindex="-1"><a class="header-anchor" href="#_7-14、window-confirm" aria-hidden="true">#</a> 7.14、Window.confirm()</h3><p><strong><code>Window.confirm()</code></strong> 方法显示一个具有一个可选消息和两个按钮 (确定和取消) 的模态对话框。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//result 是一个布尔值，表示是选择确定还是取消 (true 表示 OK)。</span>
result <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-15、change事件" tabindex="-1"><a class="header-anchor" href="#_7-15、change事件" aria-hidden="true">#</a> 7.15、change事件</h3><p>当用户更改 <strong>input、select、textarea</strong> 元素的值时，<code>change</code> 事件在这些元素上触发。和 <code>input</code> 事件不同的是，并不是每次元素的 <code>value</code> 改变时都会触发 <code>change</code> 事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> 方法<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-16、其他事件" tabindex="-1"><a class="header-anchor" href="#_7-16、其他事件" aria-hidden="true">#</a> 7.16、其他事件</h3>`,210),r={href:"https://www.runoob.com/jsref/dom-obj-event.html",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="_8、事件流" tabindex="-1"><a class="header-anchor" href="#_8、事件流" aria-hidden="true">#</a> 8、事件流</h2><p><strong>事件流</strong> 指的是时间完整执行过程中的流动路径</p><p>捕获阶段是【从父到子】的传导过程，冒泡阶段是【从子向父】的传导过程。</p><p>实际工作都是使用<strong>事件冒泡</strong>为主</p><h3 id="_8-1、事件捕获" tabindex="-1"><a class="header-anchor" href="#_8-1、事件捕获" aria-hidden="true">#</a> 8.1、事件捕获</h3><p>事件捕获：从DOM的根元素开始去执行对应的事件（从外到里）<br> 事件捕获需要写对应代码才能看到效果</p><p>代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">DOM</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>事件类型<span class="token punctuation">,</span>事件处理函数<span class="token punctuation">,</span><span class="token function">是否使用捕获机制</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inner<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 获取嵌套的3个节点</span>
    <span class="token keyword">const</span> outer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.outer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> inner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.inner&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 外层的盒子添加事件</span>
    outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;outer...&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>

    <span class="token comment">// 中间的盒子添加事件</span>
    outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;inner...&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>

    <span class="token comment">// 内层的盒子添加事件</span>
    outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child...&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单击事件触发时，先执行祖先元素，再执行子元素</p><h3 id="_8-2、事件冒泡" tabindex="-1"><a class="header-anchor" href="#_8-2、事件冒泡" aria-hidden="true">#</a> 8.2、事件冒泡</h3><p>当元素触发时，依此向上调用所有父级元素的同名事件</p><p><strong>冒泡不阻止，一定会触发</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 获取嵌套的3个节点</span>
    <span class="token keyword">const</span> outer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.outer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> inner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.inner&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 外层的盒子添加事件</span>
    outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;outer...&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 中间的盒子添加事件</span>
    outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;inner...&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 内层的盒子添加事件</span>
    outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child...&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3、阻止冒泡" tabindex="-1"><a class="header-anchor" href="#_8-3、阻止冒泡" aria-hidden="true">#</a> 8.3、阻止冒泡</h3><p>有冒泡模式的存在，容易导致事件影响到父级元素<br> 把事件限制在当前元素内，需要<strong>阻止冒泡</strong></p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：此方法可以阻断事件流传播，不光在冒泡阶段有效，捕获阶段也有效</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;outer...&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//阻止流动传播</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;inner...&#39;</span><span class="token punctuation">)</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4、阻止默认行为" tabindex="-1"><a class="header-anchor" href="#_8-4、阻止默认行为" aria-hidden="true">#</a> 8.4、阻止默认行为</h3><p>某些情况下需要阻止默认行为的发生，比如阻止链接跳转，表单域跳转</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>www.bilibili.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>注册<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span>
    form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//阻止默认行为 (提交)</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-5、解绑事件" tabindex="-1"><a class="header-anchor" href="#_8-5、解绑事件" aria-hidden="true">#</a> 8.5、解绑事件</h3><p>on 事件解绑：直接使用null覆盖就可以实现解绑</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">alter</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//点击无效</span>

btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">alter</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">)</span>
    btn2<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//只可点击一次</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>addEventListener 方式，必须使用 <strong>removeEventListener</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">removeEventListener</span><span class="token punctuation">(</span>事件类型<span class="token punctuation">,</span>事件处理函数 <span class="token punctuation">[</span><span class="token punctuation">,</span>获取捕获或者冒泡阶段<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：匿名函数无法被解绑</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;点击&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span> <span class="token comment">//移除事件解绑</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-6、事件委托" tabindex="-1"><a class="header-anchor" href="#_8-6、事件委托" aria-hidden="true">#</a> 8.6、事件委托</h3><p><strong>事件委托</strong>是<strong>利用事件流</strong>的特征解决一些现实开发需求，主要用于提升程序效率。</p><p>事件委托优点：减少注册次数，提高程序性能<br> 事件委托原理：事件委托是利用事件冒泡的特点（给<strong>父元素注册事件</strong>，触发子元素时，<strong>冒泡到父元素</strong>上）</p><p>实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token comment">//获取真正触发事件的元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>不需要变色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//点击li，触发ul的事件</span>
    <span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//alert(&#39;A&#39;)</span>
        <span class="token comment">//e.target.style.target = &#39;red&#39; //通过事件对象获取点击的对象，改变其css样式</span>
        <span class="token comment">//只有点击li才有效果：</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;LI&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、日期对象" tabindex="-1"><a class="header-anchor" href="#_9、日期对象" aria-hidden="true">#</a> 9、日期对象</h2><h3 id="_9-1、日期对象实例化" tabindex="-1"><a class="header-anchor" href="#_9-1、日期对象实例化" aria-hidden="true">#</a> 9.1、日期对象实例化</h3><p>使用new关键词时，就是实例化对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 实例化</span>
<span class="token comment">// const date = new Date(); // 得到当前时间</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2020-05-01 08:30:00&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 指定时间</span>
<span class="token comment">// date 变量即所谓的时间对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2、日期对象方法" tabindex="-1"><a class="header-anchor" href="#_9-2、日期对象方法" aria-hidden="true">#</a> 9.2、日期对象方法</h3><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取四位年份</td></tr><tr><td>getMonth()</td><td>获取月份，取值为 0 ~ 11</td></tr><tr><td>getDate()</td><td>获取月份中的每一天，不同月份取值也不相同</td></tr><tr><td>getDay()</td><td>获取星期，取值为 0 ~ 6</td></tr><tr><td>getHours()</td><td>获取小时，取值为 0 ~ 23</td></tr><tr><td>getMinutes()</td><td>获取分钟，取值为 0 ~ 59</td></tr><tr><td>getSeconds()</td><td>获取秒，取值为 0 ~ 59</td></tr><tr><td>getTime()</td><td>获取时间戳</td></tr><tr><td>+new Date() / Date.now()</td><td>获取时间戳</td></tr><tr><td><strong>toLocalString</strong>()</td><td><strong>直接获取时间</strong></td></tr><tr><td><strong>toLoacalDateString</strong>()</td><td>获取日期</td></tr><tr><td><strong>toLocalTimeString</strong>()</td><td>获取时间</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 实例化</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 获取时间戳</span>
<span class="token comment">// 方法一</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 方法二</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 方法三</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 获取指定时间时间戳</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2022-5-1 18:00:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 直接获取时间</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>制作 <strong>倒计时</strong> 的思路：<br> 获取当前时间戳、将来时间戳。两者相减转换为秒，计算时分秒，添加定时器</p><h2 id="_10、节点操作" tabindex="-1"><a class="header-anchor" href="#_10、节点操作" aria-hidden="true">#</a> 10、节点操作</h2><p>DOM树里每一个内容都称为节点<br> 节点类型：<br> 元素节点（body，div，html<code>根节点</code>）<br> 属性节点（所有的属性 比如href）<br> 文本节点 （所有的文本）<br> 其他</p><h3 id="_10-1、获取节点" tabindex="-1"><a class="header-anchor" href="#_10-1、获取节点" aria-hidden="true">#</a> 10.1、获取节点</h3><p>根据节点关系，找到并返回的都是对象</p><h4 id="_10-1-1、父节点查找" tabindex="-1"><a class="header-anchor" href="#_10-1-1、父节点查找" aria-hidden="true">#</a> 10.1.1、父节点查找</h4><p><strong>parentNode</strong> <strong>属性</strong><br> 返回<strong>最近</strong>一级的<strong>父</strong>节点 找不到返回 null</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> baby <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baby<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> <span class="token comment">//返回DOM对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baby<span class="token punctuation">.</span>parentNodeparentNode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-1-2、子节点查找" tabindex="-1"><a class="header-anchor" href="#_10-1-2、子节点查找" aria-hidden="true">#</a> 10.1.2、子节点查找</h4><p>children 子节点：包括所有子节点（文本节点（空格、换行）、注释节点等）</p><p><strong>children 属性</strong><br> 仅获取所有元素节点<br> 返回值是一个<strong>伪数组</strong></p><h4 id="_10-1-3、兄弟关系查找" tabindex="-1"><a class="header-anchor" href="#_10-1-3、兄弟关系查找" aria-hidden="true">#</a> 10.1.3、兄弟关系查找</h4><p>1、下一个兄弟节点：<strong>nextElementSibling</strong> 属性<br> 2、上一个兄弟节点：<strong>previousElementSibling</strong> 属性</p><h3 id="_10-2、创建、插入节点" tabindex="-1"><a class="header-anchor" href="#_10-2、创建、插入节点" aria-hidden="true">#</a> 10.2、创建、插入节点</h3><p>创造出一个新的网页元素，添加到网页内，一般<strong>先创建节点，然后插入节</strong>点</p><p>语法：</p><p><strong>createElement</strong> ：动态创建任意 DOM 节点<br><strong>document.createElement(&#39;标签名&#39;)</strong></p><p><strong>appendChild</strong> ：在末尾（结束标签前）插入节点<br><strong>父元素.body.appendChild(要插入的元素)</strong></p><p><strong>insertBefore</strong> ：插入到某个父元素前面<br><strong>父元素.insertBefore(要插入的元素，在哪个元素前面)</strong></p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
ul<span class="token punctuation">.</span><span class="token function">qppendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-3、克隆节点" tabindex="-1"><a class="header-anchor" href="#_10-3、克隆节点" aria-hidden="true">#</a> 10.3、克隆节点</h3><p>复制一个节点，把复制的节点放入到指定的元素内部</p><p><strong>cloneNode</strong> 复制现有的 DOM 节点，传入参数 true 会复制所有子节点<br><strong>元素.cloneNode(布尔值)</strong></p><p>cloneNode会克隆出一个根原标签一样的元素，括号内传入布尔值<br> 若为<strong>true</strong>，则代表克隆时会包含后代节点一起克隆（深克隆）<br> 若为<strong>false</strong>，则代表克隆时不包含后代节点<br> 默认为false</p><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-4、删除节点" tabindex="-1"><a class="header-anchor" href="#_10-4、删除节点" aria-hidden="true">#</a> 10.4、删除节点</h3><p>在 js 原生DOM操作中，要删除元素必须通过 <strong>父元素删除</strong></p><p>语法：<br><strong>父元素.removeChild(要删除的元素)</strong></p><blockquote><p>注：若不存在父子关系则删除不成功<br> 删除节点和隐藏节点有区别</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cosnt ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
ul<span class="token punctuation">.</span><span class="token function">removedChild</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11、swiper插件" tabindex="-1"><a class="header-anchor" href="#_11、swiper插件" aria-hidden="true">#</a> 11、swiper插件</h2>`,81),k={href:"https://www.swiper.com.cn/",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),g={href:"https://www.swiper.com.cn/demo/index.html",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),b={href:"https://www.swiper.com.cn/usage/index.html",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),f={href:"https://www.swiper.com.cn/api/index.html",target:"_blank",rel:"noopener noreferrer"},x=e(`<h2 id="_12、bom对象" tabindex="-1"><a class="header-anchor" href="#_12、bom对象" aria-hidden="true">#</a> 12、BOM对象</h2><h3 id="_12-1、bom概念" tabindex="-1"><a class="header-anchor" href="#_12-1、bom概念" aria-hidden="true">#</a> 12.1、BOM概念</h3><p>BOM (Browser Object Model ) ： <strong>浏览器对象模型</strong>，定义了一套操作<strong>浏览器窗口的API</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230414155652.png" alt="" loading="lazy"></p><ul><li>window对象是一个全局对象，也可以说是JavaScript中的顶级对象</li><li>像document、alert()、console.log()这些都是window的属性，基本BOM的属性和方法都是window的</li><li>所有通过<strong>var定义在全局作用域</strong>中的变量、函数都会变成<strong>window对象的属性和方法</strong></li><li>window对象下的<strong>属性和方法调用</strong>的时候可以<strong>省略window</strong></li></ul><h3 id="_12-2、js执行机制" tabindex="-1"><a class="header-anchor" href="#_12-2、js执行机制" aria-hidden="true">#</a> 12.2、JS执行机制</h3><h4 id="_12-2-1、单线程" tabindex="-1"><a class="header-anchor" href="#_12-2-1、单线程" aria-hidden="true">#</a> 12.2.1、单线程</h4><p>js 语言的一大特点是 <strong>单线程</strong> ，也就是说，<strong>同一个时间只能做一件事</strong></p><p>为了解决这个问题，利用了多核cup计算能力，HTML5剔除Web Worker 标准，允许JS脚本创建多个线程，于是JS出现了 <strong>同步</strong> 和 <strong>异步</strong></p><p>同步：前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的<br> 异步：在做一件事的同时，可以器处理其他事情</p><p>本质区别：<strong>流水线上各个流程的执行顺序不同</strong></p><h4 id="_12-2-2、同步与异步" tabindex="-1"><a class="header-anchor" href="#_12-2-2、同步与异步" aria-hidden="true">#</a> 12.2.2、同步与异步</h4><p><strong>同步任务</strong>：<br> 都主线程上执行，形成一个<strong>执行栈</strong></p><p><strong>异步任务</strong>：<br> JS的异步是通过回调函数实现的<br> 一般而言，异步任务有一下三种类型：<br> 1、<strong>普通事件</strong>：如<strong>click、resize</strong><br> 2、<strong>资源加载</strong>：如load，error等<br> 3、<strong>定时器</strong>，包括<strong>setInterval、setTimeout</strong>t等<br> 异步任务相关添加到 <strong>任务队列</strong>（消息队列）中</p><h4 id="_12-2-3、事件循环" tabindex="-1"><a class="header-anchor" href="#_12-2-3、事件循环" aria-hidden="true">#</a> 12.2.3、事件循环</h4><p>1、先执行 <strong>执行栈中的同步任务</strong><br> 2、异步任务放在<strong>任务队列</strong>（交给浏览器）中<br> 3、一旦执行栈中所有同步任务执行完毕，系统就会按次序<strong>读取任务队列</strong>中的异步任务，被读取的任务异步任务结束等待状态，<strong>进入执行栈，开始执行</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230414163715.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230414163808.png" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setTImeout</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">,</span>等待的毫秒数<span class="token punctuation">)</span> <span class="token comment">//返回id，第几个定时器</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-3、location对象" tabindex="-1"><a class="header-anchor" href="#_12-3、location对象" aria-hidden="true">#</a> 12.3、location对象</h3><p><strong>location 对象</strong>，它拆分并保存了 URL 地址的各个组成部分</p><p>常用属性和方法：</p><table><thead><tr><th>属性/方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>href</strong></td><td>获取完整的 URL 地址，赋值时用于地址的跳转</td></tr><tr><td>search</td><td>获取地址中携带的参数，符号 ？后面部分</td></tr><tr><td>hash</td><td>获取地址中的啥希值，符号 # 后面部分</td></tr><tr><td>reload()</td><td>用来刷新当前页面，传入参数 true 时表示强制刷新</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;https://www.bilibili.com/&#39;</span> <span class="token comment">//执行跳转网页</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-4、navigator对象" tabindex="-1"><a class="header-anchor" href="#_12-4、navigator对象" aria-hidden="true">#</a> 12.4、navigator对象</h3><p><strong>navigator 对象</strong>，该对象下记录了浏览器自身的相关信息</p><p>常用的属性和方法：<br> 通过 <strong>userAgent</strong> 属性检测浏览器的版本及平台</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 检测 userAgent（浏览器信息）</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> userAgent <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent
  <span class="token comment">// 验证是否为Android或iPhone</span>
  <span class="token keyword">const</span> android <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(Android);?[\\s\\/]+([\\d.]+)?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> iphone <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(iPhone\\sOS)\\s([\\d_]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 如果是Android或iPhone，则跳转至移动站点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token parameter">android <span class="token operator">||</span> iphone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;http://m.itcast.cn&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-5、histroy对象" tabindex="-1"><a class="header-anchor" href="#_12-5、histroy对象" aria-hidden="true">#</a> 12.5、histroy对象</h3><p><strong>history 对象</strong>，主要管理历史记录， 该对象与浏览器地址栏的操作相对应，如前进、后退等</p><p>history对象一般在实际开发中比较少用，但是会在一些OA 办公系统中见到。</p><p>常用方法：</p><table><thead><tr><th>属性/方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>可以后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>参数为1，前进1个页面，-1，后退一个页面</td></tr></tbody></table><h2 id="_13、本地存储" tabindex="-1"><a class="header-anchor" href="#_13、本地存储" aria-hidden="true">#</a> 13、本地存储</h2><h3 id="_13-1、本地存储介绍" tabindex="-1"><a class="header-anchor" href="#_13-1、本地存储介绍" aria-hidden="true">#</a> 13.1、本地存储介绍</h3><p>1、数据存储在 <strong>用户浏览器</strong> 中，类似于小型数据库<br> 2、设置、读取方便，页面刷新不丢失数据<br> 3、容量较大，sessionStorage 和 localStorage 约5M左右</p>`,36),y=n("br",null,null,-1),_={href:"https://todomvc.com/examples/vanilla-es6/",target:"_blank",rel:"noopener noreferrer"},j=e(`<h3 id="_13-2、localstorage" tabindex="-1"><a class="header-anchor" href="#_13-2、localstorage" aria-hidden="true">#</a> 13.2、localStorage</h3><p>作用：将数据永久<strong>存储在本地</strong>（用户电脑），除非手动删除，否则关闭页面也会存在</p><p>特性：<br> 可以<strong>多窗口</strong>（页面）<strong>共享</strong>（<strong>同一浏览器</strong>共享）<br> 以 <strong>键值对</strong> 的形式存储使用</p><p>语法：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>localStorage.setItem(key,value)</td><td>存储数据</td></tr><tr><td>localStorage.getItem(key)</td><td>读取数据</td></tr><tr><td>localStorage.remove(key)</td><td>删除数据</td></tr></tbody></table><p><strong>本地存储只能存储字符串类型</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment">//转换为字符串</span>
localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">)</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-3、sessionstorage-了解" tabindex="-1"><a class="header-anchor" href="#_13-3、sessionstorage-了解" aria-hidden="true">#</a> 13.3、sessionStorage（了解）</h3><p><strong>生命周期</strong>为<strong>关闭浏览器</strong>窗口<br> 在同一个窗口（页面）下数据可以共享<br> 以键值对的形式存储使用<br> 用法跟localStorage基本相同</p><p>sessionStorage的方法与localStorage相同</p><h3 id="_13-4、通过json存储对象" tabindex="-1"><a class="header-anchor" href="#_13-4、通过json存储对象" aria-hidden="true">#</a> 13.4、通过JSON存储对象</h3><p>本地只能存储字符串，无法存储无法数据类型</p><p>解决：需要将复杂数据类型转换成 <strong>JSON</strong> 字符串，存储到本地</p><p>语法：<br><strong>JSON.stringify(复杂数据类型)</strong> 将对象转换为JSON字符串<br><strong>JSON.prase(localStotage.getItem(&#39;key&#39;))</strong> JSON字符串转换为对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span>
<span class="token punctuation">}</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">prase</span><span class="token punctuation">(</span>localStotage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14、数组map-join方法" tabindex="-1"><a class="header-anchor" href="#_14、数组map-join方法" aria-hidden="true">#</a> 14、数组map，join方法</h2><h3 id="_14-1、map" tabindex="-1"><a class="header-anchor" href="#_14-1、map" aria-hidden="true">#</a> 14.1、map</h3><p>利用 <strong>map()</strong> 和 <strong>join()</strong> 数组方法实现字符串拼接</p><p>后使用场景：<br> map 可以遍历数组 <strong>处理数据</strong>，并且 <strong>返回新的数组</strong></p><p>map 也称为 <strong>映射</strong>。map重点在于有返回值，forEach没有返回值</p><p>语法：<br><strong>arr.map(function(ele,index){具体操作})</strong></p><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;pink&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// console.log(ele); 数组元素</span>
    <span class="token comment">// console.log(index); 索引</span>
    <span class="token keyword">return</span> ele <span class="token operator">+</span> <span class="token string">&#39;颜色&#39;</span> <span class="token comment">//返回数组，arr数组每个元素加颜色两个字</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-2、join" tabindex="-1"><a class="header-anchor" href="#_14-2、join" aria-hidden="true">#</a> 14.2、join</h3><p>join() 方法用于把数组中的所有元素 <strong>转换为一个字符串</strong></p><p>语法：<br><strong>console.log(arr.join(&#39;分隔符&#39;));</strong></p><p>参数：<br> 数组元素通过<strong>参数</strong>里面指定的<strong>分隔符</strong>进行分隔，<strong>空字符串</strong>(&#39;&#39;)，则所有元素之间都<strong>没有任何字符</strong>，不带参数，<strong>默认</strong>为<strong>逗号分割</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将数组中的元素全部加成一个字符串，没有分隔符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>遍历数组元素时，可以通过 map 添加 tr，td 标签，通过 join 将新数组索引对应字符串传给 innerHtml ，完成表格渲染</p><h2 id="_15、正则表达式的使用" tabindex="-1"><a class="header-anchor" href="#_15、正则表达式的使用" aria-hidden="true">#</a> 15、正则表达式的使用</h2><h3 id="_15-1、定义规则" tabindex="-1"><a class="header-anchor" href="#_15-1、定义规则" aria-hidden="true">#</a> 15.1、定义规则</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reg <span class="token operator">=</span>  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">表达式</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>其中<code>/ /</code>是正则表达式字面量</li><li>正则表达式也是**<code>对象 </code>**</li></ul><h3 id="_15-2、常用方法" tabindex="-1"><a class="header-anchor" href="#_15-2、常用方法" aria-hidden="true">#</a> 15.2、常用方法</h3><h4 id="_15-2-1、test" tabindex="-1"><a class="header-anchor" href="#_15-2-1、test" aria-hidden="true">#</a> 15.2.1、test()</h4><ul><li><strong><code>test()方法</code></strong> 用来查看正则表达式与指定的字符串是否匹配</li><li>如果正则表达式与指定的字符串匹配 ，返回<code>true</code>，否则<code>false</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 正则表达式的基本使用</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;web前端开发&#39;</span>
<span class="token comment">// 1. 定义规则</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">web</span><span class="token regex-delimiter">/</span></span>
<span class="token comment">// 2. 使用正则  test()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true  如果符合规则匹配上则返回true，否则返回false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">哈哈</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;AAA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//false </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_15-2-2、exec" tabindex="-1"><a class="header-anchor" href="#_15-2-2、exec" aria-hidden="true">#</a> 15.2.2、exec()</h4><ul><li><strong><code>exec() 方法</code></strong> 在一个指定字符串中执行一个搜索匹配</li><li>如果匹配成功，返回一个数组，否则为null</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>regObj<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>被检测字符串<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_15-2-3、replace" tabindex="-1"><a class="header-anchor" href="#_15-2-3、replace" aria-hidden="true">#</a> 15.2.3、replace()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>字符串<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">正则表达式</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;替换的文本&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_15-3、元字符" tabindex="-1"><a class="header-anchor" href="#_15-3、元字符" aria-hidden="true">#</a> 15.3、元字符</h3><p>元字符分类：<br><strong>边界符</strong>：表示位置，开头，结尾，必须用什么开头，什么结尾<br><strong>量词</strong>：表示重复次数<br><strong>字符类</strong>：如\\d，表示0~9</p><table><thead><tr><th>语法格式</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>[字符列表]</td><td>[abc] 含义：目标字符串包含<strong>abc中的任何一个</strong>字符 <br>目标字符串：plain 是否匹配：是 <br>原因：plain中的“a”在列表“abc”中</td><td>目标字符串中任何一个字符出现在字符列表中就算匹配。</td></tr><tr><td>[^字符列表]</td><td>[^abc] 含义：目标字符串包含<strong>abc以外</strong>的任何一个字符 <br>目标字符串：plain 是否匹配：是 <br>原因：plain中包含“p”、“l”、“i”、“n”</td><td>匹配字符列表中未包含的任意字符。</td></tr><tr><td>[字符范围]</td><td>[a-z] 含义：所有小写英文字符组成的字符列表 <br>正则表达式：[A-Z] <br>含义：所有大写英文字符组成的字符列表</td><td>匹配指定范围内的任意字符。</td></tr></tbody></table><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>出现零次或多次</td></tr><tr><td>+</td><td>出现一次或多次</td></tr><tr><td>?</td><td>出现零次或一次</td></tr><tr><td><code>{n} </code></td><td>出现n次</td></tr><tr><td><code>{n,}</code></td><td>出现n次或多次</td></tr><tr><td><code>{n,m}</code></td><td>出现n到m次</td></tr></tbody></table><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行字符以外的任意字符。</td></tr><tr><td>^</td><td>匹配字符串的<strong>开始</strong>，但在[]中使用表示取反</td></tr><tr><td>\\w</td><td>匹配字母或数字或下划线等价于[a-zA-Z0-9_]</td></tr><tr><td>\\W</td><td>匹配任何非单词字符。等价于[^A-Za-z0-9_]</td></tr><tr><td>\\s</td><td>匹配任意的空白符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]。</td></tr><tr><td>\\S</td><td>匹配任何非空白字符。等价于[^\\f\\n\\r\\t\\v]。</td></tr><tr><td>\\d</td><td>匹配数字。等价于[0-9]。</td></tr><tr><td>\\D</td><td>匹配一个非数字字符。等价于[^0-9]</td></tr><tr><td>\\b</td><td>匹配单词的开始或结束</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><h3 id="_15-4、修饰符" tabindex="-1"><a class="header-anchor" href="#_15-4、修饰符" aria-hidden="true">#</a> 15.4、修饰符</h3><ul><li>i 是单词 ignore 的缩写，正则匹配时字母不区分大小写</li><li>g 是单词 global 的缩写，匹配所有满足正则表达式的结果</li></ul>`,49);function w(S,L){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("strong",null,[n("a",r,[s("https://www.runoob.com/jsref/dom-obj-event.html"),t(a)])])]),d,n("p",null,[n("a",k,[s("swiper官网"),t(a)]),v,n("a",g,[s("swiper-demo"),t(a)]),s("（查看想要的滑动条）"),m,n("a",b,[s("swiper使用方法"),t(a)]),s("（基础配置）"),h,n("a",f,[s("API文档"),t(a)]),s("（配置选项）")]),x,n("p",null,[s("常见的使用场景："),y,n("a",_,[s("https://todomvc.com/examples/vanilla-es6/"),t(a)]),s(" 页面刷新数据不丢失")]),j])}const M=p(l,[["render",w],["__file","2、WebAPIs笔记.html.vue"]]);export{M as default};
