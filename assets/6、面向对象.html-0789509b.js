import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-c4ecc90f.js";const t={},p=e(`<h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><p>Java面向对象的三大主线：</p><ul><li>Java类及类成员：属性，方法，构造器，代码块，内部类</li><li>面向对象的三大特征：封装，继承，多态</li><li>其他关键字：this，super，static，final，abstract，interface，package，import</li></ul><h3 id="_1、java类和类的成员" tabindex="-1"><a class="header-anchor" href="#_1、java类和类的成员" aria-hidden="true">#</a> 1、Java类和类的成员</h3><h4 id="_1、面向对象的两个要素" tabindex="-1"><a class="header-anchor" href="#_1、面向对象的两个要素" aria-hidden="true">#</a> 1、面向对象的两个要素：</h4><ul><li>类：对一类事物的描述，是抽象的、概念上的定义</li><li>对象：是实际存在的该类事物的每个个体，因而也称为实例（instance）</li></ul><h4 id="_2、设计类就是设计类的成员" tabindex="-1"><a class="header-anchor" href="#_2、设计类就是设计类的成员" aria-hidden="true">#</a> 2、设计类就是设计类的成员</h4><p><strong>属性 = 成员变量 = field = 域、字段</strong><br><strong>方法 = 成员方法 = 函数 = method</strong><br> 创建类的对象 = 类的实例化 = 实例化类</p><h4 id="_3、类和对象的使用" tabindex="-1"><a class="header-anchor" href="#_3、类和对象的使用" aria-hidden="true">#</a> 3、类和对象的使用</h4><ul><li>创建类、设计类成员</li><li>创建类的对象</li><li>调用类的属性或方法</li></ul><h4 id="_4、对象的内存解析" tabindex="-1"><a class="header-anchor" href="#_4、对象的内存解析" aria-hidden="true">#</a> 4、对象的内存解析</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220628195208326.png" alt="image-20220628195208326" loading="lazy"></p><p><em><strong>栈(stack)：存储局部变量</strong></em><br><em><strong>堆(heap)：存放对象实例</strong></em></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220628201310761.png" alt="image-20220628201310761" loading="lazy"></p><h4 id="_5、属性-成员变量-与局部变量" tabindex="-1"><a class="header-anchor" href="#_5、属性-成员变量-与局部变量" aria-hidden="true">#</a> 5、属性（成员变量）与局部变量</h4><p>相同点：</p><ul><li>定义变量的格式：数据类型 变量名 = 变量值</li><li>先声明后使用</li><li>变量都有其对应作用域</li></ul><p>不同点：</p><ul><li>在类中声明的位置不同。 <ul><li>成员变量：直接定义在<strong>类</strong>中</li><li>局部变量：声明在<strong>方法</strong>内，方法形参，代码块内，构造器形参，构造器内部的变量</li></ul></li><li>权限修饰符的不同<br> 常用权限修饰符：<code>public、private、protected、缺省</code> （封装性） <ul><li>成员变量：<strong>可以</strong>在声明属性时使用权限修饰符</li><li>局部变量：<strong>不可以</strong>使用权限修饰符</li></ul></li><li>默认初始化值的情况 <ul><li>成员变量：有默认初始化值。 <ul><li>整形<code>byte，int，short，long</code> 0</li><li>浮点型<code>float double</code> 0.0</li><li>字符型<code>char</code> 0或&#39;\\u0000&#39;</li><li>布尔型<code>boolean</code> false</li><li>引用数据类型<code>类、数组、接口</code> null</li></ul></li><li>局部变量：<strong>没有</strong>默认初始化值，在调用局部变量之前<strong>一定要显式赋值</strong>。</li></ul></li><li>在内存中加载的位置： <ul><li>属性：加载到堆空间中（非static）</li><li>局部变量：加载到栈空间中</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    <span class="token comment">//属性（或成员变量）</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//形参，局部变量</span>
        <span class="token class-name">String</span> food <span class="token operator">=</span> <span class="token string">&quot;饼&quot;</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我们使用&quot;</span><span class="token operator">+</span>language<span class="token operator">+</span><span class="token string">&quot;交流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、方法的声明和使用" tabindex="-1"><a class="header-anchor" href="#_6、方法的声明和使用" aria-hidden="true">#</a> 6、方法的声明和使用</h4><p>方法：描述类应该具有的功能<br> 一般方法的声明：<code>权限修饰符 返回值类型 方法名(形参列表）{ 方法体 }</code></p><ul><li>权限修饰符：private、public、缺省、protected</li><li>返回值类型： <ul><li>有返回值</li><li>无返回值</li></ul></li><li>方法名：遵循规范，见名知意</li><li>形参列表：可以有0个，1个或多个形参</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>方法可以嵌套调用，不能嵌套定义</p></div><h4 id="_7、return关键字" tabindex="-1"><a class="header-anchor" href="#_7、return关键字" aria-hidden="true">#</a> 7、return关键字</h4><p>使用范围：方法体中<br> 作用：</p><ul><li>结束方法</li><li>返回所要的数据</li><li>return关键字后不可以声明执行语句（同break；）</li></ul><h4 id="_8、对象数组" tabindex="-1"><a class="header-anchor" href="#_8、对象数组" aria-hidden="true">#</a> 8、对象数组</h4><p>内存解析的说明：</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>引用类型</strong>的变量，只可能存储两类值：<strong>null 和 地址值(含变量类型)</strong></p></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220630142507804.png" alt="image-20220630142507804" loading="lazy"></p><h4 id="_9、匿名对象-抽象类的匿名子类对象" tabindex="-1"><a class="header-anchor" href="#_9、匿名对象-抽象类的匿名子类对象" aria-hidden="true">#</a> 9、匿名对象，抽象类的匿名子类对象</h4><ol><li>匿名对象的意义：一般只使用一次</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//匿名对象</span>
        <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两个不同的匿名对象</span>
        <span class="token class-name">PhoneMall</span> mall <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//匿名对象的使用 </span>
        mall<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>抽象类的匿名子类对象</p><p>抽象类的匿名字类对象：可以少写一个类，直接重写方法</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//一个匿名子类的对象：P</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@oiverride.
    public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;eat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11、方法的重载" tabindex="-1"><a class="header-anchor" href="#_11、方法的重载" aria-hidden="true">#</a> 11、方法的重载</h4><p>重载的概念：在<code>同一个类</code>中，允许存在一个以上的<code>同名方法</code><br> 只要它们的<code>参数个数或者参数类型不同</code>即可。</p><h4 id="_12、可变个数的形参" tabindex="-1"><a class="header-anchor" href="#_12、可变个数的形参" aria-hidden="true">#</a> 12、可变个数的形参</h4><p>jdk5.0新增内容<br> 可变个数形参的格式：<code>数据类型...变量名</code>（相当于数组）</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>可变个数的形参的方法与本类中方法名同名，形参类型也相同的数组之间<strong>不构成重载</strong><br> 可变个数形参在方法的形参中必须声明在<strong>末尾</strong>，且最多只<strong>能有一个</strong></p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//方法体</span>
<span class="token punctuation">}</span>
<span class="token comment">/*public void show(String[] strs){
    //方法体
}与上述方法相同*/</span>
<span class="token comment">//不构成重载，冲突</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13、方法参数的值传递机制" tabindex="-1"><a class="header-anchor" href="#_13、方法参数的值传递机制" aria-hidden="true">#</a> 13、方法参数的值传递机制</h4><p>关于变量的赋值：<br> 如果变量是<code>基本数据类型</code>，此时赋值的是变量所保存的<code>数据值</code>。<br> 如果变量是<code>引用数据类型</code>，此时赋值的是变量所保存的<code>数据的地址值</code></p><p>方法的形参的传递机制：<code>值传递机制</code></p><h4 id="_14、构造器" tabindex="-1"><a class="header-anchor" href="#_14、构造器" aria-hidden="true">#</a> 14、构造器</h4><p>构造器的作用：</p><ol><li>创建对象</li><li>初始化对象的属性(信息)</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建类的对象：new + 构造器</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>构造器无返回值<br> 子类不能继承父类的构造器，构造方法只能被显式或隐式的调用</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>若没有显示定义类的构造器，系统默认提供一个<strong>空参的构造器</strong></li><li>定义构造器的格式：<code>权限修饰符 类名(形参列表){}</code></li><li>一个类中定义的多个构造器构成<strong>重载</strong></li><li>显示的定义了类的构造器后，系统就<strong>不提供</strong>默认的空参构造器</li><li>一个类中，至少有一个构造器</li></ul></div><h4 id="_15、属性赋值的先后顺序" tabindex="-1"><a class="header-anchor" href="#_15、属性赋值的先后顺序" aria-hidden="true">#</a> 15、属性赋值的先后顺序</h4><p>1、默认初始化<br> 2、显示初始化 5、代码块中赋值<br> 3、构造器赋值<br> 4、通过“对象.方法/属性”赋值</p><p>顺序：1→2，5→3→4（<strong>由父及子，静态先行</strong>）</p><h4 id="_16、代码块" tabindex="-1"><a class="header-anchor" href="#_16、代码块" aria-hidden="true">#</a> 16、代码块</h4><ul><li>代码块用来<strong>初始化类、对象</strong></li><li>代码块如果有修饰的话，只能用<code>static</code>修饰</li><li>分类：静态代码块、非静态代码块</li></ul><h5 id="静态代码块" tabindex="-1"><a class="header-anchor" href="#静态代码块" aria-hidden="true">#</a> 静态代码块</h5><ul><li>内部可以有输出语句</li><li>随着类的加载而执行且 <strong>只执行一次</strong></li><li>用于初始化类的信息（静态的属性）</li><li>一个类中定义的多个静态代码块按声明的先后顺序执行</li><li>静态代码块的执行优先于非静态代码块</li><li>静态代码块内只能调用静态的属性，静态的方法，不能调用非静态的结构</li></ul><h5 id="非静态代码块" tabindex="-1"><a class="header-anchor" href="#非静态代码块" aria-hidden="true">#</a> 非静态代码块</h5><ul><li>内部可以有输出语句</li><li>随着对象的创建而执行，每创建一个对象，就执行一次非静态代码块</li><li>用于对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内能调用静态，非静态的属性，方法都能调用</li></ul><h4 id="_17、内部类" tabindex="-1"><a class="header-anchor" href="#_17、内部类" aria-hidden="true">#</a> 17、内部类</h4><p>java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类</p><p>内部类的分类：</p><ul><li>成员内部类</li><li>局部内部类(方法、代码块、构造器内)</li></ul><p>成员内部类：</p><ul><li>作为外部类的成员 <ul><li>调用外部类的结构</li><li>可以被static修饰</li><li>可以被四种不同权限修饰</li></ul></li><li>作为一个类： <ul><li>可以定义属性、构造器、方法等</li><li>可以被final修饰，表示此类不能被继承。不使用final就可以被继承</li><li>可以被abstract修饰</li></ul></li></ul><p>关注下列三个问题</p><ul><li>如何实例化成员内部类的对象</li><li>如何在成员内部类中区分调用外部类的结构</li><li>局部内部类的使用</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建Dog实例(静态的成员内部类)：</span>
        <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建Bird实例(非静态的成员内部类)：</span>
        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person<span class="token punctuation">.</span>Bird</span> bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//静态成员内部类</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">int</span> age<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//非静态成员内部类</span>
    <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用外部类的结构,Person.this可省略</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法形参</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内部类的属性</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//外部类的属性</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//局部内部类</span>
        <span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//局部内部类</span>
        <span class="token keyword">class</span> <span class="token class-name">BB</span><span class="token punctuation">{</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//局部内部类</span>
        <span class="token keyword">class</span> cc<span class="token punctuation">{</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//开发中局部内部类的使用</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest1</span><span class="token punctuation">{</span>
    <span class="token comment">//开发中很少见</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//局部内部类</span>
        <span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    <span class="token comment">//返回了一个实现了Comparable接口的类的对象</span>
    <span class="token keyword">public</span> <span class="token class-name">Comparble</span> <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建一个实现了Comparable接口的类：局部内部类</span>
        <span class="token comment">//方式一</span>
        <span class="token keyword">class</span> <span class="token class-name">MyComparable</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyCompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//方式二：</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>局部内部类使用的注意点：</p><p>在局部内部类的方法中(show)，如果调用局部内部类所在方法(method)中的局部变量的话，要求此局部变量(num)声明为final的<br> jdk 7之前的版本要求显示声明final的<br> jdk 8之后的版本，可以省略final</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> boid <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//num = 20;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、封装、继承、多态" tabindex="-1"><a class="header-anchor" href="#_2、封装、继承、多态" aria-hidden="true">#</a> 2、封装、继承、多态</h3><h4 id="_1、封装" tabindex="-1"><a class="header-anchor" href="#_1、封装" aria-hidden="true">#</a> 1、封装</h4><p>封装：实现了信息的隐藏</p><p>Java提供了4中权限修饰符来修饰类及类的内部结构<br> Java规定的四种权限：<code>private、缺省（default）、protected、public </code></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220701162418303.png" alt="image-20220701162418303" loading="lazy"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>权限修饰符可以修饰类及类的内部结构：<code>属性、方法、构造器、内部类</code></p><p>修饰类只能使用：缺省、public</p></div><h4 id="_2、继承" tabindex="-1"><a class="header-anchor" href="#_2、继承" aria-hidden="true">#</a> 2、继承</h4><h5 id="一、继承的好处" tabindex="-1"><a class="header-anchor" href="#一、继承的好处" aria-hidden="true">#</a> 一、继承的好处</h5><ul><li>减少代码冗余</li><li>便于功能扩展</li><li>为多态性的使用提供前提</li></ul><h5 id="二、继承性的格式" tabindex="-1"><a class="header-anchor" href="#二、继承性的格式" aria-hidden="true">#</a> 二、继承性的格式</h5><p><code>class A extends B{}</code></p><p>A：子类、派生类、subclass<br> B：父类、超类、基类、superclass</p><ul><li>一旦子类A继承父类B以后，<strong>子类A中就获取了父类B中声明的属性、方法</strong>。（<em>包括父类中声明为private的属性或方法，只是子类不能直接调用父类的结构而已</em>）</li><li>子类继承父类以后，还可以声明自己特有的属性或方法、实现功能拓展。</li></ul><h5 id="三、java中关于继承的规定-类与父类的关系" tabindex="-1"><a class="header-anchor" href="#三、java中关于继承的规定-类与父类的关系" aria-hidden="true">#</a> 三、java中关于继承的规定（类与父类的关系）</h5><ul><li>一个类可以被多个子类继承</li><li>一个类只能有一个父类（单继承）</li><li>子类直接继承的类是直接父类，间接继承的父类为间接父类</li><li>如果没有显示的声明一个类的父类的话，则默认此类继承与java.lang.Object类</li><li>所有的java类（除java.lang.Object类之外）都直接或间接继承与java.lang.Object类</li><li>所有的java类具有java.lang.Object类声明的功能</li></ul><h4 id="_3、方法的重写-override-overwrite" tabindex="-1"><a class="header-anchor" href="#_3、方法的重写-override-overwrite" aria-hidden="true">#</a> 3、方法的重写（override/overwrite）</h4><ul><li>重写：子类继承父类后，可以对父类中<code>同名同参数</code>的方法，进行覆盖操作</li><li>重写后，创建子类对象，通过子类对象调用父类中的同名参数的方法时，实际执行<code>子类重写父类</code>的方法</li><li>重写的规定： <ul><li>方法的声明：<code>权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型{方法体}</code></li><li>子类中的叫重写的方法，父类中的叫被重写的方法</li><li>子类重写方法的方法名和形参列表和父类中被重写的方法的<code>方法名和形参列表**相同</code></li><li>子类重写方法的权限<code>修饰符不小于父类</code>被重写的方法的权限修饰符</li><li>子类不能重写父类中声明为private权限的方法</li><li>返回值类型：<br> -父类被重写方法的返回值是<code>void</code>，则子类重写的方法的返回值类型只能是<code>void</code><ul><li>父类被重写的方法的返回值类型是<code>A类型</code>，则子类重写的方法的返回值类型可以是<code>A类或A类的子类</code></li><li>父类被重写的方法的返回值类型是<code>基本数据类型</code>则子类重写的方法的返回值类型必须是<code>相同的基本数据类型</code></li></ul></li><li>子类重写的方法抛出的异常类型<code>不大于父类</code>被重写的方法抛出的<code>异常类型</code></li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>子类中同名同参数的方法要么都声明为非static，要么声明为<mark>static（不是重写）</mark></p></div><h4 id="_3、多态性" tabindex="-1"><a class="header-anchor" href="#_3、多态性" aria-hidden="true">#</a> 3、多态性</h4><p>多态性：可以理解为一个事物的多种形态<br> 对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类的引用）</p><h5 id="_1、多态的使用-虚拟方法调用" tabindex="-1"><a class="header-anchor" href="#_1、多态的使用-虚拟方法调用" aria-hidden="true">#</a> 1、多态的使用：虚拟方法调用</h5><p>有了对象的多态性以后<br> 在编译期，<strong>只能</strong>调用父类中声明的方法<br> 在运行期，我们实际执行的是子类<strong>重写</strong>父类的方法<br><code>总结：编译看左边，运行看右边</code></p><h5 id="_2、多态性的使用前提" tabindex="-1"><a class="header-anchor" href="#_2、多态性的使用前提" aria-hidden="true">#</a> 2、多态性的使用前提：</h5><ul><li>类的继承关系</li><li>方法的重写</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//对象的多态性：父类的引用指向子类的对象  </span>
<span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法---虚拟方法调用</span>
p2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//p2.earnMoney();    子类中特有的方法，编译错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>对象的多态性只适用于方法，不适用于属性</p></div><h5 id="虚拟方法调用的理解" tabindex="-1"><a class="header-anchor" href="#虚拟方法调用的理解" aria-hidden="true">#</a> 虚拟方法调用的理解</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220705204204460.png" alt="image-20220705204204460" loading="lazy"></p><h3 id="_3、其他关键字" tabindex="-1"><a class="header-anchor" href="#_3、其他关键字" aria-hidden="true">#</a> 3、其他关键字</h3><h4 id="_1、this关键字" tabindex="-1"><a class="header-anchor" href="#_1、this关键字" aria-hidden="true">#</a> 1、this关键字</h4><p>this关键字的使用：</p><ul><li>this可以用来修饰、调用：属性、方法、构造器</li><li>this修饰属性和方法：<strong>this理解为当前对象</strong></li><li>在类的构造器中可以使用<code>this(形参列表)</code>方式调用本类中的其他构造器</li><li>构造器中不能通过<code>this(形参列表)</code>调用自己</li><li>this(形参列表) 必须声明在构造器首行</li><li>构造器内部最多只能声明一个this(形参列表)用来调用其他的构造器</li></ul><p>在类的方法或构造器中，我们可以使用<code>this.属性</code>或<code>this.方法</code>的方式，调用当前对象属性或方法。但是通常情况下我们都省略<code>this.</code>。<br> 特殊情况下，如果方法或构造器的<strong>形参</strong>和<strong>类的属性重名</strong>时，我们必须显示的使用<code>this.变量</code>的方式表明此变量是属性，而非形参。</p><h4 id="_2、package关键字" tabindex="-1"><a class="header-anchor" href="#_2、package关键字" aria-hidden="true">#</a> 2、package关键字</h4><ul><li>使用package声明类或者接口所属的包，声明在源文件的首行</li><li>包属于标识符，遵循标识符的命名规则（全部小写、见名知意）</li><li>每 <code>.</code> 一次，就代表一层文件目录</li><li>同一包下，不可以命名同名的接口或类。不同的包下可以命名同名的接口、类。</li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220702205908691.png" alt="image-20220702205908691" loading="lazy"></p><h4 id="_3、import关键字的使用" tabindex="-1"><a class="header-anchor" href="#_3、import关键字的使用" aria-hidden="true">#</a> 3、import关键字的使用</h4><p>import：导入</p><ul><li>在源文件中显式的使用import结构导入指定包下的<strong>类、接口</strong></li><li>声明在包的声明和类的声明之间</li><li>如果需要导入多个结构，则并列写出</li><li>可以使用<code>xxx.</code>的方式，表示可以导入xxx包下的所有结构</li><li>如果使用的类或接口是java.lang包定义的，则可以省略import结构</li><li>如果使用的类或接口是本包下定义的，则可以省略import结构</li><li>如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示</li><li>如果使用“xxx.*”的方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入。</li><li>import static：导入指定类或接口中的静态结构：属性，方法。</li></ul><h4 id="_4、super关键字" tabindex="-1"><a class="header-anchor" href="#_4、super关键字" aria-hidden="true">#</a> 4、super关键字</h4><ul><li>super理解为父类的，可以用来调用：<strong>属性、方法、构造器</strong></li><li>super的使用 <ul><li>在子类的方法或构造器中，通过使用<code>super.属性</code>或<code>super.方法</code>显式的调用父类中声明的属性或方法。但通常情况下都习惯省略super关键字。</li><li>特殊情况，<strong>当子类和父类定义了同名的属性，必须显式的使用”super.属性“的方式</strong>，表明<strong>调用的是父类中声明的属性</strong>。</li><li>当子类重写了父类中的方法后，想在子类方法中调用父类被重写的方法，必须显式的使用<code>super.方法</code>的方式，表明调用的是父类中声明的方法。</li><li>super调用构造器： <ul><li>可以在子类的构造器中显式的使用<code>super(形参列表)</code>的方式，调用父类中声明的指定的构造器</li><li><code>super(形参列表)</code>的使用也必须声明在子类构造器的<code>首行</code></li><li>在类的构造器中，针对<code>this(形参列表)</code>或<code>super(形参列表)</code>只能二选一，<code>不能同时出现</code></li><li>在构造器的首行没有显示的声明<code>this(形参列表)</code>或<code>super(形参列表)</code>，则<code>默认调用</code>的是父类中空参的构造器，<code>super()</code></li><li>在类的多个构造器中，至少有一个类的构造器中使用了<code>super(形参列表)</code>，调用父类中的构造器</li></ul></li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>子类对象实例化全过程<br> 结果上：<br> 子类获取父类中声明的属性和方法<br> 创建子类的对象，在堆空间中，就会加载所有父类中声明的属性</p><p>过程上：<br> 通过子类构造器直接或间接的调用父类的构造器，直到调用到java.lang.Object类中空参的构造器。<br> 加载过所有父类的结构，所以才能看到内存中有父类的结构，子类对象可以进行调用。</p></div><h4 id="_5、instanceof关键字" tabindex="-1"><a class="header-anchor" href="#_5、instanceof关键字" aria-hidden="true">#</a> 5、instanceof关键字</h4><h5 id="如何调用子类特有的属性和方法" tabindex="-1"><a class="header-anchor" href="#如何调用子类特有的属性和方法" aria-hidden="true">#</a> 如何调用子类特有的属性和方法</h5><p>强制类型转换</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用强制类型转换符（向下转型）</span>
<span class="token class-name">Man</span> m1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220706104023004.png" alt="image-20220706104023004" loading="lazy"></p><p>使用强转时，可能会出现<code>ClassCastException</code>的异常</p><h5 id="instanceof的使用" tabindex="-1"><a class="header-anchor" href="#instanceof的使用" aria-hidden="true">#</a> instanceof的使用</h5><p><code>a instanceof A</code> 判断a是否时A的实例，如果是，返回true，若不是，返回false</p><p>如果<code>a instanceof A</code>返回<code>true</code>，则<code>a instanceof B</code>也返回<code>true</code>，那么类B是类A的父类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Woman</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Woman</span> w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Woman</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>
    wi<span class="token punctuation">.</span><span class="token function">goShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">Man</span> m1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>
    m1<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//常见问题</span>
<span class="token comment">//编译通过，运行不通过</span>

<span class="token comment">/*同级之间不可转换
Person p3 = new Woman();
Man m3 = (Man)p3;*/</span>

<span class="token comment">/*new出来的对象时Person，无法拥有子类的属性，方法
Person p4 = new Person();
Man m4 = (Man)p4;*/</span>

<span class="token comment">//编译通过，运行也通过</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>

<span class="token class-name">Man</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> m<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true 地址相等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、static关键字" tabindex="-1"><a class="header-anchor" href="#_7、static关键字" aria-hidden="true">#</a> 7、static关键字</h4><p>static可以修饰：属性，方法，代码块，内部类（无构造器）</p><h5 id="_1、使用static修饰属性-静态变量-类变量" tabindex="-1"><a class="header-anchor" href="#_1、使用static修饰属性-静态变量-类变量" aria-hidden="true">#</a> 1、使用static修饰属性：静态变量(类变量)</h5><p>属性：按是否使用static修饰，分为：<strong>静态属性</strong>和<strong>非静态属性(实例变量)</strong></p><ul><li><p><strong>静态变量</strong>：创建了多个类的对象，<strong>多个对象共享一个静态变量</strong>。当通过某一个对象修改静态对象时，会<strong>导致其他对象调用此静态变量时，是修改过了的</strong>。</p></li><li><p><strong>实例变量</strong>：创建了多个类的对象，<strong>每个类都拥有一套类中的非静态属性</strong>。当修改其中一个对象中的非静态属性时，不会导致其他对象中的同样的属性值修改。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        <span class="token class-name">Chinese</span><span class="token punctuation">.</span>nation <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Chinese</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">Chinese</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
        c2<span class="token punctuation">.</span>nation <span class="token operator">=</span> <span class="token string">&quot;CHN&quot;</span><span class="token punctuation">;</span><span class="token comment">//c2的nation也变为CHN</span>
        <span class="token class-name">Chinese</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> nation<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>static修饰属性的其他说明：</p><ul><li>静态变量<strong>随着类的加载而加载</strong>。可以通过“<strong>类.静态变量</strong>”的方式进行调用</li><li>静态变量的加载要<strong>早于对象的创建</strong></li><li>由于类只会加载一次，则静态变量在内存中也会存在一份：<strong>存在方法区的静态域</strong>中</li></ul><table><thead><tr><th style="text-align:center;">是否可调用</th><th style="text-align:center;">类变量</th><th style="text-align:center;">实例变量</th></tr></thead><tbody><tr><td style="text-align:center;">类</td><td style="text-align:center;">yes</td><td style="text-align:center;">no</td></tr><tr><td style="text-align:center;">对象</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td></tr></tbody></table><h5 id="_2、类变量和实例变量的内存解析" tabindex="-1"><a class="header-anchor" href="#_2、类变量和实例变量的内存解析" aria-hidden="true">#</a> 2、类变量和实例变量的内存解析</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220707194043724.png" alt="image-20220707194043724" loading="lazy"></p><h5 id="_3、使用static修饰方法-静态方法" tabindex="-1"><a class="header-anchor" href="#_3、使用static修饰方法-静态方法" aria-hidden="true">#</a> 3、使用static修饰方法：静态方法</h5><ul><li><strong>随着类的加载而加载</strong>，可以通过“<strong>类.静态方法</strong>”的方式进行调用</li></ul><table><thead><tr><th style="text-align:center;">是否可调用</th><th style="text-align:center;">静态方法</th><th style="text-align:center;">非静态方法</th></tr></thead><tbody><tr><td style="text-align:center;">类</td><td style="text-align:center;">yes</td><td style="text-align:center;">no</td></tr><tr><td style="text-align:center;">对象</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td></tr></tbody></table><ul><li>静态方法中，<strong>只能调用静态的方法或属性</strong><br> 非静态方法中，既可以调用非静态的方法或属性，也可以调用静态方法或属性</li><li>static注意点：在静态的方法内，不能使用this关键字、super关键字(this,super是相对于对象而言的，调用非静态方法，隐含this.)，静态方法不能被重写</li></ul><h5 id="_4、单例设计模式" tabindex="-1"><a class="header-anchor" href="#_4、单例设计模式" aria-hidden="true">#</a> 4、单例设计模式</h5><p>优点：减少性能的开销</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220708113553895.png" alt="image-20220708113553895" loading="lazy"></p><p>饿汉式：坏处：对象加载时间过长 好处：是线程安全的<br> 懒汉式：好处：延迟对象的创建 目前写法的坏处：线程不安全</p><h4 id="_8、main-方法的使用说明" tabindex="-1"><a class="header-anchor" href="#_8、main-方法的使用说明" aria-hidden="true">#</a> 8、main()方法的使用说明</h4><ul><li>main()方法作为程序的入口</li><li>main()方法也是一个普通的静态方法</li><li>main()也可以作为我们与控制台交互的方式。(形参，Scanner)</li></ul><h4 id="_9、final关键字" tabindex="-1"><a class="header-anchor" href="#_9、final关键字" aria-hidden="true">#</a> 9、final关键字</h4><ul><li>final可以用来修饰的结构：类、方法、变量</li><li>final用来修饰一个类：<strong>此类不能被其他类所继承</strong>。<br> 比如：String类，System类，StringBuffer类</li><li>final用来修饰方法：表明<strong>此方法不可以被重写</strong>。<br> 比如：Object类中的getClass()</li><li>final用来修饰变量：此时的“变量”就称为一个<strong>常量</strong></li></ul><p>①final修饰属性，可以考虑的位置有：<strong>显示初始化、代码块中初始化、构造器中初始化</strong>（没有方法）<br> ②final修饰局部变量：尤其视同final修饰形参时，表明此形参是一个常量。当调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，不能在重新赋值</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>static final用来修饰属性：全局常量</p></div><h4 id="_10、abstract抽象类和抽象方法" tabindex="-1"><a class="header-anchor" href="#_10、abstract抽象类和抽象方法" aria-hidden="true">#</a> 10、abstract抽象类和抽象方法</h4><ul><li>abstract可以用来修饰：类、方法</li><li>abstrasct类，抽象类 <ul><li>此类不能实例化</li><li>抽象类中一定有构造器，便于子类实例化时调用</li><li>都会提供抽象类的子类，让子类对象实例化，完成相关操作</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>abstract修饰方法：抽象方法 <ul><li>抽象方法只有方法的声明，<strong>没有方法体</strong></li><li><strong>包含抽象方法的类一定是一个抽象类</strong>，反之<strong>抽象类中可以没有抽象方法</strong></li><li>若<strong>子类重写了父类中的所有的抽象方法</strong>后，此<strong>子类方可实例化</strong>，若<strong>子类没有重写父类中的所有抽象方法</strong>，<strong>子类</strong>也是一个<strong>抽象类</strong>，需使用<strong>abstract</strong>修饰</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>abstract不能来修饰：属性、构造器等结构（只能修饰类和方法）<br> abstract不能用来修饰私有方法、静态方法、final的方法、final的类</p><h5 id="模板方法设计模式" tabindex="-1"><a class="header-anchor" href="#模板方法设计模式" aria-hidden="true">#</a> 模板方法设计模式</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220709165841679.png" alt="image-20220709165841679" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Template</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父类的操作</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//不确定的部分、易变的部分（子类重写的方法）</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">SubTempLate</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SubTemplate</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            t<span class="token punctuation">.</span><span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类的方法</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11、interface接口" tabindex="-1"><a class="header-anchor" href="#_11、interface接口" aria-hidden="true">#</a> 11、interface接口</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220709220816216.png" alt="image-20220709220816216" loading="lazy"></p><ul><li>接口使用interface来定义</li><li>Java中，<strong>接口和类是并列的两个结构</strong></li><li>如何定义接口：定义接口中的成员 <ul><li>JDK7及以前：<br> 只能定义全局常量和抽象方法<br><code>全局常量</code>：<code>public static final</code>的。但是书写时可以省略不写<br><code>抽象方法</code>：<code>public abstract</code></li><li>JDK8：<br> 除了定义全局变量和抽象方法之外，还可以定义<code>静态方法、默认方法 </code></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompareA</span><span class="token punctuation">{</span>
    <span class="token comment">//静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//默认方法</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//省略了public</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClassTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SubClass</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//s.method();</span>
        <span class="token comment">//SubClass.method()</span>
        <span class="token comment">//1、接口中定义的静态方法，只能通过接口来调用</span>
        <span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2、通过实现类的对象，可以调用接口中的默认方法。如果实现类重写了接口中的默认方法，调用时，调用的是重写后的方法</span>
        s<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3、如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的方法，那么子类在没有重写此方法的情况下，默认调用父类中的同名同参的方法。（类优先原则）</span>
        <span class="token comment">//4、如果实现类实现了多个接口，且这多个接口定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错（接口冲突）</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">implements</span> <span class="token class-name">CompareA</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>接口中定义的静态方法，只能通过接口来调用</strong><br><strong>通过实现类的对象，可以调用接口中的默认方法。如果实现类重写了接口中的默认方法，调用时，调用的是重写后的方法</strong></p><ul><li><p><strong>接口中不能定义构造器</strong>，意味着接口不能实例化==</p></li><li><p>Java开发中，接口通过类去**实现(implements)**的方式来使用</p><ul><li>如果<strong>实现类覆盖了</strong>接口中的<strong>所有抽象方法</strong>，则此<strong>实现类就可以实例化</strong></li><li>如果<strong>实现类没有覆盖</strong>接口中<strong>所有抽象方法</strong>，则此实现类<strong>仍为一个抽象类</strong></li></ul></li><li><p>Java类可以还是先多个接口→弥补了Java单继承性的局限性<br> 格式：class AA extends BB implements CC,DD,EE</p></li><li><p>接口与接口之间可以继承，而且可以多继承</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Flyable</span><span class="token punctuation">.</span><span class="token constant">MAX_SPEED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Flyable</span><span class="token punctuation">.</span><span class="token constant">MIN_SPEED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Flyable</span><span class="token punctuation">{</span>
    <span class="token comment">//全局常量</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_SPEED</span> <span class="token operator">=</span> <span class="token number">7900</span><span class="token punctuation">;</span><span class="token comment">//第一宇宙速度</span>
    <span class="token keyword">int</span> <span class="token constant">MIN_SPEED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//同样时常量,省略了public static final</span>
    <span class="token comment">//抽象方法</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略了public abstract</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Attackable</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Plan</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
	<span class="token punctuation">}</span>
    <span class="token annotation punctuation">@override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> bullet <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">,</span><span class="token class-name">Attackable</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
	<span class="token punctuation">}</span>
    <span class="token annotation punctuation">@override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
    <span class="token annotation punctuation">@override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//接口的继承</span>
<span class="token keyword">interface</span> <span class="token class-name">AA</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">BB</span><span class="token punctuation">{</span>
     <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">CC</span> <span class="token keyword">extends</span> <span class="token class-name">AA</span><span class="token punctuation">,</span><span class="token constant">BB</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>8、<strong>接口的使用、多态性</strong></p><ul><li>接口使用上也满足多态性</li><li>接口实际上就是定义了一种规范</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//接口多态性的体现</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">USBTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Computer</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1、创建了接口的非匿名实现类的非匿名对象</span>
        <span class="token class-name">Flash</span> falsh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flash</span><span class="token punctuation">;</span>
        com<span class="token punctuation">.</span><span class="token function">transforData</span><span class="token punctuation">(</span>flash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//2、创建了接口的非匿名实现类的匿名对象</span>
        com<span class="token punctuation">.</span><span class="token function">transforData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Flash</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//3、创建了接口的匿名实现类的非匿名对象</span>
        <span class="token class-name">USB</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@override</span>
             <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token comment">//方法体</span>
             <span class="token punctuation">}</span>
            <span class="token annotation punctuation">@override</span>
    		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token comment">//方法体</span>
        	<span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        com<span class="token punctuation">.</span><span class="token function">transforData</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
		<span class="token comment">//4、创建了接口的匿名实现类的匿名对象</span>
        com<span class="token punctuation">.</span><span class="token function">transforData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@override</span>
             <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token comment">//方法体</span>
             <span class="token punctuation">}</span>
            <span class="token annotation punctuation">@override</span>
    		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token comment">//方法体</span>
        	<span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transforData</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span><span class="token punctuation">{</span>
        usb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        usb<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">USB</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> flash <span class="token keyword">implements</span> <span class="token class-name">USB</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
	<span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口的应用：代理模式</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220710153043102.png" alt="image-20220710153043102" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Network</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Server</span> sever <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProxyServer</span> proxyServer<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySever</span><span class="token punctuation">(</span>sever<span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxyServer<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Network</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//被代理类</span>
<span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token keyword">implements</span> <span class="token class-name">Network</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;真实的服务器访问&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//代理类</span>
<span class="token keyword">class</span> <span class="token class-name">ProxySever</span> <span class="token keyword">implements</span> <span class="token class-name">Network</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Network</span> work<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">ProxySever</span><span class="token punctuation">(</span><span class="token class-name">Network</span> work<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> work<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;联网前的一些检查工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token annotation punctuation">@override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        work<span class="token punctuation">.</span>browse<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220710154540213.png" alt="image-20220710154540213" loading="lazy"></p><p>接口的应用：工厂模式<br> 接口，父类同名属性的讨论：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> s<span class="token punctuation">{</span>
        <span class="token comment">//System.out.println(x);//编译不通过，x是不明确的</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>题目：排错</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220710161404053.png" alt="image-20220710161404053" loading="lazy"></p><p>两个接口的play方法都被类重写了<br> Rollable中的ball省略了public static final，不能被修改</p>`,179),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","6、面向对象.html.vue"]]);export{r as default};
