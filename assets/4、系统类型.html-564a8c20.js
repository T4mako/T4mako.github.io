const e=JSON.parse('{"key":"v-0ddb8304","path":"/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/TypeScript/4%E3%80%81%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%9E%8B.html","title":"系统类型","lang":"zh-CN","frontmatter":{"title":"系统类型","date":"2023-08-14T00:00:00.000Z","category":["TypeScript"],"order":4,"description":"四、系统类型 1、基本类型 JavaScript 语言 将值分成8种类型。 boolean string number bigint symbol object undefined null TypeScript 继承了 JavaScript 的类型设计，以上8种类型可以看作 TypeScript 的基本类型。 相关信息 注意，上面所有类型的名称都是小写字母，首字母大写的Number、String、Boolean等在 JavaScript 语言中都是内置对象，而不是类型名称。 另外，undefined 和 null 既可以作为值，也可以作为类型，取决于在哪里使用它们。","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/TypeScript/4%E3%80%81%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"系统类型"}],["meta",{"property":"og:description","content":"四、系统类型 1、基本类型 JavaScript 语言 将值分成8种类型。 boolean string number bigint symbol object undefined null TypeScript 继承了 JavaScript 的类型设计，以上8种类型可以看作 TypeScript 的基本类型。 相关信息 注意，上面所有类型的名称都是小写字母，首字母大写的Number、String、Boolean等在 JavaScript 语言中都是内置对象，而不是类型名称。 另外，undefined 和 null 既可以作为值，也可以作为类型，取决于在哪里使用它们。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:published_time","content":"2023-08-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"四、系统类型","slug":"四、系统类型","link":"#四、系统类型","children":[{"level":3,"title":"1、基本类型","slug":"_1、基本类型","link":"#_1、基本类型","children":[]},{"level":3,"title":"2、包装对象类型","slug":"_2、包装对象类型","link":"#_2、包装对象类型","children":[]},{"level":3,"title":"3、Object 类型与 object 类型","slug":"_3、object-类型与-object-类型","link":"#_3、object-类型与-object-类型","children":[]},{"level":3,"title":"4、undefined 和 null 的特殊性","slug":"_4、undefined-和-null-的特殊性","link":"#_4、undefined-和-null-的特殊性","children":[]},{"level":3,"title":"5、值类型","slug":"_5、值类型","link":"#_5、值类型","children":[]},{"level":3,"title":"6、联合类型 |","slug":"_6、联合类型","link":"#_6、联合类型","children":[]},{"level":3,"title":"7、交叉类型 &","slug":"_7、交叉类型","link":"#_7、交叉类型","children":[]},{"level":3,"title":"8、type 命令","slug":"_8、type-命令","link":"#_8、type-命令","children":[]},{"level":3,"title":"9、typeof 运算符","slug":"_9、typeof-运算符","link":"#_9、typeof-运算符","children":[]},{"level":3,"title":"10、块级类型声明","slug":"_10、块级类型声明","link":"#_10、块级类型声明","children":[]},{"level":3,"title":"11、类型的兼容","slug":"_11、类型的兼容","link":"#_11、类型的兼容","children":[]}]}],"readingTime":{"minutes":17.78,"words":5333},"filePathRelative":"code/前端开发/TypeScript/4、系统类型.md","localizedDate":"2023年8月14日","excerpt":"<h2> 四、系统类型</h2>\\n<h3> 1、基本类型</h3>\\n<p><strong>JavaScript</strong> 语言 将值分成8种类型。</p>\\n<ul>\\n<li>boolean</li>\\n<li>string</li>\\n<li>number</li>\\n<li>bigint</li>\\n<li>symbol</li>\\n<li>object</li>\\n<li>undefined</li>\\n<li>null</li>\\n</ul>\\n<p>TypeScript 继承了 JavaScript 的类型设计，以上8种类型可以看作 TypeScript 的基本类型。</p>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>注意，上面所有类型的名称都是小写字母，首字母大写的<code>Number</code>、<code>String</code>、<code>Boolean</code>等在 JavaScript 语言中都是内置对象，而不是类型名称。</p>\\n<p>另外，undefined 和 null 既可以作为值，也可以作为类型，取决于在哪里使用它们。</p>\\n</div>","autoDesc":true}');export{e as data};
