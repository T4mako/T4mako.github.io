import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as p,e as s,b as a,d as n,f as t}from"./app-b2f1a6bd.js";const d={},r=a("p",null,[n("JVM(Java Virtual Machine) 其实就类似于一台小电脑运行在 windows 或者 linux 这些操作系统环境下即可。"),a("br"),n(" 它直接和操作系统进行交互，与硬件不直接交互，而操作系统可以帮我们完成和硬件进行交互的工作。")],-1),u=t('<h2 id="_1、基础知识" tabindex="-1"><a class="header-anchor" href="#_1、基础知识" aria-hidden="true">#</a> 1、基础知识</h2><h3 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h3><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。</p><p>JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p>字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><p><strong>JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。</strong><br> 也就是说我们平时接触到的 HotSpot VM（Sun/Oracle JDK 和 OpenJDK 中所带的虚拟机） 仅仅是是 JVM 规范的一种实现而已</p><blockquote><p>Oracle JDK 是基于 OpenJDK 源代码构建的</p></blockquote><h3 id="jdk-和-jre" tabindex="-1"><a class="header-anchor" href="#jdk-和-jre" aria-hidden="true">#</a> JDK 和 JRE</h3><ul><li>JDK（Java Development Kit）= JRE + 开发工具集（javac.exe,java..exe,javadoc.exe...）</li><li>JRE（Java Runtime Environment Java运行环境）= JVM + Java SE 标准类库（Java Class Library）</li></ul><p>JDK（Java Development Kit），它是功能齐全的 Java SDK（软件开发套件 Software development kit），是提供给开发者使用的，能够创建和编译 Java 程序。</p><p>它包含了 JRE，同时还包含了编译 java 源码的编译器 javac 以及一些其他工具比如 javadoc（文档注释工具）、jdb（调试器）、jconsole（基于 JMX 的可视化监控⼯具）、javap（反编译工具）等等。</p><p>JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，主要包括 Java 虚拟机（JVM）、Java 基础类库（Class Library）。</p><p>JRE 是 Java 运行时环境，仅包含 Java 应用程序的运行时环境和必要的类库。</p><p>JDK 则包含了 JRE，同时还包括了 javac、javadoc、jdb、jconsole、javap 等工具，可以用于 Java 应用程序的开发和调试。</p><p>如果需要进行 Java 编程工作，比如编写和编译 Java 程序、使用 Java API 文档等，就需要安装 JDK。<br> 而对于某些需要使用 Java 特性的应用程序，如 JSP 转换为 Java Servlet、使用反射等，也需要 JDK 来编译和运行 Java 代码。<br> 因此，即使不打算进行 Java 应用程序的开发工作，也有可能需要安装 JDK。</p><h3 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码" aria-hidden="true">#</a> 字节码</h3><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。</p><p>Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>',18),J=a("p",null,[a("code",null,".class->机器码"),n(" 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器"),a("strong",null,"逐行解释执行"),n("，这种方式的执行速度会相对比较慢。")],-1),v=a("p",null,"而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。",-1),h=a("p",null,"而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言",-1),k=a("div",{class:"hint-container info"},[a("p",{class:"hint-container-title"},"相关信息"),a("p",null,[n("HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（"),a("strong",null,"热点代码"),n("），而这也就是 JIT 所需要编译的部分。")]),a("p",null,"JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。"),a("p",null,"JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。")],-1),m=t('<p>JVM 大致结构模型：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230821005244740.png" alt="image-20230821005244740" loading="lazy"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>为什么不全部使用 AOT 呢?</p><p>AOT 可以提前编译节省启动时间，那为什么不全部使用这种编译方式呢？</p><p>长话短说，这和 Java 语言的动态特性有千丝万缕的联系了。举个例子，CGLIB 动态代理使用的是 ASM 技术，而这种技术大致原理是运行时直接在内存中生成并加载修改后的字节码文件也就是 .class 文件，如果全部使用 AOT 提前编译，也就不能使用 ASM 技术了。为了支持类似的动态特性，所以选择使用 JIT 即时编译器。</p></div><h3 id="java-语言-编译与解释并存-的原因" tabindex="-1"><a class="header-anchor" href="#java-语言-编译与解释并存-的原因" aria-hidden="true">#</a> Java 语言“编译与解释并存”的原因</h3><p>高级编程语言按照程序的执行方式分为两种：</p><ul><li>编译型：编译型语言 会通过编译器将源代码 <strong>一次性翻译</strong> 成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</li><li>解释型：解释型语言会通过解释器 <strong>一句一句的将代码解释</strong>（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</li></ul>',6),b=a("h3",{id:"oracle-jdk-vs-openjdk",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#oracle-jdk-vs-openjdk","aria-hidden":"true"},"#"),n(" Oracle JDK vs OpenJDK")],-1),g=a("p",null,[n("2006 年 SUN 公司将 Java 开源，也就有了 OpenJDK。"),a("br"),n(" 2009 年 Oracle 收购了 Sun 公司，于是自己在 OpenJDK 的基础上搞了一个 Oracle JDK。 Oracle JDK 是不开源的，并且刚开始的几个版本（Java8 ~ Java11）还会相比于 OpenJDK 添加一些特有的功能和工具。")],-1),D=a("p",null,"Oracle JDK 是基于 OpenJDK 7 构建的，只添加了一些小功能，由 Oracle 工程师参与维护。",-1),_=a("p",null,"Oracle JDK 和 OpenJDK 的区别：",-1),K=a("br",null,null,-1),O={href:"https://github.com/openjdk/jdk",target:"_blank",rel:"noopener noreferrer"},S=t("<li>是否免费：Oracle JDK 会提供免费版本，但一般有时间限制。<br> JDK17 之后的版本可以免费分发和商用，但是仅有 3 年时间，3 年后无法免费商用<br> 不过，JDK8u221 之前只要不升级可以无限期免费。OpenJDK 是完全免费的。</li><li>功能性：Oracle JDK 在 OpenJDK 的基础上添加了一些特有的功能和工具，比如 Java Flight Recorder（JFR，一种监控工具）、Java Mission Control（JMC，一种监控工具）等工具。<br> 不过，在 Java 11 之后，OracleJDK 和 OpenJDK 的功能基本一致，之前 OracleJDK 中的私有组件大多数也已经被捐赠给开源组织。</li><li>稳定性：OpenJDK 不提供 LTS 服务，而 OracleJDK 大概每三年都会推出一个 LTS 版进行长期支持。<br> 不过，很多公司都基于 OpenJDK 提供了对应的和 OracleJDK 周期相同的 LTS 版。因此，两者稳定性其实也是差不多的。</li><li>协议：Oracle JDK 使用 <code>BCL/OTN</code> 协议获得许可，而 OpenJDK 根据 <code>GPL v2</code> 许可获得许可。</li>",4),A={class:"hint-container info"},f=a("p",{class:"hint-container-title"},"相关信息",-1),j=a("p",null,"既然 Oracle JDK 这么好，那为什么还要有 OpenJDK？",-1),V={href:"https://github.com/alibaba/dragonwell8",target:"_blank",rel:"noopener noreferrer"},x=a("li",null,"OpenJDK 是商业免费的（这也是为什么通过 yum 包管理器上默认安装的 JDK 是 OpenJDK 而不是 Oracle JDK）。虽然 Oracle JDK 也是商业免费（比如 JDK 8），但并不是所有版本都是免费的。",-1),M=a("li",null,"OpenJDK 更新频率更快。Oracle JDK 一般是每 6 个月发布一个新版本，而 OpenJDK 一般是每 3 个月发布一个新版本。（现在你知道为啥 Oracle JDK 更稳定了吧，先在 OpenJDK 试试水，把大部分问题都解决掉了才在 Oracle JDK 上发布）基于以上这些原因，OpenJDK 还是有存在的必要的！",-1),y=t('<h2 id="_2、java-文件是如何被运行的" tabindex="-1"><a class="header-anchor" href="#_2、java-文件是如何被运行的" aria-hidden="true">#</a> 2、Java 文件是如何被运行的</h2><p>假设编写了一个 <code>A.java</code> 文件，目前它只是一个文本文件且有一定的缩进<br> JVM 是不认识文本文件的，所以它需要一个 <strong>编译</strong> ，让其成为一个它会读二进制文件的 <code>A.class</code></p><h3 id="_1-类加载器" tabindex="-1"><a class="header-anchor" href="#_1-类加载器" aria-hidden="true">#</a> ① 类加载器</h3><p>如果 JVM 想要执行这个 .class 文件，我们需要将其装进一个 <strong>类加载器</strong> 中，它就像一个搬运工一样，会把所有的 .class 文件全部搬进 JVM 里面来。</p>',4),T=t(`<h3 id="_2-方法区" tabindex="-1"><a class="header-anchor" href="#_2-方法区" aria-hidden="true">#</a> ② 方法区</h3><p><strong>方法区</strong> 是用于存放类似于元数据信息方面的数据的，比如类信息，常量，静态变量，编译后代码···等<br> 类加载器将 .class 文件搬过来就是先丢到这一块上</p><h3 id="_3-堆" tabindex="-1"><a class="header-anchor" href="#_3-堆" aria-hidden="true">#</a> ③ 堆</h3><p>堆 主要放了一些存储的数据，比如对象实例，数组···等，它和方法区都同属于 线程共享区域 。也就是说它们都是 <strong>线程不安全</strong> 的</p><h3 id="_4-栈" tabindex="-1"><a class="header-anchor" href="#_4-栈" aria-hidden="true">#</a> ④ 栈</h3><p>栈 这是我们的代码运行空间。我们编写的每一个方法都会放到 栈 里面运行。我们会听说过 本地方法栈 或者 本地方法接口 这两个名词，不过我们基本不会涉及这两块的内容，它俩底层是使用 C 来进行工作的，和 Java 没有太大的关系。</p><h3 id="_5-程序计数器" tabindex="-1"><a class="header-anchor" href="#_5-程序计数器" aria-hidden="true">#</a> ⑤ 程序计数器</h3><p>主要就是完成一个加载工作，类似于一个指针一样的，指向下一行我们需要执行的代码。和栈一样，都是 <strong>线程独享</strong> 的，就是说每一个线程都会有自己对应的一块区域而不会存在并发和多线程的问题。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230823001104289.png" alt="image-20230823001104289" loading="lazy"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li><code>.java</code> 文件经过编译后变成 <code>.class</code> 字节码文件</li><li>字节码文件通过 <code>类加载器</code> 被搬运到 JVM 虚拟机中</li><li>虚拟机主要的 5 大块： <ul><li><code>方法区</code>，<code>堆</code> 都为<code>线程共享</code>区域，有线程安全问题</li><li><code>栈</code> 和 <code>本地方法栈</code> 和 <code>计数器</code> 都是 <code>独享区域</code>，不存在线程安全问题</li><li>而 JVM 的调优主要就是围绕 <code>堆</code>，<code>栈</code> 两大块进行</li></ul></li></ul></div><h3 id="一个简单的示例" tabindex="-1"><a class="header-anchor" href="#一个简单的示例" aria-hidden="true">#</a> 一个简单的示例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Stu类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">pringln</span><span class="token punctuation">(</span><span class="token string">&quot;stu_name:&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 主函数</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Stu</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token string">&quot;T4mako&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stu<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>App.java</code> 编译后得到 <code>App.class</code> ，执行<code> App.class</code>，系统会启动一个 <code>JVM 进程</code>，从 <code>classpath</code> 路径中找到一个名为 <code>App.class</code> 的二进制文件，将 App 的类信息加载到运行时数据区的 <code>方法区</code> 内，这个过程叫做 App <code>类的加载</code></li><li>JVM 找到 App 的主程序入口，执行 main 方法</li><li>main 中的第一条语句为 <code>Stu stu = new Stu(&quot;T4mako&quot;);</code> ，就是让 JVM 创建一个 Stu 对象，但是这个时候方法区中是没有 Stu 类的信息的，所以 JVM 马上加载 Stu 类，把 Stu 类的信息放到 <code>方法区</code> 中</li><li>加载完 Stu 类后，JVM 在 <code>堆</code> 中为一个新的 stu 实例分配内存，然后调用构造函数初始化 stu 实例，这个 stu 实例持有 <strong>指向方法区中的 Stu 类的类型信息的引用</strong></li><li>执行 <code>stu.say();</code> 时，JVM 根据 stu 的引用找到 stu 对象，然后根据 stu 对象持有的引用定位到方法区中 Stu 类的类型信息的方法表，获得 say() 的字节码地址。</li><li>执行 say()</li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>只需要知道对象实例初始化时会去方法区中找类信息，完成后再到栈那里去运行方法。找方法就在方法表中找</p></div>`,15);function C(w,L){const e=c("Mermaid"),o=c("ExternalLinkIcon");return l(),p("div",null,[r,s(e,{id:"mermaid-3",code:"eJxLy8kvT85ILCpR8AniUgACx2glrzBfpVgFG11dOwWnaKVnk3uf7J3zfPPu57vnw4Sdo5WeL1zzZPe293s6ni9ufD57xvs9PU/bWp+uBTGSC0r19PTe7+lUiuUCAF8OLDQ="}),u,s(e,{id:"mermaid-69",code:"eJzT1dXlKsksyUm1UvBKLEtUeL6i++mu/ie7+57tmvBk9+LnCxqfdmx4sX/Ci4U9z2e1vNjfDlTABdKUlpNfnpyRWFSi4BPEpQAEmSnRSnpZIDOeTWt/snubUqyCrq6CEkgkWeH5nmkv1k9UAorYKTgB1SXnJBYXwxWC1L1Yvvhle9fTmSvUvDxDIAqdo5WezdkFFHrav/75hDagCqATII5SiuUCAMSjV4o="}),J,v,h,s(e,{id:"mermaid-79",code:"eJzjSsvJL0/OSCwqUfAJ4lIAAsdoJb2sxLJEhWfT2p/s3qYUq6Crq6AEEklWeL5n2ov1E5WAInYKTkB1yTmJxcVwhSBR52qlZzPWP52w7MmOXc+b1z5v2vlk9+LnCxrf75mvVAs23xlkXqRrMNgQBZdoJS/PELAldgpu0UrP5ux6OnPF0/71zye0vVi++PmsFoh+pViEZj9/iF7XaCWgkpftXUAdMBO4uADjR1TP"}),k,s(e,{id:"mermaid-91",code:"eJzT1dXlKsksyUm1UvBy8X7c0OgV5Aoiw3xBpGeIwtPZs180tD5t3fx8824ukOq0nPzy5IzEohIFnyAuheLSpPSixIIMkG4uBSBACAS5ggVQBcN84YKoEp4hKBKpeSlwPowNokEYADdBNtk="}),m,s(e,{id:"mermaid-127",code:"eJxLy8kvT85ILCpR8AniUgACx2il53umvVg/8em87hfr175Y0fBs14TnCxqVYhV0de0UnODSM1eAhRSe7Gh4tmbhs4blUPF1PWCFztFKz+bsAqp62r/++YS2F8sXP5/V8mT3YrBRYJtcopWAoi/bu7Db5AqXRrLpaf9SCAmRgtjEBQDlImXI"}),b,g,D,_,a("ol",null,[a("li",null,[n("是否开源：OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是基于 OpenJDK 实现的，并不是完全开源的。"),K,n(" OpenJDK 开源项目："),a("a",O,[n("https://github.com/openjdk/jdk"),s(o)])]),S]),a("div",A,[f,j,a("ul",null,[a("li",null,[n("OpenJDK 是开源的，开源意味着你可以对它根据你自己的需要进行修改、优化，比如 Alibaba 基于 OpenJDK 开发了 Dragonwell8："),a("a",V,[n("https://github.com/alibaba/dragonwell8"),s(o)])]),x,M])]),y,s(e,{id:"mermaid-201",code:"eJxLy8kvT85ILCpR8AniUgACx2glR72sxLJEpVgFXV2F53umvVg/EciyU3ACySTnJBYXg6XsFJyjlZ5v3P20a8GLvXufzlyhFMsFAATjHQI="}),T])}const I=i(d,[["render",C],["__file","JVM.html.vue"]]);export{I as default};
