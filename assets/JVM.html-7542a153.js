const e=JSON.parse('{"key":"v-0d0d1c5c","path":"/code/java/JVM.html","title":"认识 JVM","lang":"zh-CN","frontmatter":{"date":"2023-08-20T00:00:00.000Z","category":"java","tag":"jvm","title":"认识 JVM","headerDepth":3,"description":"JVM(Java Virtual Machine) 其实就类似于一台小电脑运行在 windows 或者 linux 这些操作系统环境下即可。 它直接和操作系统进行交互，与硬件不直接交互，而操作系统可以帮我们完成和硬件进行交互的工作。 一、基础知识 JVM Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。 JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。 字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/java/JVM.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"认识 JVM"}],["meta",{"property":"og:description","content":"JVM(Java Virtual Machine) 其实就类似于一台小电脑运行在 windows 或者 linux 这些操作系统环境下即可。 它直接和操作系统进行交互，与硬件不直接交互，而操作系统可以帮我们完成和硬件进行交互的工作。 一、基础知识 JVM Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。 JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。 字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:published_time","content":"2023-08-20T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"认识 JVM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"一、基础知识","slug":"一、基础知识","link":"#一、基础知识","children":[{"level":3,"title":"JVM","slug":"jvm","link":"#jvm","children":[]},{"level":3,"title":"JDK 和 JRE","slug":"jdk-和-jre","link":"#jdk-和-jre","children":[]},{"level":3,"title":"字节码","slug":"字节码","link":"#字节码","children":[]},{"level":3,"title":"Java 语言“编译与解释并存”的原因","slug":"java-语言-编译与解释并存-的原因","link":"#java-语言-编译与解释并存-的原因","children":[]},{"level":3,"title":"Oracle JDK vs OpenJDK","slug":"oracle-jdk-vs-openjdk","link":"#oracle-jdk-vs-openjdk","children":[]},{"level":3,"title":"Java 文件是如何被运行的","slug":"java-文件是如何被运行的","link":"#java-文件是如何被运行的","children":[]},{"level":3,"title":"一个简单的示例","slug":"一个简单的示例","link":"#一个简单的示例","children":[]}]},{"level":2,"title":"二、类加载器的介绍","slug":"二、类加载器的介绍","link":"#二、类加载器的介绍","children":[{"level":3,"title":"2.1 类加载器的流程","slug":"_2-1-类加载器的流程","link":"#_2-1-类加载器的流程","children":[]},{"level":3,"title":"2.2 类加载器加载顺序","slug":"_2-2-类加载器加载顺序","link":"#_2-2-类加载器加载顺序","children":[]},{"level":3,"title":"2.3 双亲委派机制","slug":"_2-3-双亲委派机制","link":"#_2-3-双亲委派机制","children":[]}]},{"level":2,"title":"三、运行时数据区","slug":"三、运行时数据区","link":"#三、运行时数据区","children":[{"level":3,"title":"3.1 本地方法栈和程序计数器","slug":"_3-1-本地方法栈和程序计数器","link":"#_3-1-本地方法栈和程序计数器","children":[]},{"level":3,"title":"3.2 方法区","slug":"_3-2-方法区","link":"#_3-2-方法区","children":[]},{"level":3,"title":"3.3 虚拟机栈和虚拟机堆","slug":"_3-3-虚拟机栈和虚拟机堆","link":"#_3-3-虚拟机栈和虚拟机堆","children":[]},{"level":3,"title":"3.4 垃圾回收算法","slug":"_3-4-垃圾回收算法","link":"#_3-4-垃圾回收算法","children":[]},{"level":3,"title":"3.5 各种垃圾回收器与 JVM 常用参数","slug":"_3-5-各种垃圾回收器与-jvm-常用参数","link":"#_3-5-各种垃圾回收器与-jvm-常用参数","children":[]}]},{"level":2,"title":"四、JVM 调优","slug":"四、jvm-调优","link":"#四、jvm-调优","children":[{"level":3,"title":"4.1 调整最大堆内存和最小堆内存","slug":"_4-1-调整最大堆内存和最小堆内存","link":"#_4-1-调整最大堆内存和最小堆内存","children":[]},{"level":3,"title":"4.2、调整新生代和老年代的比值","slug":"_4-2、调整新生代和老年代的比值","link":"#_4-2、调整新生代和老年代的比值","children":[]},{"level":3,"title":"4.3、调整 Survivor 区和 Eden 区的比值","slug":"_4-3、调整-survivor-区和-eden-区的比值","link":"#_4-3、调整-survivor-区和-eden-区的比值","children":[]},{"level":3,"title":"4.4、设置年轻代和老年代的大小","slug":"_4-4、设置年轻代和老年代的大小","link":"#_4-4、设置年轻代和老年代的大小","children":[]},{"level":3,"title":"4.5、永久区的设置","slug":"_4-5、永久区的设置","link":"#_4-5、永久区的设置","children":[]},{"level":3,"title":"4.6、JVM 的栈参数调优","slug":"_4-6、jvm-的栈参数调优","link":"#_4-6、jvm-的栈参数调优","children":[]},{"level":3,"title":"4.7、其他参数介绍","slug":"_4-7、其他参数介绍","link":"#_4-7、其他参数介绍","children":[]}]}],"readingTime":{"minutes":28.79,"words":8637},"filePathRelative":"code/java/JVM.md","localizedDate":"2023年8月20日","excerpt":"<p>JVM(Java Virtual Machine) 其实就类似于一台小电脑运行在 windows 或者 linux 这些操作系统环境下即可。<br>\\n它直接和操作系统进行交互，与硬件不直接交互，而操作系统可以帮我们完成和硬件进行交互的工作。</p>\\n<h2> 一、基础知识</h2>\\n<h3> JVM</h3>\\n<p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。</p>\\n<p>JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p>\\n<p>字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p>","autoDesc":true}');export{e as data};
