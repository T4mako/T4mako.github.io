import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as o,a as i,b as a,f as n,e as t,d as e}from"./app-a589a01e.js";const r={},u=e('<h2 id="_1、maven概述" tabindex="-1"><a class="header-anchor" href="#_1、maven概述" aria-hidden="true">#</a> 1、Maven概述</h2><h3 id="_1、为什么要学习maven" tabindex="-1"><a class="header-anchor" href="#_1、为什么要学习maven" aria-hidden="true">#</a> 1、为什么要学习Maven？</h3><h4 id="_1、maven-作为依赖管理工具" tabindex="-1"><a class="header-anchor" href="#_1、maven-作为依赖管理工具" aria-hidden="true">#</a> 1、Maven 作为依赖管理工具</h4><h5 id="_1jar-包的规模" tabindex="-1"><a class="header-anchor" href="#_1jar-包的规模" aria-hidden="true">#</a> ①jar 包的规模</h5><p>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。</p>',5),d=e(`<p>比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：Nacos 服务注册发现、Web 框架环境、图模板技术 Thymeleaf<br> 最终却导入了 106 个 jar 包</p><p>而如果使用 Maven 来引入这些 jar 包只需要配置三个『<strong>依赖</strong>』：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Nacos 服务注册发现启动器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- web启动器依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 视图模板技术 thymeleaf --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2jar-包的来源" tabindex="-1"><a class="header-anchor" href="#_2jar-包的来源" aria-hidden="true">#</a> ②jar 包的来源</h5><p>使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范</p><h5 id="_3jar-包之间的依赖关系" tabindex="-1"><a class="header-anchor" href="#_3jar-包之间的依赖关系" aria-hidden="true">#</a> ③jar 包之间的依赖关系</h5><p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。</p><p>而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助。</p><p><strong>而使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量</strong>。</p><h4 id="_2、maven-作为构建管理工具" tabindex="-1"><a class="header-anchor" href="#_2、maven-作为构建管理工具" aria-hidden="true">#</a> 2、Maven 作为构建管理工具</h4><h5 id="_1你没有注意过的构建" tabindex="-1"><a class="header-anchor" href="#_1你没有注意过的构建" aria-hidden="true">#</a> ①你没有注意过的构建</h5><p>你可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的。</p><h5 id="_2脱离-ide-环境仍需构建" tabindex="-1"><a class="header-anchor" href="#_2脱离-ide-环境仍需构建" aria-hidden="true">#</a> ②脱离 IDE 环境仍需构建</h5><h4 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h4><ul><li><strong>管理规模庞大的 jar 包，需要专门工具。</strong></li><li><strong>脱离 IDE 环境执行构建操作，需要专门工具。</strong></li></ul><h3 id="_2、什么是-maven" tabindex="-1"><a class="header-anchor" href="#_2、什么是-maven" aria-hidden="true">#</a> 2、什么是 Maven？</h3><p>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供<strong>构建</strong>和<strong>依赖</strong>管理支持的工具。</p><h4 id="_1、构建" tabindex="-1"><a class="header-anchor" href="#_1、构建" aria-hidden="true">#</a> 1、构建</h4><p>Java 项目开发过程中，构建指的是使用**『原材料生产产品』**的过程。<br> 原材料：Java 源代码、基于 HTML 的 Thymeleaf 文件、图片、配置文件等<br> 产品：一个可以在服务器上运行的项目</p><p><strong>构建过程</strong>包含的<strong>主要的环节</strong>：<br> 清理：删除上一次构建的结果，为下一次构建做好准备<br> 编译：Java 源程序编译成 *.class 字节码文件<br> 测试：运行提前准备好的测试程序<br> 报告：针对刚才测试的结果生成一个全面的信息<br> 打包：<br> Java工程：jar包<br> Web工程：war包<br> 安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库<br> 部署：<br> 部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上<br> 部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</p><h4 id="_2、依赖" tabindex="-1"><a class="header-anchor" href="#_2、依赖" aria-hidden="true">#</a> 2、依赖</h4><p>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。</p><p>例如：<br> junit-4.12 依赖 hamcrest-core-1.3<br> thymeleaf-3.0.12.RELEASE 依赖 ognl-3.1.26<br> ognl-3.1.26 依赖 javassist-3.20.0-GA<br> thymeleaf-3.0.12.RELEASE 依赖 attoparser-2.0.5.RELEASE<br> thymeleaf-3.0.12.RELEASE 依赖 unbescape-1.1.6.RELEASE<br> thymeleaf-3.0.12.RELEASE 依赖 slf4j-api-1.7.26</p><p>依赖管理中要解决的具体问题：</p><ul><li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li><li>jar 包之间的依赖：通过依赖的传递性自动完成</li><li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li></ul><h4 id="_3、maven-的工作机制-关键作战地图" tabindex="-1"><a class="header-anchor" href="#_3、maven-的工作机制-关键作战地图" aria-hidden="true">#</a> 3、Maven 的工作机制（关键作战地图）</h4><p>核心程序：官网下载的Maven解压<br> Maven仓库：conf/settings.xml中修改的地址为仓库地址</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219164435561.png" alt="image-20221219164435561" loading="lazy"></p><h2 id="_2、maven-核心程序解压和配置" tabindex="-1"><a class="header-anchor" href="#_2、maven-核心程序解压和配置" aria-hidden="true">#</a> 2、Maven 核心程序解压和配置</h2><h3 id="_1、maven核心程序解压与配置" tabindex="-1"><a class="header-anchor" href="#_1、maven核心程序解压与配置" aria-hidden="true">#</a> 1、Maven核心程序解压与配置</h3><h4 id="_1、maven-官网地址" tabindex="-1"><a class="header-anchor" href="#_1、maven-官网地址" aria-hidden="true">#</a> 1、Maven 官网地址</h4>`,31),g=a("br",null,null,-1),k={href:"https://maven.apache.org/",target:"_blank",rel:"noopener noreferrer"},m=a("br",null,null,-1),v={href:"https://maven.apache.org/download.cgi",target:"_blank",rel:"noopener noreferrer"},h=e(`<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219170219783.png" alt="image-20221219170311882" loading="lazy"></p><h4 id="_2、解压maven核心程序" tabindex="-1"><a class="header-anchor" href="#_2、解压maven核心程序" aria-hidden="true">#</a> 2、解压Maven核心程序</h4><p>解压到<strong>非中文、没有空格</strong>的目录，在解压目录中，我们需要着重关注 Maven 的核心配置文件：<strong>conf/settings.xml</strong></p><h4 id="_3、指定本地仓库" tabindex="-1"><a class="header-anchor" href="#_3、指定本地仓库" aria-hidden="true">#</a> 3、指定本地仓库</h4><p>本地仓库默认值：用户home目录/.m2/repository。由于本地仓库的默认位置是在用户的家目录下，而家目录往往是在 C 盘，也就是系统盘。将来 Maven 仓库中jar 包越来越多，仓库体积越来越大，可能会拖慢 C 盘运行速度，影响系统性能。所以建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- localRepository
| The path to the local repository maven will use to store artifacts.
|
| Default: \${user.home}/.m2/repository
&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>D:\\maven-repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地仓库这个目录，我们手动创建一个空的目录即可。<br><strong>记住</strong>：一定要把 localRepository 标签<strong>从注释中拿出来</strong>。<br><strong>注意</strong>：本地仓库本身也需要使用一个<strong>非中文、没有空格</strong>的目录。</p><h4 id="_4、配置阿里云提供的镜像仓库" tabindex="-1"><a class="header-anchor" href="#_4、配置阿里云提供的镜像仓库" aria-hidden="true">#</a> 4、配置阿里云提供的镜像仓库</h4><p>Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，<strong>访问国内网站</strong>，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：</p><h6 id="_1将原有的例子配置注释掉" tabindex="-1"><a class="header-anchor" href="#_1将原有的例子配置注释掉" aria-hidden="true">#</a> ①将原有的例子配置注释掉</h6><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- &lt;mirror&gt;
  &lt;id&gt;maven-default-http-blocker&lt;/id&gt;
  &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;
  &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;
  &lt;url&gt;http://0.0.0.0/&lt;/url&gt;
  &lt;blocked&gt;true&lt;/blocked&gt;
&lt;/mirror&gt; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2加入我们的配置" tabindex="-1"><a class="header-anchor" href="#_2加入我们的配置" aria-hidden="true">#</a> ②加入我们的配置</h6><p>将下面 mirror 标签整体复制到 settings.xml 文件的 mirrors 标签的内部。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、配置-maven-工程的基础-jdk-版本" tabindex="-1"><a class="header-anchor" href="#_5、配置-maven-工程的基础-jdk-版本" aria-hidden="true">#</a> 5、配置 Maven 工程的基础 JDK 版本</h4><p>如果按照默认配置运行，Java 工程使用的默认 JDK 版本是 1.5，而我们熟悉和常用的是 JDK 1.8 版本。修改配置的方式是：将 profile 标签整个复制到 settings.xml 文件的 profiles 标签内。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、配置环境变量" tabindex="-1"><a class="header-anchor" href="#_2、配置环境变量" aria-hidden="true">#</a> 2、配置环境变量</h3><h4 id="_1、检查-java-home-配置是否正确" tabindex="-1"><a class="header-anchor" href="#_1、检查-java-home-配置是否正确" aria-hidden="true">#</a> 1、检查 JAVA_HOME 配置是否正确</h4><h4 id="_2、配置-maven-home、path" tabindex="-1"><a class="header-anchor" href="#_2、配置-maven-home、path" aria-hidden="true">#</a> 2、配置 MAVEN_HOME、PATH</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219175732833.png" alt="image-20221219175732833" loading="lazy"><br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219175744782.png" alt="image-20221219175744782" loading="lazy"></p><h4 id="_3、验证" tabindex="-1"><a class="header-anchor" href="#_3、验证" aria-hidden="true">#</a> 3、验证</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219175812570.png" alt="image-20221219175812570" loading="lazy"></p><h2 id="_3、使用-maven-命令行环境" tabindex="-1"><a class="header-anchor" href="#_3、使用-maven-命令行环境" aria-hidden="true">#</a> 3、使用 Maven：命令行环境</h2><h3 id="_1、根据坐标创建-maven-工程" tabindex="-1"><a class="header-anchor" href="#_1、根据坐标创建-maven-工程" aria-hidden="true">#</a> 1、根据坐标创建 Maven 工程</h3><h4 id="_1、向量说明" tabindex="-1"><a class="header-anchor" href="#_1、向量说明" aria-hidden="true">#</a> 1、向量说明</h4><p>在数学中，使用 x、y、z 三个**『向量』<strong>作为空间的坐标系，可以在</strong>『空间』<strong>中唯一的定位到一个</strong>『点』**。</p><p><strong>在Maven中</strong>，使用三个**『向量』<strong>在</strong>『Maven的仓库』<strong>中</strong>唯一<strong>的定位到一个</strong>『jar』**包。</p><ul><li>​ <strong>groupId</strong>：公司或组织的 id</li><li>​ <strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li><li>​ <strong>version</strong>：版本号</li></ul><h4 id="_2、三个向量的取值方式" tabindex="-1"><a class="header-anchor" href="#_2、三个向量的取值方式" aria-hidden="true">#</a> 2、三个向量的取值方式</h4><p><strong>groupId</strong>：公司或组织域名的倒序，通常也会加上项目名称s<br> 例如：com.atguigu.maven<br><strong>artifactId</strong>：模块的名称，将来作为 Maven 工程的工程名<br><strong>version</strong>：模块的版本号，根据自己的需要设定<br> 例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本<br> 例如：RELEASE 表示正式版本</p><p>举例：<br> groupId：com.atguigu.maven<br> artifactId：pro01-atguigu-maven<br> version：1.0-SNAPSHOT</p><h4 id="_3、坐标和仓库中-jar-包的存储路径之间的对应关系" tabindex="-1"><a class="header-anchor" href="#_3、坐标和仓库中-jar-包的存储路径之间的对应关系" aria-hidden="true">#</a> 3、坐标和仓库中 jar 包的存储路径之间的对应关系</h4><p>坐标：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：<br><strong>Maven本地仓库根目录</strong>\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar<br> 要学会根据坐标到本地仓库中找到对应的 jar 包</p><h4 id="_4、实验操作" tabindex="-1"><a class="header-anchor" href="#_4、实验操作" aria-hidden="true">#</a> 4、实验操作</h4><h5 id="_1创建目录作为后面操作的工作空间" tabindex="-1"><a class="header-anchor" href="#_1创建目录作为后面操作的工作空间" aria-hidden="true">#</a> ①创建目录作为后面操作的工作空间</h5><p>例如：D:\\maven-workspace\\space201026</p><p>此时我们已经有了<strong>三个目录</strong>，分别是：<br><strong>Maven 核心程序：中军大帐<br> Maven 本地仓库：兵营<br> 本地工作空间：战场</strong></p><h5 id="_2在工作空间目录下打开命令行窗口" tabindex="-1"><a class="header-anchor" href="#_2在工作空间目录下打开命令行窗口" aria-hidden="true">#</a> ②在工作空间目录下打开命令行窗口</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220102348639.png" alt="image-20221220102348639" loading="lazy"></p><h5 id="_3使用命令生成maven工程" tabindex="-1"><a class="header-anchor" href="#_3使用命令生成maven工程" aria-hidden="true">#</a> ③使用命令生成Maven工程</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220102412287.png" alt="image-20221220102412287" loading="lazy"></p><p>下面是运行提示操作：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220102451513.png" alt="image-20221220102451513" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220104454725.png" alt="image-20221220104454725" loading="lazy"></p><h5 id="_4调整" tabindex="-1"><a class="header-anchor" href="#_4调整" aria-hidden="true">#</a> ④调整</h5><p>Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。<br> 自动生成的 App.java 和 AppTest.java 可以删除。<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220104639499.png" alt="image-20221220104639499" loading="lazy"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 依赖信息配置 --&gt;</span>
<span class="token comment">&lt;!-- dependencies复数标签：里面包含dependency单数标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- dependency单数标签：配置一个具体的依赖 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- 通过坐标来依赖其他jar包 --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		
		<span class="token comment">&lt;!-- 依赖的范围 --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5自动生成的-pom-xml-解读" tabindex="-1"><a class="header-anchor" href="#_5自动生成的-pom-xml-解读" aria-hidden="true">#</a> ⑤自动生成的 pom.xml 解读</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--project标签：根标签，表示对当前工程进行配置、管理 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  
  <span class="token comment">&lt;!-- modelVersion 标签：从Maven开始就是4.0.0 --&gt;</span>
  <span class="token comment">&lt;!-- 代表当前pom.xml所采用的标签结构 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
    
<span class="token comment">&lt;!-- 当前Maven工程的坐标 --&gt;</span>
    <span class="token comment">&lt;!-- 代表公司或组织开发的一个项目 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.T4mako.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 代表项目下的某一个模块 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 代表当前模块的版本 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token comment">&lt;!-- 当前Maven工程的打包方式，可选值有下面三种： --&gt;</span>
  <span class="token comment">&lt;!-- jar：表示这个工程是一个Java工程  --&gt;</span>
  <span class="token comment">&lt;!-- war：表示这个工程是一个Web工程 --&gt;</span>
  <span class="token comment">&lt;!-- pom：表示这个工程是“管理其他工程”的工程 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 在Maven中定义属性值 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 工程构建过程中读取源码时使用的字符集 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 当前工程所依赖的jar包 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 使用dependency配置一个具体的依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	
	  <span class="token comment">&lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	  
	  <span class="token comment">&lt;!-- scope标签配置依赖的范围 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、maven核心概念-pom" tabindex="-1"><a class="header-anchor" href="#_5、maven核心概念-pom" aria-hidden="true">#</a> 5、Maven核心概念：POM</h4><h5 id="_1含义" tabindex="-1"><a class="header-anchor" href="#_1含义" aria-hidden="true">#</a> ①含义</h5><p>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，**项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现。</p><h5 id="_2模型化思想" tabindex="-1"><a class="header-anchor" href="#_2模型化思想" aria-hidden="true">#</a> ②模型化思想</h5><p>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据。</p><h5 id="_3对应的配置文件" tabindex="-1"><a class="header-anchor" href="#_3对应的配置文件" aria-hidden="true">#</a> ③对应的配置文件</h5><p>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</p><h4 id="_6、maven核心概念-约定的目录结构" tabindex="-1"><a class="header-anchor" href="#_6、maven核心概念-约定的目录结构" aria-hidden="true">#</a> 6、Maven核心概念：约定的目录结构</h4><h5 id="_1各个目录的作用" tabindex="-1"><a class="header-anchor" href="#_1各个目录的作用" aria-hidden="true">#</a> ①各个目录的作用</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220110722929.png" alt="image-20221220110722929" loading="lazy"></p><h5 id="_2约定目录结构的意义" tabindex="-1"><a class="header-anchor" href="#_2约定目录结构的意义" aria-hidden="true">#</a> ②约定目录结构的意义</h5><p>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</p><h5 id="_3约定大于配置" tabindex="-1"><a class="header-anchor" href="#_3约定大于配置" aria-hidden="true">#</a> ③约定大于配置</h5><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p><p>目前开发领域的技术发展趋势就是：<strong>约定大于配置，配置大于编码</strong>。</p><h3 id="_2、在-maven-工程中编写代码" tabindex="-1"><a class="header-anchor" href="#_2、在-maven-工程中编写代码" aria-hidden="true">#</a> 2、在 Maven 工程中编写代码</h3><h4 id="_1、主体程序" tabindex="-1"><a class="header-anchor" href="#_1、主体程序" aria-hidden="true">#</a> 1、主体程序</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223135339243.png" alt="image-20221223135339243" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>
	
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>	
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、测试程序" tabindex="-1"><a class="header-anchor" href="#_2、测试程序" aria-hidden="true">#</a> 2、测试程序</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223140441200.png" alt="image-20221223140441200" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>
	
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven<span class="token punctuation">.</span></span><span class="token class-name">Calculator</span></span><span class="token punctuation">;</span>
	
<span class="token comment">// 静态导入的效果是将Assert类中的静态资源导入当前类</span>
<span class="token comment">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
	
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span><span class="token punctuation">{</span>
	
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		
		<span class="token comment">// 1.创建Calculator对象</span>
		<span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span>
		<span class="token keyword">int</span> actualResult <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 3.声明一个变量，表示程序运行期待的结果</span>
		<span class="token keyword">int</span> expectedResult <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 4.使用断言来判断实际结果和期待结果是否一致</span>
		<span class="token comment">// 如果一致：测试通过，不会抛出异常</span>
		<span class="token comment">// 如果不一致：抛出异常，测试失败</span>
		<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">,</span> actualResult<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//断言</span>
		
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、执行-maven-的构建命令" tabindex="-1"><a class="header-anchor" href="#_3、执行-maven-的构建命令" aria-hidden="true">#</a> 3、执行 Maven 的构建命令</h3><h4 id="_1、要求" tabindex="-1"><a class="header-anchor" href="#_1、要求" aria-hidden="true">#</a> 1、要求</h4><p>运行 Maven 中和构建操作相关的命令时，<strong>必须进入到 pom.xml 所在的目录</strong>。如果没有在 pom.xml 所在的目录运行 Maven 的构建命令，那么会看到下面的错误信息：</p><p>The goal you specified requires a project to execute but there is no POM in this directory</p><p>（<strong>mvn -v</strong> 命令和构建操作无关，只要正确配置了 PATH，在任何目录下执行都可以。而构建相关的命令要在 pom.xml 所在目录下运行——操作哪个工程，就进入这个工程的 pom.xml 目录。）</p><h4 id="_2、清理操作" tabindex="-1"><a class="header-anchor" href="#_2、清理操作" aria-hidden="true">#</a> 2、清理操作</h4><p><strong>mvn clean</strong><br> 效果：删除 target 目录</p><h4 id="_3、编译操作" tabindex="-1"><a class="header-anchor" href="#_3、编译操作" aria-hidden="true">#</a> 3、编译操作</h4><p>主程序编译：<strong>mvn compile</strong><br> 测试程序编译：<strong>mvn test-compile</strong><br> 主体程序编译结果存放的目录：target/classes<br> 测试程序编译结果存放的目录：target/test-classes</p><h4 id="_4、测试操作" tabindex="-1"><a class="header-anchor" href="#_4、测试操作" aria-hidden="true">#</a> 4、测试操作</h4><p><strong>mvn test</strong><br> 测试的报告存放的目录：target/surefire-reports</p><h4 id="_5、打包操作" tabindex="-1"><a class="header-anchor" href="#_5、打包操作" aria-hidden="true">#</a> 5、打包操作</h4><p><strong>mvn package</strong><br> 打包的结果——jar 包，存放的目录：target</p><h4 id="_6、安装操作" tabindex="-1"><a class="header-anchor" href="#_6、安装操作" aria-hidden="true">#</a> 6、安装操作</h4><p>安装的效果是将本地构建过程中生成的 jar 包存入 Maven 本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的。</p><p><strong>mvn install</strong></p><p>坐标信息如下：可以在项目中的pom.xml中查看到</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、创建-maven-版的-web-工程" tabindex="-1"><a class="header-anchor" href="#_4、创建-maven-版的-web-工程" aria-hidden="true">#</a> 4、创建 Maven 版的 Web 工程</h3><h4 id="_1、说明" tabindex="-1"><a class="header-anchor" href="#_1、说明" aria-hidden="true">#</a> 1、说明</h4><p>使用 mvn archetype:generate 命令生成 Web 工程时，需要使用一个专门的 archetype。这个专门生成 Web 工程骨架的 archetype 可以参照官网看到它的用法：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223142819791.png" alt="image-20221223142819791" loading="lazy"></p><h4 id="_2、操作" tabindex="-1"><a class="header-anchor" href="#_2、操作" aria-hidden="true">#</a> 2、操作</h4><p>注意：如果在上一个工程的目录下执行 mvn archetype:generate 命令，那么 Maven 会报错：不能在一个非 pom 的工程下再创建其他工程。<br> 所以不要再刚才创建的工程里再创建新的工程，<strong>请回到工作空间根目录</strong>来操作。</p><p>然后运行生成工程的命令：<br><strong>mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223143929570.png" alt="image-20221223143929570" loading="lazy"></p><h4 id="_3、生成的pom-xml" tabindex="-1"><a class="header-anchor" href="#_3、生成的pom-xml" aria-hidden="true">#</a> 3、生成的pom.xml</h4><p>确认打包的方式是war包形式</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4、生成的web工程的目录结构" tabindex="-1"><a class="header-anchor" href="#_4、生成的web工程的目录结构" aria-hidden="true">#</a> 4、生成的Web工程的目录结构</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223145233465.png" alt="image-20221223145233465" loading="lazy"></p><h4 id="_5、创建-servlet" tabindex="-1"><a class="header-anchor" href="#_5、创建-servlet" aria-hidden="true">#</a> 5、创建 Servlet</h4><h5 id="_1在-main-目录下创建-java-目录" tabindex="-1"><a class="header-anchor" href="#_1在-main-目录下创建-java-目录" aria-hidden="true">#</a> ①在 main 目录下创建 java 目录</h5><h5 id="_2在-java-目录下创建-servlet-类所在的包的目录" tabindex="-1"><a class="header-anchor" href="#_2在-java-目录下创建-servlet-类所在的包的目录" aria-hidden="true">#</a> ②在 java 目录下创建 Servlet 类所在的包的目录</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223145558932.png" alt="image-20221223145558932" loading="lazy"></p><h5 id="_3在包下创建-servlet-类" tabindex="-1"><a class="header-anchor" href="#_3在包下创建-servlet-类" aria-hidden="true">#</a> ③在包下创建 Servlet 类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>
	
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
	
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>
	
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		
		response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello maven web&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4在-web-xml-中注册-servlet" tabindex="-1"><a class="header-anchor" href="#_4在-web-xml-中注册-servlet" aria-hidden="true">#</a> ④在 web.xml 中注册 Servlet</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、在-index-jsp-页面编写超链接" tabindex="-1"><a class="header-anchor" href="#_6、在-index-jsp-页面编写超链接" aria-hidden="true">#</a> 6、在 index.jsp 页面编写超链接</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>helloServlet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Access Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、编译" tabindex="-1"><a class="header-anchor" href="#_7、编译" aria-hidden="true">#</a> 7、编译</h4><p>此时直接执行 <strong>mvn compile</strong> 命令出错：</p><p>说明：我们的 Web 工程用到了 HttpServlet 这个类，而 HttpServlet 这个类属于 servlet-api.jar 这个 jar 包。此时我们说，<strong>Web 工程需要依赖 servlet-api.jar</strong> 包。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223150029811.png" alt="image-20221223150029811" loading="lazy"></p><h4 id="_8、配置对-servlet-api-jar-包的依赖" tabindex="-1"><a class="header-anchor" href="#_8、配置对-servlet-api-jar-包的依赖" aria-hidden="true">#</a> 8、配置对 servlet-api.jar 包的依赖</h4>`,119),b={href:"https://mvnrepository.com/**%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E3%80%82%E4%BD%BF%E7%94%A8%E5%85%B3%E9%94%AE%E8%AF%8D%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%88%97%E8%A1%A8%E4%B8%AD%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>比如，我们找到的 servlet-api 的依赖信息：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span>
<span class="token comment">&lt;!-- 为了能够正常使用HttpServlet，需要导入servlet-api依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以把上面的信息加入 pom.xml。重新执行 mvn compile 命令。</p><h4 id="_9、将-web-工程打包为-war-包" tabindex="-1"><a class="header-anchor" href="#_9、将-web-工程打包为-war-包" aria-hidden="true">#</a> 9、将 Web 工程打包为 war 包</h4><p>运行 <strong>mvn package</strong> 命令，生成 war 包的位置如下图所示：</p><h4 id="_10、将-war-包部署到-tomcat-上运行" tabindex="-1"><a class="header-anchor" href="#_10、将-war-包部署到-tomcat-上运行" aria-hidden="true">#</a> 10、将 war 包部署到 Tomcat 上运行</h4>`,6),x=a("br",null,null,-1),f=a("br",null,null,-1),I={href:"http://localhost:8080/pro02-maven-web/index.jsp",target:"_blank",rel:"noopener noreferrer"},y=e(`<h3 id="_5、让-web-工程依赖-java-工程" tabindex="-1"><a class="header-anchor" href="#_5、让-web-工程依赖-java-工程" aria-hidden="true">#</a> 5、让 Web 工程依赖 Java 工程</h3><h4 id="_1、观念" tabindex="-1"><a class="header-anchor" href="#_1、观念" aria-hidden="true">#</a> 1、观念</h4><p>明确一个意识：从来只有 Web 工程依赖 Java 工程，没有反过来 Java 工程依赖 Web 工程。<br> 本质上来说，Web 工程依赖的 Java 工程其实就是 <strong>Web 工程里导入的 jar 包</strong>。最终 <strong>Java 工程会变成 jar 包，放在 Web 工程的 WEB-INF/lib 目录下</strong>。</p><h4 id="_2、操作-1" tabindex="-1"><a class="header-anchor" href="#_2、操作-1" aria-hidden="true">#</a> 2、操作</h4><p>在 pro02-maven-web 工程的 pom.xml 中，找到 dependencies 标签，在 dependencies 标签中做如下配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 配置对Java工程pro01-maven-java的依赖 --&gt;</span>
<span class="token comment">&lt;!-- 具体的配置方式：在dependency标签内使用坐标实现依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、在-web-工程中-编写测试代码" tabindex="-1"><a class="header-anchor" href="#_3、在-web-工程中-编写测试代码" aria-hidden="true">#</a> 3、在 Web 工程中，编写测试代码</h4><h5 id="_1补充创建目录" tabindex="-1"><a class="header-anchor" href="#_1补充创建目录" aria-hidden="true">#</a> ①补充创建目录</h5><p>pro02-maven-web**\\src\\test\\java\\com\\atguigu\\maven**</p><h5 id="_2确认-web-工程依赖了-junit" tabindex="-1"><a class="header-anchor" href="#_2确认-web-工程依赖了-junit" aria-hidden="true">#</a> ②确认 Web 工程依赖了 junit</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3创建测试类" tabindex="-1"><a class="header-anchor" href="#_3创建测试类" aria-hidden="true">#</a> ③创建测试类</h5><p>把 Java 工程的 CalculatorTest.java 类复制到 pro02-maven-web**\\src\\test\\java\\com\\atguigu\\maven** 目录下</p><h4 id="_4、执行maven命令" tabindex="-1"><a class="header-anchor" href="#_4、执行maven命令" aria-hidden="true">#</a> 4、执行Maven命令</h4><h5 id="_1测试命令" tabindex="-1"><a class="header-anchor" href="#_1测试命令" aria-hidden="true">#</a> ①测试命令</h5><p><strong>mvn test</strong><br> 说明：测试操作中会提前自动执行编译操作，测试成功就说明编译也是成功的</p><h5 id="_2打包命令" tabindex="-1"><a class="header-anchor" href="#_2打包命令" aria-hidden="true">#</a> ②打包命令</h5><p><strong>mvn package</strong><br> 通过查看 war 包内的结构，我们看到被 Web 工程依赖的 Java 工程确实是会变成 Web 工程的 WEB-INF/lib 目录下的 jar 包。</p><h5 id="_3查看当前-web-工程所依赖的-jar-包的列表" tabindex="-1"><a class="header-anchor" href="#_3查看当前-web-工程所依赖的-jar-包的列表" aria-hidden="true">#</a> ③查看当前 Web 工程所依赖的 jar 包的列表</h5><p><strong>mvn dependency:list</strong></p><p>说明：javax.servlet:javax.servlet-api:jar:3.1.0:provided 格式显示的是一个 jar 包的坐标信息。<br> 格式是：<strong>groupId:artifactId:打包方式:version:依赖的范围</strong></p><p>这样的格式虽然和我们 XML 配置文件中坐标的格式不同，但是本质上还是坐标信息，大家需要能够认识这样的格式，将来从 Maven 命令的日志或错误信息中看到这样格式的信息，就<strong>能够识别出来这是坐标</strong>。进而<strong>根据坐标到Maven 仓库找到对应的jar包</strong>，用这样的方式解决我们遇到的报错的情况。</p><h5 id="_4以树形结构查看当前-web-工程的依赖信息" tabindex="-1"><a class="header-anchor" href="#_4以树形结构查看当前-web-工程的依赖信息" aria-hidden="true">#</a> ④以树形结构查看当前 Web 工程的依赖信息</h5><p><strong>mvn dependency:tree</strong></p><p>我们在 pom.xml 中并没有依赖 hamcrest-core，但是它却被加入了我们依赖的列表。原因是：junit 依赖了hamcrest-core，然后基于依赖的传递性，hamcrest-core 被传递到我们的工程了。</p><h3 id="_6、测试依赖的范围" tabindex="-1"><a class="header-anchor" href="#_6、测试依赖的范围" aria-hidden="true">#</a> 6、测试依赖的范围</h3><h4 id="_1、依赖范围" tabindex="-1"><a class="header-anchor" href="#_1、依赖范围" aria-hidden="true">#</a> 1、依赖范围</h4><p>标签的位置：<strong>dependencies/dependency/scope</strong><br> 标签的可选值：<strong>compile</strong>、<strong>test</strong>、<strong>provided</strong>、system、runtime、<strong>import</strong></p><h4 id="_1compile-和-test-对比" tabindex="-1"><a class="header-anchor" href="#_1compile-和-test-对比" aria-hidden="true">#</a> ①compile 和 test 对比</h4><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>test</td><td>无效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table><h4 id="_2compile-和-provided-对比" tabindex="-1"><a class="header-anchor" href="#_2compile-和-provided-对比" aria-hidden="true">#</a> ②compile 和 provided 对比</h4><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>provided</td><td>有效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table><h4 id="_3结论" tabindex="-1"><a class="header-anchor" href="#_3结论" aria-hidden="true">#</a> ③结论</h4><p><strong>compile</strong>：通常使用的第三方框架的 jar 包这样在项目实际运行时真正要用到的 jar 包都是以 compile 范围进行依赖的。比如 SSM 框架所需jar包。<br><strong>test</strong>：测试过程中使用的 jar 包，以 test 范围依赖进来。比如 junit。<br><strong>provided</strong>：在开发过程中需要用到的“服务器上的 jar 包”通常以 provided 范围依赖进来。比如 servlet-api、jsp-api。而这个范围的 jar 包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类 jar 包产生冲突，同时减轻服务器的负担。说白了就是：“<strong>服务器上已经有了，你就别带啦！</strong>”</p><h3 id="_7、测试依赖的传递性" tabindex="-1"><a class="header-anchor" href="#_7、测试依赖的传递性" aria-hidden="true">#</a> 7、测试依赖的传递性</h3><h4 id="_1、依赖的传递性" tabindex="-1"><a class="header-anchor" href="#_1、依赖的传递性" aria-hidden="true">#</a> 1、依赖的传递性</h4><h5 id="_1概念" tabindex="-1"><a class="header-anchor" href="#_1概念" aria-hidden="true">#</a> ①概念</h5><p>A 依赖 B，B 依赖 C，那么在 A 没有配置对 C 的依赖的情况下，A 里面能不能直接使用 C？</p><h5 id="_2传递的原则" tabindex="-1"><a class="header-anchor" href="#_2传递的原则" aria-hidden="true">#</a> ②传递的原则</h5><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。</p><ul><li><strong>B 依赖 C 时使用 compile 范围：可以传递</strong></li><li><strong>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</strong></li></ul><h4 id="_2、使用-compile-范围依赖-spring-core" tabindex="-1"><a class="header-anchor" href="#_2、使用-compile-范围依赖-spring-core" aria-hidden="true">#</a> 2、使用 compile 范围依赖 spring-core</h4><p>测试方式：让 pro01-maven-java 工程依赖 spring-core<br> 具体操作：编辑 pro01-maven-java 工程根目录下 pom.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 mvn dependency:tree 命令查看效果：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224141350567.png" alt="image-20221224141350567" loading="lazy"></p><p>还可以在 Web 工程中，使用 mvn dependency:tree 命令查看效果（需要重新将 pro01-maven-java 安装到仓库）：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224141403153.png" alt="image-20221224141403153" loading="lazy"></p><h4 id="_3、验证-test-和-provided-范围不能传递" tabindex="-1"><a class="header-anchor" href="#_3、验证-test-和-provided-范围不能传递" aria-hidden="true">#</a> 3、验证 test 和 provided 范围不能传递</h4><p>从上面的例子已经能够看到，pro01-maven-java 依赖了 junit，但是在 pro02-maven-web 工程中查看依赖树的时候并没有看到 junit。<br> 要验证 provided 范围不能传递，可以在 pro01-maven-java 工程中加入 servlet-api 的依赖。</p><h3 id="_8、测试依赖的排除" tabindex="-1"><a class="header-anchor" href="#_8、测试依赖的排除" aria-hidden="true">#</a> 8、测试依赖的排除</h3><h4 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h4><p>当 A 依赖 B，B 依赖 C 而且 C 可以传递到 A 的时候，A 不想要 C，需要在 A 里面把 C 排除掉。而往往这种情况都是为了避免 jar 包之间的冲突。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224142134353.png" alt="image-20221224142134353" loading="lazy"></p><p>所以配置依赖的排除其实就是阻止某些 jar 包的传递。因为这样的 jar 包传递过来会和其他 jar 包冲突。</p><h4 id="_2、配置方式" tabindex="-1"><a class="header-anchor" href="#_2、配置方式" aria-hidden="true">#</a> 2、配置方式</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 使用excludes标签配置依赖的排除	--&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
			<span class="token comment">&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试" aria-hidden="true">#</a> 3、测试</h4><p>测试的方式：在 pro02-maven-web 工程中配置对 commons-logging 的排除<br> 运行 mvn dependency:tree 命令查看效果，发现在 spring-core 下面就没有 commons-logging 了。<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224150708267.png" alt="image-20221224150708267" loading="lazy"></p><h3 id="_9、继承" tabindex="-1"><a class="header-anchor" href="#_9、继承" aria-hidden="true">#</a> 9、继承</h3><h4 id="_1、概念-1" tabindex="-1"><a class="header-anchor" href="#_1、概念-1" aria-hidden="true">#</a> 1、概念</h4><p>Maven工程之间，A 工程继承 B 工程<br> B 工程：父工程<br> A 工程：子工程<br> 本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置。</p><h4 id="_2、作用" tabindex="-1"><a class="header-anchor" href="#_2、作用" aria-hidden="true">#</a> 2、作用</h4><p>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</p><p>它的背景是：</p><ul><li>对一个比较大型的项目进行了模块拆分。</li><li>一个 project 下面，创建了很多个 module。</li><li><strong>每一个 module 都需要配置自己的依赖信息</strong>。</li></ul><p>它背后的需求是：</p><ul><li>在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。</li><li>使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以<strong>整个项目中使用的框架版本需要统一</strong>。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。</li></ul><p>通过在父工程中为整个项目维护依赖信息的组合既<strong>保证了整个项目使用规范、准确的 jar 包</strong>；又能够将<strong>以往的经验沉淀</strong>下来，节约时间和精力。</p><h4 id="_3、举例" tabindex="-1"><a class="header-anchor" href="#_3、举例" aria-hidden="true">#</a> 3、举例</h4><p>在一个工程中依赖多个 Spring 的 jar 包</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224151906558.png" alt="image-20221224151906558" loading="lazy"></p><p>使用 Spring 时要求所有 Spring 自己的 jar 包版本必须一致。为了能够对这些 jar 包的版本进行统一管理，我们使用继承这个机制，将所有版本信息统一在父工程中进行管理。</p><h4 id="_4、操作" tabindex="-1"><a class="header-anchor" href="#_4、操作" aria-hidden="true">#</a> 4、操作</h4><h5 id="_1创建父工程" tabindex="-1"><a class="header-anchor" href="#_1创建父工程" aria-hidden="true">#</a> ①创建父工程</h5><p>创建的过程和前面创建 pro01-maven-java 一样。<br> 工程名称：pro03-maven-parent<br> 工程创建好之后，要修改它的打包方式：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro03-maven-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程。</strong></p><h5 id="_2创建模块工程" tabindex="-1"><a class="header-anchor" href="#_2创建模块工程" aria-hidden="true">#</a> ②创建模块工程</h5><p>模块工程类似于 IDEA 中的 module，所以需要<strong>进入 pro03-maven-parent 工程的根目录</strong>，然后运行 mvn archetype:generate 命令来创建模块工程。</p><p>假设，我们创建三个模块工程：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224155634597.png" alt="image-20221224155634597" loading="lazy"></p><h5 id="_3查看被添加新内容的父工程-pom-xml" tabindex="-1"><a class="header-anchor" href="#_3查看被添加新内容的父工程-pom-xml" aria-hidden="true">#</a> ③查看被添加新内容的父工程 pom.xml</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 聚合的配置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>  
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro04-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro05-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro06-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4解读子工程的pom-xml" tabindex="-1"><a class="header-anchor" href="#_4解读子工程的pom-xml" aria-hidden="true">#</a> ④解读子工程的pom.xml</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 使用parent标签指定当前工程的父工程 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 父工程的坐标 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro03-maven-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 子工程的坐标 --&gt;</span>
<span class="token comment">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --&gt;</span>
<span class="token comment">&lt;!-- &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro04-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5在父工程中配置依赖的统一管理" tabindex="-1"><a class="header-anchor" href="#_5在父工程中配置依赖的统一管理" aria-hidden="true">#</a> ⑤在父工程中配置依赖的统一管理</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 在父工程中同一管理依赖信息 --&gt;</span>
<span class="token comment">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --&gt;</span>
<span class="token comment">&lt;!-- 被管理的依赖并没有真正被引入到工程 --&gt;</span>
<span class="token comment">&lt;!-- 注意，即使在父工程配置了对依赖的管理，子工程需要使用具体哪一个依赖还是要明确配置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6子工程中引用那些被父工程管理的依赖" tabindex="-1"><a class="header-anchor" href="#_6子工程中引用那些被父工程管理的依赖" aria-hidden="true">#</a> ⑥子工程中引用那些被父工程管理的依赖</h5><p>关键点：省略版本号</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。	--&gt;</span>
<span class="token comment">&lt;!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --&gt;</span>
<span class="token comment">&lt;!-- 具体来说是由父工程的dependencyManagement来决定。 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7在父工程中升级依赖信息的版本" tabindex="-1"><a class="header-anchor" href="#_7在父工程中升级依赖信息的版本" aria-hidden="true">#</a> ⑦在父工程中升级依赖信息的版本</h5><p><strong>一处修改，处处生效</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>……
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
……
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在子工程中运行mvn dependency:list:<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224160911927.png" alt="image-20221224160911927" loading="lazy"></p><h5 id="_8在父工程中声明自定义属性" tabindex="-1"><a class="header-anchor" href="#_8在父工程中声明自定义属性" aria-hidden="true">#</a> ⑧在父工程中声明自定义属性</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 通过自定义属性，统一指定Spring的版本 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
	
	<span class="token comment">&lt;!-- 自定义标签，维护Spring版本数据 --&gt;</span>
    <span class="token comment">&lt;!-- 标签名：属性名 标签值：属性值 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>atguigu.spring.version</span><span class="token punctuation">&gt;</span></span>4.3.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>atguigu.spring.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要的地方使用\${}的形式来引用自定义的属性名：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 通过引用属性表达式设定版本号，这样版本号就成了一个动态值 --&gt;</span>
    <span class="token comment">&lt;!-- 通过属性名解析后才知道具体是什么值 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${atguigu.spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>真正实现“一处修改，处处生效”。</strong></p><h4 id="_5、实际意义" tabindex="-1"><a class="header-anchor" href="#_5、实际意义" aria-hidden="true">#</a> 5、实际意义</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224160950881.png" alt="image-20221224160950881" loading="lazy"></p><p>编写一套符合要求、开发各种功能都能正常工作的依赖组合并不容易。如果公司里已经有人总结了成熟的组合方案，那么再开发新项目时，如果不使用原有的积累，而是重新摸索，会浪费大量的时间。为了提高效率，我们可以使用工程继承的机制，让成熟的依赖组合方案能够保留下来。</p><p>如上图所示，公司级的父工程中管理的就是成熟的依赖组合方案，各个新项目、子系统各取所需即可。</p><h3 id="_10、聚合" tabindex="-1"><a class="header-anchor" href="#_10、聚合" aria-hidden="true">#</a> 10、聚合</h3><h4 id="_1、聚合本身的含义" tabindex="-1"><a class="header-anchor" href="#_1、聚合本身的含义" aria-hidden="true">#</a> 1、聚合本身的含义</h4><p>部分组成整体动画片《战神金刚》中的经典台词：“我来组成头部！我来组成手臂！”就是聚合关系最生动的体现。</p><h4 id="_2、maven-中的聚合" tabindex="-1"><a class="header-anchor" href="#_2、maven-中的聚合" aria-hidden="true">#</a> 2、Maven 中的聚合</h4><p>使用一个“总工程”将各个“模块工程”汇集起来，作为一个整体对应完整的项目。</p><ul><li>项目：整体</li><li>模块：部分</li></ul><h4 id="_3、好处" tabindex="-1"><a class="header-anchor" href="#_3、好处" aria-hidden="true">#</a> 3、好处</h4><ul><li><p>一键执行 Maven 命令：很多构建命令都可以在“总工程”中一键执行。</p><p>以 mvn install 命令为例：Maven 要求有父工程时先安装父工程；有依赖的工程时，先安装被依赖的工程。我们自己考虑这些规则会很麻烦。但是工程聚合之后，在总工程执行 mvn install 可以一键完成安装，而且会自动按照正确的顺序执行。</p></li><li><p>配置聚合之后，各个模块工程会在总工程中展示一个列表，让项目中的各个模块一目了然。</p></li></ul><h4 id="_4、聚合的配置" tabindex="-1"><a class="header-anchor" href="#_4、聚合的配置" aria-hidden="true">#</a> 4、聚合的配置</h4><p>在总工程中配置 modules 即可：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro04-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro05-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro06-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、依赖循环问题" tabindex="-1"><a class="header-anchor" href="#_5、依赖循环问题" aria-hidden="true">#</a> 5、依赖循环问题</h4><p>如果 A 工程依赖 B 工程，B 工程依赖 C 工程，C 工程又反过来依赖 A 工程，那么在执行构建操作时会报下面的错误</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224165432357.png" alt="image-20221224165432357" loading="lazy"></p><p>这个错误的含义是：循环引用。</p><h2 id="_4、使用maven-idea环境" tabindex="-1"><a class="header-anchor" href="#_4、使用maven-idea环境" aria-hidden="true">#</a> 4、使用Maven：IDEA环境</h2><h3 id="_1、创建父工程" tabindex="-1"><a class="header-anchor" href="#_1、创建父工程" aria-hidden="true">#</a> 1、创建父工程</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225133658424.png" alt="image-20221225133658424" loading="lazy"></p><p>更改坐标位置</p><h3 id="_2、配置自己的maven" tabindex="-1"><a class="header-anchor" href="#_2、配置自己的maven" aria-hidden="true">#</a> 2、配置自己的Maven</h3><p><strong>每次创建 Project 后都需要设置 Maven 家目录位置</strong>，否则 IDEA 将使用内置的 Maven 核心程序（不稳定）并使用默认的本地仓库位置。这样一来，我们在命令行操作过程中已下载好的 jar 包就白下载了，默认的本地仓库通常在 C 盘，还影响系统运行。</p><p>配置之后，IDEA 会根据我们在这里指定的 Maven 家目录自动识别到我们在 settings.xml 配置文件中指定的本地仓库。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225133749426.png" alt="image-20221225133805324" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225133848797.png" alt="image-20221225133848797" loading="lazy"></p><h3 id="_3-、建java模块工程" tabindex="-1"><a class="header-anchor" href="#_3-、建java模块工程" aria-hidden="true">#</a> 3 、建Java模块工程</h3><p>选中项目，如上所述新建mavne模块</p><h3 id="_4、创建web模块工程" tabindex="-1"><a class="header-anchor" href="#_4、创建web模块工程" aria-hidden="true">#</a> 4、创建Web模块工程</h3><h4 id="_1、创建模块" tabindex="-1"><a class="header-anchor" href="#_1、创建模块" aria-hidden="true">#</a> 1、创建模块</h4><p>按照前面的同样操作创建模块，<strong>此时</strong>这个模块其实还是一个<strong>Java模块</strong>。</p><h4 id="_2、修改打包方式" tabindex="-1"><a class="header-anchor" href="#_2、修改打包方式" aria-hidden="true">#</a> 2、修改打包方式</h4><p>Web 模块将来打包当然应该是 <strong>war</strong> 包。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、web-设定" tabindex="-1"><a class="header-anchor" href="#_3、web-设定" aria-hidden="true">#</a> 3、Web 设定</h4><p>首先打开项目结构菜单<br> 然后到 Facets 下查看 IDEA 是否已经帮我们自动生成了 Web 设定。没有就刷新一下右侧Maven</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225144820574.png" alt="image-20221225144820574" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225144830175.png" alt="image-20221225144830175" loading="lazy"></p><h4 id="_4、借助idea生成web-xml" tabindex="-1"><a class="header-anchor" href="#_4、借助idea生成web-xml" aria-hidden="true">#</a> 4、借助IDEA生成web.xml</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145439907.png" alt="image-20221225145439907" loading="lazy"></p><h3 id="_5、其他操作" tabindex="-1"><a class="header-anchor" href="#_5、其他操作" aria-hidden="true">#</a> 5、其他操作</h3><h4 id="_1、在idea中执行maven命令" tabindex="-1"><a class="header-anchor" href="#_1、在idea中执行maven命令" aria-hidden="true">#</a> 1、在IDEA中执行Maven命令</h4><h5 id="_1直接执行" tabindex="-1"><a class="header-anchor" href="#_1直接执行" aria-hidden="true">#</a> ①直接执行</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225140022531.png" alt="image-20221225140022531" loading="lazy"></p><h5 id="_2手动输入" tabindex="-1"><a class="header-anchor" href="#_2手动输入" aria-hidden="true">#</a> ②手动输入</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225140043534.png" alt="image-20221225140043534" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225140057743.png" alt="image-20221225140057743" loading="lazy"></p><p>如果有需要，还可以给命令后面附加参数：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225140111847.png" alt="image-20221225140111847" loading="lazy"></p><h4 id="_2、在idea中查看某个模块的依赖信息" tabindex="-1"><a class="header-anchor" href="#_2、在idea中查看某个模块的依赖信息" aria-hidden="true">#</a> 2、在IDEA中查看某个模块的依赖信息</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145515526.png" alt="image-20221225145515526" loading="lazy"></p><h4 id="_3、工程导入" tabindex="-1"><a class="header-anchor" href="#_3、工程导入" aria-hidden="true">#</a> 3、工程导入</h4><p>Maven工程除了自己创建的，还有很多情况是别人创建的。而为了参与开发或者是参考学习，我们都需要导入到 IDEA 中。下面我们分几种不同情况来说明：</p><h5 id="_1来自版本控制系统" tabindex="-1"><a class="header-anchor" href="#_1来自版本控制系统" aria-hidden="true">#</a> ①来自版本控制系统</h5>`,156),j={href:"http://heavy_code_industry.gitee.io/code_heavy_industry/pro008-Git/lecture/chapter05/verse03.html",target:"_blank",rel:"noopener noreferrer"},w=a("strong",null,"这里",-1),M=a("strong",null,"克隆远程库",-1),E=e('<h5 id="_2来自工程目录" tabindex="-1"><a class="header-anchor" href="#_2来自工程目录" aria-hidden="true">#</a> ②来自工程目录</h5><p>直接使用 IDEA 打开工程目录即可。下面咱们举个例子：</p><h6 id="_1-工程压缩包" tabindex="-1"><a class="header-anchor" href="#_1-工程压缩包" aria-hidden="true">#</a> [1]工程压缩包</h6><p>假设别人发给我们一个 Maven 工程的 zip 压缩包：maven-rest-demo.zip。从码云或GitHub上也可以以 ZIP 压缩格式对项目代码打包下载。</p><h6 id="_2-解压" tabindex="-1"><a class="header-anchor" href="#_2-解压" aria-hidden="true">#</a> [2]解压</h6><p>如果你的所有 IDEA 工程有一个专门的目录来存放，而不是散落各处，那么首先我们就把 ZIP 包解压到这个指定目录中</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145758877.png" alt="image-20221225145758877" loading="lazy"></p><h6 id="_3-打开" tabindex="-1"><a class="header-anchor" href="#_3-打开" aria-hidden="true">#</a> [3]打开</h6><p>只要我们确认在解压目录下可以直接看到 pom.xml，那就能证明这个解压目录就是我们的工程目录。那么接下来让 IDEA 打开这个目录就可以了。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145843999.png" alt="image-20221225145843999" loading="lazy"></p><h6 id="_4-设置-maven-核心程序位置" tabindex="-1"><a class="header-anchor" href="#_4-设置-maven-核心程序位置" aria-hidden="true">#</a> [4]设置 Maven 核心程序位置</h6><p>打开一个新的 Maven 工程，和新创建一个 Maven 工程是一样的，此时 IDEA 的 settings 配置中关于 Maven 仍然是默认值：<br> 所以我们还是需要像新建 Maven 工程那样，指定一下 Maven 核心程序位置：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145915064.png" alt="image-20221225145915064" loading="lazy"></p><h4 id="_4、模块导入" tabindex="-1"><a class="header-anchor" href="#_4、模块导入" aria-hidden="true">#</a> 4、模块导入</h4><h5 id="_1、导入-java-类型模块" tabindex="-1"><a class="header-anchor" href="#_1、导入-java-类型模块" aria-hidden="true">#</a> 1、导入 Java 类型模块</h5><p>复制我们想要导入的模块目录，粘贴到我们自己工程目录下</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151023482.png" alt="image-20221225151023482" loading="lazy"></p><p>在 IDEA 中执行导入</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151044681.png" alt="image-20221225151044681" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151055554.png" alt="image-20221225151055554" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151309080.png" alt="image-20221225151309080" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151316718.png" alt="image-20221225151316718" loading="lazy"></p><p>修改 pom.xml<br> 刚刚导入的 module 的父工程坐标还是以前的，需要改成我们自己的 project。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151337073.png" alt="image-20221225151337073" loading="lazy"></p><h5 id="_2、导入-web-类型模块" tabindex="-1"><a class="header-anchor" href="#_2、导入-web-类型模块" aria-hidden="true">#</a> 2、导入 Web 类型模块</h5><p>其它操作和上面演示的都一样，只是多一步：删除多余的、不正确的 web.xml 设置。如下图所示：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151411493.png" alt="image-20221225151411493" loading="lazy"></p><h2 id="_5、其他核心概念" tabindex="-1"><a class="header-anchor" href="#_5、其他核心概念" aria-hidden="true">#</a> 5、其他核心概念</h2><h3 id="_1、生命周期" tabindex="-1"><a class="header-anchor" href="#_1、生命周期" aria-hidden="true">#</a> 1、生命周期</h3><h4 id="_1作用" tabindex="-1"><a class="header-anchor" href="#_1作用" aria-hidden="true">#</a> ①作用</h4><p>为了让构建过程自动化完成，Maven 设定了三个生命周期，生命周期中的每一个环节对应构建过程中的一个操作。</p><h4 id="_2三个生命周期" tabindex="-1"><a class="header-anchor" href="#_2三个生命周期" aria-hidden="true">#</a> ②三个生命周期</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225152742410.png" alt="image-20221225152742410" loading="lazy"></p><h4 id="_3特点" tabindex="-1"><a class="header-anchor" href="#_3特点" aria-hidden="true">#</a> ③特点</h4><ul><li>前面三个生命周期彼此是独立的。</li><li>在任何一个生命周期内部，执行任何一个具体环节的操作，都是<strong>从本周期最初的位置开始执行，直到指定的地方</strong>。（本节记住这句话就行了，其他的都不需要记）</li></ul><p>Maven 之所以这么设计其实就是为了提高构建过程的自动化程度：让使用者只关心最终要干的即可，过程中的各个环节是自动执行的。</p><h3 id="_2、插件和目标" tabindex="-1"><a class="header-anchor" href="#_2、插件和目标" aria-hidden="true">#</a> 2、插件和目标</h3><h4 id="_1插件" tabindex="-1"><a class="header-anchor" href="#_1插件" aria-hidden="true">#</a> ①插件</h4><p>Maven 的核心程序仅仅负责宏观调度，不做具体工作。<strong>具体工作都是由 Maven 插件完成的</strong>。例如：编译就是由 maven-compiler-plugin-3.1.jar 插件来执行的。</p><h4 id="_2目标" tabindex="-1"><a class="header-anchor" href="#_2目标" aria-hidden="true">#</a> ②目标</h4><p>一个插件可以对应多个目标，而每一个目标都和生命周期中的某一个环节对应。</p><p>Default 生命周期中有 compile 和 test-compile 两个和编译相关的环节，这两个环节对应 compile 和 test-compile 两个目标，而这两个目标都是由 maven-compiler-plugin-3.1.jar 插件来执行的。</p><h3 id="_3、仓库" tabindex="-1"><a class="header-anchor" href="#_3、仓库" aria-hidden="true">#</a> 3、仓库</h3><ul><li>本地仓库：在当前电脑上，为电脑上所有 Maven 工程服务</li><li>远程仓库：需要联网 <ul><li>局域网：我们自己搭建的 Maven 私服，例如使用 Nexus 技术。</li><li>Internet <ul><li>中央仓库</li><li>镜像仓库：内容和中央仓库保持一致，但是能够分担中央仓库的负载，同时让用户能够就近访问提高下载速度，例如：Nexus aliyun</li></ul></li></ul></li></ul><p>建议：不要中央仓库和阿里云镜像混用，否则 jar 包来源不纯，彼此冲突。</p>',45),B={href:"https://mvnrepository.com/",target:"_blank",rel:"noopener noreferrer"};function A(T,S){const s=c("ExternalLinkIcon");return l(),o("div",null,[u,i(" more "),d,a("p",null,[n("首页："),g,a("a",k,[n("https://maven.apache.org/"),t(s)])]),a("p",null,[n("下载页面："),m,a("a",v,[n("https://maven.apache.org/download.cgi"),t(s)])]),h,a("p",null,[n("对于不知道详细信息的依赖可以到**"),a("a",b,[n("https://mvnrepository.com/**网站查询。使用关键词搜索，然后在搜索结果列表中选择适合的使用。"),t(s)])]),_,a("p",null,[n("将 war 包复制到 Tomcat/webapps 目录下"),x,n(" 启动 Tomcat"),f,n(" 通过浏览器尝试访问："),a("a",I,[n("http://localhost:8080/pro02-maven-web/index.jsp"),t(s)])]),y,a("p",null,[n("目前我们通常使用的都是 Git（本地库） + 码云（远程库）的版本控制系统，结合 IDEA 的相关操作方式请点"),a("a",j,[w,n(" (opens new window)"),t(s)]),n("查看"),M,n("部分。")]),E,a("p",null,[n("专门搜索 Maven 依赖信息的网站："),a("a",B,[n("https://mvnrepository.com/"),t(s)])])])}const C=p(r,[["render",A],["__file","Maven基础.html.vue"]]);export{C as default};
