const l=JSON.parse('{"key":"v-83d01184","path":"/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","category":["基础知识"],"tag":["设计模式"],"icon":"align","description":"设计模式（pattern）是针对某一类问题的最佳解决方案，且已被成功应用与许多系统的设计中 设计模式的分类： 「行为型模式」：涉及怎样合理设计对象之间的交互通信，怎样合理地为对象分配职责，使设计有弹性、易维护、易复用 策略模式 状态模式 命令模式 中介者模式 责任链模式 模板方法模式 观察者模式 访问者模式 「结构型模式」：涉及如何组合类的对象，以形成更大的对象与结构 装饰模式 组合模式 适配器模式 外观模式 代理模式 享元模式 桥接模式 「创建型模式」：涉及对象的实例化，避免用户直接使用 new 创建对象 工厂方法模式 抽象工厂模式 生成器模式 原型模式 单件模式","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式（pattern）是针对某一类问题的最佳解决方案，且已被成功应用与许多系统的设计中 设计模式的分类： 「行为型模式」：涉及怎样合理设计对象之间的交互通信，怎样合理地为对象分配职责，使设计有弹性、易维护、易复用 策略模式 状态模式 命令模式 中介者模式 责任链模式 模板方法模式 观察者模式 访问者模式 「结构型模式」：涉及如何组合类的对象，以形成更大的对象与结构 装饰模式 组合模式 适配器模式 外观模式 代理模式 享元模式 桥接模式 「创建型模式」：涉及对象的实例化，避免用户直接使用 new 创建对象 工厂方法模式 抽象工厂模式 生成器模式 原型模式 单件模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"设计模式"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"单例模式（Singleton Pattern）","slug":"单例模式-singleton-pattern","link":"#单例模式-singleton-pattern","children":[{"level":3,"title":"懒汉式单例模式","slug":"懒汉式单例模式","link":"#懒汉式单例模式","children":[]},{"level":3,"title":"饿汉式单例模式","slug":"饿汉式单例模式","link":"#饿汉式单例模式","children":[]},{"level":3,"title":"静态内部类方式","slug":"静态内部类方式","link":"#静态内部类方式","children":[]},{"level":3,"title":"双重检查锁（线程安全的懒汉式）","slug":"双重检查锁-线程安全的懒汉式","link":"#双重检查锁-线程安全的懒汉式","children":[]},{"level":3,"title":"枚举方式","slug":"枚举方式","link":"#枚举方式","children":[]}]},{"level":2,"title":"工厂方法模式","slug":"工厂方法模式","link":"#工厂方法模式","children":[]},{"level":2,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":2,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]}],"readingTime":{"minutes":9.47,"words":2841},"filePathRelative":"code/基础知识/设计模式.md","excerpt":"<p>设计模式（pattern）是针对某一类问题的最佳解决方案，且已被成功应用与许多系统的设计中</p>\\n<p>设计模式的分类：</p>\\n<ul>\\n<li>「行为型模式」：涉及怎样合理设计对象之间的交互通信，怎样合理地为对象分配职责，使设计有弹性、易维护、易复用\\n<ul>\\n<li>策略模式</li>\\n<li>状态模式</li>\\n<li>命令模式</li>\\n<li>中介者模式</li>\\n<li>责任链模式</li>\\n<li>模板方法模式</li>\\n<li>观察者模式</li>\\n<li>访问者模式</li>\\n</ul>\\n</li>\\n<li>「结构型模式」：涉及如何组合类的对象，以形成更大的对象与结构\\n<ul>\\n<li>装饰模式</li>\\n<li>组合模式</li>\\n<li>适配器模式</li>\\n<li>外观模式</li>\\n<li>代理模式</li>\\n<li>享元模式</li>\\n<li>桥接模式</li>\\n</ul>\\n</li>\\n<li>「创建型模式」：涉及对象的实例化，避免用户直接使用 new 创建对象\\n<ul>\\n<li>工厂方法模式</li>\\n<li>抽象工厂模式</li>\\n<li>生成器模式</li>\\n<li>原型模式</li>\\n<li>单件模式</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{l as data};
