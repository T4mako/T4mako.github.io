const l=JSON.parse('{"key":"v-73e48fb0","path":"/life/%E8%80%83%E8%AF%95/%E7%AE%97%E6%B3%95.html","title":"算法","lang":"zh-CN","frontmatter":{"description":"算法 算法性能度量方法 时间复杂度的判别、动态规划状态转移方程 常见问题 阶乘、素数、完数、回文数、最小公约数、最小公倍数 KMP算法、马拉车算法、Prim算法、Krusk算法、Dijkstra算法、Bellman-Ford算法 线性表 线性表有「顺序存储结构 ArrayList」和「链式存储结构 LinkedList」 顺序表和链表的区别及其优缺点： 顺序表： 原理：顺序表存储是将数据元素放到一块连续的内存存储空间，相邻数据元素的存放地址也相邻（逻辑与物理统一）。 优点： 空间利用率高（局部性原理，连续存放，命中率高） 存取速度高效，可以随机存取，通过下标来直接存储 缺点： 插入和删除比较慢，比如：插入或者删除一个元素时，整个表需要遍历移动元素来重新排一次顺序 不可以增长长度，有空间限制，当需要存取的元素个数可能多于顺序表的元素个数时，会出现「溢出」问题，当元素个数远少于预先分配的空间时，空间浪费巨大 顺序表的存储密度为 1（存储密度 = 节点中数据占用的存储量 / 整个节点占用存储量） 时间性能 :查找 O(1)，插入和删除 O(n)","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/life/%E8%80%83%E8%AF%95/%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"算法"}],["meta",{"property":"og:description","content":"算法 算法性能度量方法 时间复杂度的判别、动态规划状态转移方程 常见问题 阶乘、素数、完数、回文数、最小公约数、最小公倍数 KMP算法、马拉车算法、Prim算法、Krusk算法、Dijkstra算法、Bellman-Ford算法 线性表 线性表有「顺序存储结构 ArrayList」和「链式存储结构 LinkedList」 顺序表和链表的区别及其优缺点： 顺序表： 原理：顺序表存储是将数据元素放到一块连续的内存存储空间，相邻数据元素的存放地址也相邻（逻辑与物理统一）。 优点： 空间利用率高（局部性原理，连续存放，命中率高） 存取速度高效，可以随机存取，通过下标来直接存储 缺点： 插入和删除比较慢，比如：插入或者删除一个元素时，整个表需要遍历移动元素来重新排一次顺序 不可以增长长度，有空间限制，当需要存取的元素个数可能多于顺序表的元素个数时，会出现「溢出」问题，当元素个数远少于预先分配的空间时，空间浪费巨大 顺序表的存储密度为 1（存储密度 = 节点中数据占用的存储量 / 整个节点占用存储量） 时间性能 :查找 O(1)，插入和删除 O(n)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"算法性能度量方法","slug":"算法性能度量方法","link":"#算法性能度量方法","children":[]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[]},{"level":2,"title":"线性表","slug":"线性表","link":"#线性表","children":[{"level":3,"title":"链表节点定义","slug":"链表节点定义","link":"#链表节点定义","children":[]},{"level":3,"title":"链表题","slug":"链表题","link":"#链表题","children":[]},{"level":3,"title":"数组题","slug":"数组题","link":"#数组题","children":[]}]},{"level":2,"title":"排序","slug":"排序","link":"#排序","children":[]},{"level":2,"title":"查找","slug":"查找","link":"#查找","children":[]},{"level":2,"title":"递归与分支","slug":"递归与分支","link":"#递归与分支","children":[]},{"level":2,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]},{"level":2,"title":"贪心算法","slug":"贪心算法","link":"#贪心算法","children":[]},{"level":2,"title":"回溯法","slug":"回溯法","link":"#回溯法","children":[]},{"level":2,"title":"分支限界法","slug":"分支限界法","link":"#分支限界法","children":[]}],"readingTime":{"minutes":2.41,"words":722},"filePathRelative":"life/考试/算法.md","excerpt":"<h1> 算法</h1>\\n<h2> 算法性能度量方法</h2>\\n<p>时间复杂度的判别、动态规划状态转移方程</p>\\n<h2> 常见问题</h2>\\n<p>阶乘、素数、完数、回文数、最小公约数、最小公倍数</p>\\n<p>KMP算法、马拉车算法、Prim算法、Krusk算法、Dijkstra算法、Bellman-Ford算法</p>\\n<h2> 线性表</h2>\\n<p>线性表有「顺序存储结构 ArrayList」和「链式存储结构 LinkedList」</p>\\n<p>顺序表和链表的区别及其优缺点：<br>\\n顺序表：</p>\\n<ul>\\n<li>原理：顺序表存储是将数据元素放到一块连续的内存存储空间，相邻数据元素的存放地址也相邻（逻辑与物理统一）。</li>\\n<li>优点：\\n<ul>\\n<li>空间利用率高（局部性原理，连续存放，命中率高）</li>\\n<li>存取速度高效，可以随机存取，通过下标来直接存储</li>\\n</ul>\\n</li>\\n<li>缺点：\\n<ul>\\n<li>插入和删除比较慢，比如：插入或者删除一个元素时，整个表需要遍历移动元素来重新排一次顺序</li>\\n<li>不可以增长长度，有空间限制，当需要存取的元素个数可能多于顺序表的元素个数时，会出现「溢出」问题，当元素个数远少于预先分配的空间时，空间浪费巨大</li>\\n<li>顺序表的存储密度为 1（存储密度 = 节点中数据占用的存储量 / 整个节点占用存储量）</li>\\n</ul>\\n</li>\\n<li>时间性能 :查找 O(1)，插入和删除 O(n)</li>\\n</ul>","autoDesc":true}');export{l as data};
