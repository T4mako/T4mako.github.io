const e=JSON.parse('{"key":"v-abbedb54","path":"/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Promise.html","title":"Promise 基础","lang":"zh-CN","frontmatter":{"title":"Promise 基础","icon":"object","description":"1、Promise 介绍 1.1、Promise 是什么 1.1.1、概念 Promise 是一门新的技术(ES6 规范) Promise 是 JS 中进行 异步编程 的新解决方案 （旧方案是单纯使用 回调函数 ） 从语法上来说: Promise 是一个构造函数 从功能上来说: promise 对象用来封装（包裹）一个异步操作并可以获取其成功/失败的结果值","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Promise.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"Promise 基础"}],["meta",{"property":"og:description","content":"1、Promise 介绍 1.1、Promise 是什么 1.1.1、概念 Promise 是一门新的技术(ES6 规范) Promise 是 JS 中进行 异步编程 的新解决方案 （旧方案是单纯使用 回调函数 ） 从语法上来说: Promise 是一个构造函数 从功能上来说: promise 对象用来封装（包裹）一个异步操作并可以获取其成功/失败的结果值"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise 基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、Promise 介绍","slug":"_1、promise-介绍","link":"#_1、promise-介绍","children":[{"level":3,"title":"1.1、Promise 是什么","slug":"_1-1、promise-是什么","link":"#_1-1、promise-是什么","children":[]},{"level":3,"title":"1.2、promise 工作流程","slug":"_1-2、promise-工作流程","link":"#_1-2、promise-工作流程","children":[]},{"level":3,"title":"1.3、Promise 的优点","slug":"_1-3、promise-的优点","link":"#_1-3、promise-的优点","children":[]},{"level":3,"title":"1.4、Promise API","slug":"_1-4、promise-api","link":"#_1-4、promise-api","children":[]},{"level":3,"title":"1.5、几个关键问题","slug":"_1-5、几个关键问题","link":"#_1-5、几个关键问题","children":[]}]},{"level":2,"title":"2、Promise 使用","slug":"_2、promise-使用","link":"#_2、promise-使用","children":[{"level":3,"title":"2.1、promise 初体验","slug":"_2-1、promise-初体验","link":"#_2-1、promise-初体验","children":[]},{"level":3,"title":"2.2、fs 模块使用 Promise","slug":"_2-2、fs-模块使用-promise","link":"#_2-2、fs-模块使用-promise","children":[]},{"level":3,"title":"2.3、Ajax 操作 Promise","slug":"_2-3、ajax-操作-promise","link":"#_2-3、ajax-操作-promise","children":[]},{"level":3,"title":"2.4、util.promise","slug":"_2-4、util-promise","link":"#_2-4、util-promise","children":[]},{"level":3,"title":"2.5、Promise 封装 Ajax 请求","slug":"_2-5、promise-封装-ajax-请求","link":"#_2-5、promise-封装-ajax-请求","children":[]}]},{"level":2,"title":"3、Promise 自定义（手写）","slug":"_3、promise-自定义-手写","link":"#_3、promise-自定义-手写","children":[{"level":3,"title":"Promise 自定义封装","slug":"promise-自定义封装","link":"#promise-自定义封装","children":[]},{"level":3,"title":"Class 版本封装","slug":"class-版本封装","link":"#class-版本封装","children":[]}]},{"level":2,"title":"4、async 和 await","slug":"_4、async-和-await","link":"#_4、async-和-await","children":[{"level":3,"title":"4.1、async 函数","slug":"_4-1、async-函数","link":"#_4-1、async-函数","children":[]},{"level":3,"title":"4.2、await 表达式","slug":"_4-2、await-表达式","link":"#_4-2、await-表达式","children":[]},{"level":3,"title":"4.3、使用案例","slug":"_4-3、使用案例","link":"#_4-3、使用案例","children":[]}]}],"readingTime":{"minutes":12.72,"words":3815},"filePathRelative":"code/前端开发/Promise.md","excerpt":"<h2> 1、Promise 介绍</h2>\\n<h3> 1.1、Promise 是什么</h3>\\n<h4> 1.1.1、概念</h4>\\n<p>Promise 是一门新的技术(ES6 规范)<br>\\nPromise 是 JS 中进行 <strong>异步编程</strong> 的新解决方案  （旧方案是单纯使用 <strong>回调函数</strong>  ）</p>\\n<p>从语法上来说: Promise 是一个<strong>构造函数</strong><br>\\n从功能上来说: promise 对象用来<strong>封装（包裹）一个异步操作</strong>并可以获取其成功/失败的结果值</p>","autoDesc":true}');export{e as data};
