const e=JSON.parse('{"key":"v-794011d0","path":"/code/python/Machine%20Learning/Pytorch/7%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B.html","title":"","lang":"zh-CN","frontmatter":{"description":"7.1、构建模型 构建模型有三种方法： 继承 nn.Module 基类构建自定义模型（最常见） 使用 nn.Sequential 按层顺序构建模型（最简单） 继承 nn.Module 基类构建模型并辅助应用模型容器进行封装（nn.Sequential,nn.ModuleList,nn.ModuleDict）（最为灵活也较为复杂） 模型定义好后，会给参数（w，b）赋值 pytorch hub 模块，调用他人的网络架构","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/python/Machine%20Learning/Pytorch/7%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:description","content":"7.1、构建模型 构建模型有三种方法： 继承 nn.Module 基类构建自定义模型（最常见） 使用 nn.Sequential 按层顺序构建模型（最简单） 继承 nn.Module 基类构建模型并辅助应用模型容器进行封装（nn.Sequential,nn.ModuleList,nn.ModuleDict）（最为灵活也较为复杂） 模型定义好后，会给参数（w，b）赋值 pytorch hub 模块，调用他人的网络架构"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"7.1、构建模型","slug":"_7-1、构建模型","link":"#_7-1、构建模型","children":[{"level":3,"title":"7.1.1、继承 nn.Module 基类构建自定义模型","slug":"_7-1-1、继承-nn-module-基类构建自定义模型","link":"#_7-1-1、继承-nn-module-基类构建自定义模型","children":[]},{"level":3,"title":"7.1.2、使用 nn.Sequential 按层顺序构建模型","slug":"_7-1-2、使用-nn-sequential-按层顺序构建模型","link":"#_7-1-2、使用-nn-sequential-按层顺序构建模型","children":[]},{"level":3,"title":"7.1.3、继承 nn.Module 基类构建模型并辅助应用模型容器进行封装","slug":"_7-1-3、继承-nn-module-基类构建模型并辅助应用模型容器进行封装","link":"#_7-1-3、继承-nn-module-基类构建模型并辅助应用模型容器进行封装","children":[]}]},{"level":2,"title":"7.2、训练模型","slug":"_7-2、训练模型","link":"#_7-2、训练模型","children":[{"level":3,"title":"7.2.0、准备数据","slug":"_7-2-0、准备数据","link":"#_7-2-0、准备数据","children":[]},{"level":3,"title":"7.2.1、脚本风格","slug":"_7-2-1、脚本风格","link":"#_7-2-1、脚本风格","children":[]},{"level":3,"title":"7.2.2、函数风格","slug":"_7-2-2、函数风格","link":"#_7-2-2、函数风格","children":[]},{"level":3,"title":"7.2.3、类风格","slug":"_7-2-3、类风格","link":"#_7-2-3、类风格","children":[]}]},{"level":2,"title":"7.3、使用 GPU 训练模型","slug":"_7-3、使用-gpu-训练模型","link":"#_7-3、使用-gpu-训练模型","children":[{"level":3,"title":"7.3.0、GPU 相关操作汇总","slug":"_7-3-0、gpu-相关操作汇总","link":"#_7-3-0、gpu-相关操作汇总","children":[]},{"level":3,"title":"7.3.1、矩阵乘法案例","slug":"_7-3-1、矩阵乘法案例","link":"#_7-3-1、矩阵乘法案例","children":[]},{"level":3,"title":"7.3.2、线性回归范例","slug":"_7-3-2、线性回归范例","link":"#_7-3-2、线性回归范例","children":[]},{"level":3,"title":"7.3.3、图片分类范例","slug":"_7-3-3、图片分类范例","link":"#_7-3-3、图片分类范例","children":[]},{"level":3,"title":"7.3.4、torchkeras.KerasModel 中使用 GPU","slug":"_7-3-4、torchkeras-kerasmodel-中使用-gpu","link":"#_7-3-4、torchkeras-kerasmodel-中使用-gpu","children":[]}]}],"readingTime":{"minutes":21.81,"words":6544},"filePathRelative":"code/python/Machine Learning/Pytorch/7、构建、训练模型.md","excerpt":"<h2> 7.1、构建模型</h2>\\n<p>构建模型有三种方法：</p>\\n<ol>\\n<li>继承 nn.Module 基类构建自定义模型（最常见）</li>\\n<li>使用 nn.Sequential 按层顺序构建模型（最简单）</li>\\n<li>继承 nn.Module 基类构建模型并辅助应用模型容器进行封装（nn.Sequential,nn.ModuleList,nn.ModuleDict）（最为灵活也较为复杂）</li>\\n</ol>\\n<p>模型定义好后，会给参数（w，b）赋值</p>\\n<blockquote>\\n<p>pytorch hub 模块，调用他人的网络架构</p>\\n</blockquote>","autoDesc":true}');export{e as data};
