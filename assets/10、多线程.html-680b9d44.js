const e=JSON.parse('{"key":"v-c3ac0db8","path":"/code/java/Java%20%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/10%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"10、多线程","lang":"zh-CN","frontmatter":{"title":"10、多线程","icon":"java","order":10,"category":["java"],"tag":["基础语法","java","os"],"description":"1、程序、线程、进程等概念 程序：静态代码，软件执行的蓝本 进程：程序的一次动态执行过程，包括进程的产生、发展、消亡 线程：比进程更小的执行单位 一个进程可以有产生多个线程，每个进程有一段「专用」的内存区域，线程间可以共享 「相同」的内存单元 每个 Java 程序都有一个默认的「主线程」 main() 当 JVM 加载代码，发现 main() 后，会启动一个主线程，在 main 方法中可以创建其他线程。 如果 main 方法没有创建其他线程，那么 main 方法执行结束后，JVM 就结束了 java 程序 如果创建了其他线程，JVM 就要在主线程和其他线程之间轮流切换，即使 main 方法结束，JVM 也不会结束 java 程序，JVM 一直到程序中的所有线程都结束才结束 java 程序","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/java/Java%20%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/10%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"10、多线程"}],["meta",{"property":"og:description","content":"1、程序、线程、进程等概念 程序：静态代码，软件执行的蓝本 进程：程序的一次动态执行过程，包括进程的产生、发展、消亡 线程：比进程更小的执行单位 一个进程可以有产生多个线程，每个进程有一段「专用」的内存区域，线程间可以共享 「相同」的内存单元 每个 Java 程序都有一个默认的「主线程」 main() 当 JVM 加载代码，发现 main() 后，会启动一个主线程，在 main 方法中可以创建其他线程。 如果 main 方法没有创建其他线程，那么 main 方法执行结束后，JVM 就结束了 java 程序 如果创建了其他线程，JVM 就要在主线程和其他线程之间轮流切换，即使 main 方法结束，JVM 也不会结束 java 程序，JVM 一直到程序中的所有线程都结束才结束 java 程序"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"基础语法"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"os"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10、多线程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、程序、线程、进程等概念","slug":"_1、程序、线程、进程等概念","link":"#_1、程序、线程、进程等概念","children":[{"level":3,"title":"线程生命周期","slug":"线程生命周期","link":"#线程生命周期","children":[]},{"level":3,"title":"线程的调度与优先级","slug":"线程的调度与优先级","link":"#线程的调度与优先级","children":[]}]},{"level":2,"title":"2、线程的创建","slug":"_2、线程的创建","link":"#_2、线程的创建","children":[{"level":3,"title":"Thread 子类","slug":"thread-子类","link":"#thread-子类","children":[]},{"level":3,"title":"Runnable 接口","slug":"runnable-接口","link":"#runnable-接口","children":[]}]},{"level":2,"title":"3、Thread 有关方法","slug":"_3、thread-有关方法","link":"#_3、thread-有关方法","children":[]},{"level":2,"title":"4、线程的同步（线程的安全问题）","slug":"_4、线程的同步-线程的安全问题","link":"#_4、线程的同步-线程的安全问题","children":[{"level":3,"title":"同步代码块","slug":"同步代码块","link":"#同步代码块","children":[]},{"level":3,"title":"同步方法","slug":"同步方法","link":"#同步方法","children":[]},{"level":3,"title":"线程死锁","slug":"线程死锁","link":"#线程死锁","children":[]}]},{"level":2,"title":"5、线程安全的懒汉式单例模式","slug":"_5、线程安全的懒汉式单例模式","link":"#_5、线程安全的懒汉式单例模式","children":[]},{"level":2,"title":"6、lock 锁","slug":"_6、lock-锁","link":"#_6、lock-锁","children":[]},{"level":2,"title":"7、线程的通信（wait、notify、notifyAll）","slug":"_7、线程的通信-wait、notify、notifyall","link":"#_7、线程的通信-wait、notify、notifyall","children":[]},{"level":2,"title":"8、多线程的经典问题","slug":"_8、多线程的经典问题","link":"#_8、多线程的经典问题","children":[]},{"level":2,"title":"9、JDK5.0 新增线程创建方式","slug":"_9、jdk5-0-新增线程创建方式","link":"#_9、jdk5-0-新增线程创建方式","children":[]},{"level":2,"title":"10、多线程练习","slug":"_10、多线程练习","link":"#_10、多线程练习","children":[]}],"readingTime":{"minutes":16.59,"words":4977},"filePathRelative":"code/java/Java 基础/语法基础/10、多线程.md","excerpt":"<h2> 1、程序、线程、进程等概念</h2>\\n<ul>\\n<li>程序：静态代码，软件执行的蓝本</li>\\n<li>进程：程序的一次动态执行过程，包括进程的产生、发展、消亡</li>\\n<li>线程：比进程更小的执行单位</li>\\n</ul>\\n<p>一个进程可以有产生多个线程，每个进程有一段「专用」的内存区域，线程间可以共享 「相同」的内存单元</p>\\n<p>每个 Java 程序都有一个默认的「主线程」 <code>main()</code><br>\\n当 JVM 加载代码，发现 <code>main()</code> 后，会启动一个主线程，在 main 方法中可以创建其他线程。<br>\\n如果 main 方法没有创建其他线程，那么 main 方法执行结束后，JVM 就结束了 java 程序<br>\\n如果创建了其他线程，JVM 就要在主线程和其他线程之间轮流切换，即使 main 方法结束，JVM 也不会结束 java 程序，JVM 一直到程序中的所有线程都结束才结束 java 程序</p>","autoDesc":true}');export{e as data};
