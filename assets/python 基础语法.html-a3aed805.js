import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,a as c,b as n,f as s,e as l,d as a}from"./app-00d6fe81.js";const u={},d=a(`<h2 id="_1、数据类型、变量" tabindex="-1"><a class="header-anchor" href="#_1、数据类型、变量" aria-hidden="true">#</a> 1、数据类型、变量</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><ul><li><p>Number（数字）</p><ul><li>int</li><li>float</li><li>complex（复数）</li><li>bool</li></ul></li><li><p>String（字符串）</p></li><li><p>List（有序可变序列）</p></li><li><p>Tuple（有序不可变序列）</p></li><li><p>Set（无序不重复集合）</p></li><li><p>Dictionary（无序 k-v 集合）</p></li></ul><p><code>type()</code> 方法查看字面量、变量类型信息</p><p>在 python 中，变量没有类型，变量存储的值有类型</p><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><ul><li>int(x) 将 x 转换为整数</li><li>float(x) 将 x 转换为浮点数</li><li>str(x) 将 x 转换为字符串</li><li>list(x) 将 x 转换为列表</li><li>tuple(x) 将 x 转换为元组</li><li>set(x) 将 x 转换为集合</li></ul><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><p>局部变量：方法中的变量<br> 全局变量：外面定义的变量</p><p>在方法中获取全局变量，使用 global 关键字</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> num <span class="token comment"># 获取全局变量 num</span>
    num <span class="token operator">=</span> <span class="token number">200</span> <span class="token comment"># 修改全局变量的值</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment"># 新的局部变量</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="number-数字" tabindex="-1"><a class="header-anchor" href="#number-数字" aria-hidden="true">#</a> Number（数字）</h3><p>int、float、bool、complex（复数）</p><ul><li>整型(Int)</li><li>长整型(long integers) - 最后是一个大写或小写的 L</li><li>浮点型</li><li>复数(complex numbers) - 可以用 a + bj ,或者complex(a,b) 表示， a 和 b 都是浮点型</li></ul><p>我们可以使用十六进制和八进制来代表整数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number <span class="token operator">=</span> <span class="token number">0xA0F</span> <span class="token comment"># 十六进制</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number
<span class="token number">2575</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number<span class="token operator">=</span><span class="token number">0o37</span> <span class="token comment"># 八进制</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number
<span class="token number">31</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bool 是 int 的子类，True 和 False 可以和数字相加</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token boolean">True</span><span class="token operator">==</span><span class="token number">1</span> <span class="token comment">#True</span>
<span class="token boolean">False</span><span class="token operator">==</span><span class="token number">0</span> <span class="token comment">#True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h3><p>容器通用操作:</p><ul><li><code>max()</code></li><li><code>min()</code></li><li><code>len()</code></li><li><code>sorted(x,[reverse=True])</code> 返回 list 对象</li></ul><h4 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串" aria-hidden="true">#</a> String（字符串）</h4><p>字符串时 <strong>不可修改</strong> 的</p><p>字符串三种定义方式：</p><p>单引号定义法：<code>name = &#39;t&#39;</code><br> 双引号定义法：<code>name = &quot;t&quot;</code><br> 三引号定义法：<code>name = &quot;&quot;&quot;t&quot;&quot;&quot; or name = &#39;&#39;&#39;t&#39;&#39;&#39;</code></p><p>字符串中包含引号：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name1 <span class="token operator">=</span> <span class="token string">&#39;&quot;aaa&quot;&#39;</span>
name2 <span class="token operator">=</span> <span class="token string">&quot;&#39;bbb&#39;&quot;</span>
name3 <span class="token operator">=</span> <span class="token string">&quot;\\&quot;ccc\\&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串拼接：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name1 <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span> <span class="token operator">+</span> name1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>字符串只能与字符串拼接，不能与其他数据类型拼接</p></div><p>字符串格式化：</p>`,31),r=n("li",null,"%s：将内容转换为字符串占位",-1),k=n("li",null,"%d：将内容转换为整数占位",-1),v={href:"http://m.nf",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),b=n("br",null,null,-1),h=n("strong",null,"四舍五入",-1),g=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">123</span>
b <span class="token operator">=</span> <span class="token number">123.5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;haha%shaha%s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 格式化表达式</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a+b:%d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快速格式化（模板字符串）：<br> 使用 f （format）作为标记</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;aa&quot;</span>
i <span class="token operator">=</span> <span class="token number">123</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;haha</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">wowo</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">gaga&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_str <span class="token operator">=</span> <span class="token string">&quot;abcdefghabc&quot;</span>

<span class="token comment"># 查找字符串的起始下标</span>
my_str<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&quot;cde&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 替换所有 str1 为 str2 并返回新字符串</span>
new_str <span class="token operator">=</span> my_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bc&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 字符串分割，返回 list</span>
my_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 去除首位空格</span>
my_str<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 取出首尾内容</span>
my_str<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 包含 a、b、c 都去除</span>

<span class="token comment"># 字符串出现次数</span>
my_str<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 长度</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>my_str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表" aria-hidden="true">#</a> List（列表）</h4><p>list 可以存储不同类型数据</p><p>定义</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字面量</span>
<span class="token punctuation">[</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>e3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>

<span class="token comment"># 定义变量</span>
list_name <span class="token operator">=</span> <span class="token punctuation">[</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>

<span class="token comment"># 定义空列表</span>
list_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
list_name <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>

<span class="token comment"># 元素数量</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># 判断元素是否在列表中</span>
<span class="token number">1</span> <span class="token keyword">in</span> a <span class="token comment">#True</span>

<span class="token comment"># 最大值</span>
<span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># 最小值</span>
<span class="token builtin">min</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># 添加元素到最后位置</span>
a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># 将 5 插入下标为 1 的位置</span>
a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment"># 元素出现次数</span>
a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 

<span class="token comment"># 列表扩展（多个元素）</span>
a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 

<span class="token comment"># 值的索引</span>
a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 

<span class="token comment"># 删除元素（下标）</span>
<span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># 删除元素（元素）</span>
a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token comment"># 取出元素并删除</span>
num <span class="token operator">=</span> a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment"># 清空列表</span>
a<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 反转</span>
a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#list.sort(cmp=None, key=None, reverse=False)</span>
<span class="token comment">#cmp -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</span>
<span class="token comment">#key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</span>
<span class="token comment">#reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。</span>
a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#降序排列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    i <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token keyword">for</span> ele <span class="token keyword">in</span> my_list<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tuple-元组" tabindex="-1"><a class="header-anchor" href="#tuple-元组" aria-hidden="true">#</a> Tuple（元组）</h4><p>元组与 list 相同，但 <strong>不可修改</strong></p><p>定义</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字面量</span>
<span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

<span class="token comment"># 变量</span>
name <span class="token operator">=</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

<span class="token comment"># 定义空元组</span>
name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
name <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 定义单个元素的元组（添加 , ）</span>
name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 返回元素索引</span>
tuple_name<span class="token punctuation">.</span>index<span class="token punctuation">(</span>e<span class="token punctuation">)</span>

<span class="token comment"># 统计元素出现次数</span>
tuple_name<span class="token punctuation">.</span>count<span class="token punctuation">(</span>e<span class="token punctuation">)</span>

<span class="token comment"># 长度</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>tuple_name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>string、list 和 tuple 都属于 sequence（序列）。<br> 元祖不可以进行的操作：append，insert，pop，del，remove......</p><h4 id="切片操作" tabindex="-1"><a class="header-anchor" href="#切片操作" aria-hidden="true">#</a> 切片操作</h4><p>语法：<code>序列[起始下标:结束下标:步长]</code><br> 起始和结束不写表示从头到尾，步长为 1</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_str <span class="token operator">=</span> <span class="token string">&quot;abcdefg&quot;</span>
res1 <span class="token operator">=</span> my_str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
res2 <span class="token operator">=</span> my_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
res3 <span class="token operator">=</span> my_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合" aria-hidden="true">#</a> Set（集合）</h4><p>set 无重复，无序</p><p>定义</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字面量</span>
<span class="token punctuation">{</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token comment"># 遍历那个</span>
s <span class="token operator">=</span> <span class="token punctuation">{</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token comment"># 空集合</span>
s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>set 不支持下标索引</p><p>方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 添加</span>
my_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 移除</span>
my_set<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 随机删除并取出</span>
s <span class="token operator">=</span> my_set<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 清空集合</span>
my_set<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 差集（s1 有 s2 没有）</span>
s1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>

<span class="token comment"># 消除差集（s1 删除 s2 中相同的）</span>
s1<span class="token punctuation">.</span>difference_update<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>

<span class="token comment"># 合并集合</span>
s3 <span class="token operator">=</span> s1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>

<span class="token comment"># 元素数量 len()</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>

<span class="token comment"># 遍历集合</span>
<span class="token keyword">for</span> e <span class="token keyword">in</span> s1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dictionary-字典" tabindex="-1"><a class="header-anchor" href="#dictionary-字典" aria-hidden="true">#</a> Dictionary（字典）</h4><p>字典存储 k-v，key 不可重复，类型不可以是字典</p><p>定义</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字面量</span>
<span class="token punctuation">{</span>k1<span class="token punctuation">:</span>v1<span class="token punctuation">,</span>k2<span class="token punctuation">:</span>v2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token comment"># 变量</span>
d1 <span class="token operator">=</span> <span class="token punctuation">{</span>k1<span class="token punctuation">:</span>v1<span class="token punctuation">,</span>k2<span class="token punctuation">:</span>v2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token comment"># 空字典</span>
d1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
d1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 根据 k 获取 v</span>
v1 <span class="token operator">=</span> d1<span class="token punctuation">[</span>k1<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 新增、修改</span>
d1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v

<span class="token comment"># 删除元素</span>
d1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>k<span class="token punctuation">)</span>

<span class="token comment"># 清空元素</span>
d1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 获取所有 k</span>
ks <span class="token operator">=</span> d1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 遍历</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> d1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;k of d1:</span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string">,v fo d1:</span><span class="token interpolation"><span class="token punctuation">{</span>di<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 元素数量</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span>

<span class="token comment"># 判断是否包含 key</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token keyword">in</span> d1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">函数及描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">dict.clear() 删除字典内所有元素</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">dict.copy() 返回一个字典的浅复制</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">dict.fromkeys(seq[, val]) 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">dict.get(key, default=None)返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">dict.has_key(key) 如果键在字典dict里返回true，否则返回false</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">dict.items() 以<strong>列表返回可遍历的(键, 值) 元组数组</strong> 转换成list还需强转</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">dict.keys() 以列表返回一个字典所有的键</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">dict.setdefault(key, default=None) 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">dict.update(dict2)把字典dict2的键/值对更新到dict里</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">dict.values()以列表返回字典中的所有值</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">pop(key[,default])删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">popitem()返回并删除字典中的最后一对键和值。</td></tr></tbody></table><h3 id="python-推导式" tabindex="-1"><a class="header-anchor" href="#python-推导式" aria-hidden="true">#</a> Python 推导式</h3><h4 id="列表推导式" tabindex="-1"><a class="header-anchor" href="#列表推导式" aria-hidden="true">#</a> 列表推导式</h4><p>格式：<code>[表达式 for 变量 in 列表] </code> 或 <code>[表达式 for 变量 in 列表 if 条件]</code></p><ul><li>表达式：新列表元素的表达式，可以是有返回值的函数</li><li>条件：过滤列表中不符合条件的值</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;alice&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Wendy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Smith&#39;</span><span class="token punctuation">]</span>
new_names <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_names<span class="token punctuation">)</span> <span class="token comment"># [&#39;ALICE&#39;, &#39;JERRY&#39;, &#39;WENDY&#39;, &#39;SMITH&#39;]</span>

multiples <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>multiples<span class="token punctuation">)</span> <span class="token comment"># [0, 3, 6, 9, 12, 15, 18, 21, 24, 27]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字典推导式" tabindex="-1"><a class="header-anchor" href="#字典推导式" aria-hidden="true">#</a> 字典推导式</h4><p>格式：<code>{ k 表达式: v 表达式 for 变量 in 集合}</code> 或 <code> {k 表达式: v 表达式 for 变量 in 集合 if 条件}</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>listdemo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span>
newdict <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> listdemo<span class="token punctuation">}</span>
newdict
<span class="token punctuation">{</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="集合推导式" tabindex="-1"><a class="header-anchor" href="#集合推导式" aria-hidden="true">#</a> 集合推导式</h4><p>格式：<code>{ expression for item in Sequence }</code> 或 <code>{ expression for item in Sequence if conditional }</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">&#39;abracadabra&#39;</span> <span class="token keyword">if</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">}</span>
a <span class="token comment"># {&#39;d&#39;, &#39;r&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元组推导式" tabindex="-1"><a class="header-anchor" href="#元组推导式" aria-hidden="true">#</a> 元组推导式</h4><p>元组推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的元组</p><p>元组推导式是用 () 圆括号将各部分括起来，而列表推导式用的是中括号 []，元组推导式返回的结果是一个 <strong>生成器对象</strong>。</p><p>格式：<code>(expression for item in Sequence )</code> 或 <code>(expression for item in Sequence if conditional )</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> a <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token comment"># &lt;generator object &lt;genexpr&gt; at 0x7faf6ee20a50&gt;  返回的是生成器对象</span>

<span class="token builtin">tuple</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、注释-输出输出" tabindex="-1"><a class="header-anchor" href="#_2、注释-输出输出" aria-hidden="true">#</a> 2、注释，输出输出</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这是一个注释</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
这是多行注释，用三个单引号
这是多行注释，用三个单引号 
这是多行注释，用三个单引号
&#39;&#39;&#39;</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
这是多行注释，用三个双引号
这是多行注释，用三个双引号 
这是多行注释，用三个双引号
&quot;&quot;&quot;</span>

a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;A:&quot;</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>

<span class="token comment"># 不换行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;fff&quot;</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3、运算符" tabindex="-1"><a class="header-anchor" href="#_3、运算符" aria-hidden="true">#</a> 3、运算符</h2><p><strong>python 无自增自减</strong></p><p>算数运算符：+、-、*、/、//、%，**</p><p>赋值运算符：=、+=、-= ....</p><p>比较运算符：&gt;、&lt;、&gt;=、&lt;=、==、!=</p><p>逻辑运算符：</p><table><thead><tr><th>and</th><th>x and y</th><th>布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</th><th>(a and b) 返回 20。</th></tr></thead><tbody><tr><td><strong>or</strong></td><td><strong>x or y</strong></td><td><strong>布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</strong></td><td><strong>(a or b) 返回 10。</strong></td></tr><tr><td><strong>not</strong></td><td><strong>not x</strong></td><td><strong>布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</strong></td><td><strong>not(a and b) 返回 False</strong></td></tr></tbody></table><p>Python成员运算符：</p><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">in</td><td style="text-align:left;">如果在指定的序列中找到值返回 True，否则返回 False。</td><td style="text-align:left;">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td style="text-align:left;">not in</td><td style="text-align:left;">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td style="text-align:left;">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token number">20</span>
<span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;1 - 变量 a 在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;1 - 变量 a 不在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span> b <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;2 - 变量 b 不在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;2 - 变量 b 在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
 
<span class="token comment">## 修改变量 a 的值</span>
a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;3 - 变量 a 在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;3 - 变量 a 不在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python身份运算符：</p><p>身份运算符用于比较两个对象的存储单元<br><strong>id()</strong> 函数用于获取对象内存地址。</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">is</td><td style="text-align:left;">is 是判断两个标识符是不是引用自一个对象</td><td style="text-align:left;"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td style="text-align:left;">is not</td><td style="text-align:left;">is not 是判断两个标识符是不是引用自不同对象</td><td style="text-align:left;"><strong>x is not y</strong> ， 类似 <strong>id(x) != id(y)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><h2 id="_4、分支循环" tabindex="-1"><a class="header-anchor" href="#_4、分支循环" aria-hidden="true">#</a> 4、分支循环</h2><h3 id="_1、if" tabindex="-1"><a class="header-anchor" href="#_1、if" aria-hidden="true">#</a> 1、IF</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> 判断条件：
    执行语句……
<span class="token keyword">else</span>：
    执行语句……
    
<span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>
    执行语句<span class="token number">1</span>……
<span class="token keyword">elif</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span>
    执行语句<span class="token number">2</span>……
<span class="token keyword">elif</span> 判断条件<span class="token number">3</span><span class="token punctuation">:</span>
    执行语句<span class="token number">3</span>……
<span class="token keyword">else</span><span class="token punctuation">:</span>
    执行语句<span class="token number">4</span>……
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、while" tabindex="-1"><a class="header-anchor" href="#_2、while" aria-hidden="true">#</a> 2、While</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> 判断条件<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>：
    执行语句<span class="token punctuation">(</span>statements<span class="token punctuation">)</span>……
    
count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token string">&#39;The count is:&#39;</span><span class="token punctuation">,</span> count
   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
 
<span class="token keyword">print</span> <span class="token string">&quot;Good bye!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、for" tabindex="-1"><a class="header-anchor" href="#_3、for" aria-hidden="true">#</a> 3、For</h3><h4 id="range-语句" tabindex="-1"><a class="header-anchor" href="#range-语句" aria-hidden="true">#</a> range 语句</h4><p>range：获取一个数据序列</p><ul><li><p>range(num)</p><p>获取从 [0,num) 的整数序列</p></li><li><p>range(num1,num2)</p><p>获取 [num1,num2) 的整数序列</p></li><li><p>range(num1,num2,setp)</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>
   statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">&quot;abcdefg&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">89398</span><span class="token punctuation">,</span><span class="token string">&quot;qqq&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、break-continue" tabindex="-1"><a class="header-anchor" href="#_4、break-continue" aria-hidden="true">#</a> 4、break，continue</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">89398</span><span class="token punctuation">,</span><span class="token string">&quot;qqq&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、pass" tabindex="-1"><a class="header-anchor" href="#_5、pass" aria-hidden="true">#</a> 5、pass</h3><p><strong>pass</strong> 不做任何事情，一般用做占位语句。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 输出 Python 的每个字母</span>
<span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">:</span>
   <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">:</span>
      <span class="token keyword">pass</span>
      <span class="token keyword">print</span> <span class="token string">&#39;这是 pass 块&#39;</span>
   <span class="token keyword">print</span> <span class="token string">&#39;当前字母 :&#39;</span><span class="token punctuation">,</span> letter
<span class="token keyword">print</span> <span class="token string">&quot;Good bye!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、函数" tabindex="-1"><a class="header-anchor" href="#_5、函数" aria-hidden="true">#</a> 5、函数</h2><h4 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义" aria-hidden="true">#</a> 函数定义：</h4><p>若无返回值，默认返回 None（相当于 null，判断为 False）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    函数说明
    :param x: 新参 x 的说明
    :return: 返回值的说明
    &quot;&quot;&quot;</span>
    函数体
    <span class="token keyword">return</span> 返回值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h4><ul><li><p>位置参数</p><p>调用函数时，根据函数定义的参数位置进行参数传递</p></li><li><p>关键字参数</p><p>调用函数时，可以通过 <code>键 = 值</code> 的形式传递参数<br> 如果有位置参数，位置参数要在关键字参数前面</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">return</span> <span class="token number">0</span>

func<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>缺省参数（默认参数）</p><p>为参数提供默认值，位置参数必须在默认参数前</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>gender<span class="token operator">=</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不定长参数</p><p>位置传递（元组存储）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">return</span> <span class="token number">0</span>

func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键字传递（字典存储）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">0</span>

func<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="函数的多返回值" tabindex="-1"><a class="header-anchor" href="#函数的多返回值" aria-hidden="true">#</a> 函数的多返回值</h4><p>函数可以有多个返回值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span><span class="token number">3</span>

x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数作为参数传递" tabindex="-1"><a class="header-anchor" href="#函数作为参数传递" aria-hidden="true">#</a> 函数作为参数传递</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">return</span> x <span class="token operator">+</span> y

<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>compute<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> compute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lambda-定义匿名函数" tabindex="-1"><a class="header-anchor" href="#lambda-定义匿名函数" aria-hidden="true">#</a> lambda 定义匿名函数</h4><p><code>lambda 传入参数 : 函数体（一行）</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>compute<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> compute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

func<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y <span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、输入输出" tabindex="-1"><a class="header-anchor" href="#_6、输入输出" aria-hidden="true">#</a> 6、输入输出</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#print</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;4654
45665
46545879&#39;&#39;&#39;</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> inpute<span class="token punctuation">(</span><span class="token string">&quot;plz input a number:&quot;</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;plz inpute a number:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;haha:&quot;</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5.5</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>b<span class="token punctuation">)</span>

c <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">/</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token string">&quot;.2%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#15.00% 两位小数，百分数形式</span>

a <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;bbb&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{0}A{1}B&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">&quot;打印任何传入的参数&quot;</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;输出: &quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>vartuple<span class="token punctuation">)</span>
 
<span class="token comment">## 调用printinfo 函数</span>
printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span>

<span class="token comment">#加了两个星号 ** 的参数会以字典的形式导入。</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">&quot;打印任何传入的参数&quot;</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;输出: &quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span>
<span class="token comment">## 调用printinfo 函数</span>
printinfo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、文件" tabindex="-1"><a class="header-anchor" href="#_7、文件" aria-hidden="true">#</a> 7、文件</h2><h3 id="open" tabindex="-1"><a class="header-anchor" href="#open" aria-hidden="true">#</a> open()</h3><ul><li><code>open(name,code,encoding)</code> 打开、创建一个新文件 <ul><li>name：目标文件路径</li><li>code： <ul><li>只读 r</li><li>写入 w，文件不存在则创建，文件存在则清空</li><li>追加 a，文件不存在则创建，文件存在则追加</li></ul></li><li>encoding：编码格式（非第三个位置，不能使用位置参数），推荐 UTF-8</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;D:/a.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="read-、readlines-、readline-、for" tabindex="-1"><a class="header-anchor" href="#read-、readlines-、readline-、for" aria-hidden="true">#</a> read()、readlines()、readline()、for</h3><ul><li><p>read(字节数)，不给参数代表全部内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>readlines()，读取所有内容，返回一个列表</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>readline()，每次读取一行内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 for 循环读取文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> line <span class="token keyword">in</span> f：
	<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="close-、with-open" tabindex="-1"><a class="header-anchor" href="#close-、with-open" aria-hidden="true">#</a> close()、with open()</h3><p>close() 文件关闭</p><p>with open() as f 自动文件关闭</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;D:/a.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="write-、flush" tabindex="-1"><a class="header-anchor" href="#write-、flush" aria-hidden="true">#</a> write()、flush()</h3><p>write()：将内容写入到内存中</p><p>flush()：将内存中的内容写入到文件中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;D:/a.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># close 内置 flush 功能</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、异常、模块、包" tabindex="-1"><a class="header-anchor" href="#_8、异常、模块、包" aria-hidden="true">#</a> 8、异常、模块、包</h2><h3 id="捕获异常" tabindex="-1"><a class="header-anchor" href="#捕获异常" aria-hidden="true">#</a> 捕获异常</h3><p>基本语法，捕获所有异常：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
	代码
<span class="token keyword">except</span><span class="token punctuation">:</span>
    代码
    
<span class="token keyword">try</span><span class="token punctuation">:</span>
	代码
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>捕获指定异常</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    代码
<span class="token keyword">except</span> xxxError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>捕获多个异常</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    代码
<span class="token keyword">except</span> <span class="token punctuation">(</span>xxxError<span class="token punctuation">,</span>xxxError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>else 与 finally</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    代码
<span class="token keyword">except</span> <span class="token punctuation">(</span>xxxError<span class="token punctuation">,</span>xxxError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    代码
<span class="token keyword">else</span><span class="token punctuation">:</span>
    没有异常代码
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    都会执行代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h3><p>模块（module）就是一个 .py 文件，内部可以定义类、变量、函数...</p><p>导入的语法：<br><code>[from 模块名] import [模块 | 类 | 变量 | 函数 | *] [as 别名]</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time <span class="token comment"># 导入 time 模块</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep <span class="token comment"># 导入 time 模块的 sleep 功能</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment"># 导入 time 模块的所有功能柜</span>
<span class="token keyword">import</span> time <span class="token keyword">as</span> t
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义模块</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># my.py</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">return</span> <span class="token number">0</span>

<span class="token comment"># other.py</span>
<span class="token keyword">import</span> my
my<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置变量-main-、-all" tabindex="-1"><a class="header-anchor" href="#内置变量-main-、-all" aria-hidden="true">#</a> 内置变量 __main__、__all__</h3><p>python 文件中有内置变量 __main__，当运行文件时，改变量的值自动设为 __main__</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> __main__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果一个 python 文件中有 __all__ 变量，当使用 <code>from xxx import *</code> 导入模块时，只能导入这个列表中的元素</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;func1&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">0</span>

<span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python-包" tabindex="-1"><a class="header-anchor" href="#python-包" aria-hidden="true">#</a> python 包</h3><p>包是一个文件夹，它包含 __init__.py 文件，该文件夹可用于包含多个模块文件。从逻辑上看，包的本质仍然是模块</p><p>__init__.py 文件表示一个文件夹是 python 的包而非普通文件夹</p><h2 id="_9、面向对象" tabindex="-1"><a class="header-anchor" href="#_9、面向对象" aria-hidden="true">#</a> 9、面向对象</h2><h3 id="定义类" tabindex="-1"><a class="header-anchor" href="#定义类" aria-hidden="true">#</a> 定义类</h3><p>定义成员方法时，必须添加 self 关键字，它表示类对象自身，用于访问成员变量，调用时可以忽略</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> 类名<span class="token punctuation">:</span>
    <span class="token comment"># 属性</span>
    name <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token comment"># 方法</span>
    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象的创建" tabindex="-1"><a class="header-anchor" href="#对象的创建" aria-hidden="true">#</a> 对象的创建</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>对象名 <span class="token operator">=</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h3><p>python 类使用 <code>__init__()</code> 方法作为构造方法，创建对象时会自动创建。</p><p>通过构造方法可以省略 <strong>属性的定义</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Stu</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token comment"># 构造方法</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="魔数方法-类内置方法" tabindex="-1"><a class="header-anchor" href="#魔数方法-类内置方法" aria-hidden="true">#</a> 魔数方法（类内置方法）</h3><ul><li><p><code>__init__(self)</code>：构造方法</p></li><li><p><code>__str__(self)</code>：将对象转换为字符串，类似 toString</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;name:</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>__lt__(self,other)</code>：比较对象，other 为另一个对象，用于 &gt;、&lt; 符号的比较</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>__le__(self,other)</code>：用于 &gt;=、&lt;= 符号的比较</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__le__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">&lt;=</span> other<span class="token punctuation">.</span>age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>__eq__(self,other)</code>：用于 == 符号的比较</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">==</span> other<span class="token punctuation">.</span>age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h3><p>私有成员变量和私有方法的定义：命名以两个下划线 <strong><code>__</code> 开头</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> __name
<span class="token keyword">def</span> <span class="token function">__func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><h4 id="单继承" tabindex="-1"><a class="header-anchor" href="#单继承" aria-hidden="true">#</a> 单继承</h4><p><code>class 子类名(父类名)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">father</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token boolean">None</span>

<span class="token keyword">class</span> <span class="token class-name">son</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sname <span class="token operator">=</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多继承" tabindex="-1"><a class="header-anchor" href="#多继承" aria-hidden="true">#</a> 多继承</h4><p><code>class 子类名(父类名,父类名...)</code></p><p>当子类没有什么补充的功能，可以在类体中编写 <code>pass</code>（可以用于编写抽象类）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">son</span><span class="token punctuation">(</span>fa1<span class="token punctuation">,</span>fa2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当输出同名的属性与方法时，按照 <strong>谁先继承</strong> 谁优先级最高</p><h3 id="复写" tabindex="-1"><a class="header-anchor" href="#复写" aria-hidden="true">#</a> 复写</h3><p>子类可以复写父类的属性和方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">fa</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">son</span><span class="token punctuation">(</span>fa<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token number">123</span>
    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要调用父类的变量与方法：</p><ul><li>父类名.成员变量</li><li>父类名.成员方法(self)</li><li>super().成员变量</li><li>super().成员方法()</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">son</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&quot;son&quot;</span>
    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        Father<span class="token punctuation">.</span>name
        Father<span class="token punctuation">.</span>func<span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token comment"># 需要 self</span>
        <span class="token builtin">super</span><span class="token punctuation">.</span>name
        <span class="token builtin">super</span><span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 不需要 self</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型注解" tabindex="-1"><a class="header-anchor" href="#类型注解" aria-hidden="true">#</a> 类型注解</h3><h4 id="类型注解-1" tabindex="-1"><a class="header-anchor" href="#类型注解-1" aria-hidden="true">#</a> 类型注解</h4><p>为变量声明类型，注意：</p><ul><li>元组声明类型需要将所有类型列出</li><li>字典设置类型要两个</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>m_list<span class="token punctuation">:</span> <span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
m_tuple<span class="token punctuation">:</span> <span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
m_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
m_tuple<span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
m_set<span class="token punctuation">:</span> <span class="token builtin">set</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span>
m_dict<span class="token punctuation">:</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span>

stu<span class="token punctuation">:</span> Student <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注释类型注解" tabindex="-1"><a class="header-anchor" href="#注释类型注解" aria-hidden="true">#</a> 注释类型注解</h4><p>在注释中进行类型注解，语法：<code>#type:类型</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>v1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># type: int</span>
v2 <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment"># type: dict[str,int]</span>
v3 <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># type: Student</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数与方法的类型注解" tabindex="-1"><a class="header-anchor" href="#函数与方法的类型注解" aria-hidden="true">#</a> 函数与方法的类型注解</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> 函数方法名<span class="token punctuation">(</span>形参名<span class="token punctuation">:</span> 类型<span class="token punctuation">,</span>形参名<span class="token punctuation">:</span> 类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 返回值类型<span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="union-类型" tabindex="-1"><a class="header-anchor" href="#union-类型" aria-hidden="true">#</a> Union 类型</h4><p>Union 用于表示联合类型</p><p>Union 的导入：<code>from typing import Union</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">]</span>
my_dict<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h3><h2 id="_10、闭包" tabindex="-1"><a class="header-anchor" href="#_10、闭包" aria-hidden="true">#</a> 10、闭包</h2><p>全局变量在代码命名空间上不够干净并有被修改的风险</p><p>使用函数的嵌套完成闭包的需求</p><h3 id="简单闭包" tabindex="-1"><a class="header-anchor" href="#简单闭包" aria-hidden="true">#</a> 简单闭包</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>o<span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner

fn1 <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
fn1<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span> <span class="token comment"># a,b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nonlocal" tabindex="-1"><a class="header-anchor" href="#nonlocal" aria-hidden="true">#</a> nonlocal</h3><p>使用 nonlocal 关键字修饰外部函数的变量可以使得内部函数修改该变量</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">nonlocal</span> o
        o <span class="token operator">+=</span> i
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>o<span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner

fn1 <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
fn1<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span> <span class="token comment"># ab,b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包的优点：</p><ul><li>无需定义全局变量</li><li>闭包使用的变量难以被错误的修改</li></ul><p>缺点：</p><ul><li>内部函数持续引用外部函数值，会导致一部分内存空间不被释放</li></ul><h2 id="_11、装饰器" tabindex="-1"><a class="header-anchor" href="#_11、装饰器" aria-hidden="true">#</a> 11、装饰器</h2><p>在一个方法前后调用其他方法</p><p>装饰器的一般写法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;working&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;pre&quot;</span><span class="token punctuation">)</span>
        func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;after&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner
    
fn <span class="token operator">=</span> outer<span class="token punctuation">(</span>task<span class="token punctuation">)</span>
fn<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快捷写法（语法糖）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@outer</span>
<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;working&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;pre&quot;</span><span class="token punctuation">)</span>
        func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;after&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner

task<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12、设计模式" tabindex="-1"><a class="header-anchor" href="#_12、设计模式" aria-hidden="true">#</a> 12、设计模式</h2><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h3><p>实现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># single.py</span>
<span class="token keyword">class</span> <span class="token class-name">single</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

singleObj <span class="token operator">=</span> single<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># test.py</span>
<span class="token keyword">from</span> single<span class="token punctuation">.</span>py <span class="token keyword">import</span> singleObj
s1 <span class="token operator">=</span> singleObj
s2 <span class="token operator">=</span> singleObj
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_p</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>p_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p_type <span class="token operator">==</span> <span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span><span class="token punctuation">(</span>p_type <span class="token operator">==</span> <span class="token string">&#39;t&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> Teacher<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
f <span class="token operator">=</span> Factory
s <span class="token operator">=</span> f<span class="token punctuation">.</span>get_p<span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> f<span class="token punctuation">.</span>get_p<span class="token punctuation">(</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13、多线程" tabindex="-1"><a class="header-anchor" href="#_13、多线程" aria-hidden="true">#</a> 13、多线程</h2><p>python 多线程可以通过 threading 模块实现</p><p>使用：</p><p><code>thread_obj = threading.Thread(group,target,name,args,kwargs)</code></p><ul><li>group：暂时无用，预留参数</li><li>target：执行任务名</li><li>args：元组方式给执行任务传参</li><li>kwargs：字典方式给执行任务传参</li><li>nane：线程名</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time<span class="token punctuation">,</span>threading
<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        
<span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># 唱歌线程</span>
    sing_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">)</span>
    <span class="token comment"># 跳舞线程</span>
    dance_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">)</span>
    sing_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dance_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14、网络编程" tabindex="-1"><a class="header-anchor" href="#_14、网络编程" aria-hidden="true">#</a> 14、网络编程</h2><p>通过 socket 模块进行开发</p><h3 id="服务端开发" tabindex="-1"><a class="header-anchor" href="#服务端开发" aria-hidden="true">#</a> 服务端开发</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> socket
<span class="token comment"># 创建 socket 对象</span>
socket_server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 绑定 ip 地址和端口</span>
socket_server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>
<span class="token comment"># 监听端口</span>
socket_server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 参数表示接受的连接数量</span>
<span class="token comment"># 等待客户端连接</span>
result<span class="token punctuation">:</span> <span class="token builtin">tuple</span> <span class="token operator">=</span> socket_server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 返回二元元组，阻塞方法</span>
conn <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 客户端和服务端的连接对象</span>
address <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 客户端的地址信息</span>
<span class="token comment"># conn,address = socket_server.accept()</span>
<span class="token comment"># 接收客户端信息</span>
conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span> <span class="token comment"># recv 接受缓冲区大小一般为 1024B，将字节数组转换为 UTF-8 字符串</span>
<span class="token comment"># 回复消息</span>
conn<span class="token punctuation">.</span>sent<span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 关闭连接</span>
conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
socket_server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端开发" tabindex="-1"><a class="header-anchor" href="#客户端开发" aria-hidden="true">#</a> 客户端开发</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> socket
<span class="token comment"># 创建 socket 对象</span>
socket_client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 连接到服务器</span>
socket_client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>
<span class="token comment"># 发送消息</span>
socket_client<span class="token punctuation">.</span>sent<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 接收返回消息</span>
recv_data <span class="token operator">=</span> socket_client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 关闭连接</span>
socket_client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15、正则表达式" tabindex="-1"><a class="header-anchor" href="#_15、正则表达式" aria-hidden="true">#</a> 15、正则表达式</h2><p>使用 re 模块，并基于 re 模块中三个基础方法来做正则匹配</p><ul><li>match(匹配规则,被匹配字符串)</li><li>search(匹配规则,被匹配字符串)</li><li>findall(匹配规则,被匹配字符串)</li></ul><h2 id="常用模块" tabindex="-1"><a class="header-anchor" href="#常用模块" aria-hidden="true">#</a> 常用模块</h2><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> json</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token comment"># 将 python 数据转 json</span>
data <span class="token operator">=</span> josn<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 将 json 转 python 数据</span>
data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pyecharts" tabindex="-1"><a class="header-anchor" href="#pyecharts" aria-hidden="true">#</a> pyecharts</h3><h3 id="pymysql" tabindex="-1"><a class="header-anchor" href="#pymysql" aria-hidden="true">#</a> pymysql</h3><p>Python 操作 MySQL</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pymsql <span class="token keyword">import</span> Connection

<span class="token comment"># 构建连接</span>
Connection<span class="token punctuation">(</span>
	host<span class="token operator">=</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>
    user<span class="token operator">=</span><span class="token string">&quot;root&quot;</span>
    password<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span>
    autocommit<span class="token operator">=</span><span class="token boolean">True</span> <span class="token comment"># 自动提交</span>
<span class="token punctuation">)</span>

<span class="token comment"># 获取游标对象</span>
cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 选择数据库</span>
cursor<span class="token punctuation">.</span>select_db<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 执行 sql</span>
cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;create table test2(id int)&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 关闭连接</span>
conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pyspark" tabindex="-1"><a class="header-anchor" href="#pyspark" aria-hidden="true">#</a> PySpark</h3><p>Apache Spark 用于大数据处理，它是一款分布式计算框架，用于调度成百上千服务器集群，计算海量数据</p><p>Spark 对 python 的支持：PySpark</p><p>PySpark 的作用：</p><ul><li>作为 python 库进行数据处理</li><li>提交至 Spark 集群进行分布式集群计算</li></ul>`,236);function y(f,x){const e=p("ExternalLinkIcon");return o(),i("div",null,[c(" more "),d,n("ul",null,[r,k,n("li",null,[s("%f：将内容转换为浮点数占位 "),n("ul",null,[n("li",null,[s("%"),n("a",v,[s("m.nf"),l(e)]),s("："),m,s(" m：数据宽度，右补空格"),b,s(" n：数据精度，"),h])])])]),g])}const _=t(u,[["render",y],["__file","python 基础语法.html.vue"]]);export{_ as default};
