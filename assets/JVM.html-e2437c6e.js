import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as n,c as t,e,b as a,d as l,f as r}from"./app-41978837.js";const o={},h=a("h2",{id:"初识虚拟机",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#初识虚拟机","aria-hidden":"true"},"#"),l(" 初识虚拟机")],-1),c=a("p",null,[l("JVM 全称 Java Virtual Machine，即 Java 虚拟机"),a("br"),l(" Java 虚拟机的职责是运行字节码文件")],-1),p=r('<p>JVM 三大核心功能：</p><ul><li>JVM 包内存管理 <ul><li>自动为对象，方法等分配内存</li><li>自动垃圾回收机制，回收不再使用的对象</li></ul></li><li>解释执行虚拟机指令 <ul><li>对字节码文件中的指令实时解释成机器码，让计算机执行</li></ul></li><li>及时编译 <ul><li>对热点代码进行优化，提升执行效率</li></ul></li></ul><p>常见的 Java 虚拟机：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20231114225258529.png" alt="image-20231114225258529" loading="lazy"></p><p>JVM 的组成：</p><ul><li>类加载器 ClassLoader</li><li>运行时数据区（JVM 管理的内存）</li><li>执行引擎（即使编译器、解释器、垃圾回收器）</li><li>本地接口（通常为 native 修饰）</li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20231116222801070.png" alt="image-20231116222801070" loading="lazy"></p><h2 id="字节码文件的组成" tabindex="-1"><a class="header-anchor" href="#字节码文件的组成" aria-hidden="true">#</a> 字节码文件的组成</h2><ul><li>基本信息： <ul><li>魔数、字节码文件对应的 Java 版本号</li><li>访问标识（public final 等）</li><li>父类和接口</li></ul></li><li>常量池 <ul><li>保存字符串常量、类或接口名、字段名</li></ul></li><li>字段 <ul><li>当前类或接口声明的字段信息</li></ul></li><li>方法 <ul><li>当前类或接口声明的方法信息</li></ul></li><li>属性 <ul><li>类的属性、比如源码文件名、内部类的列表等</li></ul></li></ul><h2 id="类的生命周期" tabindex="-1"><a class="header-anchor" href="#类的生命周期" aria-hidden="true">#</a> 类的生命周期</h2><p>类的生命周期：<br> 加载、连接、初始化、使用、卸载</p><h3 id="加载阶段" tabindex="-1"><a class="header-anchor" href="#加载阶段" aria-hidden="true">#</a> 加载阶段</h3><ol><li>类加载器根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息</li><li>类加载器在加载完之后，Java 虚拟机会将字节码中的信息保存到方法区中</li><li>类加载器在加载完类之后，Java 虚拟机会将字节码中的信息保存到内存的方法区中<br> 生成一个 InstanceKlass 对象，保存类的所有信息，里面包含实现特定功能比如多态的信息</li><li>同时，Java 虚拟机还在堆中生成一份与方法区中数据类似的 Java.lang.Class 对象<br> 作用在 Java 代码中去获取类的信息以及存储静态字段的数据（JDK 8 以后）</li></ol><h3 id="连接阶段" tabindex="-1"><a class="header-anchor" href="#连接阶段" aria-hidden="true">#</a> 连接阶段</h3><ol><li>验证：验证验证内容是否满足《Java 虚拟机规范》</li><li>准备：给静态变量赋初值</li><li>解析：将常量池中的符号引用替换成指向内存的直接引用</li></ol><h3 id="初始化阶段" tabindex="-1"><a class="header-anchor" href="#初始化阶段" aria-hidden="true">#</a> 初始化阶段</h3><ul><li>初始化阶段会执行静态代码块中的代码，并为静态变量赋值</li><li>初始化阶段会执行字节码文件中的 clinit 部分的字节码指令</li></ul><h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器" aria-hidden="true">#</a> 类加载器</h2><p>类加载器是什么：<br> 类加载器（ClassLoader）是 Java 虚拟机提供给应用程序去实现获取类和接口字节码数据的技术<br> 类加载器只参与加载过程中的字节码获取并加载内存这一部分</p><p>类加载器的作用：<br> 类加载器（ClassLoader）负责在类加载过程中的字节码获取并加载到内存这一部分。通过加载字节码数据放入内存转换为 byte[]，接下来调用虚拟机底层将 byte[] 转换成方法区和堆中的数据</p><p>类加载器分为两类：一类是 Java 代码中实现，一类是 Java 虚拟机底层源码实现</p><ul><li>虚拟机底层源码实现： <ul><li>源代码位于 Java 虚拟机源码中，实现语言与底层语言一致（如 C++）</li><li>用于加载程序运行时的基础类，如 java.lang.String</li></ul></li><li>Java 代码中实现： <ul><li>JDK 中默认提供或自定义</li><li>所有 Java 中实现的类加载器都要继承 ClassLoader 这个抽象类</li></ul></li></ul><h3 id="jdk8-及以前的类加载器" tabindex="-1"><a class="header-anchor" href="#jdk8-及以前的类加载器" aria-hidden="true">#</a> JDK8 及以前的类加载器</h3><p>虚拟机底层实现（C++）：</p><ul><li>启动类加载器 BootStrap：加载 Java 中最核心的类<br> Java 实现：</li><li>扩展类加载器 Extension：允许扩展 Java 中比较通用的类</li><li>应用程序类加载器 Application：加载应用使用的类</li></ul><h4 id="启动类加载器-bootstrap" tabindex="-1"><a class="header-anchor" href="#启动类加载器-bootstrap" aria-hidden="true">#</a> 启动类加载器 BootStrap</h4><p>什么是启动类加载器：启动类加载器（Bootstrap ClassLoader）时有 Hotspot 虚拟机提供的、使用 C++ 编写的类加载器<br> 启动类加载器的作用：默认加载 Java 「安装目录/jre/lib」 下的文件，比如 rt.jar（包含 java.lang 中的常用类），tools.jar，resource.jar 等</p><p>通过启动类加载器加载用户 jar 包：</p><ul><li>使用参数进行扩展：<br> 使用 <code>-Xbootclasspath/xxx:jar包目录/jar包名</code> 进行扩展</li></ul><h4 id="java-实现" tabindex="-1"><a class="header-anchor" href="#java-实现" aria-hidden="true">#</a> Java 实现</h4><ul><li><p>扩展类加载器 Extension<br> 什么是扩展类加载器、应用程序类加载器：扩展类加载器和应用程序类加载器都是 JDK 中提供的、使用 Java 编写的类加载器<br> 它们的源码位于 sun.misc.Launcher 中，是一个静态内部类，继承自 URLClassLoader<br> 继承 URLClassLoader 的作用：具备通过目录或指定 jar 包将字节码文件加载到内存中</p></li><li><p>扩展类加载器 Extension<br> 加载 Java 安装目录 /jre/lib/ext 下的文件<br> 通过扩展类加载器加载用户 jar 包：使用 <code>-Djava.ext.dirs=jar包目录</code> 扩展，这种方式会覆盖掉原始目录，可使用 <code>;</code> (windows) <code>:</code> (macos/linux) 追加原始目录</p></li><li><p>应用程序类加载器<br> 加载 classpath 下的类文件</p></li></ul><h3 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制" aria-hidden="true">#</a> 双亲委派机制</h3><p>由于 Java 虚拟机有多个类加载器，双亲委派机制的核心就是解决一个类到底由谁加载的问题</p><p>双亲委派机制的作用：</p><ul><li>保证类加载的安全性（避免恶意代码薙魂 JDK 中的核心类库）</li><li>避免重复加载（避免一个类被加载多次）</li></ul><p>类加载器的双亲委派机制：当一个类加载器接受到加载类的任务时，会自底向上查找是否加载过，再由顶向下进行加载</p>',36),u=r('<h3 id="自定义类加载器" tabindex="-1"><a class="header-anchor" href="#自定义类加载器" aria-hidden="true">#</a> 自定义类加载器</h3><p>自定义类加载器的父加载器是应用程序类加载器 Application</p><h3 id="jdk9-及以后的类加载器" tabindex="-1"><a class="header-anchor" href="#jdk9-及以后的类加载器" aria-hidden="true">#</a> JDK9 及以后的类加载器</h3><p>JDK 引入了 module 的概念，类加载器在设计上发生了好多变化</p><ol><li>启动类加载器使用 Java 编写，位于 jdk.internal.loader.ClassLoaders 类中<br> Java 中的 BootClassLoader 继承自 BuiltinClassLoader 实现从模块中找到要加载的字节码资源文件<br> 启动类加载器依然无法获得通过 java 代码获取到，返回的仍然是 null，保持了统一</li><li>扩展类加载器被替换成了平台类加载器（Platform Class Loader）<br> 平台类加载器遵循模块化方法加载字节码文件，所以继承关系从 URLClassLoader 变成了 BuiltinClassLoader，BuiltinClassLoader 实现了从模块中加载字节码文件。平台类加载器的存在更过的是为了与老版本的设计方案兼容，自身没有特殊的逻辑</li></ol><h2 id="运行时数据区-jvm-管理的内存" tabindex="-1"><a class="header-anchor" href="#运行时数据区-jvm-管理的内存" aria-hidden="true">#</a> 运行时数据区（Jvm 管理的内存）</h2><p>Java 虚拟机在运行 java 程序过程中管理的内存其余，称为运行时数据区</p><p>分类：</p><ul><li>程序计数器（线程不共享）</li><li>Java 虚拟机栈（线程不共享）</li><li>本地方法栈（线程不共享）</li><li>方法区（线程共享）</li><li>堆（线程共享）</li></ul><h3 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器" aria-hidden="true">#</a> 程序计数器</h3><p>程序计数器（Program Counter Register）也叫 PC 寄存器，每个线程会通过程序计数器记录当前要执行的字节码指令的地址</p><h3 id="java-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#java-虚拟机栈" aria-hidden="true">#</a> Java 虚拟机栈</h3><p>Java 虚拟机栈采用栈的数据结构管理「方法调用」中的基本数据（方法以先进后出的形式）每一个方法的调用使用一个「栈帧」（Stack Frame）来保存</p><p>栈帧的组成：局部变量表、操作数栈、帧数据</p><ul><li>局部变量表的作用是方法执行过程中存放所有的局部变量</li><li>操作数栈是栈帧中虚拟机啊在执行指令过程中用来存放临时数据的一块区域</li><li>帧数据主要包含动态链接、方法出口、异常表的引用</li></ul>',15);function v(b,J){const i=s("Mermaid");return n(),t("div",null,[h,c,e(i,{id:"mermaid-6",code:"eJzT1dXlKsksyUm1UvBKLEtUeL6i++mu/ie7+57tmvBk9+LnCxqfdmx4sX/Ci4U9z2e1vNjfDlTABdKUlpNfnpyRWFSi4BPEpQAEmSnRSnpZIDOeTWt/snubUqyCrq6CEkgkWeH5nmkv1k9UAorYKTgB1SXnJBYXwxWC1L1Yvvhle9fTmSvUvDxD3u/peLJ3//MpKxTABkLsf7+nE2KAc7TSszm7gEqf9q9/PqENqBPoNIhjlWK5AAtbZqI="}),p,e(i,{id:"mermaid-359",code:"eJxLy8kvT85ILCpRCHHhUgACx2ilpxPWP+1a8Xzj7qddC17s3ftszq6nHdsUnPLzS4pLihILlGIVdHUVnndsg6t4OnMFUEhXwSla6Vnnyqcbp6LIuFaUpOYVZ+bn4dboDLR015TnU1Y8X9H9dFc/XF7BsaAgJzM5sQSsmwsA87BZ7Q=="}),u])}const f=d(o,[["render",v],["__file","JVM.html.vue"]]);export{f as default};
