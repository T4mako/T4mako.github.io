import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as h,c as s,b as a,d as t,e as i,f as r}from"./app-d0cea3eb.js";const g={},o=r('<h2 id="_0、常用命令速览" tabindex="-1"><a class="header-anchor" href="#_0、常用命令速览" aria-hidden="true">#</a> 0、常用命令速览：</h2><h3 id="_1git工作机制" tabindex="-1"><a class="header-anchor" href="#_1git工作机制" aria-hidden="true">#</a> ①git工作机制：</h3><p><strong>工作区（写代码）<code>git add</code> → 暂存区（临时存储）<code>git commit</code> → 本地库（会生成对应的历史版本）<code>push</code>→ 远程库</strong></p><h3 id="_2在本地使用的git命令" tabindex="-1"><a class="header-anchor" href="#_2在本地使用的git命令" aria-hidden="true">#</a> ②在本地使用的git命令：</h3>',4),l=a("thead",null,[a("tr",null,[a("th",null,"命令"),a("th",null,"解释")])],-1),p=a("tr",null,[a("td",null,"git add 文件名(*)"),a("td",null,"添加到暂存区")],-1),c=a("tr",null,[a("td",null,'git commit -m "日志信息" 文件名(*)'),a("td",null,"提交到本地库")],-1),m=a("tr",null,[a("td",null,"git reflog"),a("td",null,"查看历史记录")],-1),u=a("tr",null,[a("td",null,"git reset --hard 版本号"),a("td",null,"版本穿梭")],-1),b=a("tr",null,[a("td",null,"git log"),a("td",null,"查看版本详细信息")],-1),_=a("tr",null,[a("td",null,"git config --list"),a("td",null,"查看配置信息")],-1),f={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},x=a("td",null,"用户名",-1),v=a("tr",null,[a("td",null,"git config --global user.email"),a("td",null,"邮箱")],-1),k=r('<h3 id="_3远程仓库操作" tabindex="-1"><a class="header-anchor" href="#_3远程仓库操作" aria-hidden="true">#</a> ③远程仓库操作</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>git remote</td><td>查看远程仓库</td></tr><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>关联/添加远程仓库（用于push,pull），添加一个新的远程git仓库，同时可以起别名</td></tr><tr><td>git remote remove 别名</td><td>取消关联远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr></tbody></table><h3 id="_4分支操作" tabindex="-1"><a class="header-anchor" href="#_4分支操作" aria-hidden="true">#</a> ④分支操作</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch</td><td>查看分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h3 id="_5标签操作" tabindex="-1"><a class="header-anchor" href="#_5标签操作" aria-hidden="true">#</a> ⑤标签操作</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>git tag</td><td>列出已有标签</td></tr><tr><td>git tag 标签名</td><td>创建标签</td></tr><tr><td>git push 远程仓库别名 标签名</td><td>将标签推送至远程仓库</td></tr><tr><td>git checkout -b 新分支名 标签名</td><td>检出标签（将当前标签的状态下载下来）</td></tr></tbody></table><h2 id="_1、git-概述" tabindex="-1"><a class="header-anchor" href="#_1、git-概述" aria-hidden="true">#</a> 1、Git 概述</h2><p>Git 是一个免费的、开源的<strong>分布式版本控制系统</strong>，可以快速高效地处理从小型到大型的各种项目</p><p>Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库(在磁盘上)，方便的暂存区域和多个工作分支等特性。 其性能优于 Subversion、 CVS、 Perforce 和 ClearCase 等版本控制工具。</p><h3 id="_1-1-何为版本控制" tabindex="-1"><a class="header-anchor" href="#_1-1-何为版本控制" aria-hidden="true">#</a> 1.1 何为版本控制</h3><p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。<br> 版本控制其实最重要的是可以<strong>记录文件修改历史记录</strong>，从而让<strong>用户能够查看历史版本，方便版本切换</strong>。</p><p>为什么需要版本控制：协作开发</p><h3 id="_1-2-版本控制工具" tabindex="-1"><a class="header-anchor" href="#_1-2-版本控制工具" aria-hidden="true">#</a> 1.2 版本控制工具</h3><h4 id="_1集中式版本控制工具" tabindex="-1"><a class="header-anchor" href="#_1集中式版本控制工具" aria-hidden="true">#</a> ①集中式版本控制工具</h4><p>CVS、 SVN(Subversion)、 VSS……<br> 集中化的版本控制系统诸如 CVS、 SVN 等，都有一个<strong>单一的集中管理的服务器</strong>，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。<br> 这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而<strong>管理员也可以轻松掌控每个开发者的权限</strong>，并且管理一个集中化的版本控制系统， 要远<strong>比在各个客户端上维护本地数据库来得轻松容易</strong>。<br> 这么做显而易见的缺点是<strong>中央服务器的单点故障</strong>。如果服务器宕机一小时，那么在这一小时内，<strong>谁都无法提交更新，也就无法协同工作</strong> 。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208144134.png" alt="" loading="lazy"></p><h4 id="_2分布式版本控制工具" tabindex="-1"><a class="header-anchor" href="#_2分布式版本控制工具" aria-hidden="true">#</a> ②分布式版本控制工具</h4><p>Git、 Mercurial、 Bazaar、 Darcs……<br> 像 Git 这种分布式版本控制工具，<strong>客户端</strong>提取的不是最新版本的文件快照，而是<strong>把代码仓库完整地镜像下来（本地库）</strong>。这样任何一处协同工作用的文件发生故障，事后都可以用<strong>其他客户端的本地仓库进行恢复</strong>。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。<br> 分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:<br><strong>服务器断网的情况下也可以进行开发</strong>（因为版本控制是在本地进行的）<br><strong>每个客户端保存的也都是整个完整的项目</strong>（包含历史记录， 更加安全）</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230207181938977.png" alt="image-20230207181938977" loading="lazy"></p><h3 id="_1-3-git-简史" tabindex="-1"><a class="header-anchor" href="#_1-3-git-简史" aria-hidden="true">#</a> 1.3 Git 简史</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230207183809424.png" alt="" loading="lazy"></p><h3 id="_1-4-git-工作机制" tabindex="-1"><a class="header-anchor" href="#_1-4-git-工作机制" aria-hidden="true">#</a> 1.4 Git 工作机制</h3><p><mark><strong>工作区（写代码）<code>git add</code> → 暂存区（临时存储）<code>git commit</code> → 本地库（会生成对应的历史版本）<code>push</code>→ 远程库</strong></mark></p><h3 id="_1-5-git-和代码托管中心" tabindex="-1"><a class="header-anchor" href="#_1-5-git-和代码托管中心" aria-hidden="true">#</a> 1.5 Git 和代码托管中心</h3><p><strong>代码托管中心</strong>是基于网络服务器的<strong>远程代码仓库</strong>，一般我们简单称为<strong>远程库</strong></p><p>局域网：GitLab<br> 互联网：GitHub（外网）、Gitee 码云（国内网站）</p><h2 id="_2、git-安装" tabindex="-1"><a class="header-anchor" href="#_2、git-安装" aria-hidden="true">#</a> 2、Git 安装</h2><p>修改安装路径和是否修改环境变量，其他保持默认</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230207185923544.png" alt="" loading="lazy"></p><h2 id="_3、git本地命令" tabindex="-1"><a class="header-anchor" href="#_3、git本地命令" aria-hidden="true">#</a> 3、Git本地命令</h2><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208131542077.png" alt="" loading="lazy"></p><p><strong>快捷键：</strong><br><strong>ctrl+l：清屏</strong><br><strong>ctrl+insert 复制</strong><br><strong>shift+insert 粘贴</strong><br><strong>选中+鼠标中键：复制</strong></p><p><strong>重要概念：<br> commit：提交，将本地文件和版本信息保存到本地仓库<br> push：推送，将本地仓库文件和版本信息上传到远程仓库<br> pull：拉取，将远程仓库文件和版本信息下载到本地仓库<br> clone：从远程服务器克隆整个版本到本地（下载）</strong></p><h3 id="_3-1-设置用户签名" tabindex="-1"><a class="header-anchor" href="#_3-1-设置用户签名" aria-hidden="true">#</a> 3.1 设置用户签名</h3>',34),y=a("br",null,null,-1),I={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},w=a("br",null,null,-1),T=a("br",null,null,-1),z=r(`<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208135606324.png" alt="" loading="lazy"></p><p>签名的作用是区分不同操作者身份。<strong>用户的签名信息在每一个版本的提交信息中能够看到</strong>，以此确认本次提交是谁做的。 Git 首次安装<strong>必须设置一下用户签名</strong>，否则无法提交代码。<br> 注意： 这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。</p><h3 id="_3-2-初始化本地库" tabindex="-1"><a class="header-anchor" href="#_3-2-初始化本地库" aria-hidden="true">#</a> 3.2 初始化本地库</h3><p>未跟踪：没有git add<br> 已跟踪：已git add</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230314202301.png" alt="" loading="lazy"></p><p>基本语法：git init</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208140317884.png" alt="image-20230208140317884" loading="lazy"></p><h3 id="_3-3-查看本地库状态" tabindex="-1"><a class="header-anchor" href="#_3-3-查看本地库状态" aria-hidden="true">#</a> 3.3 查看本地库状态</h3><p>基本语法：git status</p><h3 id="_3-4-添加暂存区" tabindex="-1"><a class="header-anchor" href="#_3-4-添加暂存区" aria-hidden="true">#</a> 3.4 添加暂存区</h3><h4 id="_3-4-1-将工作区的文件添加到暂存区" tabindex="-1"><a class="header-anchor" href="#_3-4-1-将工作区的文件添加到暂存区" aria-hidden="true">#</a> 3.4.1 将工作区的文件添加到暂存区</h4><p>基本语法：git add 文件名</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208141427049.png" alt="" loading="lazy"></p><h3 id="_3-5-提交本地库" tabindex="-1"><a class="header-anchor" href="#_3-5-提交本地库" aria-hidden="true">#</a> 3.5 提交本地库</h3><p>基本语法：git commit -m &quot;日志信息&quot; 文件名</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208141853101.png" alt="" loading="lazy"></p><h3 id="_3-6-历史版本" tabindex="-1"><a class="header-anchor" href="#_3-6-历史版本" aria-hidden="true">#</a> 3.6 历史版本</h3><h4 id="_3-6-1-查看历史版本" tabindex="-1"><a class="header-anchor" href="#_3-6-1-查看历史版本" aria-hidden="true">#</a> 3.6.1 查看历史版本</h4><p>基本语法：<br> git reflog 查看版本信息<br> git log 查看版本详细信息</p><h4 id="_3-6-2-版本穿梭" tabindex="-1"><a class="header-anchor" href="#_3-6-2-版本穿梭" aria-hidden="true">#</a> 3.6.2 版本穿梭</h4><p>基本语法：git reset --hard 版本号</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208143353.png" alt="" loading="lazy"></p><p>Git 切换版本， 底层其实是移动的 HEAD 指针，具体原理如下图所示：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208144344.png" alt="" loading="lazy"></p><h2 id="_4、git-分支操作" tabindex="-1"><a class="header-anchor" href="#_4、git-分支操作" aria-hidden="true">#</a> 4、Git 分支操作</h2><h3 id="_4-1-什么是分支" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是分支" aria-hidden="true">#</a> 4.1 什么是分支</h3><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作<em><strong>从开发主线上分离开来</strong>， <strong>发自己分支的时候，不会影响主线分支的运行</strong>。对于初学者而言，<strong>分支可以简单理解为副本</strong>，一个分支就是一个单独的副本。（分支底层其实也是</em><em>指针的引用</em>*）</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208144807.png" alt="" loading="lazy"></p><h3 id="_4-2-分支的好处" tabindex="-1"><a class="header-anchor" href="#_4-2-分支的好处" aria-hidden="true">#</a> 4.2 分支的好处</h3><p>同时<strong>并行推进多个功能开发</strong>，提高开发效率。<br> 各个分支在开发过程中，如果某一个分支开发失败，<strong>不会对其他分支有任何影响</strong>。失败的分支删除重新开始即可。</p><h3 id="_4-3-分支的操作" tabindex="-1"><a class="header-anchor" href="#_4-3-分支的操作" aria-hidden="true">#</a> 4.3 分支的操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h4 id="_4-3-1-查看分支" tabindex="-1"><a class="header-anchor" href="#_4-3-1-查看分支" aria-hidden="true">#</a> 4.3.1 查看分支</h4><p>基本语法：git branch -v</p><h4 id="_4-3-2-创建分支" tabindex="-1"><a class="header-anchor" href="#_4-3-2-创建分支" aria-hidden="true">#</a> 4.3.2 创建分支</h4><p>基本语法：git branch 分支名</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208150636020.png" alt="" loading="lazy"></p><h4 id="_4-3-3-修改分支" tabindex="-1"><a class="header-anchor" href="#_4-3-3-修改分支" aria-hidden="true">#</a> 4.3.3 修改分支</h4><p>先切换到分支</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208151114.png" alt="" loading="lazy"></p><h4 id="_4-3-4-切换分支" tabindex="-1"><a class="header-anchor" href="#_4-3-4-切换分支" aria-hidden="true">#</a> 4.3.4 切换分支</h4><p>基本语法：git checkout 分支名</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208150846.png" alt="" loading="lazy"></p><h4 id="_4-3-5-合并分支" tabindex="-1"><a class="header-anchor" href="#_4-3-5-合并分支" aria-hidden="true">#</a> 4.3.5 合并分支</h4><p>基本语法：git merge 分支名</p><p><strong>合并到master主分支</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208151426.png" alt="" loading="lazy"></p><h4 id="_4-3-6-产生冲突" tabindex="-1"><a class="header-anchor" href="#_4-3-6-产生冲突" aria-hidden="true">#</a> 4.3.6 产生冲突</h4><p>冲突产生的表现： 后面状态为 **MERGING **</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>Layne@LAPTOP-Layne MINGW64 /d/Git-Space/SH0720 (master|MERGING)  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>冲突产生的原因：<br> 合并分支时，两个分支在<strong>同一个文件的同一个位置有两套完全不同的修改</strong>。 Git 无法替我们决定使用哪一个。必须人为决定新代码内容。</p><p>查看状态（检测到有文件有两处修改）</p><h4 id="_4-3-7-解决冲突" tabindex="-1"><a class="header-anchor" href="#_4-3-7-解决冲突" aria-hidden="true">#</a> 4.3.7 解决冲突</h4><p><strong>编辑有冲突的文件，删除特殊符号</strong>，决定要使用的内容</p><p>​ 特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br> ​ 当前分支的代码：=======<br> ​ 合并过来的代码：&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</p><p>**添加到暂存区 **</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208152657.png" alt="" loading="lazy"></p><p><strong>执行提交（注意： 此时使用 git commit 命令时</strong><mark>不能带文件名</mark><strong>）</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208152726.png" alt="" loading="lazy"></p><p>注：<strong>合并分支只会修改被合并的那个分支</strong></p><h3 id="_4-4-创建分支和切换分支图解" tabindex="-1"><a class="header-anchor" href="#_4-4-创建分支和切换分支图解" aria-hidden="true">#</a> 4.4 创建分支和切换分支图解</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208152913324.png" alt="" loading="lazy"></p><p>master、 hot-fix 其实都是指向具体版本记录的指针。<strong>当前所在的分支</strong>，其实是由 <strong>HEAD决定的</strong>。所以创建分支的本质就是多创建一个指针。<br> HEAD 如果指向 master，那么我们现在就在 master 分支上。<br> HEAD 如果执行 hotfix，那么我们现在就在 hotfix 分支上。<br> 所以切换分支的本质就是移动 HEAD 指针</p><h2 id="_5、git-团队协作机制" tabindex="-1"><a class="header-anchor" href="#_5、git-团队协作机制" aria-hidden="true">#</a> 5、Git 团队协作机制</h2><h3 id="_5-1-团队内协作" tabindex="-1"><a class="header-anchor" href="#_5-1-团队内协作" aria-hidden="true">#</a> 5.1 团队内协作</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208153723251.png" alt="" loading="lazy"></p><h3 id="_5-2-跨团队协作" tabindex="-1"><a class="header-anchor" href="#_5-2-跨团队协作" aria-hidden="true">#</a> 5.2 跨团队协作</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208153915.png" alt="" loading="lazy"></p><h2 id="_6、github-git远程命令" tabindex="-1"><a class="header-anchor" href="#_6、github-git远程命令" aria-hidden="true">#</a> 6、GitHub/git远程命令</h2><h3 id="_6-1-创建远程仓库" tabindex="-1"><a class="header-anchor" href="#_6-1-创建远程仓库" aria-hidden="true">#</a> 6.1 创建远程仓库</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208160941.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208161047.png" alt="" loading="lazy"></p><h3 id="_6-2-远程仓库操作" tabindex="-1"><a class="header-anchor" href="#_6-2-远程仓库操作" aria-hidden="true">#</a> 6.2 远程仓库操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td></tr></tbody></table><p><strong>git clone与git pull的区别：</strong><br> git clone是在<strong>没有版本</strong>库的时候，从远程服务器克隆整个版本到本地（下载），是一个本地从无到有的过程<br> git pull是在本地<strong>有版本库</strong>的情况下，从远程库获取最新commit数据并且merge到本地</p><p>注意：如果当前本地仓库不是远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉去文件时会宝座（fastal：refusing to merge histories）<code>本地有远程库没有的文件</code><br> |解决方法：在git pull命令后加入参数--allow-unterlate-histories</p><p>适用场景：<br> 通常情况下，远程操作的第一步是先使用git clone从远程主机克隆一个到本地<br> 本地修改代码后，<strong>每次从本地仓库push到远程仓库前都要先进行git pull操作，保证push到远程仓库时没有版本冲突</strong></p><h4 id="_6-2-1-创建远程仓库别名" tabindex="-1"><a class="header-anchor" href="#_6-2-1-创建远程仓库别名" aria-hidden="true">#</a> 6.2.1 创建远程仓库别名</h4><p>基本语法：<br> git remote -v 查看当前所有远程地址别名<br> git remote add 别名 远程地址</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208163110.png" alt="" loading="lazy"></p><h4 id="_6-2-2-推送本地分支到远程仓库" tabindex="-1"><a class="header-anchor" href="#_6-2-2-推送本地分支到远程仓库" aria-hidden="true">#</a> 6.2.2 推送本地分支到远程仓库</h4><p>基本语法：git push 别名 分支</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208170934154.png" alt="image-20230208170934154" loading="lazy"></p><p><em><strong>注意使用token登录</strong></em></p><h4 id="_6-2-3-拉取远程库内容" tabindex="-1"><a class="header-anchor" href="#_6-2-3-拉取远程库内容" aria-hidden="true">#</a> 6.2.3 拉取远程库内容</h4><p>基本语法：git pull 远程库地址别名 远程分支名</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208174717409.png" alt="image-20230208174717409" loading="lazy"></p><h4 id="_6-2-4-克隆远程仓库到本地" tabindex="-1"><a class="header-anchor" href="#_6-2-4-克隆远程仓库到本地" aria-hidden="true">#</a> 6.2.4 克隆远程仓库到本地</h4><p>基本语法：git clone 远程地址</p>`,89),B={href:"https://github.com/atguiguyueyue/git-shTest.git",target:"_blank",rel:"noopener noreferrer"},G=r(`<p><strong>克隆代码不需要登录账号</strong></p><p>clone 会做如下操作：<br> 1、拉取代码。 2、初始化本地仓库。 3、创建别名</p><h4 id="_6-2-5-邀请加入团队" tabindex="-1"><a class="header-anchor" href="#_6-2-5-邀请加入团队" aria-hidden="true">#</a> 6.2.5 邀请加入团队</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208180634.png" alt="" loading="lazy"></p><p>生成邀请函，发给别人<br> 然后同意邀请</p><h3 id="_6-3-跨团队协作" tabindex="-1"><a class="header-anchor" href="#_6-3-跨团队协作" aria-hidden="true">#</a> 6.3 跨团队协作</h3><p>找到他人的项目，点击folk</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181210.png" alt="" loading="lazy"></p><p>编辑完后提交。</p><p>可以创建一个新的请求：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181337.png" alt="" loading="lazy"></p><p>还可以聊天</p><p>如果代码没有问题，可以点击 Merge pull request 合并代码。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181551.png" alt="" loading="lazy"></p><h3 id="_6-4-ssh-免密登录" tabindex="-1"><a class="header-anchor" href="#_6-4-ssh-免密登录" aria-hidden="true">#</a> 6.4 SSH 免密登录</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181656.png" alt="" loading="lazy"></p><p>生成ssh文件（用户文件夹下）</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181925.png" alt="" loading="lazy"></p><p>复制公钥</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208182104368.png" alt="image-20230208182104368" loading="lazy"></p><p>添加ssh</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208182303.png" alt="" loading="lazy"></p><p><em><strong>可以通过ssh来pull，push 不用多次输入密码</strong></em></p><h2 id="_7、idea-集成-git" tabindex="-1"><a class="header-anchor" href="#_7、idea-集成-git" aria-hidden="true">#</a> 7、IDEA 集成 Git</h2><h3 id="_7-1-配置-git-忽略文件" tabindex="-1"><a class="header-anchor" href="#_7-1-配置-git-忽略文件" aria-hidden="true">#</a> 7.1 配置 Git 忽略文件</h3><p>eclipse，Idea都有一定的无关配置文件（.iml，target文件）</p><p>为什么要忽略他们：<br> 与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之间的差异。</p><p>怎么忽略：<br> 1） 创建忽略规则文件 xxxx.ignore（前缀名随便起，<strong>建议是 git.ignore</strong>）<br> 这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用户家目录下</p><p>git.ignore文件模板内容如下：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>## Compiled class file
*.class

## Log file
*.log

## BlueJ files
*.ctxt

## Mobile Tools for Java (J2ME)
.mtj.tmp/

## Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

## virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

.classpath
.project
.settings
target
.idea
*.iml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2） 在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>[user]
	name = Layne
	email = Layne@atguigu.com
[core]
	excludesfile = C:/Users/asus/git.ignore
注意：这里要使用“正斜线（/）”，不要使用“反斜线（\\）”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-定位-git-程序" tabindex="-1"><a class="header-anchor" href="#_7-2-定位-git-程序" aria-hidden="true">#</a> 7.2 定位 Git 程序</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209141311.png" alt="" loading="lazy"></p><h3 id="_7-3-初始化本地库" tabindex="-1"><a class="header-anchor" href="#_7-3-初始化本地库" aria-hidden="true">#</a> 7.3 初始化本地库</h3><p>在窗体栏选择==<strong>VCS</strong>==(版本控制)：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209141528.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209141619.png" alt="" loading="lazy"></p><h3 id="_7-4-添加到暂存区、提交到本地库" tabindex="-1"><a class="header-anchor" href="#_7-4-添加到暂存区、提交到本地库" aria-hidden="true">#</a> 7.4 添加到暂存区、提交到本地库</h3><p>右键点击项目选择 Git -&gt; Add 将项目添加到暂存区。<br> 右键点击项目选择 Git -&gt; Commit Directory 将项目添加到暂存区。</p><h3 id="_7-5-切换版本" tabindex="-1"><a class="header-anchor" href="#_7-5-切换版本" aria-hidden="true">#</a> 7.5 切换版本</h3><p>在 IDEA 的左下角，点击Git，然后点击 Log 查看版本</p><p>右键选择要切换的版本，然后在菜单里点击 Checkout Revision。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209143755.png" alt="" loading="lazy"></p><h3 id="_7-6-创建分支" tabindex="-1"><a class="header-anchor" href="#_7-6-创建分支" aria-hidden="true">#</a> 7.6 创建分支</h3><p>创建方式：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144140.png" alt="" loading="lazy"></p><p>或：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144201.png" alt="" loading="lazy"></p><h3 id="_7-7-切换分支" tabindex="-1"><a class="header-anchor" href="#_7-7-切换分支" aria-hidden="true">#</a> 7.7 切换分支</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144309.png" alt="" loading="lazy"></p><h3 id="_7-8-合并分支" tabindex="-1"><a class="header-anchor" href="#_7-8-合并分支" aria-hidden="true">#</a> 7.8 合并分支</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144646.png" alt="" loading="lazy"></p><h3 id="_7-9-解决冲突" tabindex="-1"><a class="header-anchor" href="#_7-9-解决冲突" aria-hidden="true">#</a> 7.9 解决冲突</h3><p>手动合并代码：<br> 点击 Conflicts 框里的 Merge 按钮，进行手动合并代码<br> 手动合并完代码以后，点击右下角的 Apply 按钮<br> 代码冲突解决，自动提交本地库。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144949.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209145042.png" alt="" loading="lazy"></p><h2 id="_8、idea-集成-github" tabindex="-1"><a class="header-anchor" href="#_8、idea-集成-github" aria-hidden="true">#</a> 8、IDEA 集成 GitHub</h2><h3 id="_8-1-设置-github-账号" tabindex="-1"><a class="header-anchor" href="#_8-1-设置-github-账号" aria-hidden="true">#</a> 8.1 设置 GitHub 账号</h3><p>密码或token登录</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209145418.png" alt="" loading="lazy"></p><h3 id="_8-2-分享工程到-github" tabindex="-1"><a class="header-anchor" href="#_8-2-分享工程到-github" aria-hidden="true">#</a> 8.2 分享工程到 GitHub</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209145819.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209150159.png" alt="" loading="lazy"></p><h3 id="_8-3-push-推送本地库到远程库" tabindex="-1"><a class="header-anchor" href="#_8-3-push-推送本地库到远程库" aria-hidden="true">#</a> 8.3 push 推送本地库到远程库</h3><p>右键点击项目，可以将当前分支的内容 push 到 GitHub 的远程仓库中</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209150425.png" alt="" loading="lazy"></p><p>或者</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209150455.png" alt="" loading="lazy"></p><p>默认使用https来push<br> 也可以用ssh push：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209150649.png" alt="" loading="lazy"></p><p>注意： push 是将本地库代码推送到远程库，如果<strong>本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的</strong>。也就是说， 要想 push 成功，一定要<strong>保证本地库的版本要比远程库的版本高</strong>！ 因此一个成熟的程序员在动手改本地代码之前，一定会<strong>先检查下远程库跟本地代码的区别</strong>！如果本地的<strong>代码版本</strong>已经<strong>落后</strong>，切记要<strong>先 pull 拉取一下远程库的代码</strong>，将本地代码更新到最新以后，然后再修改，提交，推送！</p><h3 id="_8-4-pull-拉取远程库到本地库" tabindex="-1"><a class="header-anchor" href="#_8-4-pull-拉取远程库到本地库" aria-hidden="true">#</a> 8.4 pull 拉取远程库到本地库</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209151108.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209151236.png" alt="" loading="lazy"></p><p>注意： pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手动解决冲突的问题。</p><h3 id="_8-5-clone-克隆远程库到本地" tabindex="-1"><a class="header-anchor" href="#_8-5-clone-克隆远程库到本地" aria-hidden="true">#</a> 8.5 clone 克隆远程库到本地</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230314213440.png" alt="" loading="lazy"></p><p>或者<br><strong>在idea初始化界面点击Get from VCSl通过url克隆代码</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230209152200957.png" alt="image-20230209152200957" loading="lazy"></p><p>设置打开idea为初始化界面：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209152424.png" alt="" loading="lazy"></p><h2 id="_9、码云" tabindex="-1"><a class="header-anchor" href="#_9、码云" aria-hidden="true">#</a> 9、码云</h2><h3 id="_9-1-码云创建远程库" tabindex="-1"><a class="header-anchor" href="#_9-1-码云创建远程库" aria-hidden="true">#</a> 9.1 码云创建远程库</h3><p>点击首页右上角的加号，选择下面的新建仓库<br> 填写仓库名称，路径和选择是否开源（共开库或私有库）<br> 最后根据需求选择分支模型，然后点击创建按钮。<br> 远程库创建好以后，就可以看到 HTTPS 和 SSH 的链接。</p><h3 id="_9-2-idea-集成码云" tabindex="-1"><a class="header-anchor" href="#_9-2-idea-集成码云" aria-hidden="true">#</a> 9.2 IDEA 集成码云</h3><p>Idea 默认不带码云插件，我们第一步要安装 Gitee 插件</p><p>添加码云账号：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209202215.png" alt="" loading="lazy"></p><p>分享项目到码云上：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209202655.png" alt="" loading="lazy"></p><p>push、pull与github操作差不多（注意ssh或https链接地址</p><h3 id="_9-3-码云复制-github-项目" tabindex="-1"><a class="header-anchor" href="#_9-3-码云复制-github-项目" aria-hidden="true">#</a> 9.3 码云复制 GitHub 项目</h3><p>新建仓库时导入</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209203418.png" alt="" loading="lazy"></p><h2 id="_10、自建代码托管平台-gitlab" tabindex="-1"><a class="header-anchor" href="#_10、自建代码托管平台-gitlab" aria-hidden="true">#</a> 10、自建代码托管平台-GitLab</h2><h3 id="_10-1-gitlab-简介" tabindex="-1"><a class="header-anchor" href="#_10-1-gitlab-简介" aria-hidden="true">#</a> 10.1 GitLab 简介</h3><p>​ GitLab 是由 GitLabInc.开发，使用 MIT 许可证的基于网络的 Git 仓库管理工具，且具有wiki 和 issue 跟踪功能。使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务。<br> ​ GitLab 由乌克兰程序员 DmitriyZaporozhets 和 ValerySizov 开发，它使用 Ruby 语言写成。后来，一些部分用 Go 语言重写。截止 2018 年 5 月，该公司约有 290 名团队成员，以及 2000 多名开源贡献者。 GitLab 被 IBM， Sony， JülichResearchCenter， NASA， Alibaba，<br> Invincea， O’ReillyMedia， Leibniz-Rechenzentrum(LRZ)， CERN， SpaceX 等组织使用。</p><h3 id="_10-2-gitlab-官网地址" tabindex="-1"><a class="header-anchor" href="#_10-2-gitlab-官网地址" aria-hidden="true">#</a> 10.2 GitLab 官网地址</h3>`,99),L={href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"},S=a("br",null,null,-1),E={href:"https://about.gitlab.com/installation/",target:"_blank",rel:"noopener noreferrer"},C=r('<h3 id="_10-3-gitlab-安装" tabindex="-1"><a class="header-anchor" href="#_10-3-gitlab-安装" aria-hidden="true">#</a> 10.3 GitLab 安装</h3><h4 id="_10-3-1-服务器准备" tabindex="-1"><a class="header-anchor" href="#_10-3-1-服务器准备" aria-hidden="true">#</a> 10.3.1 服务器准备</h4><p>准备一个系统为 CentOS7 以上版本的服务器， 要求内存 4G，磁盘 50G。<br> 关闭防火墙， 并且配置好主机名和 IP，保证服务器可以上网。<br> 此教程使用虚拟机：主机名： gitlab-server<br> IP 地址： 192.168.6.200</p><h4 id="_10-3-2-安装包准备" tabindex="-1"><a class="header-anchor" href="#_10-3-2-安装包准备" aria-hidden="true">#</a> 10.3.2 安装包准备</h4><p>​ Yum 在线安装 gitlab- ce 时，需要下载几百 M 的安装文件，非常耗时，所以最好提前把所需 RPM 包下载到本地，然后使用离线 rpm 的方式安装。</p>',5),H=a("br",null,null,-1),A={href:"https://packages.gitlab.com/gitlab/gitlabce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm",target:"_blank",rel:"noopener noreferrer"},D=r('<h4 id="_10-3-3-编写安装脚本" tabindex="-1"><a class="header-anchor" href="#_10-3-3-编写安装脚本" aria-hidden="true">#</a> 10.3.3 编写安装脚本</h4><p>安装 gitlab 步骤比较繁琐，因此我们可以参考官网编写 gitlab 的安装脚本。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230209215654883.png" alt="image-20230209215654883" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209215709.png" alt="" loading="lazy"></p><p>给脚本增加执行权限</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209215726.png" alt="" loading="lazy"></p><p>然后执行该脚本，开始安装 gitlab-ce。注意一定要保证服务器可以上网</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209215747.png" alt="" loading="lazy"></p><h4 id="_10-3-4-初始化-gitlab-服务" tabindex="-1"><a class="header-anchor" href="#_10-3-4-初始化-gitlab-服务" aria-hidden="true">#</a> 10.3.4 初始化 GitLab 服务</h4><p>执行以下命令初始化 GitLab 服务，过程大概需要几分钟，耐心等待</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230209215813902.png" alt="image-20230209215813902" loading="lazy"></p><h4 id="_10-3-5-启动-gitlab-服务" tabindex="-1"><a class="header-anchor" href="#_10-3-5-启动-gitlab-服务" aria-hidden="true">#</a> 10.3.5 启动 GitLab 服务</h4><p>执行以下命令启动 GitLab 服务：gitlab-ctl start<br> 如需停止：执行 gitlab-ctl stop</p><h4 id="_10-3-6-使用浏览器访问-gitlab" tabindex="-1"><a class="header-anchor" href="#_10-3-6-使用浏览器访问-gitlab" aria-hidden="true">#</a> 10.3.6 使用浏览器访问 GitLab</h4><p>使用主机名或者 IP 地址即可访问 GitLab 服务。需要提前配一下 windows 的 hosts 文件。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209215915.png" alt="" loading="lazy"></p><p>首次登陆之前，需要修改下 GitLab 提供的 root 账户的密码，要求 8 位以上，包含大小写子母和特殊符号。因此我们修改密码<br> 然后使用修改后的密码登录 GitLab</p><h4 id="_10-3-7-gitlab-创建远程库" tabindex="-1"><a class="header-anchor" href="#_10-3-7-gitlab-创建远程库" aria-hidden="true">#</a> 10.3.7 GitLab 创建远程库</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220007.png" alt="" loading="lazy"></p><h4 id="_10-3-8-idea-集成-gitlab" tabindex="-1"><a class="header-anchor" href="#_10-3-8-idea-集成-gitlab" aria-hidden="true">#</a> 10.3.8 IDEA 集成 GitLab</h4><p>1） 安装 GitLab 插件</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220030.png" alt="" loading="lazy"></p><p>2）设置 GitLab 插件</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220053.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220108.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220123.png" alt="" loading="lazy"></p><p>3） push 本地代码到 GitLab 远程库</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220146.png" alt="" loading="lazy"></p><p>自定义远程连接</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220208.png" alt="" loading="lazy"></p>',30),M={href:"http://gitlab.example.com/root/git-test.git%EF%BC%8C",target:"_blank",rel:"noopener noreferrer"},V=a("br",null,null,-1),N={href:"http://gitlab-server/root/git-test.git",target:"_blank",rel:"noopener noreferrer"},R=a("br",null,null,-1),P=r('<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220238.png" alt="" loading="lazy"></p><p>只要 GitLab 的远程库连接定义好以后， 对 GitLab 远程库进行 pull 和 clone 的操作和 Github 和码云一致</p><h2 id="_11、git标签操作" tabindex="-1"><a class="header-anchor" href="#_11、git标签操作" aria-hidden="true">#</a> 11、Git标签操作</h2><p>Git中的标签是指<strong>某个分支某个特定时间点的状态</strong>（快照？），通过标签，可以很方便的切换到标记时的状态</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230314211432.png" alt="" loading="lazy"></p><p>git tag 列出已有标签<br> git tag 标签名 创建标签<br> git push 远程仓库别名 标签名 将标签推送至远程仓库<br> git checkout -b 新分支名 标签名 检出标签（将当前标签的状态下载下来）</p><p><strong>标签是一个静态的概念，标签打好了，就不会变了</strong><br><strong>分支可以修改，是动态的</strong></p>',7);function j(J,q){const e=d("ExternalLinkIcon");return h(),s("div",null,[o,a("table",null,[l,a("tbody",null,[p,c,m,u,b,_,a("tr",null,[a("td",null,[t("git config --global "),a("a",f,[t("user.name"),i(e)])]),x]),v])]),k,a("p",null,[t("基本语法："),y,t(" git config --global "),a("a",I,[t("user.name"),i(e)]),t(" 用户名"),w,t(" git config --global user.email 邮箱"),T,t(" git config --list 查看配置信息")]),z,a("p",null,[t("例如：git clone "),a("a",B,[t("https://github.com/atguiguyueyue/git-shTest.git"),i(e)])]),G,a("p",null,[t("官网地址： "),a("a",L,[t("https://about.gitlab.com/"),i(e)]),S,t(" 安装说明： "),a("a",E,[t("https://about.gitlab.com/installation/"),i(e)])]),C,a("p",null,[t("下载地址："),H,a("a",A,[t("https://packages.gitlab.com/gitlab/gitlabce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm"),i(e)])]),D,a("p",null,[t("注意： gitlab 网页上复制过来的连接是： "),a("a",M,[t("http://gitlab.example.com/root/git-test.git，"),i(e)]),V,t(" 需要手动修改为： "),a("a",N,[t("http://gitlab-server/root/git-test.git"),i(e)]),R,t(" 选择 gitlab 远程连接，进行 push。")]),P])}const W=n(g,[["render",j],["__file","Git.html.vue"]]);export{W as default};
