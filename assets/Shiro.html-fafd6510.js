const e=JSON.parse('{"key":"v-737a480c","path":"/code/java/Shiro.html","title":"","lang":"zh-CN","frontmatter":{"：title":"Shiro 基础","category":["java"],"description":"1、基本介绍 1.1、Shiro 架构： Subject：任何可以与应用交互的用户 SecurityManager ：是 Shiro 的核心 所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进 行认证、授权、会话及缓存的管理 Authenticator：负责 Subject 认证，可以自定义实现；可以使用认证策略（ Authentication Strategy），即什么情况下算用户认证通过了 Authorizer：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能 Realm：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的 Realm； SessionManager：管理 Session 生命周期的组件；而 Shiro 并不仅仅可以用在 Web环境，也可以用在如普通的 JavaSE 环境 CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能 Cryptography：密码模块， Shiro 提高了一些常见的加密组件用于如密码加密/解密。","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/java/Shiro.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:description","content":"1、基本介绍 1.1、Shiro 架构： Subject：任何可以与应用交互的用户 SecurityManager ：是 Shiro 的核心 所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进 行认证、授权、会话及缓存的管理 Authenticator：负责 Subject 认证，可以自定义实现；可以使用认证策略（ Authentication Strategy），即什么情况下算用户认证通过了 Authorizer：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能 Realm：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的 Realm； SessionManager：管理 Session 生命周期的组件；而 Shiro 并不仅仅可以用在 Web环境，也可以用在如普通的 JavaSE 环境 CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能 Cryptography：密码模块， Shiro 提高了一些常见的加密组件用于如密码加密/解密。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、基本介绍","slug":"_1、基本介绍","link":"#_1、基本介绍","children":[{"level":3,"title":"1.1、Shiro 架构：","slug":"_1-1、shiro-架构","link":"#_1-1、shiro-架构","children":[]},{"level":3,"title":"1.2、登录认证","slug":"_1-2、登录认证","link":"#_1-2、登录认证","children":[]},{"level":3,"title":"1.3、角色授权","slug":"_1-3、角色授权","link":"#_1-3、角色授权","children":[]}]},{"level":2,"title":"2、Shiro 与 SprintBoot 整合","slug":"_2、shiro-与-sprintboot-整合","link":"#_2、shiro-与-sprintboot-整合","children":[{"level":3,"title":"2.1、自定义 realm","slug":"_2-1、自定义-realm","link":"#_2-1、自定义-realm","children":[]},{"level":3,"title":"2.2、多个 realm","slug":"_2-2、多个-realm","link":"#_2-2、多个-realm","children":[]},{"level":3,"title":"2.3、remember me","slug":"_2-3、remember-me","link":"#_2-3、remember-me","children":[]},{"level":3,"title":"2.4、授权、角色认证","slug":"_2-4、授权、角色认证","link":"#_2-4、授权、角色认证","children":[]}]}],"readingTime":{"minutes":8.28,"words":2485},"filePathRelative":"code/java/Shiro.md","excerpt":"<h2> 1、基本介绍</h2>\\n<h3> 1.1、Shiro 架构：</h3>\\n<ul>\\n<li>\\n<p>Subject：任何可以与应用交互的用户</p>\\n</li>\\n<li>\\n<p>SecurityManager ：是 Shiro 的核心</p>\\n<p>所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进 行认证、授权、会话及缓存的管理</p>\\n</li>\\n<li>\\n<p>Authenticator：负责 Subject 认证，可以自定义实现；可以使用认证策略（ Authentication Strategy），即什么情况下算用户认证通过了</p>\\n</li>\\n<li>\\n<p>Authorizer：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能</p>\\n</li>\\n<li>\\n<p>Realm：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的 Realm；</p>\\n</li>\\n<li>\\n<p>SessionManager：管理 Session 生命周期的组件；而 Shiro 并不仅仅可以用在 Web环境，也可以用在如普通的 JavaSE 环境</p>\\n</li>\\n<li>\\n<p>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能</p>\\n</li>\\n<li>\\n<p>Cryptography：密码模块， Shiro 提高了一些常见的加密组件用于如密码加密/解密。</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
