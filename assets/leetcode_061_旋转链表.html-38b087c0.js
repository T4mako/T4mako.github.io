import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as c,c as l,e as a,b as n,d as e,f as i}from"./app-35c7ccc0.js";const r={},u=n("h1",{id:"_061-旋转链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_061-旋转链表","aria-hidden":"true"},"#"),e(" 061. 旋转链表")],-1),d={href:"https://leetcode.cn/problems/rotate-list/description/",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>解法思路：</p><ul><li>先通过一次遍历计算链表节点个数</li><li>将链表连成环</li><li>新链表的最后一个节点为原链表的 n - 1 - (k mode n) 个节点</li><li>将当前闭合为环的链表断开，即可得结果</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> iter <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            iter <span class="token operator">=</span> iter<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> add <span class="token operator">=</span> n <span class="token operator">-</span> k <span class="token operator">%</span> n<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>add <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        iter<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>add<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            iter <span class="token operator">=</span> iter<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> ret <span class="token operator">=</span> iter<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        iter<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function v(m,b){const t=s("Badge"),p=s("ExternalLinkIcon");return c(),l("div",null,[u,a(t,{text:"中等",type:"warning",vertical:"middle"}),n("p",null,[n("a",d,[e("题目描述"),a(p)])]),k])}const w=o(r,[["render",v],["__file","leetcode_061_旋转链表.html.vue"]]);export{w as default};
