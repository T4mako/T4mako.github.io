import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-2ac1fdf0.js";const p={},e=t(`<h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><h3 id="_1、异常概述和异常体系结构" tabindex="-1"><a class="header-anchor" href="#_1、异常概述和异常体系结构" aria-hidden="true">#</a> 1、异常概述和异常体系结构</h3><p>异常的分类：「error」，「exception」</p><ul><li>编译时异常必须显式处理</li><li>运行时异常交给虚拟机</li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220710204105263.png" alt="image-20220710204105263" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Error</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//1、栈溢出：java.lang.StackOverflowError</span>
        <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2、堆溢出：java.lang.OutOfMemoryError</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220711141545219.png" alt="image-20220711141545219" loading="lazy"></p><ul><li>蓝色：运行时异常（unchecked）</li><li>红色：编译时异常（checked）</li></ul><p>一、异常体系结构：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220711170136676.png" alt="image-20220711170136676" loading="lazy"></p><h3 id="_2、java-异常处理的方式" tabindex="-1"><a class="header-anchor" href="#_2、java-异常处理的方式" aria-hidden="true">#</a> 2、Java 异常处理的方式</h3><p>方式一：<code>try - catch - finally</code><br> 方式二：<code>throws + 异常类型</code></p><h4 id="异常的处理" tabindex="-1"><a class="header-anchor" href="#异常的处理" aria-hidden="true">#</a> 异常的处理</h4><ul><li>程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应「异常对象」，并将此对象抛出。</li><li>一旦抛出对象后，其后的代码就不在执行（<strong>catch 中，异常后的代码不执行</strong>）</li></ul><p>可以理解为异常的处理方式：</p><ul><li>try-catch-finally</li><li>throws</li></ul><p>异常对象可以调用如下方法得到或输出异常的信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1、try-catch-finally-的使用" tabindex="-1"><a class="header-anchor" href="#_1、try-catch-finally-的使用" aria-hidden="true">#</a> 1、try-catch-finally 的使用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token comment">//可能出现异常的代码</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//处理异常的方式1</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//处理异常的方式2</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">3</span> 变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//处理异常的方式3</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">finally</span><span class="token punctuation">{</span>
    <span class="token comment">//一定会执行的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> test1<span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 出现异常，直接进入catch</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStakeTracce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出现数值转换异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>finally 是可选的</li><li>使用 try 将可能出现异常的代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中匹配</li><li>一旦 try 中异常对象匹配到某一个 catch ，进入 catch 中进行异常处理。一旦处理完成，就跳出 try-catch 结构（在没有写 finally 的情况）。继续执行其后的代码</li><li>catch 中异常类型注意子父类、先后顺序。父类声明在子类之上，报错。</li><li>常用的异常对象处理方式：① String getMessage() ②printStakeTracce()</li><li>在 try 结构中声明的变量，出了 try 结构后，就不能再被调用。</li><li>try-catch-finally 结构可以相互嵌套</li></ul><p>体会：<br> 使用 try-catch-finally 处理编译时异常，将编译时异常转换为运行时异常，延迟出现。<br> 由于运行时异常比较常见，不针对运行时异常编写 try-catch-finally。<br> 针对编译时异常，一定要考虑 try-catch-finally</p><p>try-catch-finally 中 finally 的使用</p><ul><li>finally 是可选的</li><li>finally 中声明的是一定会被执行的代码。即使catch中又出现了异常， try 中有 return 语句， catch 中有 return 语句等情况</li><li>像数据库连接、输入输出流、网络编程 Socket 等资源，jvm 是不能自动回收的，我们需要手动进行资源的释放，此时资源释放就需要声明在 finally 中。</li><li>try-catch 语句中执行了程序退出代码 <code>System.exit(0)</code> 则不执行 finally 子语句</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinallyTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticExceptioin</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、throws-异常类型" tabindex="-1"><a class="header-anchor" href="#_2、throws-异常类型" aria-hidden="true">#</a> 2、throws + 异常类型</h4><p>1、<code>throws + 异常类型</code> 写在方法的声明处，指明此方法执行时，可能会抛出的异常类型。<br> 一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足 throws 后异常类型时，就会被抛出。异常代码后续的代码就不再执行。<br> 2、<code>try-catch-finally</code>：真正的将异常处理掉。<br><code>throws</code> 只是将异常抛给了方法的调用者。并没有将异常处理掉</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ExceptionTest2</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span><span class="token punctuation">{</span>
        <span class="token comment">//异常</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IoException</span><span class="token punctuation">{</span>
        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法重写的规则之一：<br> 子类重写的方法抛出的异常不大于父类被重写的方法抛出的异常类型</p><h4 id="_3、try-catch-finally-和-throws-的选择" tabindex="-1"><a class="header-anchor" href="#_3、try-catch-finally-和-throws-的选择" aria-hidden="true">#</a> 3、try-catch-finally 和 throws 的选择</h4><ul><li>如果父类中被重写的方法没有 throws 方式处理异常，则子类重写的方法也不能使用 throws ，意味着如果子类重写的方法中有异常，必须使用 try-catch-finally 方式处理。</li><li>执行的方法 a 中先后又调用了另外几个方法，这几个方法是递进关系执行的，建议这几个方法使用 throws 的方式 进行处理。而执行的方法 a 可以考虑 try-catch-finally 方式进行胡成立</li></ul><h3 id="_3、手动抛出异常对象" tabindex="-1"><a class="header-anchor" href="#_3、手动抛出异常对象" aria-hidden="true">#</a> 3、手动抛出异常对象</h3><p>关于异常对象的产生：</p><ol><li>系统自动生成的异常对象</li><li>手动生成并抛出一个异常对象（throw）</li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>throws 和 throw 的区别：<br> throw 表示抛出一个异常的对象，生成异常对象的过程，声明在方法体内 throw new 异常类(&quot;abc&quot;)<br> throws 属于异常处理的一种方式，声明在方法的声明处</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">regist</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后try-catch一下</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">//System.out.pringln(&quot;非法&quot;);</span>
            <span class="token comment">//手动抛出异常</span>
            <span class="token comment">//throw new RuntimeException(&quot;您输入的数据非法&quot;);</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的数据非法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、自定义异常类" tabindex="-1"><a class="header-anchor" href="#_4、自定义异常类" aria-hidden="true">#</a> 4、自定义异常类</h3><p>自定义异常类：</p><ul><li>继承于现有的异常结构：Exception、RuntimeException</li><li>提供重载的构造器</li><li><ul><li>提供全局变量：serialVersionUID（可省略）</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">61641614198984L</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
	<span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//super(msg);</span>
        ms <span class="token operator">=</span> <span class="token string">&quot;出现异常&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、断言语句" tabindex="-1"><a class="header-anchor" href="#_5、断言语句" aria-hidden="true">#</a> 5、断言语句</h3><p>断言语句用于在代码调试阶段发生错误时，要求程序必须立即停止执行</p><p>使用关键字「assert」声明一条断言语句</p><p>断言语句的两种格式：</p><ul><li><code>assert booleanExpression;</code></li><li><code>assert booleanExpression:messageException;</code></li></ul><p><code>booleanExpression</code> 为 boolean 类型，当其值为 false 时，程序从断言语句处停止执行，若有 messageException ，输出信息</p>`,47),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","9、异常处理.html.vue"]]);export{k as default};
