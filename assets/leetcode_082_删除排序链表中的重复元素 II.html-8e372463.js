import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as p,e as o,b as n,d as c,f as l}from"./app-5fb3f7e4.js";const i={},u=n("h1",{id:"_82-删除排序链表中的重复元素-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_82-删除排序链表中的重复元素-ii","aria-hidden":"true"},"#"),c(" 82. 删除排序链表中的重复元素 II")],-1),r=l(`<p>解法： 建立新的链表，使用双指针校验，手动添加节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> head<span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> fol <span class="token operator">=</span> res<span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> left <span class="token operator">=</span> head<span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> right <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!=</span> right<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">.</span>next <span class="token operator">==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fol<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add non-duplicate to result list</span>
	            fol <span class="token operator">=</span> fol<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
	            left <span class="token operator">=</span> right<span class="token punctuation">;</span>
	            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				left <span class="token operator">=</span> right<span class="token punctuation">;</span>
				right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			fol<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function k(d,v){const s=t("Badge");return e(),p("div",null,[u,o(s,{text:"中等",type:"tiwarning",vertical:"middle"}),r])}const b=a(i,[["render",k],["__file","leetcode_082_删除排序链表中的重复元素 II.html.vue"]]);export{b as default};
