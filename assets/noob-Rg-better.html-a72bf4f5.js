import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as l,b as n,d as s,e as t,f as e}from"./app-a5eca13b.js";const u={},r=e(`<h2 id="_1、缓存优化" tabindex="-1"><a class="header-anchor" href="#_1、缓存优化" aria-hidden="true">#</a> 1、缓存优化</h2><p>用户数量多，系统访问量大<br> 频繁访问数据库，系统性能下降，用户体验差</p><h3 id="_1、通过git推送远程仓库" tabindex="-1"><a class="header-anchor" href="#_1、通过git推送远程仓库" aria-hidden="true">#</a> 1、通过git推送远程仓库</h3><p>在github上新建仓库<br> 在idea中新建git本地仓库<br> 在idea中add添加缓存区<br> 在ieda中commit提交本地库<br> 在idea中关联远程仓库<br> 在idea中push代码</p><h3 id="_2、创建新分支" tabindex="-1"><a class="header-anchor" href="#_2、创建新分支" aria-hidden="true">#</a> 2、创建新分支</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230317141628.png" alt="" loading="lazy"></p><p>创建新分支名为v1.0</p><p>push到远程仓库</p><h3 id="_3、环境搭建" tabindex="-1"><a class="header-anchor" href="#_3、环境搭建" aria-hidden="true">#</a> 3、环境搭建</h3><p>在pom文件中导入spring data redids的maven坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--redis--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在项目的applicaation.yml中加入redis相关配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#redis</span>
<span class="token key atrule">redis</span><span class="token punctuation">:</span>
 <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.80.130
 <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
 <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在项目中配置RedisConfig，更改序列化器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、缓存短信验证码" tabindex="-1"><a class="header-anchor" href="#_4、缓存短信验证码" aria-hidden="true">#</a> 4、缓存短信验证码</h3><p>将原本保存在Session中的短信验证码放到Redis中，具体实现思路：<br> 1、在服务短板UserController中注入RedisTemplate对象，用于操作Redis<br> 2、在服务端UserController中的sendMsg方法，将随机生成的验证码缓存到Redis中，设置有效期为5分钟<br> 3、在服务端UserController的login方法中，从Redis中获取缓存的验证码，如果登录成功删除Redis中的验证码</p><p>更改UserController类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">sendMeg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
 	<span class="token comment">//将生成的验证码缓存到Redis中，并且设置有效期为5分钟</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span> map<span class="token punctuation">,</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token comment">//登陆成功，删除redis中缓存的验证码</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、缓存菜品数据" tabindex="-1"><a class="header-anchor" href="#_5、缓存菜品数据" aria-hidden="true">#</a> 5、缓存菜品数据</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230317162916.png" alt="" loading="lazy"></p><p>实现思路如下：<br> 1、改造DIshController的list方法，先从Redis中获取数据，如果有则直接返回，如果没有则查询数据库，并将查询到的菜品数据放入Redis。<br> 2、改造DIshController的save和update方法，加入清理缓存的逻辑</p><p>在使用缓存过程中，要注意保证数据中的数据和缓存中的一致，如果数据库中的数据和缓存的数据一致，如果数据库中的数据发生变化，需要及时清理缓存数据。</p><p>更改DIshController</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@PutMapping</span>
<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">DishDto</span> dishDto<span class="token punctuation">)</span><span class="token punctuation">{</span>
    dishService<span class="token punctuation">.</span><span class="token function">updateWithFlavor</span><span class="token punctuation">(</span>dishDto<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//清理所有菜品的缓存数据</span>
    <span class="token comment">/*Set keys = redisTemplate.keys(&quot;dish_*&quot;);//获取所欲dish_开头的key
        redisTemplate.delete(keys);*/</span>

    <span class="token comment">//清理某个分类下面的菜品数据</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;dish_&quot;</span> <span class="token operator">+</span> dishDto<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_1&quot;</span><span class="token punctuation">;</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;菜品修改成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">DishDto</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Dish</span> dish<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishDto</span><span class="token punctuation">&gt;</span></span> dishDtoList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">//先从Redis中获取数据</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;dish_&quot;</span> <span class="token operator">+</span> dish<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> dish<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//动态构造key</span>
    dishDtoList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishDto</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>dishDtoList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//如果存在，直接返回</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>dishDtoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果不存在，查询数据库，将查询到的菜品数据缓存到Redis</span>
    <span class="token comment">//构造查询条件</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加查询条件</span>
    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCategoryId</span><span class="token punctuation">,</span>dish<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//查询状态为1（起售状态）</span>
    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//构造排序条件</span>
    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getSort</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getUpdateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dishDtoList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">DishDto</span> dishDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DishDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> dishDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//分类id</span>
        <span class="token class-name">Long</span> categoryId <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据id查询分类对象</span>
        <span class="token class-name">Category</span> category <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>category <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> categoryName <span class="token operator">=</span> category<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dishDto<span class="token punctuation">.</span><span class="token function">setCategoryName</span><span class="token punctuation">(</span>categoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//当前菜品的Id</span>
        <span class="token class-name">Long</span> dishId <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">DishFlavor</span><span class="token operator">::</span><span class="token function">getDishId</span><span class="token punctuation">,</span>dishId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//SQL:select * from dish_flavor where dish_id = ?</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">&gt;</span></span> dishFlavorList <span class="token operator">=</span> dishFlavorService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dishDto<span class="token punctuation">.</span><span class="token function">setFlavors</span><span class="token punctuation">(</span>dishFlavorList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dishDto<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//将菜品缓存到redis</span>
    <span class="token comment">//将数组序列化为一个字符串</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>dishDtoList<span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>dishDtoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、合并分支" tabindex="-1"><a class="header-anchor" href="#_6、合并分支" aria-hidden="true">#</a> 6、合并分支</h3><p>切到master分支</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230317172319.png" alt="" loading="lazy"></p><h2 id="_2、spring-cache" tabindex="-1"><a class="header-anchor" href="#_2、spring-cache" aria-hidden="true">#</a> 2、Spring Cache</h2><h3 id="_1、spring-cache介绍" tabindex="-1"><a class="header-anchor" href="#_1、spring-cache介绍" aria-hidden="true">#</a> 1、Spring Cache介绍</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230317172539.png" alt="" loading="lazy"></p><p>SpringCache常用注解</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能</td></tr><tr><td>@Cacheable</td><td>在方法执行前Spring先查看缓存中是否有数据，如果有数据，直接返回缓存数据，如果没有数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><p>在spring boot项目中，使用缓存技术只需要在项目中导入相关缓存技术的依赖包，并在启动类上使用@EnableCaching开启缓存支持即可<br> 例如，使用Redis作为缓存技术，Spring data Redis的maven坐标即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* CachePut：将方法返回值放入缓存
* value：缓存的名称，每个缓存名称下面可以有多个key
* key：缓存的key
*/</span>
<span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PostMapping</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* CacheEvict：清理指定缓存
* value：缓存的名称，每个缓存名称下面可以有多个key
* key：缓存的key
* allEntries = true/false：是否删除这个分类（value）下所有的缓存数据
*/</span>
<span class="token comment">//@CacheEvit(value = &quot;userCache&quot; key = &quot;#root.args[0]&quot;)</span>
<span class="token comment">//@CacheEvit(value = &quot;userCache&quot; key = &quot;#id&quot;)</span>
<span class="token annotation punctuation">@CacheEvit</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span> key <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@pathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0.id&quot;)</span>
<span class="token comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#user.id&quot;)</span>
<span class="token comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.agrs[0].id&quot;)</span>
<span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#result.id&quot;</span><span class="token punctuation">)</span> <span class="token comment">//返回值的id</span>
<span class="token annotation punctuation">@PutMapping</span>
<span class="token keyword">public</span> <span class="token class-name">UserUpdate</span><span class="token punctuation">(</span><span class="token class-name">USer</span> uer<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* Cacheable:在方法执行前Spring先查看缓存中是否有数据，如果有数据，直接返回缓存数据，如果没有数据，调用方法并将方法返回值放到缓存中
* value：缓存的名称，每个缓存名称下面可以有多个key
* key：缓存的key
* condition：条件，满足条件才缓存数据
* unless：满足条件则不缓存
*/</span>
<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">,</span>condition <span class="token operator">=</span> <span class="token string">&quot;#result != null&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@pathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span><span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#user.id + &#39;_&#39; + #user.name&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、spring-cache使用方式" tabindex="-1"><a class="header-anchor" href="#_2、spring-cache使用方式" aria-hidden="true">#</a> 2、Spring Cache使用方式</h3><p>在Spring Boot项目中使用Spring Cache的操作步骤（使用redis缓存技术）：<br> 1、导入maven坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--Spring Cache--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、配置application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#设置缓存有效期</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cache</span><span class="token punctuation">:</span>
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      <span class="token comment">#过期时间，单位毫秒，即30分钟</span>
      <span class="token key atrule">time-to-live</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、在启动类上加入@EnableCaching注解，开启缓存注解功能<br> 4、@Controller的方法上加入@Cacheable、@CacheEvict等注解，进行缓存操作</p><h3 id="_3、缓存套餐数据" tabindex="-1"><a class="header-anchor" href="#_3、缓存套餐数据" aria-hidden="true">#</a> 3、缓存套餐数据</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230317205237.png" alt="" loading="lazy"></p><p>具体实现思路：<br> 1、导入Spring Cache和Redis相关maven坐标<br> 2、在application.yml中配置缓存数据过期时间<br> 3、在启动类上加入EnableCacheing注解，开启缓存注解功能<br> 4、在SetmealController的list方法上加入@Cacheable注解<br> 5、在SetmealController的save和delete方法上加入CacheEvict注解</p><p>更改list方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;setmealCache&quot;</span> <span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#setmeal.categoryId + &#39;_&#39; + #setmeal.status&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Setmeal</span> setmeal<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getCategoryId</span><span class="token punctuation">,</span>setmeal<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getUpdateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：将返回结果<strong>R实现序列化接口</strong>，否则缓存会报错</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更改delete与save方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span>
<span class="token annotation punctuation">@DeleteMapping</span>
<span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;setmealCache&quot;</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SetmealDto</span> setmealDto<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token annotation punctuation">@DeleteMapping</span>
<span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;setmealCache&quot;</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、读写分离" tabindex="-1"><a class="header-anchor" href="#_3、读写分离" aria-hidden="true">#</a> 3、读写分离</h2><h3 id="_1、mysql主从复制" tabindex="-1"><a class="header-anchor" href="#_1、mysql主从复制" aria-hidden="true">#</a> 1、MySQL主从复制</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230317212236.png" alt="" loading="lazy"></p><p>主库只能有一个，从库可以有多个</p><h4 id="_1、主从数据库的准备" tabindex="-1"><a class="header-anchor" href="#_1、主从数据库的准备" aria-hidden="true">#</a> 1、主从数据库的准备</h4><p>MySQL主从复制-前置条件：<br> 提前准备好两台服务器，分别安装Mysql并启动服务成功</p><p>这里一台为本机，一台为CentOS<br> 在 CentOS 操作系统上，可以通过以下步骤来启动、使用 MySQL 服务：</p><ol><li><p>使用以下命令启动 MySQL 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果需要在系统启动时自动启动 MySQL 服务，可以使用以下命令设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>检查 MySQL 服务是否已经启动，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>luaCopy code
<span class="token function">sudo</span> systemctl status mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果服务已经启动，将会显示 Active: active (running)。</p></li><li><p>连接到 MySQL：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cssCopy code
mysql <span class="token parameter variable">-u</span> username <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>username</code> 是您的 MySQL 用户名。在输入此命令后，系统将提示您输入密码。</p></li></ol><p>主库：192.168.80.130<br> 从库：192.168.80.135</p><h4 id="_2、配置主库master" tabindex="-1"><a class="header-anchor" href="#_2、配置主库master" aria-hidden="true">#</a> 2、配置主库Master</h4><p>第一步，修改Mysql数据库的配置文件 /etc/my.cnf</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>log-bin=mysql-bin #[必须]启动二进制文件
server-id=100 #[必须]服务器唯一ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：重启Mysql服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步：登录Mysql数据库，执行下面SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">user</span> t4mako identified <span class="token keyword">by</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> t4mako<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的SQL的作用是创建一个用户t4mako，密码为root，并且给t4mako用户授予REPLICATION SLAVE权限，常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。</p><p>第四步：登录mysql数据库，执行下面SQL记录下结果中file和position的值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318113857.png" alt="" loading="lazy"></p><h4 id="_3、配置从库slaver" tabindex="-1"><a class="header-anchor" href="#_3、配置从库slaver" aria-hidden="true">#</a> 3、配置从库Slaver</h4><p>第一步：修改Mysql数据库配置文件/etc/my.cnf （Ubuntu下在 /etc/mysql/my.cnf）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>!server-id=101 #[必须]服务器唯一ID (Ubuntu下加一个！)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二步：重启服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步：登录数据库，执行下面SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">&#39;192.168.80.130&#39;</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">&#39;t4mako&#39;</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">&#39;mysql-bin.000001&#39;</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">695</span><span class="token punctuation">;</span>

<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318120010.png" alt="" loading="lazy"></p><p>第四步：查看数据库状态</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> slave <span class="token keyword">status</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、shardingjdbc" tabindex="-1"><a class="header-anchor" href="#_2、shardingjdbc" aria-hidden="true">#</a> 2、ShardingJDBC</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230318134934027.png" alt="image-20230318134934027" loading="lazy"></p><h3 id="_3、读写分离案例" tabindex="-1"><a class="header-anchor" href="#_3、读写分离案例" aria-hidden="true">#</a> 3、读写分离案例</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318134703.png" alt="" loading="lazy"></p><p>使用Sharding-JDBC实现读写分离步骤：<br> 1、导入maven坐标<br> 2、在配置文件中配置读写分离规则<br> 3、在配置文件中配置允许bean定义覆盖配置项</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0-RC1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> ASSIGN_ID
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>
    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
      <span class="token key atrule">names</span><span class="token punctuation">:</span>
        master<span class="token punctuation">,</span>slave
      <span class="token comment"># 主数据源</span>
      <span class="token key atrule">master</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.138.100<span class="token punctuation">:</span>3306/rw<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span><span class="token number">8</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> root
      <span class="token comment"># 从数据源</span>
      <span class="token key atrule">slave</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.138.101<span class="token punctuation">:</span>3306/rw<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span><span class="token number">8</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> root
    <span class="token key atrule">masterslave</span><span class="token punctuation">:</span>
      <span class="token comment"># 读写分离配置</span>
      <span class="token key atrule">load-balance-algorithm-type</span><span class="token punctuation">:</span> round_robin <span class="token comment">#轮询</span>
      <span class="token comment"># 最终的数据源名称</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> dataSource
      <span class="token comment"># 主库数据源名称</span>
      <span class="token key atrule">master-data-source-name</span><span class="token punctuation">:</span> master
      <span class="token comment"># 从库数据源名称列表，多个逗号分隔</span>
      <span class="token key atrule">slave-data-source-names</span><span class="token punctuation">:</span> slave
    <span class="token key atrule">props</span><span class="token punctuation">:</span>
      <span class="token key atrule">sql</span><span class="token punctuation">:</span>
        <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启SQL显示，默认false</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#允许并定义覆盖（定义覆盖配置项）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sharding-JDBC会通过type类名反射创建DataSource，所以druid就无需配置DataSource，所以用druid-starter的话要排除druid的自动配置类去配置DataSource。这是通过Bean覆盖的方式去解决</p><h3 id="_4、项目实现读写分离" tabindex="-1"><a class="header-anchor" href="#_4、项目实现读写分离" aria-hidden="true">#</a> 4、项目实现读写分离</h3><p>配置方式与3一致</p><h2 id="_4、nginx" tabindex="-1"><a class="header-anchor" href="#_4、nginx" aria-hidden="true">#</a> 4、Nginx</h2><h3 id="_1、nginx概述" tabindex="-1"><a class="header-anchor" href="#_1、nginx概述" aria-hidden="true">#</a> 1、Nginx概述</h3><p>Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx的网站有：百度，京东，新浪，网易，腾讯，淘宝等</p><p>Nginx是由伊戈尔·塞索耶夫为俄罗斯访问量第二的Rambler.ru站点开发的，第一个公开版本0.1.0发布于2004年10月</p>`,94),d={href:"https://nginx.org",target:"_blank",rel:"noopener noreferrer"},k=e(`<h3 id="_2、nginx的下载与安装" tabindex="-1"><a class="header-anchor" href="#_2、nginx的下载与安装" aria-hidden="true">#</a> 2、Nginx的下载与安装</h3><p>通过官网下载tar.gz或者如下步骤</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318143107.png" alt="" loading="lazy"></p><p>注意：若第六步骤安装出错，先执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> openssl openssl-devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再执行 5 、6 两步</p><p>安装完成：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318144340.png" alt="" loading="lazy"></p><p>Nginx的目录结构：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318144609.png" alt="" loading="lazy"></p><h3 id="_3、nginx命令" tabindex="-1"><a class="header-anchor" href="#_3、nginx命令" aria-hidden="true">#</a> 3、Nginx命令</h3><p>在<strong>sbin目录</strong>下查看Nginx版本：<strong>./nginx -v</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318144902.png" alt="" loading="lazy"></p><p><strong>检查配置文件的正确性</strong>：在启动Nginx服务之前，可以先检查一下conf/nginx.conf文件配置是否有错误，命令如下：<strong>./nginx -t</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318145106.png" alt="" loading="lazy"></p><p>启动Nginx服务命令： <strong>./nginx</strong></p><p>停止Nginx服务命令： <strong>./nginx -s stop</strong></p><p>重启Nginx服务命令： <strong>./nginx -s reload</strong></p><p>启动完成后可以查看Nginx进程： ps -ef | grep nginx<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318145445.png" alt="" loading="lazy"></p><p>关闭防火墙后，通过ip即可访问nginx<br><strong>Nginx端口为80，可以省略</strong></p><p>通过<strong>配置Nginx环境变量</strong>，在处处可使用Nginx命令：<br> vim /etc/profile 修改文件 source /etc/profile 立即生效<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318150349.png" alt="" loading="lazy"></p><p>这样可以直接通过<br> Nginx 启动Nginx</p><h3 id="_4、nginx配置文件结构" tabindex="-1"><a class="header-anchor" href="#_4、nginx配置文件结构" aria-hidden="true">#</a> 4、Nginx配置文件结构</h3><p>整体结构介绍：<br> Nginx配置文件（conf/nginx.conf）整体分为三部分：</p><ol><li><p>全局块：和Nginx运行相关的全局配置</p></li><li><p>enents块：和网络连接相关的配置</p></li><li><p>http块：代理、缓存、日志记录、虚拟主机配置</p><p>​ http全局块</p><p>​ server块：</p><p>​ server全局块</p><p>​ location块</p></li></ol><p>注：http块中可以配置多个Server块，每个Server块中可以配置多个location块</p><p>查看配置文件<br> cat /usr/local/nginx/conf/nginx.conf</p><h3 id="_5、nginx具体应用" tabindex="-1"><a class="header-anchor" href="#_5、nginx具体应用" aria-hidden="true">#</a> 5、Nginx具体应用</h3><h4 id="_1、部署静态资源" tabindex="-1"><a class="header-anchor" href="#_1、部署静态资源" aria-hidden="true">#</a> 1、部署静态资源</h4><p>Nginx可以作为静态web服务器来部署静态资源。静态资源指在服务端真实存在并且能够直接展示的一些文件。比如常见的html页面，css文件，图片，视频等资源。<br> 相对于Tomcat，<strong>Nginx处理静态资源的能力更加高效</strong>，所以在生产环境下，一般会将静态资源部署到Nginx中。<br> 将静态资源部署到Nginx非常简单，只需要将文件复制到Nginx安装目录下的html目录中即可。</p><h4 id="_2、反向代理" tabindex="-1"><a class="header-anchor" href="#_2、反向代理" aria-hidden="true">#</a> 2、反向代理</h4><p><strong>正向代理</strong><br> 正向代理一般在<strong>客户端设置代理服务器</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318154039.png" alt="" loading="lazy"></p><p><strong>反向代理</strong><br> 反向代理，<strong>客户端不知道目标服务器地址，也无需用户端的任何设定</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318154247.png" alt="" loading="lazy"></p><p>配置反向代理：<br> 针对82这个端口的请求，转发到另一台服务器上</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318154927.png" alt="" loading="lazy"></p><h4 id="_3、负载均衡" tabindex="-1"><a class="header-anchor" href="#_3、负载均衡" aria-hidden="true">#</a> 3、负载均衡</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318155937.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318160002.png" alt="" loading="lazy"></p><p>配置负载均衡：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318160308.png" alt="" loading="lazy"></p><p>upstream指令用于定义一组服务器<br> 最后一行 targetserver 名字任意，与 upstream 后的名字一致即可<br> 可以在upstream中server服务器ip后添加 weight=10 参数设置权重，数值越大，分发给它的几率越高</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318160929.png" alt="" loading="lazy"></p><h2 id="_5、前后端分离开发-api" tabindex="-1"><a class="header-anchor" href="#_5、前后端分离开发-api" aria-hidden="true">#</a> 5、前后端分离开发/API</h2><h3 id="_1、前后端分离开发介绍" tabindex="-1"><a class="header-anchor" href="#_1、前后端分离开发介绍" aria-hidden="true">#</a> 1、前后端分离开发介绍</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318161318.png" alt="" loading="lazy"></p><p>工程拆分：<br> 将一个完整工程拆分成前端工程和后端工程<br> 前端工程部署到Nginx中<br> 后端工程部署到Tomcat中</p><p>开发流程：<br> 前后端分离开发后，面临一个问题，就是前后端开发人员后后端开发人员如何进行配合来共同开发一个项目？<br> 可以按照如下流程进行：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318161852.png" alt="" loading="lazy"></p><p>接口（API）接口就是一个Http的请求地址，只要就是去定义：请求路径、请求方式、请求参数，响应数据等内容</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230318162352.png" alt="" loading="lazy"></p><h3 id="_2、yapi-apifox" tabindex="-1"><a class="header-anchor" href="#_2、yapi-apifox" aria-hidden="true">#</a> 2、YApi/ApiFox</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230319092700.png" alt="" loading="lazy"></p>`,51),m={href:"https://github.com/YMFE/yapi",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"要使用YApi，需要自己进行部署",-1),g={href:"https://www.apifox.cn/",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),h={href:"https://www.bilibili.com/video/BV1ae4y1y7bf/?vd_source=93736dd4ac5c01d75d784e06d15a93ac",target:"_blank",rel:"noopener noreferrer"},y=n("h3",{id:"_3、swagger",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3、swagger","aria-hidden":"true"},"#"),s(" 3、Swagger")],-1),f=n("h4",{id:"_1、swagger介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、swagger介绍","aria-hidden":"true"},"#"),s(" 1、Swagger介绍")],-1),q=n("br",null,null,-1),x={href:"https://swagger.io/",target:"_blank",rel:"noopener noreferrer"},w=e(`<p><strong>knife4j</strong>是Java MVC框架<strong>集成Swagger生成Api文档</strong>的<strong>增强解决方案</strong>。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--knife4j,集成Swagger生成API文档--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、使用方式" tabindex="-1"><a class="header-anchor" href="#_2、使用方式" aria-hidden="true">#</a> 2、使用方式</h4><p>1、导入knife4j的maven坐标<br> 2、导入knife4j相关配置类<br> 3、设置静态资源，否则接口文档页面无法访问<br> 4、在LoginCheckFilter中设置不需要处理的请求</p><p>① maven坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--knife4j,集成Swagger生成API文档--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 导入knife4j相关配置类</p><p>更新WebMvcConfig：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableSwagger2</span>
<span class="token annotation punctuation">@EnableKnife4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 文档类型</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			   <span class="token comment">//扫描controller包结构，每个方法生成对应接口文档</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">&quot;com.t4mako.reggie.controller&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;瑞吉外卖&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;瑞吉外卖接口文档&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 设置静态资源，否则接口文档页面无法访问</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;doc.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/backend/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/backend/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/front/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/front/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④ 在LoginCheckFilter中设置不需要处理的请求</p><p>修改LoginCheckFilter：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//定义不需要处理的请求路径</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    <span class="token string">&quot;/employee/login&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;/employee/logout&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;/backend/**&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;/front/**&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;/common/**&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;/user/sendMsg&quot;</span><span class="token punctuation">,</span> <span class="token comment">//front的短信验证情趣</span>
    <span class="token string">&quot;/user/login&quot;</span><span class="token punctuation">,</span>   <span class="token comment">//用户登录</span>
    <span class="token string">&quot;/doc.html&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;/swagger-resources&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;/v2/api-docs&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问localhost/doc.html查看接口文档</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230319100514.png" alt="" loading="lazy"></p><p>可以测试数据，下载接口文档</p><h4 id="_3、swagger常用注解" tabindex="-1"><a class="header-anchor" href="#_3、swagger常用注解" aria-hidden="true">#</a> 3、Swagger常用注解</h4><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Api</td><td>用在请求的类上，例如Controller，表示对类的说明</td></tr><tr><td>@ApiMoedl</td><td>用在类上，通常是实体类，表示一个返回响应数据的信息</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述响应类的属性</td></tr><tr><td>@ApiOperation</td><td>用在请求的方法上，说明方法的用途，作用</td></tr><tr><td>@ApiImplicitParams</td><td>用在请求的方法上，表示一组参数说明</td></tr><tr><td>@ApiImplicitParam</td><td>用在@ApiImplicitParams注解中，指定一个请求参数的各个方面</td></tr></tbody></table><h2 id="_6、项目部署" tabindex="-1"><a class="header-anchor" href="#_6、项目部署" aria-hidden="true">#</a> 6、项目部署</h2><h3 id="_1、部署架构、环境" tabindex="-1"><a class="header-anchor" href="#_1、部署架构、环境" aria-hidden="true">#</a> 1、部署架构、环境</h3><p>部署架构：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230319102525.png" alt="" loading="lazy"></p><p>部署环境说明：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230319102727.png" alt="" loading="lazy"></p><h3 id="_2、部署前端项目" tabindex="-1"><a class="header-anchor" href="#_2、部署前端项目" aria-hidden="true">#</a> 2、部署前端项目</h3><p>1、在服务器A中安装Nginx，将项目中的dist目录上传到Nginx的html下</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230319103030.png" alt="" loading="lazy"></p><p>2、修改Nginx配置文件</p><p>修改配置文件，完成重写请求路径的功能</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230319103914.png" alt="" loading="lazy"></p><h3 id="_3、后端项目的部署" tabindex="-1"><a class="header-anchor" href="#_3、后端项目的部署" aria-hidden="true">#</a> 3、后端项目的部署</h3><p>1、在服务器B中安装jdk，git，maven，MySQL，使用git clone将git远程仓库的diamante克隆下俩</p><p>2、将资料中的reggieStart.sh文件上传到服务器B，通过chmod命令设置执行权限</p><p>3、修改图存存储的位置</p><p>如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>reggie：
 path：/usr/local/img/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function _(I,S){const a=o("ExternalLinkIcon");return c(),i("div",null,[l(" more "),r,n("p",null,[s("官网："),n("a",d,[s("https://nginx.org"),t(a)])]),k,n("p",null,[n("a",m,[s("YApi源码地址"),t(a)])]),v,n("p",null,[s("相似产品："),n("a",g,[s("apifox"),t(a)]),s("（更方便，无需自己部署）"),b,n("a",h,[s("apifox的使用"),t(a)])]),y,f,n("p",null,[s("使用Swagger只需要按照它的规范定义接口信息及接口相关信息，在通过Swagger衍生出来的一系列项目和工具就可以做到生成各种格式的接口文档，以及在线接口调试页面等。"),q,n("a",x,[s("Swagger官网"),t(a)])]),w])}const D=p(u,[["render",_],["__file","noob-Rg-better.html.vue"]]);export{D as default};
