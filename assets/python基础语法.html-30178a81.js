import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as c,b as n,d as s,e as t,f as e}from"./app-8958e5aa.js";const u={},r=n("h1",{id:"",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#","aria-hidden":"true"},"#")],-1),d=e(`<h2 id="_1、数据类型" tabindex="-1"><a class="header-anchor" href="#_1、数据类型" aria-hidden="true">#</a> 1、数据类型</h2><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）（不可修改索引对应的值）</li><li>**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）</li></ul><h3 id="number-数字" tabindex="-1"><a class="header-anchor" href="#number-数字" aria-hidden="true">#</a> Number（数字）</h3><p><strong>int、float、bool、complex（复数）</strong>。</p><ul><li><strong>整型(Int)</strong> - 通常被称为是整型或整数，是正或负整数，不带小数点。</li><li><strong>长整型(long integers)</strong> - 无限大小的整数，整数最后是一个大写或小写的L。</li><li><strong>浮点型(floating point real values)</strong> - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li><li><strong>复数(complex numbers)</strong> - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li></ul><p>我们可以使用十六进制和八进制来代表整数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number <span class="token operator">=</span> <span class="token number">0xA0F</span> <span class="token comment"># 十六进制</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number
<span class="token number">2575</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number<span class="token operator">=</span><span class="token number">0o37</span> <span class="token comment"># 八进制</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number
<span class="token number">31</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>bool 是 int 的子类，True 和 False 可以和数字相加</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token boolean">True</span><span class="token operator">==</span><span class="token number">1</span> <span class="token comment">#True</span>
<span class="token boolean">False</span><span class="token operator">==</span><span class="token number">0</span> <span class="token comment">#True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串" aria-hidden="true">#</a> String（字符串）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;Runoob&#39;</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>          <span class="token comment"># 输出字符串</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 输出第一个到倒数第二个的所有字符</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 输出字符串第一个字符</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># 输出从第三个开始到第五个的字符</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 输出从第三个开始的后的所有字符</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment"># 输出字符串两次，也可以写成 print (2 * str)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">+</span> <span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 连接字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表" aria-hidden="true">#</a> List（列表）</h3><p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。<br> 列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">&#39;runoob&#39;</span><span class="token punctuation">,</span> <span class="token number">70.2</span> <span class="token punctuation">]</span>
tinylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&#39;runoob&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token comment"># 输出完整列表</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 输出列表第一个元素</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 从第二个开始输出到第三个元素</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 输出从第三个元素开始的所有元素</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>tinylist <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># 输出两次列表</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> tinylist<span class="token punctuation">)</span> <span class="token comment"># 连接列表</span>
a <span class="token operator">+=</span> tinylist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#删除a</span>
<span class="token number">1</span> <span class="token keyword">in</span> a <span class="token comment">#True</span>
<span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token builtin">min</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#统计某个元素在列表中出现的次数</span>
a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</span>
a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#从列表中找出某个值第一个匹配项的索引位置</span>
a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">#移除列表中某个值的第一个匹配项</span>
a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#弹出倒数第二个元素</span>
a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#反转</span>
<span class="token comment">#list.sort(cmp=None, key=None, reverse=False)</span>
<span class="token comment">#cmp -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</span>
<span class="token comment">#key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</span>
<span class="token comment">#reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。</span>
a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#降序排列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tuple-元组" tabindex="-1"><a class="header-anchor" href="#tuple-元组" aria-hidden="true">#</a> Tuple（元组）</h3><p>元组（tuple）与列表类似，不同之处在于元组的<strong>元素不能修改</strong>。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。<br> 元组中的元素类型也可以不相同：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">&#39;runoob&#39;</span><span class="token punctuation">,</span> <span class="token number">70.2</span>  <span class="token punctuation">)</span>
tinytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&#39;runoob&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span>             <span class="token comment"># 输出完整元组</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># 输出元组的第一个元素</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 输出从第二个元素开始到第三个元素</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 输出从第三个元素开始的所有元素</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>tinytuple <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment"># 输出两次元组</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span> <span class="token operator">+</span> tinytuple<span class="token punctuation">)</span> <span class="token comment"># 连接元组</span>

tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 空元组</span>
tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># 一个元素，需要在元素后添加逗号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>string、list 和 tuple 都属于 sequence（序列）。<br> 元祖不可以进行的操作：append，insert，pop，del，remove......</p><h3 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合" aria-hidden="true">#</a> Set（集合）</h3><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。<br> 基本功能是进行成员关系测试和删除重复元素。<br> 可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sites <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Facebook&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Zhihu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Baidu&#39;</span><span class="token punctuation">}</span> <span class="token comment">#去重</span>
a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;abracadabra&#39;</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;alacazam&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的差集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的并集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的交集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 中不同时存在的元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dictionary-字典" tabindex="-1"><a class="header-anchor" href="#dictionary-字典" aria-hidden="true">#</a> Dictionary（字典）</h3><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。<br><strong>键(key)必须使用不可变类型。</strong><br> 在同一个字典中，<strong>键(key)必须是唯一的。</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;1 - 菜鸟教程&quot;</span>
<span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token string">&quot;2 - 菜鸟工具&quot;</span>

tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;runoob&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;site&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;www.runoob.com&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 输出键为 &#39;one&#39; 的值</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment"># 输出键为 2 的值</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">)</span>          <span class="token comment"># 输出完整的字典</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 输出所有键</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出所有值</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
tinydict<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;aa&#39;</span>
<span class="token keyword">del</span> tinydict<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
e <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#构造函数 dict() 可以直接从键值对序列中构建字典</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">函数及描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">dict.clear() 删除字典内所有元素</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">dict.copy() 返回一个字典的浅复制</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">dict.fromkeys(seq[, val]) 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">dict.get(key, default=None)返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">dict.has_key(key) 如果键在字典dict里返回true，否则返回false</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">dict.items() 以<strong>列表返回可遍历的(键, 值) 元组数组</strong> 转换成list还需强转</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">dict.keys() 以列表返回一个字典所有的键</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">dict.setdefault(key, default=None) 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">dict.update(dict2)把字典dict2的键/值对更新到dict里</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">dict.values()以列表返回字典中的所有值</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">pop(key[,default])删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">popitem()返回并删除字典中的最后一对键和值。</td></tr></tbody></table><h3 id="python数据类型转换" tabindex="-1"><a class="header-anchor" href="#python数据类型转换" aria-hidden="true">#</a> Python数据类型转换</h3>`,32),k=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"函数"),n("th",{style:{"text-align":"left"}},"描述")])],-1),m=n("tr",null,[n("td",{style:{"text-align":"left"}},"int(x [,base])"),n("td",{style:{"text-align":"left"}},"将x转换为一个整数，base为该数为几进制")],-1),b=n("tr",null,[n("td",{style:{"text-align":"left"}},"float(x)"),n("td",{style:{"text-align":"left"}},"将x转换到一个浮点数")],-1),v={style:{"text-align":"left"}},h={href:"https://www.runoob.com/python3/python-func-complex.html",target:"_blank",rel:"noopener noreferrer"},y=n("td",{style:{"text-align":"left"}},"创建一个复数",-1),g={style:{"text-align":"left"}},f={href:"https://www.runoob.com/python3/python-func-str.html",target:"_blank",rel:"noopener noreferrer"},x=n("td",{style:{"text-align":"left"}},"将对象 x 转换为字符串",-1),w={style:{"text-align":"left"}},_={href:"https://www.runoob.com/python3/python-func-repr.html",target:"_blank",rel:"noopener noreferrer"},q=n("td",{style:{"text-align":"left"}},"将对象 x 转换为表达式字符串",-1),T={style:{"text-align":"left"}},F={href:"https://www.runoob.com/python3/python-func-eval.html",target:"_blank",rel:"noopener noreferrer"},P=n("td",{style:{"text-align":"left"}},"用来计算在字符串中的有效Python表达式,并返回一个对象",-1),N={style:{"text-align":"left"}},S={href:"https://www.runoob.com/python3/python3-func-tuple.html",target:"_blank",rel:"noopener noreferrer"},E=n("td",{style:{"text-align":"left"}},"将序列 s 转换为一个元组",-1),L={style:{"text-align":"left"}},z={href:"https://www.runoob.com/python3/python3-att-list-list.html",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"left"}},"将序列 s 转换为一个列表",-1),V={style:{"text-align":"left"}},G={href:"https://www.runoob.com/python3/python-func-set.html",target:"_blank",rel:"noopener noreferrer"},I=n("td",{style:{"text-align":"left"}},"转换为可变集合",-1),D={style:{"text-align":"left"}},R={href:"https://www.runoob.com/python3/python-func-dict.html",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"left"}},"创建一个字典。d 必须是一个 (key, value)元组序列。",-1),A={style:{"text-align":"left"}},C={href:"https://www.runoob.com/python3/python-func-frozenset.html",target:"_blank",rel:"noopener noreferrer"},O=n("td",{style:{"text-align":"left"}},"转换为不可变集合",-1),W={style:{"text-align":"left"}},Z={href:"https://www.runoob.com/python3/python-func-chr.html",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"left"}},"将一个整数转换为一个字符",-1),J={style:{"text-align":"left"}},K={href:"https://www.runoob.com/python3/python-func-ord.html",target:"_blank",rel:"noopener noreferrer"},M=n("td",{style:{"text-align":"left"}},"将一个字符转换为它的整数值",-1),Q={style:{"text-align":"left"}},U={href:"https://www.runoob.com/python3/python-func-hex.html",target:"_blank",rel:"noopener noreferrer"},X=n("td",{style:{"text-align":"left"}},"将一个整数转换为一个十六进制字符串",-1),Y={style:{"text-align":"left"}},$={href:"https://www.runoob.com/python3/python-func-oct.html",target:"_blank",rel:"noopener noreferrer"},nn=n("td",{style:{"text-align":"left"}},"将一个整数转换为一个八进制字符串",-1),sn=e(`<h2 id="_2、注释" tabindex="-1"><a class="header-anchor" href="#_2、注释" aria-hidden="true">#</a> 2、注释</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 这是一个注释</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
这是多行注释，用三个单引号
这是多行注释，用三个单引号 
这是多行注释，用三个单引号
&#39;&#39;&#39;</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
这是多行注释，用三个双引号
这是多行注释，用三个双引号 
这是多行注释，用三个双引号
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、运算符" tabindex="-1"><a class="header-anchor" href="#_3、运算符" aria-hidden="true">#</a> 3、运算符</h2><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><table><thead><tr><th>and</th><th>x and y</th><th>布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</th><th>(a and b) 返回 20。</th></tr></thead><tbody><tr><td><strong>or</strong></td><td><strong>x or y</strong></td><td><strong>布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</strong></td><td><strong>(a or b) 返回 10。</strong></td></tr><tr><td><strong>not</strong></td><td><strong>not x</strong></td><td><strong>布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</strong></td><td><strong>not(a and b) 返回 False</strong></td></tr></tbody></table><h3 id="python成员运算符" tabindex="-1"><a class="header-anchor" href="#python成员运算符" aria-hidden="true">#</a> Python成员运算符</h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">in</td><td style="text-align:left;">如果在指定的序列中找到值返回 True，否则返回 False。</td><td style="text-align:left;">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td style="text-align:left;">not in</td><td style="text-align:left;">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td style="text-align:left;">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token number">20</span>
<span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;1 - 变量 a 在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;1 - 变量 a 不在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span> b <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;2 - 变量 b 不在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;2 - 变量 b 在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
 
<span class="token comment">## 修改变量 a 的值</span>
a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;3 - 变量 a 在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;3 - 变量 a 不在给定的列表中 list 中&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python身份运算符" tabindex="-1"><a class="header-anchor" href="#python身份运算符" aria-hidden="true">#</a> Python身份运算符</h3><p>身份运算符用于比较两个对象的存储单元<br><strong>id()</strong> 函数用于获取对象内存地址。</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">is</td><td style="text-align:left;">is 是判断两个标识符是不是引用自一个对象</td><td style="text-align:left;"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td style="text-align:left;">is not</td><td style="text-align:left;">is not 是判断两个标识符是不是引用自不同对象</td><td style="text-align:left;"><strong>x is not y</strong> ， 类似 <strong>id(x) != id(y)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><h2 id="_4、分支循环" tabindex="-1"><a class="header-anchor" href="#_4、分支循环" aria-hidden="true">#</a> 4、分支循环</h2><h3 id="_1、if" tabindex="-1"><a class="header-anchor" href="#_1、if" aria-hidden="true">#</a> 1、IF</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> 判断条件：
    执行语句……
<span class="token keyword">else</span>：
    执行语句……
    
<span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>
    执行语句<span class="token number">1</span>……
<span class="token keyword">elif</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span>
    执行语句<span class="token number">2</span>……
<span class="token keyword">elif</span> 判断条件<span class="token number">3</span><span class="token punctuation">:</span>
    执行语句<span class="token number">3</span>……
<span class="token keyword">else</span><span class="token punctuation">:</span>
    执行语句<span class="token number">4</span>……
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、while" tabindex="-1"><a class="header-anchor" href="#_2、while" aria-hidden="true">#</a> 2、While</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> 判断条件<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>：
    执行语句<span class="token punctuation">(</span>statements<span class="token punctuation">)</span>……
    
count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token string">&#39;The count is:&#39;</span><span class="token punctuation">,</span> count
   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
 
<span class="token keyword">print</span> <span class="token string">&quot;Good bye!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、for" tabindex="-1"><a class="header-anchor" href="#_3、for" aria-hidden="true">#</a> 3、For</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>
   statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">&quot;abcdefg&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">89398</span><span class="token punctuation">,</span><span class="token string">&quot;qqq&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、break-continue" tabindex="-1"><a class="header-anchor" href="#_4、break-continue" aria-hidden="true">#</a> 4、break，continue</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">89398</span><span class="token punctuation">,</span><span class="token string">&quot;qqq&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、pass" tabindex="-1"><a class="header-anchor" href="#_5、pass" aria-hidden="true">#</a> 5、pass</h3><p><strong>pass</strong> 不做任何事情，一般用做占位语句。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 输出 Python 的每个字母</span>
<span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">:</span>
   <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">:</span>
      <span class="token keyword">pass</span>
      <span class="token keyword">print</span> <span class="token string">&#39;这是 pass 块&#39;</span>
   <span class="token keyword">print</span> <span class="token string">&#39;当前字母 :&#39;</span><span class="token punctuation">,</span> letter
<span class="token keyword">print</span> <span class="token string">&quot;Good bye!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、math模块-cmath-模块" tabindex="-1"><a class="header-anchor" href="#_5、math模块-cmath-模块" aria-hidden="true">#</a> 5、math模块，cmath 模块</h2><p>Python 中数学运算常用的函数基本都在 math 模块、cmath 模块中。<br> Python math 模块提供了许多对浮点数的数学运算函数。<br> Python cmath 模块包含了一些用于复数运算的函数。<br> cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。<br> 要使用 math 或 cmath 函数必须先导入：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#要使用 math 或 cmath 函数必须先导入：</span>
<span class="token keyword">import</span> math
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python数学函数" tabindex="-1"><a class="header-anchor" href="#python数学函数" aria-hidden="true">#</a> Python数学函数</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">返回值 ( 描述 )</th></tr></thead><tbody><tr><td style="text-align:left;">abs(x)</td><td style="text-align:left;">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td style="text-align:left;">ceil(x)</td><td style="text-align:left;">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td style="text-align:left;">cmp(x, y)</td><td style="text-align:left;">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</td></tr><tr><td style="text-align:left;">exp(x)</td><td style="text-align:left;">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td style="text-align:left;">fabs(x)</td><td style="text-align:left;">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td style="text-align:left;">floor(x)</td><td style="text-align:left;">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td style="text-align:left;">log(x)</td><td style="text-align:left;">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td style="text-align:left;">log10(x)</td><td style="text-align:left;">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td style="text-align:left;">max(x1, x2,...)</td><td style="text-align:left;">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td style="text-align:left;">min(x1, x2,...)</td><td style="text-align:left;">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td style="text-align:left;">modf(x)</td><td style="text-align:left;">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td style="text-align:left;">pow(x, y)</td><td style="text-align:left;">x**y 运算后的值。</td></tr><tr><td style="text-align:left;"><strong>round(x [,n])</strong></td><td style="text-align:left;">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td></tr><tr><td style="text-align:left;">sqrt(x)</td><td style="text-align:left;">返回数字x的平方根</td></tr></tbody></table><h3 id="python随机数函数" tabindex="-1"><a class="header-anchor" href="#python随机数函数" aria-hidden="true">#</a> Python随机数函数</h3><p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p><p>Python包含以下常用随机数函数：</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">choice(seq)</td><td style="text-align:left;">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td style="text-align:left;">randrange ([start,] stop [,step])</td><td style="text-align:left;">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td style="text-align:left;">random()</td><td style="text-align:left;">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td style="text-align:left;">seed([x])</td><td style="text-align:left;">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td style="text-align:left;">shuffle(lst)</td><td style="text-align:left;">将序列的所有元素随机排序</td></tr><tr><td style="text-align:left;">uniform(x, y)</td><td style="text-align:left;">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#返回0-10的数</span>
random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#返回0-1的数</span>
random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#随机生成一个50-100的实数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、python-函数" tabindex="-1"><a class="header-anchor" href="#_6、python-函数" aria-hidden="true">#</a> 6、Python 函数</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> 函数名（参数列表）<span class="token punctuation">:</span>
    函数体
<span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span> parameters <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">&quot;函数_文档字符串&quot;</span>
   function_suite
   <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span>
        <span class="token keyword">return</span> a
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> b
a <span class="token operator">=</span> <span class="token number">4</span>
b <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#可变参数</span>
<span class="token comment">#加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">&quot;打印任何传入的参数&quot;</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;输出: &quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>vartuple<span class="token punctuation">)</span>
<span class="token comment">#加了两个星号 ** 的参数会以字典的形式导入。</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">&quot;打印任何传入的参数&quot;</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;输出: &quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span>
<span class="token comment">#如果单独出现星号 *，则星号 * 后的参数必须用关键字传入：</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment"># 报错</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError<span class="token punctuation">:</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">3</span> were given
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 正常</span>
<span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、输入输出" tabindex="-1"><a class="header-anchor" href="#_7、输入输出" aria-hidden="true">#</a> 7、输入输出</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#print</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;4654
45665
46545879&#39;&#39;&#39;</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> inpute<span class="token punctuation">(</span><span class="token string">&quot;plz input a number:&quot;</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;plz inpute a number:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;haha:&quot;</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5.5</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>b<span class="token punctuation">)</span>

c <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">/</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token string">&quot;.2%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#15.00% 两位小数，百分数形式</span>

a <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;bbb&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{0}A{1}B&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">&quot;打印任何传入的参数&quot;</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;输出: &quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>vartuple<span class="token punctuation">)</span>
 
<span class="token comment">## 调用printinfo 函数</span>
printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span>

<span class="token comment">#加了两个星号 ** 的参数会以字典的形式导入。</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token string">&quot;打印任何传入的参数&quot;</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;输出: &quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span>
<span class="token comment">## 调用printinfo 函数</span>
printinfo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、file方法" tabindex="-1"><a class="header-anchor" href="#_8、file方法" aria-hidden="true">#</a> 8、File方法</h2><h4 id="open-方法" tabindex="-1"><a class="header-anchor" href="#open-方法" aria-hidden="true">#</a> open() 方法</h4><p>Python <strong>open()</strong> 方法用于打开一个文件，并返回文件对象。<br> 在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 <strong>OSError</strong>。<br> **注意：**使用 <strong>open()</strong> 方法一定要保证关闭文件对象，即调用 <strong>close()</strong> 方法。<br><strong>open()</strong> 函数常用形式是接收两个参数：文件名(file)和模式(mode)。</p><h2 id="_9、内置函数" tabindex="-1"><a class="header-anchor" href="#_9、内置函数" aria-hidden="true">#</a> 9、内置函数</h2><p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">&quot;5.5&quot;</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2.2</span> <span class="token comment">#去掉字符串的引号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,44);function an(tn,en){const a=o("ExternalLinkIcon");return l(),i("div",null,[r,c(" more "),d,n("table",null,[k,n("tbody",null,[m,b,n("tr",null,[n("td",v,[s("[complex(real "),n("a",h,[s(",imag])"),t(a)])]),y]),n("tr",null,[n("td",g,[n("a",f,[s("str(x)"),t(a)])]),x]),n("tr",null,[n("td",w,[n("a",_,[s("repr(x)"),t(a)])]),q]),n("tr",null,[n("td",T,[n("a",F,[s("eval(str)"),t(a)])]),P]),n("tr",null,[n("td",N,[n("a",S,[s("tuple(s)"),t(a)])]),E]),n("tr",null,[n("td",L,[n("a",z,[s("list(s)"),t(a)])]),B]),n("tr",null,[n("td",V,[n("a",G,[s("set(s)"),t(a)])]),I]),n("tr",null,[n("td",D,[n("a",R,[s("dict(d)"),t(a)])]),j]),n("tr",null,[n("td",A,[n("a",C,[s("frozenset(s)"),t(a)])]),O]),n("tr",null,[n("td",W,[n("a",Z,[s("chr(x)"),t(a)])]),H]),n("tr",null,[n("td",J,[n("a",K,[s("ord(x)"),t(a)])]),M]),n("tr",null,[n("td",Q,[n("a",U,[s("hex(x)"),t(a)])]),X]),n("tr",null,[n("td",Y,[n("a",$,[s("oct(x)"),t(a)])]),nn])])]),sn])}const ln=p(u,[["render",an],["__file","python基础语法.html.vue"]]);export{ln as default};
