import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as n,e as t,b as a,d as l,f as h}from"./app-c6b1ac30.js";const s={},o=a("h2",{id:"初识虚拟机",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#初识虚拟机","aria-hidden":"true"},"#"),l(" 初识虚拟机")],-1),c=a("p",null,[l("JVM 全称 Java Virtual Machine，即 Java 虚拟机"),a("br"),l(" Java 虚拟机的职责是运行字节码文件")],-1),u=h('<p>JVM 三大核心功能：</p><ul><li>JVM 包内存管理 <ul><li>自动为对象，方法等分配内存</li><li>自动垃圾回收机制，回收不再使用的对象</li></ul></li><li>解释执行虚拟机指令 <ul><li>对字节码文件中的指令实时解释成机器码，让计算机执行</li></ul></li><li>及时编译 <ul><li>对热点代码进行优化，提升执行效率</li></ul></li></ul><p>常见的 Java 虚拟机：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20231114225258529.png" alt="image-20231114225258529" loading="lazy"></p><p>JVM 的组成：</p><ul><li>类加载器 ClassLoader</li><li>运行时数据区（JVM 管理的内存）</li><li>执行引擎（即使编译器、解释器、垃圾回收器）</li><li>本地接口（通常为 native 修饰）</li></ul><h2 id="字节码文件的组成" tabindex="-1"><a class="header-anchor" href="#字节码文件的组成" aria-hidden="true">#</a> 字节码文件的组成</h2><ul><li>基本信息： <ul><li>魔数、字节码文件对应的 Java 版本号</li><li>访问标识（public final 等）</li><li>父类和接口</li></ul></li><li>常量池 <ul><li>保存字符串常量、类或接口名、字段名</li></ul></li><li>字段 <ul><li>当前类或接口声明的字段信息</li></ul></li><li>方法 <ul><li>当前类或接口声明的方法信息</li></ul></li><li>属性 <ul><li>类的属性、比如源码文件名、内部类的列表等</li></ul></li></ul><h2 id="类的生命周期" tabindex="-1"><a class="header-anchor" href="#类的生命周期" aria-hidden="true">#</a> 类的生命周期</h2><p>类的生命周期：<br> 加载、连接、初始化、使用、卸载</p><h3 id="加载阶段" tabindex="-1"><a class="header-anchor" href="#加载阶段" aria-hidden="true">#</a> 加载阶段</h3><ol><li>类加载器根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息</li><li>类加载器在加载完之后，Java 虚拟机会将字节码中的信息保存到方法区中</li><li>类加载器在加载完类之后，Java 虚拟机会将字节码中的信息保存到内存的方法区中<br> 生成一个 InstanceKlass 对象，保存类的所有信息，里面包含实现特定功能比如多态的信息</li><li>同时，Java 虚拟机还在堆中生成一份与方法区中数据类似的 Java.lang.Class 对象<br> 作用在 Java 代码中去获取类的信息以及存储静态字段的数据（JDK 8 以后）</li></ol><h3 id="连接阶段" tabindex="-1"><a class="header-anchor" href="#连接阶段" aria-hidden="true">#</a> 连接阶段</h3><ol><li>验证：验证验证内容是否满足《Java 虚拟机规范》</li><li>准备：给静态变量赋初值</li><li>解析：将常量池中的符号引用替换成指向内存的直接引用</li></ol><h3 id="初始化阶段" tabindex="-1"><a class="header-anchor" href="#初始化阶段" aria-hidden="true">#</a> 初始化阶段</h3><ul><li>初始化阶段会执行静态代码块中的代码，并为静态变量赋值</li><li>初始化阶段会执行字节码文件中的 clinit 部分的字节码指令</li></ul><h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器" aria-hidden="true">#</a> 类加载器</h2><p>类加载器（ClassLoader）是 Java 虚拟机提供给应用程序去实现获取类和接口字节码数据的技术</p><p>类加载器分为两类</p><ul><li>虚拟机底层源码实现（加载程序运行时的基础类，如 java.lang.String）</li><li>Java 代码中实现：JDK 中默认提供或自定义（如继承自抽象类 ClassLoader）</li></ul><h3 id="jdk8-及以前的类加载器" tabindex="-1"><a class="header-anchor" href="#jdk8-及以前的类加载器" aria-hidden="true">#</a> JDK8 及以前的类加载器</h3><p>虚拟机底层实现（C++）：</p><ul><li>启动类加载器 BootStrap：加载 Java 中最核心的类<br> Java 实现：</li><li>扩展类加载器 Extension：允许扩展 Java 中比较通用的类</li><li>应用程序类加载器 Application：加载应用使用的类</li></ul><h3 id="jdk9-及以后的类加载器" tabindex="-1"><a class="header-anchor" href="#jdk9-及以后的类加载器" aria-hidden="true">#</a> JDK9 及以后的类加载器</h3>',24);function p(J,m){const i=r("Mermaid");return d(),n("div",null,[o,c,t(i,{id:"mermaid-6",code:"eJzT1dXlKsksyUm1UvBKLEtUeL6i++mu/ie7+57tmvBk9+LnCxqfdmx4sX/Ci4U9z2e1vNjfDlTABdKUlpNfnpyRWFSi4BPEpQAEmSnRSnpZIDOeTWt/snubUqyCrq6CEkgkWeH5nmkv1k9UAorYKTgB1SXnJBYXwxWC1L1Yvvhle9fTmSvUvDxD3u/peLJ3//MpKxTABkLsf7+nE2KAc7TSszm7gEqf9q9/PqENqBPoNIhjlWK5AAtbZqI="}),u])}const _=e(s,[["render",p],["__file","JVM.html.vue"]]);export{_ as default};
