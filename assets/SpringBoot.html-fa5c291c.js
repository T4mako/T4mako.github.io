import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as l,b as n,d as s,e as t,f as e}from"./app-712b5fc9.js";const u={},r=n("h2",{id:"_1、spring与springboot",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、spring与springboot","aria-hidden":"true"},"#"),s(" 1、Spring与SpringBoot")],-1),d=n("p",null,[s("Spring的生态：web开发、数据访问、安全控制、分布式、消息服务、移动开发、批处理、......"),n("br"),s(" Spring5重大升级：响应式编程、响应式编程")],-1),k=e("<p>SpringBoot优点：创建独立Spring应用、内嵌web服务器、自动starter依赖，简化构建配置、自动配置Spring以及第三方功能、提供生产级别的监控、健康检查及外部化配置、无代码生成、无需编写XML<br> SpringBoot缺点：称版本帝，迭代快，需要时刻关注变化、封装太深，内部原理复杂，不容易精通</p><p>时代背景：<br><strong>微服务：</strong><br> 微服务是一种架构风格<br> 一个应用拆分为一组小型服务<br> 每个服务运行在自己的进程内，也就是可独立部署和升级<br> 服务之间使用轻量级HTTP交互<br> 服务围绕业务功能拆分<br> 可以由全自动部署机制独立部署<br> 去中心化，服务自治。服务可以使用不同的语言、不同的存储技术<br> **分布式 **<br><strong>云原生</strong></p>",2),m={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/documentation.html#documentation",target:"_blank",rel:"noopener noreferrer"},v=e(`<h2 id="_2、springboot2入门" tabindex="-1"><a class="header-anchor" href="#_2、springboot2入门" aria-hidden="true">#</a> 2、SpringBoot2入门</h2><h3 id="_1、创建maven工程引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、创建maven工程引入依赖" aria-hidden="true">#</a> 1、创建maven工程引入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、创建主程序" tabindex="-1"><a class="header-anchor" href="#_2、创建主程序" aria-hidden="true">#</a> 2、创建主程序</h3><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>/**
 * 主程序类
 * @SpringBootApplication：这是一个SpringBoot应用
 */
@SpringBootApplication
public class MainApplication {
    public static void main(String[] args) {
        SpringApplication.run(MainApplication.class,args);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、编写业务" tabindex="-1"><a class="header-anchor" href="#_3、编写业务" aria-hidden="true">#</a> 3、编写业务</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span> <span class="token comment">//responsebody + controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handle01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello, Spring Boot 2!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、测试" tabindex="-1"><a class="header-anchor" href="#_4、测试" aria-hidden="true">#</a> 4、测试</h3><p><strong>直接运行main方法</strong></p><h3 id="_5、简化配置" tabindex="-1"><a class="header-anchor" href="#_5、简化配置" aria-hidden="true">#</a> 5、简化配置</h3><p>在 resources 中创建 <strong>application.properties</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6、简化部署" tabindex="-1"><a class="header-anchor" href="#_6、简化部署" aria-hidden="true">#</a> 6、简化部署</h3><p>如果添加插件启动时报错，可以尝试在<code>&lt;plugin&gt;</code>标签内部添加设置版本号的version标签，版本号要与Spring版本号一致</p><p>在pom.xml中添加：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把项目打成 <strong>jar 包</strong>，直接在目标服务器执行即可。</p><p>注意点：<br> 有的时候cmd命令启动不了springboot项目，可能是因为在属性中开启了【快速编辑模式】，取消方法：右击cmd控制台的窗口上方标题区域打开【选项】取消勾选【快去编辑模式】</p><h2 id="_3、了解自动配置原理" tabindex="-1"><a class="header-anchor" href="#_3、了解自动配置原理" aria-hidden="true">#</a> 3、了解自动配置原理</h2><h3 id="_1、springboot特点" tabindex="-1"><a class="header-anchor" href="#_1、springboot特点" aria-hidden="true">#</a> 1、SpringBoot特点</h3><h4 id="_1、依赖管理" tabindex="-1"><a class="header-anchor" href="#_1、依赖管理" aria-hidden="true">#</a> 1、依赖管理</h4><h5 id="_1-父项目做依赖管理" tabindex="-1"><a class="header-anchor" href="#_1-父项目做依赖管理" aria-hidden="true">#</a> ① 父项目做依赖管理</h5><p><strong>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--父项目的父项目--&gt;</span>
<span class="token comment">&lt;!--其中几乎声明了所有开发中常用的依赖的 版本号 ,自动版本仲裁机制--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--依赖管理--&gt;</span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以修改默认版本号</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。
	2、在 当前 项目里面重写配置--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.43<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2starter场景启动器" tabindex="-1"><a class="header-anchor" href="#_2starter场景启动器" aria-hidden="true">#</a> ②starter场景启动器</h5>`,27),g=n("strong",null,"spring-boot-starter-*",-1),b=n("strong",null,"官方starter",-1),h=n("br",null,null,-1),y=n("strong",null,"starter",-1),f=n("strong",null,"依赖",-1),q=n("strong",null,"自动引入",-1),x=n("br",null,null,-1),w=n("br",null,null,-1),_={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),C=n("strong",null,"*-spring-boot-starter",-1),j=n("strong",null,"第三方starter",-1),M=n("br",null,null,-1),P=n("strong",null,"场景启动器",-1),A=n("strong",null,"最底层的依赖",-1),I=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--所有场景启动器最底层的依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：无需关注版本号，自动版本仲裁:<br> 1、引入依赖默认都可以不写版本<br> 2、引入非版本仲裁的jar，要写版本号。</p><h4 id="_2、自动配置" tabindex="-1"><a class="header-anchor" href="#_2、自动配置" aria-hidden="true">#</a> 2、自动配置</h4><h5 id="_1、自动配好tomcat" tabindex="-1"><a class="header-anchor" href="#_1、自动配好tomcat" aria-hidden="true">#</a> 1、自动配好Tomcat</h5><p>​ 引入Tomcat依赖<br> ​ 配置Tomcat</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、自动配好springmvc" tabindex="-1"><a class="header-anchor" href="#_2、自动配好springmvc" aria-hidden="true">#</a> 2、自动配好SpringMVC</h5><p>​ 引入 SpringMVC 全套组件<br> ​ 自动配好 SpringMVC 常用组件（功能）</p><h5 id="_3、自动配好web常见功能-如-字符编码问题" tabindex="-1"><a class="header-anchor" href="#_3、自动配好web常见功能-如-字符编码问题" aria-hidden="true">#</a> 3、自动配好Web常见功能，如：字符编码问题</h5><p>​ SpringBoot 帮我们配置好了所有 web 开发的常见场景<br> ​ <em>字符过滤器</em> 等</p><h5 id="_4、默认的包扫描" tabindex="-1"><a class="header-anchor" href="#_4、默认的包扫描" aria-hidden="true">#</a> 4、默认的包扫描</h5><p>**主程序所在包 **及其下面的所有 <strong>子包</strong> 里面的组件都会被默认扫描进来<br><strong>无需以前的包扫描配置</strong></p><p><em>想要改变扫描路径</em>，在 MainApplication上添加<br><strong>@SpringBootApplication(scanBasePackages=&quot;com.t4mako&quot;)</strong> 或者 <strong>@ComponentScan指定扫描路径</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
等同于
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.t4mako.boot&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、各种配置拥有默认值" tabindex="-1"><a class="header-anchor" href="#_5、各种配置拥有默认值" aria-hidden="true">#</a> 5、各种配置拥有默认值</h5><p>默认配置最终都是映射到某个类上，（MultipartProperties类）<br> 配置文件的值（<strong>application.properties</strong>）最终会 <strong>绑定每个类上</strong>，这个类会在容器中创建对象</p><h5 id="_6、按需加载所有自动配置项" tabindex="-1"><a class="header-anchor" href="#_6、按需加载所有自动配置项" aria-hidden="true">#</a> 6、按需加载所有自动配置项</h5><p>非常多的 starter<br><strong>引入了哪些场景</strong> 这个场景的 <strong>自动配置才会被开启</strong><br> SpringBoot 的 <strong>所有自动配置功能</strong> 都在 <strong>spring-boot-autoconfigur包</strong> 里面（不一定都生效）</p><h3 id="_2、容器功能-关键注解-重要" tabindex="-1"><a class="header-anchor" href="#_2、容器功能-关键注解-重要" aria-hidden="true">#</a> 2、容器功能(关键注解-重要)</h3><p><mark>spring boot 项目默认会扫描主类同级的包</mark></p><h4 id="_1、组件相关" tabindex="-1"><a class="header-anchor" href="#_1、组件相关" aria-hidden="true">#</a> 1、组件相关</h4><h5 id="_1、-configuration" tabindex="-1"><a class="header-anchor" href="#_1、-configuration" aria-hidden="true">#</a> 1、@Configuration</h5><p><strong>@Configuration <strong>==告诉SpringBoot这是一个</strong>配置类 == 配置文件（创建bean）</strong>==<br><strong>在类上添加 Configration 类似于 Spring 中的 beans.xml</strong><br><strong>标注了@Configuration 注解的类本身也是一个组件</strong></p><p>参数 proxyBeanMethods：<br><strong>true(默认)：单实例<br> false：（类、方法）被调用时返回是新创建的</strong></p><p>在类<strong>方法</strong>中添加**@Bean**注解：<br><mark>Id = 方法名，容器中的实例 = 返回的值</mark></p><p><strong>Full(true)模式</strong> 与 <strong>Lite(false)模式</strong>：<br> **配置类 **组件之间 <strong>无依赖关系</strong>（没有相互调用）用Lite模式加速容器启动过程，减少判断 <strong>false</strong><br> **配置类 **组件之间 <strong>有依赖关系</strong>，方法会被调用得到之前单实例组件 <strong>true</strong></p><p><code>Full模式获取组件时，会先检查容器中是否有该组件，Lite模式不会检查容器，直接创建一个新的组件返回</code></p><p><em>Full(proxyBeanMethods = true)（保证每个</em>*@Bean方法<strong>被调用多少次返回的组件都是</strong>单实例<strong>的）<br> Lite(proxyBeanMethods = false)（每个</strong>@Bean方法<strong>被调用多少次返回的组件都是</strong>新创建**的）*</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">//告诉SpringBoot这是一个配置类 == 配置文件（创建bean）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>  <span class="token comment">//id = user01</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> zhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//user组件依赖了Pet组件</span>
        zhangsan<span class="token punctuation">.</span><span class="token function">setPet</span><span class="token punctuation">(</span><span class="token function">tomcatPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> zhangsan<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">tomcatPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">&quot;tomcat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//################################@Configuration测试代码如下########################################</span>
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.boot&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1、返回我们IOC容器</span>
        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2、查看容器里面的组件</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//3、从容器中获取组件</span>
        <span class="token class-name">Pet</span> tom01 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Pet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Pet</span> tom02 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Pet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;组件：&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>tom01 <span class="token operator">==</span> tom02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span>
        <span class="token class-name">MyConfig</span> bean <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果 @Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span>
        <span class="token comment">//保持组件单实例</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user1 <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user01 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user01&quot;</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Pet</span> tom <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Pet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户的宠物：&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>user01<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> tom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、-bean、-component、-controller、-service、-repository-持久层注解" tabindex="-1"><a class="header-anchor" href="#_2、-bean、-component、-controller、-service、-repository-持久层注解" aria-hidden="true">#</a> 2、@Bean、@Component、@Controller、@Service、@Repository（持久层注解）</h5><p>@Repository 注解可以将这个数据访问对象标记为 Spring 应用程序上下文中的 bean，从而使得我们可以在其他组件中使用该 bean。</p><p>常规组件</p><h5 id="_3、-componentscan、-import" tabindex="-1"><a class="header-anchor" href="#_3、-componentscan、-import" aria-hidden="true">#</a> 3、@ComponentScan、@Import</h5><p><strong>@Import</strong>：标注在有组件注解的类上（Configuration，Controller...）</p><p><strong>用于导入指定类型的组件并自动创建（放到容器中）</strong><br><strong>默认id = 全类名</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DBHelper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//默认id全类名</span>
<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">//告诉SpringBoot这是一个配置类==配置文件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、-conditional" tabindex="-1"><a class="header-anchor" href="#_4、-conditional" aria-hidden="true">#</a> 4、@Conditional</h5><p>条件装配：<strong>满足</strong> Conditional指定的 <strong>条件</strong> 时才进行组件（bean）注入</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120113626334.png" alt="" loading="lazy"></p><p>该注解可以标注在类上或方法上（类/方法是否生效）</p><p>例子：<br><strong>@ConditionalOnBean</strong>(name = &quot;tom&quot;) 容器中 <strong>有</strong> tom组件才生效<br><strong>@ConditionalOnMissingBean</strong>(name = &quot;tom&quot;) 容器中 <strong>没有</strong> tom组件才生效</p><h4 id="_2、原生配置文件引入-importresource" tabindex="-1"><a class="header-anchor" href="#_2、原生配置文件引入-importresource" aria-hidden="true">#</a> 2、原生配置文件引入@ImportResource</h4><p><mark>在随意一个配置类(@Configuration)上编写</mark></p><p><em>在随意一个配置类(@Configuration)上编写</em><br><strong>@ImportResource注解可以帮助</strong><br><strong>导入编写的beans.xml的文件导入配置文件中的bean</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>======================有一文件beans.xml=========================
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>haha<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.atguigu.boot.bean.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zhangsan<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>18<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:beans.xml&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token class-name">MainApplication</span>测试<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
        <span class="token keyword">boolean</span> haha <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> hehe <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">&quot;hehe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;haha：&quot;</span><span class="token operator">+</span>haha<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hehe：&quot;</span><span class="token operator">+</span>hehe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、配置绑定-两种方法" tabindex="-1"><a class="header-anchor" href="#_3、配置绑定-两种方法" aria-hidden="true">#</a> 3、配置绑定 (两种方法)</h4><p>使用 Java 读取到 properties 文件中的内容，并且把它封装到 JavaBean 中，以供随时使用</p><p>只有在容器中的组件，才会拥有SpringBoot提供的强大功能</p><h5 id="_1、-configurationproperties" tabindex="-1"><a class="header-anchor" href="#_1、-configurationproperties" aria-hidden="true">#</a> 1、@ConfigurationProperties</h5><p>使用：<br> 该注解标注 <strong>在有组件注解的类</strong>上 （只有在 <strong>容器中的组件</strong> 才能有springboot的强大功能）<br><strong>@ConfigurationProperties(prefix = &quot;&quot;)<br> 表示在Application.properties中的前缀</strong><br> 将有这些前缀的属性的属性值赋值，并生成一个 bean 保存到容器中</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">mycar.brand</span><span class="token punctuation">=</span><span class="token value attr-value">lambo</span>
<span class="token key attr-name">mycar.price</span><span class="token punctuation">=</span><span class="token value attr-value">1000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;mycar&quot;</span><span class="token punctuation">)</span><span class="token comment">//表示properties文件中的前缀</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、-enableconfigurationproperties-configurationproperties" tabindex="-1"><a class="header-anchor" href="#_2、-enableconfigurationproperties-configurationproperties" aria-hidden="true">#</a> 2、@EnableConfigurationProperties + @ConfigurationProperties</h5><p>适用于需要将第三方的没有标注 @Component 的类引入到 IOC 中</p><p>使用：<br> 在配置类上写 <strong>@EnableConfigurationProperties(Car.class)</strong>，作用：<br> 开启Car <strong>类的属性配置绑定功能</strong><br> 把Car这个组件自动注入到容器中</p><p><strong>此时Car类中就不用写@component注解了</strong><br> （再通过@ConfigurationProperties配置属性）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 开启 Car 的属性配置并自动注入到容器中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;mycar&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、自动配置原理入门-给容器中自动注入组件" tabindex="-1"><a class="header-anchor" href="#_3、自动配置原理入门-给容器中自动注入组件" aria-hidden="true">#</a> 3、自动配置原理入门（给容器中自动注入组件）</h3><h4 id="_3-1、引导加载自动配置类" tabindex="-1"><a class="header-anchor" href="#_3-1、引导加载自动配置类" aria-hidden="true">#</a> 3.1、引导加载自动配置类</h4><p><strong>@SpringBootApplication=</strong><br><strong>@SpringBootConfiguration + @EnableAutoConfiguration + @ComponentScan(&quot;com.t4mako.boot&quot;)</strong></p><p>1、<em>@SpringBootConfiguration：</em><br> 相当于*@Configuration*。代表当前是一个配置类</p><p>2、<em>@ComponentScan</em>：<br> 指定扫描哪些，Spring注解</p><p>3、<em><strong>@EnableAutoConfiguration：</strong></em></p><p><strong>@EnableAutoConfiguration = @AutoConfigurationPackage + @Import</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfigurationPackage</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>① @AutoConfigurationPackage：</strong></p><p>自动配置包、指定了默认的包规则<br> 即 <strong>将MainApplication 所在包下所有组件导入进来</strong></p><p><em>点入@AutoConfigurationPackage：</em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationPackages<span class="token punctuation">.</span>Registrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//给容器中导入一个组件</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AutoConfigurationPackages.Registrar.class</strong>：<br> 利用Registrar给容器中导入一系列组件<br> 将指定的一个包下的所有组件导入进来，即<strong>MainApplication 所在包下</strong>。</p><p><strong>② @Import(AutoConfigurationImportSelector.class)</strong></p><p><em>AutoConfigurationImportSelector.class：</em><br> 1、利用getAutoConfigurationEntry(annotationMetadata)方法：给容器中批量导入一些组件<br> 2、调用<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code>：获取到所有需要导入到容器中的配置类<br> 3、利用工厂加载 <code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader);</code>得到所有的组件<br> 4、从META-INF/spring.factories位置来加载一个文件。<br> 默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件：<br> spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories</p><p>文件里面写死了spring-boot一启动就要给容器中加载的所有配置类（127个，往后的版本有更改）</p><h4 id="_3-2、按需开启自动配置项" tabindex="-1"><a class="header-anchor" href="#_3-2、按需开启自动配置项" aria-hidden="true">#</a> 3.2、按需开启自动配置项</h4><p>虽然我们127个场景的所有自动配置<strong>启动的时候默认全部加载</strong><br> xxxxAutoConfiguration按照<strong>条件装配</strong>规则（@Conditional），最终会<strong>按需配置</strong>。</p><h4 id="_3-3、修改默认配置" tabindex="-1"><a class="header-anchor" href="#_3-3、修改默认配置" aria-hidden="true">#</a> 3.3、修改默认配置</h4><p>给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">MultipartResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//容器中有这个类型组件</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token constant">MULTIPART_RESOLVER_BEAN_NAME</span><span class="token punctuation">)</span> <span class="token comment">//容器中没有这个名字 multipartResolver 的组件</span>
<span class="token keyword">public</span> <span class="token class-name">MultipartResolver</span> <span class="token function">multipartResolver</span><span class="token punctuation">(</span><span class="token class-name">MultipartResolver</span> resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span>
    <span class="token comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span>
    <span class="token comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span>
    <span class="token keyword">return</span> resolver<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//给容器中加入了文件上传解析器；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span>
<span class="token keyword">public</span> <span class="token class-name">CharacterEncodingFilter</span> <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：<br> SpringBoot先<strong>加载所有的自动配置类</strong>xxxxxAutoConfiguration<br> 每个自动配置类<strong>按照条件生效（不是全部）</strong>，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定<br> （对应注解*@EnableConfigurationProperties*）<br> 生效的 <strong>配置类</strong>就会<strong>给容器中装配很多组件</strong><br> 只要<strong>容器中有这些组件</strong>，相当于这些<strong>功能就有了</strong><br> 定制化配置：<br> 用户自己**@Bean替换底层组件**<br> 用户去看这个组件是获取的<strong>配置文件什么值就去修改</strong>。</p><p><strong>xxxxxAutoConfiguration ---&gt; 组件 ---&gt;</strong> <strong>xxxxProperties里面拿值 ----&gt; application.properties（修改）</strong></p><h4 id="_3-4最佳实践" tabindex="-1"><a class="header-anchor" href="#_3-4最佳实践" aria-hidden="true">#</a> 3.4最佳实践</h4>`,84),E=n("br",null,null,-1),R={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,[s("2、查看自动配置了哪些（选做）"),n("br"),s(" 自己分析，引入场景对应的自动配置一般都生效了"),n("br"),n("strong",null,"配置文件中debug=true"),s("开启"),n("strong",null,"自动配置报告"),s("。Negative（不生效）\\ Positive（生效）")],-1),T=n("br",null,null,-1),H=n("br",null,null,-1),D={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties",target:"_blank",rel:"noopener noreferrer"},U=n("br",null,null,-1),L=n("br",null,null,-1),J=n("br",null,null,-1),N=n("br",null,null,-1),F=n("br",null,null,-1),O=n("strong",null,"XXXXXCustomizer",-1),V=e(`<h3 id="_4、开发小技巧" tabindex="-1"><a class="header-anchor" href="#_4、开发小技巧" aria-hidden="true">#</a> 4、开发小技巧</h3><h4 id="_1、lombok" tabindex="-1"><a class="header-anchor" href="#_1、lombok" aria-hidden="true">#</a> 1、Lombok</h4><p><strong>简化JavaBean开发</strong></p><p>1、引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、搜索安装 lombak 插件</p><p>3、编写 JavaBean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>简化<span class="token class-name">JavaBean</span>开发<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token annotation punctuation">@NoArgsConstructor</span> <span class="token comment">//无参构造器</span>
<span class="token annotation punctuation">@AllArgsConstructor</span> <span class="token comment">//全参构造器</span>
<span class="token annotation punctuation">@Data</span> <span class="token comment">//get、set方法</span>
<span class="token annotation punctuation">@ToString</span> <span class="token comment">//toString方法</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span> <span class="token comment">//EqualsAndHashCode方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Pet</span> pet<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>简化日志开发<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handle01</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求进来了....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token string">&quot;Hello, Spring Boot 2!&quot;</span><span class="token operator">+</span><span class="token string">&quot;你好：&quot;</span><span class="token operator">+</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、dev-tools" tabindex="-1"><a class="header-anchor" href="#_2、dev-tools" aria-hidden="true">#</a> 2、dev-tools</h4><p>加入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目或者页面修改以后：<strong>Ctrl+F9 （重启）即可</strong></p><h4 id="_3、spring-initailizr-项目初始化向导" tabindex="-1"><a class="header-anchor" href="#_3、spring-initailizr-项目初始化向导" aria-hidden="true">#</a> 3、Spring Initailizr（项目初始化向导）</h4><p>创建新项目</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120164052376.png" alt="image-20230120164235192" loading="lazy"></p><p>选择需要的功能模块，boot版本等</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120164418965.png" alt="image-20230120164418965" loading="lazy"></p><p>自动引入依赖</p><p>自动创建项目结构：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120164443965.png" alt="image-20230120164443965" loading="lazy"></p><p>自动编写好主配置类：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120164502332.png" alt="image-20230120164502332" loading="lazy"></p><h2 id="_4、配置文件" tabindex="-1"><a class="header-anchor" href="#_4、配置文件" aria-hidden="true">#</a> 4、配置文件</h2><h3 id="_1、文件类型" tabindex="-1"><a class="header-anchor" href="#_1、文件类型" aria-hidden="true">#</a> 1、文件类型</h3><h4 id="_1、propertie" tabindex="-1"><a class="header-anchor" href="#_1、propertie" aria-hidden="true">#</a> 1、propertie</h4><p>同以前的 properties 用法</p><h4 id="_2、yaml" tabindex="-1"><a class="header-anchor" href="#_2、yaml" aria-hidden="true">#</a> 2、yaml</h4><h5 id="yaml简介" tabindex="-1"><a class="header-anchor" href="#yaml简介" aria-hidden="true">#</a> yaml简介：</h5><p>YAML 是 &quot;YAML Ain&#39;t Markup Language&quot;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言）。</p><p><strong>非常适合用来做以数据为中心的配置文件</strong></p><h5 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法：</h5><ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格（idea开发可以用）</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>&#39;#&#39;表示注释</li><li>字符串无需加引号，如果要加，&#39;&#39;与&quot;&quot;表示字符串内容 会被 转义/不转义</li></ul><h5 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型：</h5><p>字面量：单个的、不可再分的值。date、boolean、string、number、null</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">k</span><span class="token punctuation">:</span> v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对象：键值对的集合。map、hash、set、object</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">行内写法：  k</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>k1<span class="token punctuation">:</span>v1<span class="token punctuation">,</span>k2<span class="token punctuation">:</span>v2<span class="token punctuation">,</span>k3<span class="token punctuation">:</span>v3<span class="token punctuation">}</span>
<span class="token comment">#或</span>
<span class="token key atrule">k</span><span class="token punctuation">:</span> 
  <span class="token key atrule">k1</span><span class="token punctuation">:</span> v1
  <span class="token key atrule">k2</span><span class="token punctuation">:</span> v2
  <span class="token key atrule">k3</span><span class="token punctuation">:</span> v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组：一组按次序排列的值。array、list、queue</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">行内写法：  k</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token punctuation">]</span>
<span class="token comment">#或者</span>
<span class="token key atrule">k</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> v1
 <span class="token punctuation">-</span> v2
 <span class="token punctuation">-</span> v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例：</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Boolean</span> boss<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Pet</span> pet<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interests<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> animal<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> score<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> salarys<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allPets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Double</span> weight<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">## yaml表示以上对象</span>
<span class="token key atrule">person</span><span class="token punctuation">:</span>
  <span class="token key atrule">userName</span><span class="token punctuation">:</span> zhangsan
  <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2019/12/12 20<span class="token punctuation">:</span><span class="token datetime number">12:33</span>
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>
  <span class="token key atrule">pet</span><span class="token punctuation">:</span> 
    <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat
    <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">23.4</span>
  <span class="token key atrule">interests</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>篮球<span class="token punctuation">,</span>游泳<span class="token punctuation">]</span>
  <span class="token key atrule">animal</span><span class="token punctuation">:</span> 
    <span class="token punctuation">-</span> jerry
    <span class="token punctuation">-</span> mario
  <span class="token key atrule">score</span><span class="token punctuation">:</span>
    <span class="token key atrule">english</span><span class="token punctuation">:</span> 
      <span class="token key atrule">first</span><span class="token punctuation">:</span> <span class="token number">30</span>
      <span class="token key atrule">second</span><span class="token punctuation">:</span> <span class="token number">40</span>
      <span class="token key atrule">third</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">math</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">148</span><span class="token punctuation">]</span>
    <span class="token key atrule">chinese</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">first</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span><span class="token key atrule">second</span><span class="token punctuation">:</span> <span class="token number">136</span><span class="token punctuation">}</span>
  <span class="token key atrule">salarys</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3999</span><span class="token punctuation">,</span><span class="token number">4999.98</span><span class="token punctuation">,</span><span class="token number">5999.99</span><span class="token punctuation">]</span>
  <span class="token key atrule">allPets</span><span class="token punctuation">:</span>
    <span class="token key atrule">sick</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> tom<span class="token punctuation">}</span>
      <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> jerry<span class="token punctuation">,</span><span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">47</span><span class="token punctuation">}</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> mario<span class="token punctuation">,</span><span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">47</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何在其他类中使用yaml配置文件的值：<br> 在配置类中添加 <strong>@PropertySource</strong>注解指定要读取的配置文件路径。<br> Spring Boot 的组件中使用 <strong>@Value</strong>注解来读取这些属性值</p><h3 id="_2、配置提示-常用" tabindex="-1"><a class="header-anchor" href="#_2、配置提示-常用" aria-hidden="true">#</a> 2、配置提示（常用）</h3><p>自定义的类和配置文件绑定一般没有提示。<br> 若要有提示，可以增加下面配置：</p><p>pom.xml 增加：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--打包时可排除包--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、web开发" tabindex="-1"><a class="header-anchor" href="#_5、web开发" aria-hidden="true">#</a> 5、Web开发</h2><h3 id="_1、静态资源-欢迎页-图标" tabindex="-1"><a class="header-anchor" href="#_1、静态资源-欢迎页-图标" aria-hidden="true">#</a> 1、静态资源/欢迎页/图标</h3><h4 id="_1、静态资源" tabindex="-1"><a class="header-anchor" href="#_1、静态资源" aria-hidden="true">#</a> 1、静态资源</h4><h5 id="_1、静态资源访问" tabindex="-1"><a class="header-anchor" href="#_1、静态资源访问" aria-hidden="true">#</a> 1、静态资源访问</h5><p>静态资源放在类路径下：<br><strong>/static</strong> (或 <code>/public</code> 或 <code>/resources</code> 或 <code>/META-INF/resources</code></p><p>访问方式 ：<br> 当前项目根路径/ + 静态资源名</p><p>原理：<br> 静态映射/**（拦截所有请求）<br> 请求进来， <strong>先去找Controller看能不能处理</strong>。不能处理的所有请求又都交给 <strong>静态资源处理器</strong>。静态资源也找不到则响应404页面</p><p>改变默认的静态资源路径的方式：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /res/<span class="token important">**</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span> <span class="token comment">#可以是数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、静态资源访问前缀" tabindex="-1"><a class="header-anchor" href="#_2、静态资源访问前缀" aria-hidden="true">#</a> 2、静态资源访问前缀</h5><p>默认是无前缀的</p><p>修改带上前缀/res：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /res/<span class="token important">**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让拦截能区分出静态资源和动态资源，所以一般在静态资源前面加个前缀，拦截器在看到指定前缀时就放行，从而达到动态静态分开的目的</p><p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p><h5 id="_3、webjar" tabindex="-1"><a class="header-anchor" href="#_3、webjar" aria-hidden="true">#</a> 3、webjar</h5>`,63),W={href:"http://localhost:8080/webjars/jquery/3.5.1/jquery.js",target:"_blank",rel:"noopener noreferrer"},z=e(`<p>引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),X={href:"http://localhost:8080/webjars/jquery/3.5.1/jquery.js",target:"_blank",rel:"noopener noreferrer"},$=n("strong",null,"jquery/3.5.1/jquery.js",-1),G=e(`<h4 id="_2、欢迎页" tabindex="-1"><a class="header-anchor" href="#_2、欢迎页" aria-hidden="true">#</a> 2、欢迎页</h4><p><em><strong>创建欢迎页的两种方式：</strong></em></p><p><em><strong>1、静态资源路径下的index.html</strong></em><br> 可以配置静态资源路径<br> 但是不可以配置静态资源的<strong>访问前缀</strong>，否则导致index.html不能被默认访问</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
<span class="token comment">##  mvc:</span>
<span class="token comment">##    static-path-pattern: /res/**  （index在static下，要访问得添加/res/）</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/index/<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2、编写controller能处理 /index 请求</strong></em></p><h4 id="_3、自定义favicon" tabindex="-1"><a class="header-anchor" href="#_3、自定义favicon" aria-hidden="true">#</a> 3、自定义Favicon</h4><p>favicon.ico 文件放在 <strong>静态资源目录下即可</strong>。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
<span class="token comment">##  mvc:</span>
<span class="token comment">##    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、静态资源配置原理" tabindex="-1"><a class="header-anchor" href="#_4、静态资源配置原理" aria-hidden="true">#</a> 4、静态资源配置原理</h4><p>SpringBoot 启动默认加载 xxxAutoConfiguration 类（自动配置类）<br><code>SpringMVC 功能的自动配置类 WebMvcAutoConfiguration 就生效了</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DispatcherServletAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TaskExecutionAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
		<span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给容器中的配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">EnableWebMvcConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">WebMvcProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定配置文件：<br><strong>WebMvcProperties</strong>==<em>spring.mvc</em><br><strong>ResourceProperties</strong>==<em>spring.resources</em></p><p><em><strong>扩展：如果配置类只有一个有参构造器：</strong></em><br><em><strong>有参构造器所有的值都会从容器中确定</strong></em></p><p>ResourceProperties resourceProperties；获取和 <code>spring.resources</code> 绑定的所有的值的对象<br> WebMvcProperties mvcProperties 获取和 <code>spring.mvc</code> 绑定的所有的值的对象<br> ListableBeanFactory beanFactory Spring的 <code>beanFactory</code><br> HttpMessageConverters 找到所有的 <code>HttpMessageConverters</code><br> ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。<br> DispatcherServletPath<br> ServletRegistrationBean 给应用注册 Servlet、Filter....</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span><span class="token punctuation">(</span><span class="token class-name">ResourceProperties</span> resourceProperties<span class="token punctuation">,</span> <span class="token class-name">WebMvcProperties</span> mvcProperties<span class="token punctuation">,</span>
				<span class="token class-name">ListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">&gt;</span></span> messageConvertersProvider<span class="token punctuation">,</span>
				<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceHandlerRegistrationCustomizer</span><span class="token punctuation">&gt;</span></span> resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">,</span>
				<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DispatcherServletPath</span><span class="token punctuation">&gt;</span></span> dispatcherServletPath<span class="token punctuation">,</span>
				<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> servletRegistrations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties <span class="token operator">=</span> mvcProperties<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>messageConvertersProvider <span class="token operator">=</span> messageConvertersProvider<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>resourceHandlerRegistrationCustomizer <span class="token operator">=</span> resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherServletPath <span class="token operator">=</span> dispatcherServletPath<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>servletRegistrations <span class="token operator">=</span> servletRegistrations<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1、资源处理的默认规则" tabindex="-1"><a class="header-anchor" href="#_1、资源处理的默认规则" aria-hidden="true">#</a> 1、资源处理的默认规则</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Default resource handling disabled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Duration</span> cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CacheControl</span> cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//webjars的规则</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span>
                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span>
                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//</span>
    <span class="token class-name">String</span> staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>
                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
<span class="token comment">##  mvc:</span>
<span class="token comment">##    static-path-pattern: /res/**</span>

  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">add-mappings</span><span class="token punctuation">:</span> false   禁用所有静态资源规则
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.resources&quot;</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceProperties</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">CLASSPATH_RESOURCE_LOCATIONS</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;classpath:/META-INF/resources/&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;classpath:/resources/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/static/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/public/&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Locations of static resources. Defaults to classpath:[/META-INF/resources/,
	 * /resources/, /static/, /public/].
	 */</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations <span class="token operator">=</span> <span class="token constant">CLASSPATH_RESOURCE_LOCATIONS</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、欢迎页的处理规则" tabindex="-1"><a class="header-anchor" href="#_2、欢迎页的处理规则" aria-hidden="true">#</a> 2、欢迎页的处理规则</h5><p>**HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。 **</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
		<span class="token annotation punctuation">@Bean</span>
		<span class="token keyword">public</span> <span class="token class-name">WelcomePageHandlerMapping</span> <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span>
				<span class="token class-name">FormattingConversionService</span> mvcConversionService<span class="token punctuation">,</span> <span class="token class-name">ResourceUrlProvider</span> mvcResourceUrlProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">WelcomePageHandlerMapping</span> welcomePageHandlerMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>
					<span class="token keyword">new</span> <span class="token class-name">TemplateAvailabilityProviders</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span> <span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
					<span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>mvcConversionService<span class="token punctuation">,</span> mvcResourceUrlProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setCorsConfigurations</span><span class="token punctuation">(</span><span class="token function">getCorsConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> welcomePageHandlerMapping<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

	<span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">TemplateAvailabilityProviders</span> templateAvailabilityProviders<span class="token punctuation">,</span>
			<span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> welcomePage<span class="token punctuation">,</span> <span class="token class-name">String</span> staticPathPattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>welcomePage<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;/**&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//要用欢迎页功能，必须是/**</span>
			logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Adding welcome page: &quot;</span> <span class="token operator">+</span> welcomePage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">setRootViewName</span><span class="token punctuation">(</span><span class="token string">&quot;forward:index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">welcomeTemplateExists</span><span class="token punctuation">(</span>templateAvailabilityProviders<span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 调用Controller  /index</span>
			logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Adding welcome page template: index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">setRootViewName</span><span class="token punctuation">(</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、favicon" tabindex="-1"><a class="header-anchor" href="#_3、favicon" aria-hidden="true">#</a> 3、favicon</h5><h3 id="_2、请求参数处理" tabindex="-1"><a class="header-anchor" href="#_2、请求参数处理" aria-hidden="true">#</a> 2、请求参数处理</h3><h4 id="_1、put、delete-请求映射" tabindex="-1"><a class="header-anchor" href="#_1、put、delete-请求映射" aria-hidden="true">#</a> 1、put、delete 请求映射</h4><h5 id="_1、开启-rest" tabindex="-1"><a class="header-anchor" href="#_1、开启-rest" aria-hidden="true">#</a> 1、开启 rest</h5><p>springBoot 中 需要 <strong>手动开启</strong></p><p><strong>开启页面表单的Rest功能</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">hiddenmethod</span><span class="token punctuation">:</span>
      <span class="token key atrule">filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@xxxMapping<br> Rest风格支持<br> 对用户的操作： /user* GET-获取用户 DELETE-删除用户 PUT-修改用户 POST-保存用户</p><p>核心Filter：<strong>HiddenHttpMethodFilter</strong>（开启put，delete请求）<br> （过滤器的一个作用）</p><p>前端发送put，delete请求的方式：<strong><code>表单 method=post，隐藏域 **\\_**method=put</code></strong></p></blockquote><blockquote><p>Rest 原理：<br> 表单提交会带上 _method=PUT/DELETE<br> 请求被 <strong>HiddenHttpMethodFilter</strong> 拦截<br> 判断 <strong>请求</strong> 是否正常且 <strong>为POST</strong><br> 获取到 <strong>_method的值</strong> 并转为大写，判断是否为PUT、DELETE、PATCH<br> 包装模式 <strong>requesWrapper</strong> 与原生Request类类似，<strong>重写了getMethod方法，返回的是传入的值</strong><br> 过滤器链放行的时候用 wrapper。以后的方法调用getMethod是调用requesWrapper的。</p><p>注：<br> 使用客户端工具如 PostMan 直接发送Put、delete等方式请求，无需 Filter，直接为PUT/DELETE</p></blockquote><blockquote><p>扩展：更改 _method 这个名字：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//自定义filter</span>
    <span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   	 	<span class="token class-name">HiddenHttpMethodFilter</span> methodFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   		methodFilter<span class="token punctuation">.</span><span class="token function">setMethodParam</span><span class="token punctuation">(</span><span class="token string">&quot;_m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">return</span> methodFilter<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="_2、请求映射原理-从请求到方法" tabindex="-1"><a class="header-anchor" href="#_2、请求映射原理-从请求到方法" aria-hidden="true">#</a> 2、请求映射原理（从请求到方法）</h5><p>DispatcherServlet 的继承树：<br><code>HttpServlet→FramworkServlet（重写doGet、doPost、调用doService）→DispatcherServlet（实现doService、调用doDispatch）</code></p><p>SpringMVC 功能分析都从 org.springframework.web.servlet.<strong>DispatcherServlet</strong> 类的 <strong>doDispatch()</strong> 方法开始</p><p>① <strong>通过请求地址找到对应的 Controller</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span>
mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>② <strong>HandlerMapping：处理器映射</strong></p><p>所有的请求映射都在 HandlerMapping 中（请求→哪个handler处理器处理）</p><p>HandlerMapping一共有5个，依此寻找：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230122222555787.png" alt="image-20230122222555787" loading="lazy"></p><blockquote><p><strong>RequestMappingHandlerMapping</strong>：<br> 保存了所有 @RequestMapping 和 handler 的映射规则。（springboot启动后自动扫描保存）</p><p>所有的请求映射都在 HandlerMapping 中，寻找案例：<br> SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html<br> SpringBoot自动配置了默认 的 RequestMappingHandlerMapping<br> 请求进来，挨个尝试所有的HandlerMapping看是否有请求信息<br> 如果有就找到这个请求对应的handler<br> 如果没有就是下一个HandlerMapping</p><p>也可以自己给容器中放 HandlerMapping。自定义 HandlerMapping</p></blockquote><h4 id="_2、获取请求参数" tabindex="-1"><a class="header-anchor" href="#_2、获取请求参数" aria-hidden="true">#</a> 2、获取请求参数</h4><h5 id="_1、关键注解获取" tabindex="-1"><a class="header-anchor" href="#_1、关键注解获取" aria-hidden="true">#</a> 1、关键注解获取</h5><p><strong>@PathVariable（路径变量）<br> @RequestParam（请求参数）</strong><br><strong>@RequestHeader（获取请求头）</strong><br><strong>@RequestBody（获取请求体 [post]）</strong><br><strong>@CookieValue（获取 cookiee 值）</strong><br><strong>@RequestAttribute（获取 Request 域属性）</strong><br><strong>@ModelAttribute</strong><br><strong>@MatrixVariable（矩阵变量）</strong></p><ol><li><p><strong>@RequestParam</strong></p><p>http请求的参数 =&gt; Controller 方法的 参数 上 （单个值，或封装成 List）</p><p>@RequestParam 注解的 <strong>三个属性</strong>：<br> ① <strong>value</strong>：设置和形参绑定 <strong>请求参数的名字</strong><br> ② <strong>required</strong>：设置是否必须传输value所对应的请求参数<br> 默认值为 true，请求参数必须传输，否则页面报错（400错误）<br> 若设置为 false，请求参数不必须传输，若不传输，则形参值为null <br> ③ <strong>defaultValue</strong>：设置当没有传输 value 所对应的请求参数时，为<strong>形参设置默认值</strong>，此时和required属性值无关</p><blockquote><p>使用 @RequestParam 注解：如果请求参数的名称和控制器方法的参数名称不一致，或者我们需要使用@RequestParam注解的一些特性（如设置默认值或者必传属性等），那么必须使用@RequestParam注解来获取请求参数的值。</p></blockquote></li><li><p><strong>@PathVariable</strong></p><p>在 @RequestMapping 的 value 属性路径中，使用 <strong>{xxx}</strong> 的方式表示 <strong>路径中的数据</strong><br> 通过**@PathVariable注解**，将占位符所标识的值和控制器方法的形参进行绑定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterTestController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/car/{id}/owner/{username}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token comment">//请求参数中id</span>
                                     <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token comment">//请求参数中username</span>
                                     <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pv<span class="token punctuation">,</span> <span class="token comment">//获取所有的@PathVariable</span>

        <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>@RequestBody</strong></p><p>将 HTTP <strong>请求体</strong> 中的 <strong>JSON</strong> 或 XML =&gt; <strong>Java 对象</strong>。</p><p>案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">postMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//获取请求体</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>@MatrixVariable（矩阵变量）（略）</p></li></ol><p>获取请求参数案例：</p><div class="language-java+ line-numbers-mode" data-ext="java+"><pre class="language-java+"><code>@RestController
public class ParameterTestController {
    //  car/2/owner/zhangsan?age=18&amp;inters=baseketball&amp;inters=game
    @GetMapping(&quot;/car/{id}/owner/{username}&quot;)
    public Map&lt;String,Object&gt; getCar(@PathVariable(&quot;id&quot;) Integer id, //请求参数中id
                                     @PathVariable(&quot;username&quot;) String name, //请求参数中username
                                     @PathVariable Map&lt;String,String&gt; pv, //获取所有的@PathVariable
                                     
                                     @RequestHeader(&quot;User-Agent&quot;) String userAgent, //获取请求头
                                     @RequestHeader Map&lt;String,String&gt; header, //获取所有请求头
                                     
                                     @RequestParam(&quot;age&quot;) Integer age, //获取?后的age
                                     @RequestParam(&quot;inters&quot;) List&lt;String&gt; inters, //获取所有inters值
                                     @RequestParam Map&lt;String,String&gt; params, //获取所有param
                                     
                                     @CookieValue(&quot;_ga&quot;) String _ga, //获取cookiee中_ga的值
                                     @CookieValue(&quot;_ga&quot;) Cookie cookie){ //获取_ga的整个cookiee


        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();
        map.put(&quot;age&quot;,age);
        map.put(&quot;inters&quot;,inters);
        return map;
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、servlet-api-获取" tabindex="-1"><a class="header-anchor" href="#_2、servlet-api-获取" aria-hidden="true">#</a> 2、Servlet API 获取</h5><p>参数中可以放 ServletAPI：</p><blockquote><p>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</p></blockquote><p><strong>ServletRequestMethodArgumentResolver 类解析以上的部分参数</strong></p><h5 id="_3、复杂参数" tabindex="-1"><a class="header-anchor" href="#_3、复杂参数" aria-hidden="true">#</a> 3、复杂参数</h5><blockquote><p>Map、Model（map、model里面的数据会被放在 request的请求域 request.setAttribute）<br> Errors/BindingResult、RedirectAttributes（重定向携带数据）、ServletResponse（response）、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p></blockquote><p>对 map&lt;String,Object&gt; map,<br> Model model,<br> HttpServletRequest request<br> 操作都是给 request 域中放数据，即 <strong>request.getAttribute();</strong></p><p>Map、Model类型的参数，返回的 都是 <strong>map</strong><br> 返回 mavContainer.getModel（）；---&gt; BindingAwareModelMap 是Model</p><h5 id="_4、自定义对象参数" tabindex="-1"><a class="header-anchor" href="#_4、自定义对象参数" aria-hidden="true">#</a> 4、自定义对象参数</h5><p>可以 <strong>自动类型转换</strong> 与格式化，可以 <strong>级联封装</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> 
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Pet</span> pet<span class="token punctuation">;</span> <span class="token comment">//级联自定义对象</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、参数处理原理" tabindex="-1"><a class="header-anchor" href="#_3、参数处理原理" aria-hidden="true">#</a> 3、参数处理原理</h4><p>HandlerMapping 中找到能处理请求的 <strong>Handler</strong><br> 为当前 Handler 找一个适配器 <strong>HandlerAdapter</strong><br> 适配器执行目标方法并确定方法参数的每一个值</p><h5 id="_1、handleradapter-适配器" tabindex="-1"><a class="header-anchor" href="#_1、handleradapter-适配器" aria-hidden="true">#</a> 1、HandlerAdapter（适配器）</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230123174924675.png" alt="image-20230123174924675" loading="lazy"></p><p>0 - 支持方法上标注@RequestMapping<br> 1 - 支持函数式编程的</p><h5 id="_2、执行目标方法" tabindex="-1"><a class="header-anchor" href="#_2、执行目标方法" aria-hidden="true">#</a> 2、执行目标方法</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230123175018355.png" alt="image-20230123175018355" loading="lazy"></p><h5 id="_3、参数解析器-handlermethodargumentresolver" tabindex="-1"><a class="header-anchor" href="#_3、参数解析器-handlermethodargumentresolver" aria-hidden="true">#</a> 3、参数解析器-HandlerMethodArgumentResolver</h5><p><strong>确定将要执行的目标方法的每一个参数的值是什么</strong><br> SpringMVC目标方法能写多少种参数类型。取决于参数解析器</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230123175246221.png" alt="image-20230123175246221" loading="lazy"></p><p>判断当前解析器是否（support方法）支持解析这种参数，支持就调用 resolveArgument</p><h5 id="_4、返回值处理器" tabindex="-1"><a class="header-anchor" href="#_4、返回值处理器" aria-hidden="true">#</a> 4、返回值处理器</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230123175457405.png" alt="image-20230123175457405" loading="lazy"></p><h5 id="_5、如何确定目标方法每一个参数的值" tabindex="-1"><a class="header-anchor" href="#_5、如何确定目标方法每一个参数的值" aria-hidden="true">#</a> 5、如何确定目标方法每一个参数的值</h5><p>1、挨个判断所有参数解析器那个支持解析这个参数<br> 2、解析这个参数的值<br> 调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可<br> 3、自定义类型参数 封装POJO<br> ServletModelAttributeMethodProcessor 这个参数处理器支持<br> WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中<br> GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型（JavaBean -- Integer）</p><p><strong>byte -- &gt; file</strong></p><h5 id="_6、目标方法执行完成" tabindex="-1"><a class="header-anchor" href="#_6、目标方法执行完成" aria-hidden="true">#</a> 6、目标方法执行完成</h5><p>所有的数据都放在 <strong>ModelAndViewContainer</strong>；包含要去的页面地址View。还包含Model数据。</p><h5 id="_7、处理派发结果" tabindex="-1"><a class="header-anchor" href="#_7、处理派发结果" aria-hidden="true">#</a> 7、处理派发结果</h5><p><strong>processDispatchResult</strong>(processedRequest, response, mappedHandler, mv, dispatchException);<br> renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</p><h3 id="_3、数据响应-json-与内容协商" tabindex="-1"><a class="header-anchor" href="#_3、数据响应-json-与内容协商" aria-hidden="true">#</a> 3、数据响应(JSON)与内容协商</h3><p>数据响应：<br> ① 响应页面<br> ② 响应数据（json，xml，xls，图片，音视频，自定义协议内容）</p><h4 id="_1、响应json" tabindex="-1"><a class="header-anchor" href="#_1、响应json" aria-hidden="true">#</a> 1、响应JSON</h4><h5 id="_1、jackson-jar-responsebody" tabindex="-1"><a class="header-anchor" href="#_1、jackson-jar-responsebody" aria-hidden="true">#</a> 1、jackson.jar+@ResponseBody</h5><p>通过 <strong>jackson.jar</strong> (自动导入) + <strong>@ResponseBody</strong> 注解可以给前端自动返回 json 数据；</p><p>@RequestBody 指示控制器方法参数应该 从 HTTP请求体中获取，并将其反序列化为方法参数的类型。<br> @RequestBody 注解将 HTTP请求体 中的 JSON或XML 转换为 Java对象。</p><blockquote><p>HttpMessageConverter（内容协商）是Spring框架中的一种机制，用于将请求和响应消息转换为特定的格式，例如JSON或XML。当您使用@RequestBody注解时，Spring Boot将尝试从请求体中获取数据，并 <strong>使用适当的HttpMessageConverter</strong> 将其转换为控制器方法参数的类型。<br> 默认情况下，Spring Boot使用Jackson库将JSON请求体映射到Java对象中。<strong>Jackson使用Java反射机制，查找Java类中的setter方法</strong>，并使用它们将JSON字段映射到Java对象中。</p></blockquote><blockquote><p><code>原理： 1、有返回值解析器 2、返回值解析器原理： 1、返回值处理器先判断是否支持这种类型返回值 （supportsReturnType()方法，返回Boolean类型） 2、如果支持，返回值处理器调用 handleReturnValue() 进行处理 3、RequestResponseBodyMethodProcessor() 可以处理返回值标了@ResponseBody 注解的方法 1、利用 MessageConverters 进行处理 将数据写为json ①内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型，且有优先级） ②服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据 ③SpringMVC会挨个遍历所有容器底层的 HttpMessageConverter ，看谁能处理 得到MappingJackson2HttpMessageConverter可以将对象写为json 利用MappingJackson2HttpMessageConverter将对象转为json再写出去。</code></p></blockquote><h5 id="_2、springmvc-支持的返回值" tabindex="-1"><a class="header-anchor" href="#_2、springmvc-支持的返回值" aria-hidden="true">#</a> 2、SpringMVC 支持的返回值</h5><blockquote><p>ModelAndView、Model、View<br> ResponseEntity 、ResponseBodyEmitter、StreamingResponseBody、HttpEntity、HttpHeaders、Callable、DeferredResult、ListenableFuture、CompletionStage、WebAsyncTask<br> 有 @ModelAttribute 且为对象类型的<br> @ResponseBody 注解 ---&gt; RequestResponseBodyMethodProcessor；</p></blockquote><h5 id="_3、httpmessageconverter-消息转换器-原理" tabindex="-1"><a class="header-anchor" href="#_3、httpmessageconverter-消息转换器-原理" aria-hidden="true">#</a> 3、HTTPMessageConverter（消息转换器）原理</h5><p>HttpMessageConverter: 看是否支持将 此 Class 类型的对象，转为MediaType类型的数据。<br> 例子：Person 对象转为 JSON。或者 JSON转为Person</p><p>默认的MessageConverter：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230125154948610.png" alt="image-20230125154948610" loading="lazy"></p><p>0 - 只支持Byte类型的<br> 1 - String<br> 2 - String<br> 3 - Resource<br> 4 - ResourceRegion<br> 5 - DOMSource.class \\ SAXSource.class \\ StAXSource.class \\StreamSource.class \\Source.class<br> 6 - MultiValueMap<br> 7 - true<br> 8 - true<br> 9 - 支持注解方式xml处理的。</p><p>最终 MappingJackson2HttpMessageConverter 把对象转为JSON（利用底层的jackson的objectMapper转换的）</p><h4 id="_2、内容协商" tabindex="-1"><a class="header-anchor" href="#_2、内容协商" aria-hidden="true">#</a> 2、内容协商</h4><p><strong>根据客户端接收能力不同，返回不同媒体类型的数据。</strong><br> （若客户端无法解析服务端返回的内容，即媒体类型未匹配，那么响应406）</p><h5 id="_1、引入xml依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入xml依赖" aria-hidden="true">#</a> 1、引入xml依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、postman分别测试返回json和xml" tabindex="-1"><a class="header-anchor" href="#_2、postman分别测试返回json和xml" aria-hidden="true">#</a> 2、postman分别测试返回json和xml</h5><p>postman：模拟用户发起的各类HTTP请求</p><p>只需要改变请求头中Accept字段。Accept字段是Http协议中规定的，告诉服务器本客户端可以接收的数据类型。<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230125161757892.png" alt="image-20230125161757892" loading="lazy"></p><h5 id="_3、开启浏览器参数方式内容协商功能" tabindex="-1"><a class="header-anchor" href="#_3、开启浏览器参数方式内容协商功能" aria-hidden="true">#</a> 3、开启浏览器参数方式内容协商功能</h5><p>为了方便内容协商，开启基于请求参数的内容协商功能。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>
      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#开启请求参数内容协商模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式：</p>`,107),Y=n("br",null,null,-1),Q={href:"http://localhost:8080/test/person?format=json",target:"_blank",rel:"noopener noreferrer"},Z=n("br",null,null,-1),K={href:"http://localhost:8080/test/person?format=xml",target:"_blank",rel:"noopener noreferrer"},nn=e('<p>确定客户端接收什么样的内容类型：<br> 1、Parameter策略优先确定是要返回json数据（获取请求头中的format的值）<br> 2、最终进行内容协商返回给客户端json即可。</p><h5 id="_4、内容协商原理" tabindex="-1"><a class="header-anchor" href="#_4、内容协商原理" aria-hidden="true">#</a> 4、内容协商原理</h5><p>1、判断当前响应头中是否已经有确定的媒体类型。MediaType<br> 2、<strong>获取</strong>客户端（PostMan、浏览器）<strong>支持接收的内容类型</strong>。（获取客户端Accept请求头字段）【application/xml】<br> contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略<br> HeaderContentNegotiationStrategy 确定客户端可以接收的内容类型<br> 3、遍历循环所有当前系统的 <strong>MessageConverter</strong>，看谁支持操作这个对象（Person）<br> 4、找到支持操作Person的converter，把converter支持的媒体类型统计出来。<br> 5、客户端需要【application/xml】。服务端能力【10种、json、xml】<br> 6、进行内容协商的最佳匹配媒体类型<br> 7、用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。</p><h5 id="_5、自定义-messageconverter" tabindex="-1"><a class="header-anchor" href="#_5、自定义-messageconverter" aria-hidden="true">#</a> 5、自定义 MessageConverter</h5><p>实现多协议数据兼容。json、xml、x-guigu</p><p>0、@ResponseBody 响应数据出去 调用 <strong>RequestResponseBodyMethodProcessor</strong> 处理<br> 1、Processor 处理方法返回值。通过 <strong>MessageConverter</strong> 处理<br> 2、所有 <strong>MessageConverter</strong> 合起来可以支持各种媒体类型数据的操作（读、写）<br> 3、内容协商找到最终的 <strong>messageConverter</strong>；</p><p>SpringMVC的什么功能。一个入口给容器中添加一个 WebMvcConfigurer</p><h3 id="_4、视图解析与模板引擎-不看" tabindex="-1"><a class="header-anchor" href="#_4、视图解析与模板引擎-不看" aria-hidden="true">#</a> 4、视图解析与模板引擎（不看）</h3><p>视图解析：<strong>SpringBoot默认不支持JSP，需要引入第三方模板引擎技术实现页面渲染。</strong>（SpringBoot工程的打包结果是一个jar包，是压缩包，JSP不支持在压缩包中被编译运行，所以SpringBoot默认不支持JSP。）</p><h4 id="_1、视图解析原理流程" tabindex="-1"><a class="header-anchor" href="#_1、视图解析原理流程" aria-hidden="true">#</a> 1、视图解析原理流程</h4><p>1、目标方法处理的过程中，所有数据都会被放在 ModelAndViewContainer 里面。包括数据和视图地址<br> 2、方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在 ModelAndViewContainer<br> 3、任何目标方法执行完成以后都会返回 ModelAndView（数据和视图地址）。<br> 4、processDispatchResult 处理派发结果（页面该如何响应）</p><h4 id="_2、模板引擎thymeleaf" tabindex="-1"><a class="header-anchor" href="#_2、模板引擎thymeleaf" aria-hidden="true">#</a> 2、模板引擎Thymeleaf</h4><h5 id="_1、thymeleaf简介" tabindex="-1"><a class="header-anchor" href="#_1、thymeleaf简介" aria-hidden="true">#</a> 1、thymeleaf简介</h5><p>现代化、服务端Java模板引擎</p><h5 id="_2、基本语法" tabindex="-1"><a class="header-anchor" href="#_2、基本语法" aria-hidden="true">#</a> 2、基本语法</h5><h6 id="_1、表达式" tabindex="-1"><a class="header-anchor" href="#_1、表达式" aria-hidden="true">#</a> 1、表达式</h6>',16),sn=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"表达式名字"),n("th",null,"语法"),n("th",null,"用途")])]),n("tbody",null,[n("tr",null,[n("td",null,"变量取值"),n("td",null,"**${...} **"),n("td",null,"获取请求域、session域、对象等值")]),n("tr",null,[n("td",null,"选择变量"),n("td",{"css-module":"."},"*"),n("td",null,"获取上下文对象值")]),n("tr",null,[n("td",null,"消息"),n("td",{"css-module":"."},"#"),n("td",null,"获取国际化等值")]),n("tr",null,[n("td",null,"链接"),n("td",null,[n("strong",null,"@{...}")]),n("td",null,"加了前后缀，自动拼接，生成链接")]),n("tr",null,[n("td",null,"片段表达式"),n("td",{"css-module":"."},"~"),n("td",null,"jsp:include 作用，引入公共页面片段")])])],-1),an=e(`<h6 id="_2、字面量" tabindex="-1"><a class="header-anchor" href="#_2、字面量" aria-hidden="true">#</a> 2、字面量</h6><p>文本值: &#39;one text&#39; , &#39;Another one!&#39;<br> 数字: 0 , 34 , 3.0 , 12.3<br> 布尔值: true , false<br> 空值: null<br> 变量： one，two <strong>变量不能有空格</strong></p><h6 id="_3、文本操作" tabindex="-1"><a class="header-anchor" href="#_3、文本操作" aria-hidden="true">#</a> 3、文本操作</h6><p>字符串拼接: <strong>+</strong><br> 变量替换: <strong>|The name is \${name}|</strong></p><h6 id="_4、数学运算" tabindex="-1"><a class="header-anchor" href="#_4、数学运算" aria-hidden="true">#</a> 4、数学运算</h6><p>运算符: + , - , * , / , %</p><h6 id="_5、布尔运算" tabindex="-1"><a class="header-anchor" href="#_5、布尔运算" aria-hidden="true">#</a> 5、布尔运算</h6><p>运算符: and , or<br> 一元运算: ! , not</p><h6 id="_6、比较运算" tabindex="-1"><a class="header-anchor" href="#_6、比较运算" aria-hidden="true">#</a> 6、比较运算</h6><p>比较: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )等式: == , != ( eq , ne )</p><h6 id="_7、条件运算" tabindex="-1"><a class="header-anchor" href="#_7、条件运算" aria-hidden="true">#</a> 7、条件运算</h6><p>If-then: <strong>(if) ? (then)</strong></p><p>If-then-else: <strong>(if) ? (then) : (else)</strong></p><p>Default: (value) <strong>?: (defaultvalue)</strong></p><h6 id="_8、特殊操作" tabindex="-1"><a class="header-anchor" href="#_8、特殊操作" aria-hidden="true">#</a> 8、特殊操作</h6><p>无操作： _</p><h5 id="_3、设置属性值-th-attr" tabindex="-1"><a class="header-anchor" href="#_3、设置属性值-th-attr" aria-hidden="true">#</a> 3、设置属性值-th:attr</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Subscribe!<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{subscribe.submit}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subscribe.html<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/subscribe}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、循环" tabindex="-1"><a class="header-anchor" href="#_4、循环" aria-hidden="true">#</a> 4、循环</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prod : \${prods}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.name}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.price}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.inStock}? #{true} : #{false}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、条件运算" tabindex="-1"><a class="header-anchor" href="#_5、条件运算" aria-hidden="true">#</a> 5、条件运算</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>comments.html<span class="token punctuation">&quot;</span></span>
<span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/product/comments(prodId=\${prod.id})}<span class="token punctuation">&quot;</span></span>
<span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${not #lists.isEmpty(prod.comments)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${user.role}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>admin&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User is an administrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{roles.manager}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User is a manager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User is some other thing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、thymeleaf使用" tabindex="-1"><a class="header-anchor" href="#_3、thymeleaf使用" aria-hidden="true">#</a> 3、thymeleaf使用</h4><h5 id="_1、引入starter" tabindex="-1"><a class="header-anchor" href="#_1、引入starter" aria-hidden="true">#</a> 1、引入Starter</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、自动配置好了thymeleaf" tabindex="-1"><a class="header-anchor" href="#_2、自动配置好了thymeleaf" aria-hidden="true">#</a> 2、自动配置好了thymeleaf</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230126124513640.png" alt="image-20230126124513640" loading="lazy"></p><p>自动配好的策略</p><p>1、所有thymeleaf的配置值都在 ThymeleafProperties<br> 2、配置好了 SpringTemplateEngine<br> 3、配好了 ThymeleafViewResolver 视图解析器<br> 4、我们只需要直接开发页面</p><p>ThymeleafProperties类中：视图前后缀</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;classpath:/templates/&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_SUFFIX</span> <span class="token operator">=</span> <span class="token string">&quot;.html&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//xxx.html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、构建后台管理系统" tabindex="-1"><a class="header-anchor" href="#_4、构建后台管理系统" aria-hidden="true">#</a> 4、构建后台管理系统</h4><h5 id="_1、项目创建" tabindex="-1"><a class="header-anchor" href="#_1、项目创建" aria-hidden="true">#</a> 1、项目创建</h5><p>添加模块：thymeleaf、web-starter、devtools、lombok</p><h5 id="_2、静态资源处理" tabindex="-1"><a class="header-anchor" href="#_2、静态资源处理" aria-hidden="true">#</a> 2、静态资源处理</h5><p>自动配置好，我们只需要把所有静态资源放到 static 文件夹下</p><h5 id="_3、路径构建" tabindex="-1"><a class="header-anchor" href="#_3、路径构建" aria-hidden="true">#</a> 3、路径构建</h5><p>th:action=&quot;@{/login}&quot;</p><h5 id="_4、模板抽取" tabindex="-1"><a class="header-anchor" href="#_4、模板抽取" aria-hidden="true">#</a> 4、模板抽取</h5><p>th:insert/replace/include</p><h5 id="_5、页面跳转" tabindex="-1"><a class="header-anchor" href="#_5、页面跳转" aria-hidden="true">#</a> 5、页面跳转</h5><p>登入成功后创建user放入session中，通过session中的user对象判断是否要重新登录</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>

    <span class="token comment">//登录页</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//把登陆成功的用户保存起来</span>
            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;loginUser&quot;</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//登录成功，重定向到main.html → 重定向，防止表单重复提交</span>
            <span class="token keyword">return</span> <span class="token string">&quot;redirect:/main.html&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;账号密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//回到登录页</span>
            <span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/main.html&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mainPage</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//是否登录  拦截器，过滤器</span>
        <span class="token class-name">Object</span> loginUser <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;loginUser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>loginUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;请重新登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//回到登录页</span>
            <span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6、数据渲染" tabindex="-1"><a class="header-anchor" href="#_6、数据渲染" aria-hidden="true">#</a> 6、数据渲染</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/dynamic_table&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dynamic_table</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//表格内容的遍历</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123444&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;hehe &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaddd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token string">&quot;table/dynamic_table&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>display table table-bordered<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden-table-info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>#<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gradeX<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user,stats:\${users}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${stats.count}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Trident<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${user.userName}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Internet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token punctuation">&gt;</span></span>[[\${user.password}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、interceptor-拦截器" tabindex="-1"><a class="header-anchor" href="#_5、interceptor-拦截器" aria-hidden="true">#</a> 5、Interceptor 拦截器</h3><p>拦截器底层需要 <strong>Interceptor接口</strong><br> 接口中的三个方法：<br><strong><code>preHandle</code></strong> 目标方法执行之前<br><strong><code>postHandle</code></strong> 目标方法执行之后<br><strong><code>afterCompletion</code></strong> 页面渲染</p><p>拦截器的作用：做登录检查</p><p><strong>配置拦截器要拦截哪些请求，把这些配置放在容器中（@Configuration）</strong><br> 实现 WebMvcConfigure 的 addInterceptors() 方法：<br><em>配置所有请求都别拦截，排除拦截登录页，静态页面</em></p><h4 id="_1、拦截器的使用" tabindex="-1"><a class="header-anchor" href="#_1、拦截器的使用" aria-hidden="true">#</a> 1、拦截器的使用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建拦截器，实现HandlerInterceptor类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">//目标方法执行之前</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//通过session判断是否登录</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> loginUser <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;loginUser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>loginUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//放行</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//拦截住，即未登录，跳转到登录页</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;请先登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">//目标方法执行之后</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">//页面渲染</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、配置拦截器-url" tabindex="-1"><a class="header-anchor" href="#_2、配置拦截器-url" aria-hidden="true">#</a> 2、配置拦截器（url）</h4><p><strong>实现WebMvcConfigure的addInterceptors()方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 配置拦截器工作：
 *   1、配置好拦截器要拦截哪些请求
 *   2、拦截器注册到容器中（实现WebMvcConfigure的addInterceptors()方法）
 *   3、指定拦截器规则（如果是拦截所有，静态资源也会被拦截，所以需要排除）
 */</span>
<span class="token comment">//编写配置类，配置拦截器，实现WebMvcConfigurer类，重写addInterceptors方法</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span> <span class="token comment">//所有请求都被拦截，包括静态资源（css，js...）</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/fonts/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/images/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//放行的请求</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、拦截器执行顺序、原理" tabindex="-1"><a class="header-anchor" href="#_3、拦截器执行顺序、原理" aria-hidden="true">#</a> 3、拦截器执行顺序、原理</h4><p>1、根据当前请求，找到 HandlerExecutionChain（可以处理请求的handler以及handler的所有拦截器）<br> 2、先 <strong>顺序执行</strong> 所有拦截器的 <strong>preHandle</strong>方法<br> 1、如果当前拦截器 prehandler返回为 <strong>true</strong>。则执行下一个拦截器的 preHandle 方法<br> 2、如果当前拦截器返回为 <strong>false</strong> 。<strong>倒序</strong> 执行经过的拦截器的 <strong>afterCompletion</strong> 方法；<br> 3、如果任何一个 <strong>拦截器返回false</strong>。直接跳出 <strong>不执行目标方法</strong><br> 4、所有拦截器 <strong>都返回True</strong>。<strong>执行目标方法</strong><br> 5、倒序执行所有拦截器的 postHandle 方法<br> 6、前面的步骤有任何异常都会直接 <strong>倒序</strong> 触发 afterCompletion<br> 7、页面成功渲染完成以后，也会 倒序 触发 afterCompletion</p><h3 id="_6、文件上传" tabindex="-1"><a class="header-anchor" href="#_6、文件上传" aria-hidden="true">#</a> 6、文件上传</h3><p>接收文件步骤：</p><p>① 注解：<strong>@RequestPart</strong>：表示一个文件<br> ② 接收的参数类：<strong>MultipartFile</strong> multipartFile<br> ③ 设置文件保存位置：<strong>multipartFile.transferTo()</strong>：</p><h4 id="_1、表单页面" tabindex="-1"><a class="header-anchor" href="#_1、表单页面" aria-hidden="true">#</a> 1、表单页面</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、文件上传代码" tabindex="-1"><a class="header-anchor" href="#_2、文件上传代码" aria-hidden="true">#</a> 2、文件上传代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FromTestController</span> <span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>
                         <span class="token comment">// 接收文件</span>
                         <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">&quot;headerImg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> headerImg<span class="token punctuation">,</span>
                         <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">&quot;photos&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> photos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>headerImg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//保存到文件服务器、oss(对象存储)服务器</span>
            <span class="token class-name">String</span> filename <span class="token operator">=</span> headerImg<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            headerImg<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\cache\\\\&quot;</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//文件保存的位置</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>photos<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> photo <span class="token operator">:</span> photos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>photo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">String</span> filename <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    photo<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\cache\\\\&quot;</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、修改上传文件大小限制" tabindex="-1"><a class="header-anchor" href="#_3、修改上传文件大小限制" aria-hidden="true">#</a> 3、修改上传文件大小限制</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token value attr-value">10MB</span>
<span class="token key attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token value attr-value">100MB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、文件上传自动配置原理" tabindex="-1"><a class="header-anchor" href="#_4、文件上传自动配置原理" aria-hidden="true">#</a> 4、文件上传自动配置原理</h4><p>文件上传自动配置类-MultipartAutoConfiguration-MultipartProperties<br> 自动配置好了 StandardServletMultipartResolver 【文件上传解析器】<br> 原理步骤：<br> 请求进来使用文件上传解析器判断（isMultipart()）并封装（resolveMultipart，返回MultipartHttpServletRequest()）文件上传请求<br> 参数解析器来解析请求中的文件内容封装成MultipartFile<br> 将request中文件信息封装为一个Map，实现文件流的拷贝</p><h3 id="_7、异常处理" tabindex="-1"><a class="header-anchor" href="#_7、异常处理" aria-hidden="true">#</a> 7、异常处理</h3><h4 id="_1、默认规则" tabindex="-1"><a class="header-anchor" href="#_1、默认规则" aria-hidden="true">#</a> 1、默认规则</h4><p>默认情况下，Spring Boot 提供 <strong>/error</strong> 处理所有错误的映射<br> 对于机器客户端，它将生成 JSON 响应，其中包含错误，HTTP状态和异常消息的详细信息。<br> 对于浏览器客户端，响应一个 whitelabel 错误视图，以HTML格式呈现相同的数据</p><p>要对其进行 <strong>自定义</strong>，<strong>添加 View 解析为 error</strong><br> error/下的4xx，5xx页面会被自动解析:</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230128171114694.png" alt="image-20230128171114694" loading="lazy"></p><h4 id="_2、定制错误处理逻辑" tabindex="-1"><a class="header-anchor" href="#_2、定制错误处理逻辑" aria-hidden="true">#</a> 2、定制错误处理逻辑</h4><p>自定义错误页:<br> 有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230128173840949.png" alt="image-20230128173840949" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value<span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">,</span>reason <span class="token operator">=</span> <span class="token string">&quot;用户数量太多&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTooManyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">UserTooManyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">UserTooManyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@ControllerAdvice是一个Spring框架中的注解，用于定义全局控制器异常处理器。当控制器方法抛出未被处理的异常时，Spring将查找带有@ControllerAdvice注解的类来处理该异常。该类中的方法可以使用@ExceptionHandler注解来处理特定类型的异常。</p><p>@ExceptionHandler是一个Spring框架中的注解，用于处理控制器方法中的异常。在控制器方法上添加@ExceptionHandler注解，可以指定要处理的异常类型。当控制器方法抛出该异常时，Spring将调用带有@ExceptionHandler注解的方法来处理该异常。</p><p>@ExceptionHandler注解可以被用于单个方法或全局控制器。在单个方法中使用时，它只会应用于该方法中的异常处理。如果在全局控制器中使用，则它将应用于整个控制器中的所有方法。</p><p>使用@ExceptionHandler注解可以简化异常处理逻辑，使代码更易于维护和测试。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//处理异常</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handlerArithException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;异常：{}&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义异常解析器，实现 HandlerExceptionResolver 处理异常；可以作为默认的全局异常处理规则</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerHandlerExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
                                         <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>
                                         <span class="token class-name">Object</span> handler<span class="token punctuation">,</span>
                                         <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">511</span><span class="token punctuation">,</span><span class="token string">&quot;我喜欢的错误码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、异常处理自动配置原理" tabindex="-1"><a class="header-anchor" href="#_3、异常处理自动配置原理" aria-hidden="true">#</a> 3、异常处理自动配置原理</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230128173905589.png" alt="image-20230128173905589" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230128173913355.png" alt="image-20230128173913355" loading="lazy"></p><h4 id="_4、异常处理步骤流程" tabindex="-1"><a class="header-anchor" href="#_4、异常处理步骤流程" aria-hidden="true">#</a> 4、异常处理步骤流程</h4><p>1、执行目标方法，目标方法运行期间<strong>有任何异常都会被catch</strong>、而且标志当前<strong>请求结束</strong>；并且用 <strong>dispatchException</strong><br> 2、进入视图解析流程<br> 3、处理handler发生的异常，处理完成返回ModelAndView；<br> 遍历所有的 handlerExceptionResolvers(处理器异常解析器)，看谁能处理当前异常<br> DefaultErrorAttributes先来处理异常。把异常信息保存到rrequest域，并且返回null<br> 默认没有任何人能处理异常，所以异常会被抛出<br> 如果没有任何人能处理最终底层就会发送 /error 请求。会被底层的BasicErrorController处理<br> 解析错误视图；遍历所有的ErrorViewResolver 看谁能解析。<br> 默认的 DefaultErrorViewResolver ,作用是把响应状态码作为错误页的地址，error/500.html<br> 模板引擎最终响应这个页面 error/500.html</p><h3 id="_8、web原生组件注入-servlet、filter、listener" tabindex="-1"><a class="header-anchor" href="#_8、web原生组件注入-servlet、filter、listener" aria-hidden="true">#</a> 8、Web原生组件注入（Servlet、Filter、Listener）</h3><p>有两种方式：</p><h4 id="_1、使用servlet-api" tabindex="-1"><a class="header-anchor" href="#_1、使用servlet-api" aria-hidden="true">#</a> 1、使用Servlet API</h4><p>核心注解：<br> @ServletComponentScan(basePackage = &quot;&quot;)：指定原生Servlet组件（写在application上）<br> @WebServlet(urlPatterns = &quot;“) 写在原生servlet上<br> @WebFilter(urlPatterns = &quot;&quot;) 写在原生Servlet上<br> @WebListener 写在原生Listener上</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//指定原生Servlet组件都放在那里</span>
<span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.t4mako.admin&quot;</span><span class="token punctuation">)</span> <span class="token comment">//写在application上</span>

<span class="token comment">//效果：直接响应，没有经过Spring的拦截器</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/my&quot;</span><span class="token punctuation">)</span> <span class="token comment">//写在原生servlet上</span>
<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;/css/*&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/images/*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//写在原生Servlet上</span>
<span class="token annotation punctuation">@WebListener</span><span class="token comment">//写在原生Listener上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展：DispatchServlet 如何注册进来<br> 容器中自动配置了 DispatcherServlet 属性绑定到 WebMvcProperties；对应的配置文件配置项是 <strong>spring.mvc。</strong><br> 通过ServletRegistrationBean&lt;DispatcherServlet&gt; 把 DispatcherServlet 配置进来。<br> 默认映射的是 / 路径。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129152417865.png" alt="image-20230129152417865" loading="lazy"></p><p>Tomcat-Servlet；<br> 多个Servlet都能处理到同一层路径，精确优选原则<br> A： /my/<br> B： /my/1</p><h4 id="_2、使用registrationbean" tabindex="-1"><a class="header-anchor" href="#_2、使用registrationbean" aria-hidden="true">#</a> 2、使用RegistrationBean</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRegistConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">MyServlet</span> myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">&quot;/my&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/my02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token class-name">MyFilter</span> myFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span>
        <span class="token class-name">FilterRegistrationBean</span> filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;/my&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletListenerRegistrationBean</span> <span class="token function">myListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">MySwervletContextListener</span> mySwervletContextListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySwervletContextListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token punctuation">(</span>mySwervletContextListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9、嵌入式servlet容器" tabindex="-1"><a class="header-anchor" href="#_9、嵌入式servlet容器" aria-hidden="true">#</a> 9、嵌入式Servlet容器</h3><h4 id="_1、切换嵌入式servlet容器" tabindex="-1"><a class="header-anchor" href="#_1、切换嵌入式servlet容器" aria-hidden="true">#</a> 1、切换嵌入式Servlet容器</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129153355545.png" alt="image-20230129153355545" loading="lazy"></p><h4 id="_2、定制servlet容器" tabindex="-1"><a class="header-anchor" href="#_2、定制servlet容器" aria-hidden="true">#</a> 2、定制Servlet容器</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129153440517.png" alt="image-20230129153440517" loading="lazy"></p><h3 id="_10、定制化原理" tabindex="-1"><a class="header-anchor" href="#_10、定制化原理" aria-hidden="true">#</a> 10、定制化原理</h3><h4 id="_1、定制化的常见方式" tabindex="-1"><a class="header-anchor" href="#_1、定制化的常见方式" aria-hidden="true">#</a> 1、定制化的常见方式</h4><p><strong>①修改配置文件</strong><br><strong>②xxxxxCustomizer</strong><br><strong>③编写自定义的配置类 xxxConfiguration；+ @Bean替换、增加容器中默认组件；视图解析器</strong><br><strong>④Web应用 编写一个配置类实现 WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129153616598.png" alt="image-20230129153616598" loading="lazy"></p><h4 id="_2、原理分析套路" tabindex="-1"><a class="header-anchor" href="#_2、原理分析套路" aria-hidden="true">#</a> 2、原理分析套路</h4><p><strong>场景starter</strong> <strong>- xxxxAutoConfiguration - 导入xxx组件 - 绑定xxxProperties --</strong> <strong>绑定配置文件项</strong></p><h2 id="_6、数据访问" tabindex="-1"><a class="header-anchor" href="#_6、数据访问" aria-hidden="true">#</a> 6、数据访问</h2><h3 id="_1、sql" tabindex="-1"><a class="header-anchor" href="#_1、sql" aria-hidden="true">#</a> 1、SQL</h3><h4 id="_1、数据源的自动配置" tabindex="-1"><a class="header-anchor" href="#_1、数据源的自动配置" aria-hidden="true">#</a> 1、数据源的自动配置</h4><h5 id="_1、导入jdbc场景" tabindex="-1"><a class="header-anchor" href="#_1、导入jdbc场景" aria-hidden="true">#</a> 1、导入JDBC场景</h5><p>① 导入JDBC starter：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>starter帮忙导入的内容：数据源(连接池)、jdbc、事务....</strong><br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129162828197.png" alt="image-20230129162828197" loading="lazy"></p><p><strong>没有导入驱动的原因：官方不知道我们接下要操作什么数据库。</strong><br> ② <strong>因此要导入mysql驱动的依赖:</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>springboot做了版本仲裁，默认版本：8.0.22<br> 修改版本的方式：<br> ①通过依赖修改版本号（maven的就近依赖原则）<br> ②重新声明版本（maven的就近依赖原则）</p><h5 id="_2、分析自动配置" tabindex="-1"><a class="header-anchor" href="#_2、分析自动配置" aria-hidden="true">#</a> 2、分析自动配置</h5><h6 id="_1、自动配置的类" tabindex="-1"><a class="header-anchor" href="#_1、自动配置的类" aria-hidden="true">#</a> 1、自动配置的类</h6><p>DataSourceAutoConfiguration类：<strong>数据源</strong> 的自动配置<br> 修改数据源相关配置：修改 <strong>spring.datasource</strong><br> 数据库连接池池的配置，自己容器中没有 DataSource 才自动配置<br> 底层配置好的连接池是：HikariDataSource</p><p>DataSourceTransactionManagerAutoConfiguration类： <strong>事务</strong> 管理器的自动配置</p><p>JdbcTemplateAutoConfiguration类： <strong>JdbcTemplate</strong> 的自动配置，可以来对数据库进行 <strong>crud</strong><br> 可以修改这个配置项 @ConfigurationProperties(prefix = <strong>&quot;spring.jdbc&quot;</strong>) 来修改JdbcTemplat<br> 容器中已经 <strong>有了JdbcTemplate</strong>这个组件（可以<strong>自动注入</strong>）</p><p>JndiDataSourceAutoConfiguration类： jndi的自动配置</p><p>XADataSourceAutoConfiguration乐扣： 分布式事务相关的</p><h5 id="_3、数据源配置" tabindex="-1"><a class="header-anchor" href="#_3、数据源配置" aria-hidden="true">#</a> 3、数据源配置</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> <span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span>
  <span class="token key atrule">jdbc</span><span class="token punctuation">:</span>
    <span class="token key atrule">template</span><span class="token punctuation">:</span>
      <span class="token key atrule">query-timeout</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment">#三秒后数据没查询出来认为超时</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、测试-1" tabindex="-1"><a class="header-anchor" href="#_4、测试-1" aria-hidden="true">#</a> 4、测试</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">Boot05WebAdminApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">&quot;select count(*) from user&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、使用druid数据源" tabindex="-1"><a class="header-anchor" href="#_2、使用druid数据源" aria-hidden="true">#</a> 2、使用Druid数据源</h4><p>整合第三方技术的两种方式：<br> ① <strong>自定义数据源：</strong><br> 原生JDBC数据源配置的 DataSourceAutoConfiguration 类在没有 DataSource 对象的时候自动创建<br> 所以只需要自己配置 <strong>Configuration 类的 DataSource 对象</strong>，返回其他数据源到IOC中即可</p><p>​ ② <strong>找starter</strong></p><h5 id="_1、方式一-自定义方式" tabindex="-1"><a class="header-anchor" href="#_1、方式一-自定义方式" aria-hidden="true">#</a> 1、方式一：自定义方式</h5><p>导入druid依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1、创建数据源" tabindex="-1"><a class="header-anchor" href="#_1、创建数据源" aria-hidden="true">#</a> 1、创建数据源</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDataSourceConfig</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**默认的自动配置：容器中没有才会自动配置
     * @ConditionalOnMissingBean(DataSource.class)
     */</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;spring.datasource&quot;</span><span class="token punctuation">)</span> <span class="token comment">//自动绑定</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        dataSource.setUrl(&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;);</span>
<span class="token comment">//        dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span>
<span class="token comment">//        dataSource.setUsername(&quot;root&quot;);</span>
<span class="token comment">//        dataSource.setPassword(&quot;root&quot;);</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、方式二-官方starter方式" tabindex="-1"><a class="header-anchor" href="#_2、方式二-官方starter方式" aria-hidden="true">#</a> 2、方式二：官方starter方式</h5><h6 id="_1、引入druid-starter" tabindex="-1"><a class="header-anchor" href="#_1、引入druid-starter" aria-hidden="true">#</a> 1、引入druid-starter</h6><p>druid-starter引入的内容：druid数据源，slf4j，springboot自动配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>druid注入数据源：<br> 在 springboot 官方注入数据源之前注入一个数据源，官方的就不生效了</strong></p><h6 id="_2、分析自动配置-1" tabindex="-1"><a class="header-anchor" href="#_2、分析自动配置-1" aria-hidden="true">#</a> 2、分析自动配置</h6><p>扩展配置项：<strong>spring.datasource.druid</strong></p><p>DruidSpringAopConfiguration.class,： 监控 SpringBean 的<br> 配置项：<strong>spring.datasource.druid.aop-patterns</strong></p><p>DruidStatViewServletConfiguration.class： 监控页的配置：<br> 配置项：<strong>spring.datasource.druid.stat-view-servlet 默认开启</strong></p><p>DruidWebStatFilterConfiguration.class, web监控配置<br> 配置项：<strong>spring.datasource.druid.web-stat-filter；默认开启</strong></p><p>DruidFilterConfiguration.class})：所有Druid自己filter的配置</p><h6 id="_3、配置示例" tabindex="-1"><a class="header-anchor" href="#_3、配置示例" aria-hidden="true">#</a> 3、配置示例</h6><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> <span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span>

    <span class="token key atrule">druid</span><span class="token punctuation">:</span>
      <span class="token key atrule">aop-patterns</span><span class="token punctuation">:</span> com.atguigu.admin.*  <span class="token comment">#监控SpringBean</span>
      <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall     <span class="token comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span>

      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>   <span class="token comment"># 配置监控页功能</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> admin
        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> admin
        <span class="token key atrule">resetEnable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

      <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>  <span class="token comment"># 监控web</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">urlPattern</span><span class="token punctuation">:</span> /*
        <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">&#39;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#39;</span>

      <span class="token key atrule">filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">stat</span><span class="token punctuation">:</span>    <span class="token comment"># 对上面filters里面的stat的详细配置</span>
          <span class="token key atrule">slow-sql-millis</span><span class="token punctuation">:</span> <span class="token number">1000</span>
          <span class="token key atrule">logSlowSql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">wall</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">config</span><span class="token punctuation">:</span>
            <span class="token key atrule">drop-table-allow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、整合mybatis" tabindex="-1"><a class="header-anchor" href="#_3、整合mybatis" aria-hidden="true">#</a> 3、整合MyBatis</h4><p><strong>引入starter：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mybatis 引入的内容：mybatis，JDBCstarter，mybatis自动配置</p><h5 id="_1、配置模式" tabindex="-1"><a class="header-anchor" href="#_1、配置模式" aria-hidden="true">#</a> 1、配置模式</h5><p>全局配置文件<br> SqlSessionFactory: 自动配置好了<br> SqlSession：自动配置了 SqlSessionTemplate 组合了SqlSession<br> @Import(AutoConfiguredMapperScannerRegistrar.class）：找到所有标注了@Mapper注解的接口<br> Mapper： 只要我们写的操作MyBatis的接口标注了 <strong>@Mapper</strong> 就会被自动扫描进来</p><p>① 传统配置方式：</p><p>核心配置文件：mybatis-config.xml</p><p>yaml中：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">## 配置mybatis规则</span>
<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml  <span class="token comment">#全局配置文件位置</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/<span class="token important">*.xml</span>  <span class="token comment">#sql映射文件位置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mapper接口→绑定mapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--namespace对应mapper接口的全类名--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.t4mako.admin.mapper.PersonMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--public Person getPerson(Integer id);--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getPerson<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.t4mako.admin.bean.Person<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from person where id = #{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonMapper</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② <strong>通过yaml配置</strong></p><p>配置 private Configuration configuration; mybatis.configuration下面的所有，就是相当于改 mybatis 全局配置文件中的值</p><p><em><strong>无需创建mybatis-config.xml</strong></em></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#配置mybatis规则</span>
<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token comment">#config-location: classpath:mybatis-config.xml 无需配置</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/<span class="token important">*.xml</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span> <span class="token comment">#指定mybatis全局配置文件中的相关配置项</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结，配置方式：<br> 导入 mybatis 官方 starter<br> 编写 mapper 接口。<strong>标注@Mapper注解</strong><br> 编写 sql 映射文件并绑定 mapper 接口<br> 在 <strong>application.yaml中指定Mapper配置文件的位置</strong>，以及指定全局配置文件的信息 （建议：<strong>配置在mybatis.configuration标签项下</strong>）</p><h5 id="_2、注解模式" tabindex="-1"><a class="header-anchor" href="#_2、注解模式" aria-hidden="true">#</a> 2、注解模式</h5><p>mapper映射文件可以省略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CityMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from city where id=#{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">City</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">City</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、混合模式" tabindex="-1"><a class="header-anchor" href="#_3、混合模式" aria-hidden="true">#</a> 3、混合模式</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CityMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from city where id=#{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">City</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">City</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、总结" tabindex="-1"><a class="header-anchor" href="#_4、总结" aria-hidden="true">#</a> 4、总结</h5><p>最佳实战：<br> 引入 mybatis-starter<br><strong>配置 application.yam l中，指定 mapper-location 位置即可</strong><br> 编写 <strong>Mapper接口</strong> 并标注 <strong>@Mapper</strong> 注解<br> 简单方法直接注解方式<br> 复杂方法编写mapper.xml进行绑定映射<br><strong>配置类</strong> 上写 <strong>@MapperScan</strong>(&quot;com.t4mako.admin.mapper&quot;) 简化，其他的接口就可以 <strong>不用标注@Mapper注解</strong></p><h4 id="_4、整合-mybatis-plus" tabindex="-1"><a class="header-anchor" href="#_4、整合-mybatis-plus" aria-hidden="true">#</a> 4、整合 MyBatis-Plus</h4><h5 id="_1、引入starter-1" tabindex="-1"><a class="header-anchor" href="#_1、引入starter-1" aria-hidden="true">#</a> 1、引入starter</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>starter引入内容：mybatis-plus、jdbc-starter</strong></p><p>只需要我们的 **Mapper 继承 BaseMapper **就可以拥有crud能力，并且批量扫描进来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UesrMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BeseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,184),tn={href:"http://mybatis-plus.xxx",target:"_blank",rel:"noopener noreferrer"},en=e(`<p><strong>SqlSessionFactory 自动配置</strong> 好，底层是容器中的数据源</p><p><strong>mapperLocations 自动配置</strong> 好：<br> 默认值：<strong><code>classpath\\*:/mapper/\\**/\\*.xml</code></strong><br> 任意包的类路径下的<strong>所有mapper文件夹</strong>下任意路径下的<strong>所有xml</strong>都是sql映射文件。 建议<strong>sql映射文件，放在类路径mapper</strong>下</p><p>容器中也<strong>自动配置好了 SqlSessionTemplate</strong><br> @Mapper 标注的接口也会被自动扫描<br> 建议<strong>直接 @MapperScan(&quot;com.t4mako.admin.mapper&quot;) 批量扫描</strong>就行</p><p><strong>@TableField(exist = false)：<br> mybatis-plus的注解，标注在bean类的属性上，表示该属性在表中不存在</strong></p><h5 id="_2、crud功能" tabindex="-1"><a class="header-anchor" href="#_2、crud功能" aria-hidden="true">#</a> 2、CRUD功能</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/delete/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span>
                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;pn&quot;</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> pn<span class="token punctuation">,</span>
                         <span class="token class-name">RedirectAttributes</span> ra<span class="token punctuation">)</span><span class="token punctuation">{</span>

    userService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ra<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;pn&quot;</span><span class="token punctuation">,</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;redirect:/dynamic_table&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/dynamic_table&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dynamic_table</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;pn&quot;</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> pn<span class="token punctuation">,</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//表格内容的遍历</span>
    <span class="token comment">//        response.sendError</span>
    <span class="token comment">//     List&lt;User&gt; users = Arrays.asList(new User(&quot;zhangsan&quot;, &quot;123456&quot;),</span>
    <span class="token comment">//                new User(&quot;lisi&quot;, &quot;123444&quot;),</span>
    <span class="token comment">//                new User(&quot;haha&quot;, &quot;aaaaa&quot;),</span>
    <span class="token comment">//                new User(&quot;hehe &quot;, &quot;aaddd&quot;));</span>
    <span class="token comment">//        model.addAttribute(&quot;users&quot;,users);</span>
    <span class="token comment">//</span>
    <span class="token comment">//        if(users.size()&gt;3){</span>
    <span class="token comment">//            throw new UserTooManyException();</span>
    <span class="token comment">//        }</span>
    <span class="token comment">//从数据库中查出user表中的用户进行展示</span>

    <span class="token comment">//构造分页参数</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pn<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用page进行分页</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userPage <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//        userPage.getRecords()</span>
    <span class="token comment">//        userPage.getCurrent()</span>
    <span class="token comment">//        userPage.getPages()</span>


    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span>userPage<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token string">&quot;table/dynamic_table&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、nosql" tabindex="-1"><a class="header-anchor" href="#_2、nosql" aria-hidden="true">#</a> 2、NoSQL</h3><h4 id="_1、redis自动配置" tabindex="-1"><a class="header-anchor" href="#_1、redis自动配置" aria-hidden="true">#</a> 1、Redis自动配置</h4><p>引入starter</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动配置：<br> 自动配置类：RedisAutoConfiguration 。RedisProperties 属性类 --&gt; <strong>spring.redis.xxx是对redis的配置</strong><br> 连接工厂是准备好的。LettuceConnectionConfiguration、JedisConnectionConfiguration<br> 自动注入了RedisTemplate&lt;Object, Object&gt; ： xxxTemplate；<br> 自动注入了StringRedisTemplate；k：v都是String<br> key：value<br> 底层只要我们使用 StringRedisTemplate、RedisTemplate就可以操作redis</p><h4 id="_2、redistemplate-与-lettuce" tabindex="-1"><a class="header-anchor" href="#_2、redistemplate-与-lettuce" aria-hidden="true">#</a> 2、RedisTemplate 与 Lettuce</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> operations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    operations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> hello <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、切换至jedis" tabindex="-1"><a class="header-anchor" href="#_3、切换至jedis" aria-hidden="true">#</a> 3、切换至jedis</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--导入jedis--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> r<span class="token punctuation">-</span>bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span> lfy<span class="token punctuation">:</span>Lfy123456
      <span class="token key atrule">client-type</span><span class="token punctuation">:</span> jedis
      <span class="token key atrule">jedis</span><span class="token punctuation">:</span>
        <span class="token key atrule">pool</span><span class="token punctuation">:</span>
          <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、单元测试" tabindex="-1"><a class="header-anchor" href="#_7、单元测试" aria-hidden="true">#</a> 7、单元测试</h2><h3 id="_1、junit5-的变化" tabindex="-1"><a class="header-anchor" href="#_1、junit5-的变化" aria-hidden="true">#</a> 1、JUnit5 的变化</h3><p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong><br> 作为最新版本的JUnit框架，JUnit5与之前版本的Junit框架有很大的不同。由三个不同子项目的几个不同模块组成：<br> JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p><p>JUnit Platform: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。<br> JUnit Jupiter: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部 包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。<br> JUnit Vintage: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</p><p>注意：<br> SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</p><p><strong>引入单元测试依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现在单元测试的使用方式：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">Boot05WebAdminApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot整合Junit以后：<br> 编写测试方法：@Test标注（注意需要使用junit5版本的注解）<br> Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</p><h3 id="_2、junit5常用注解" tabindex="-1"><a class="header-anchor" href="#_2、junit5常用注解" aria-hidden="true">#</a> 2、JUnit5常用注解</h3>`,29),pn={href:"https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations",target:"_blank",rel:"noopener noreferrer"},on=e(`<ul><li>**@Test 😗*表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li>**@ParameterizedTest 😗*表示方法是参数化测试，下方会有详细介绍</li><li>**@RepeatedTest 😗*表示方法可重复执行，下方会有详细介绍</li><li><strong>@DisplayName :<strong>为测试</strong>类</strong>或者测试<strong>方法</strong>设置<strong>展示名称</strong></li><li>**@BeforeEach 😗*表示在每个单元测试之前执行</li><li>**@AfterEach 😗*表示在每个单元测试之后执行</li><li>**@BeforeAll 😗*表示在所有单元测试之前执行</li><li>**@AfterAll 😗*表示在所有单元测试之后执行</li><li>**@Tag 😗*表示单元测试类别，类似于JUnit4中的@Categories</li><li>**@Disabled 😗*表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li><li>**@Timeout 😗*表示测试方法运行如果超过了指定时间将会返回错误</li><li>**@ExtendWith 😗*为测试类或测试方法提供扩展类引用</li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;测试DisplayName在类上注解&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUnit5Test</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;测试DisplayName注解&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Timeout</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span>unit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span> <span class="token comment">//超过500毫秒抛出超时异常</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RepeatedTest</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">//重复测试5此</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">testBeforeEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试就要开始了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterEach</span>
    <span class="token keyword">void</span> <span class="token function">testAfterEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试就要结束了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@BeforeAll</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testBeforeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;all测试就要开始了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterAll</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testAfterAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;all测试就要结束了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、断言-assertions" tabindex="-1"><a class="header-anchor" href="#_3、断言-assertions" aria-hidden="true">#</a> 3、断言（assertions）</h3><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法。<br> 断言检查业务逻辑返回的数据是否合理。<br><strong>所有的测试运行结束以后，会有一个详细的测试报告；</strong></p><p>断言分类：<br> 简单断言、数组断言、组合断言、异常断言、超时断言、快速失败</p><p><strong>断言：前面的断言失败，后面的断言都不会执行</strong></p><h4 id="_1、简单断言" tabindex="-1"><a class="header-anchor" href="#_1、简单断言" aria-hidden="true">#</a> 1、简单断言</h4><p>用来对单个值进行简单的验证。如：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;simple assertion&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;simple math&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token function">assertNotSame</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">assertSame</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token function">assertNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">assertNotNull</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、数组断言" tabindex="-1"><a class="header-anchor" href="#_2、数组断言" aria-hidden="true">#</a> 2、数组断言</h4><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;array assertion&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">assertArrayEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相等</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、组合断言" tabindex="-1"><a class="header-anchor" href="#_3、组合断言" aria-hidden="true">#</a> 3、组合断言</h4><p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;assert all&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token string">&quot;Math&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
 <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、异常断言" tabindex="-1"><a class="header-anchor" href="#_4、异常断言" aria-hidden="true">#</a> 4、异常断言</h4><p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule<strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式</strong>Assertions.assertThrows()** ,配合函数式编程就可以进行使用。</p><p>异常断言：一般断定业务逻辑一定出现异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;异常测试&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ArithmeticException</span> exception <span class="token operator">=</span> <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span>
           <span class="token comment">//扔出断言异常</span>
            <span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;业务逻辑正常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、超时断言" tabindex="-1"><a class="header-anchor" href="#_5、超时断言" aria-hidden="true">#</a> 5、超时断言</h4><p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;超时测试&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timeoutTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果测试方法时间超过1s将会异常</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、快速失败" tabindex="-1"><a class="header-anchor" href="#_6、快速失败" aria-hidden="true">#</a> 6、快速失败</h4><p>通过 fail 方法直接使得测试失败</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;fail&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;This should fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、前置条件-assumptions" tabindex="-1"><a class="header-anchor" href="#_4、前置条件-assumptions" aria-hidden="true">#</a> 4、前置条件（assumptions）</h3><p>JUnit 5 中的前置条件（assumptions【假设】）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;前置条件&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssumptionsTest</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> environment <span class="token operator">=</span> <span class="token string">&quot;DEV&quot;</span><span class="token punctuation">;</span>
 
 <span class="token annotation punctuation">@Test</span>
 <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;simple&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleAssume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assumeTrue</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">&quot;DEV&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assumeFalse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">&quot;PROD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
 <span class="token annotation punctuation">@Test</span>
 <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;assume then do&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assumeThenDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assumingThat</span><span class="token punctuation">(</span>
       <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">&quot;DEV&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;In DEV&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得<strong>测试执行终止</strong>。<br> assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p><h3 id="_5、嵌套测试" tabindex="-1"><a class="header-anchor" href="#_5、嵌套测试" aria-hidden="true">#</a> 5、嵌套测试</h3><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p><p>嵌套测试情况下，<strong>外层的Test不能驱动内层的Before(After)Each/All之类的方法</strong>提前/之后运行<br><strong>内层的Test可以驱动外层的Before(After)Each/All之类的方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;A stack&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TestingAStackDemo</span> <span class="token punctuation">{</span>

    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> stack<span class="token punctuation">;</span><span class="token comment">//①</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;is instantiated with new Stack()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">isInstantiatedWithNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//①-②</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Nested</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;when new&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">WhenNew</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@BeforeEach</span>
        <span class="token keyword">void</span> <span class="token function">createNewStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//①-③</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Test</span>
        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;is empty&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">void</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">assertTrue</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//①-③-④</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Test</span>
        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;throws EmptyStackException when popped&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">void</span> <span class="token function">throwsExceptionWhenPopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">EmptyStackException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> stack<span class="token operator">::</span><span class="token function">pop</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Test</span>
        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;throws EmptyStackException when peeked&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">void</span> <span class="token function">throwsExceptionWhenPeeked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">EmptyStackException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> stack<span class="token operator">::</span><span class="token function">peek</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Nested</span>
        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;after pushing an element&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">class</span> <span class="token class-name">AfterPushing</span> <span class="token punctuation">{</span> <span class="token comment">//内部类的内部类</span>

            <span class="token class-name">String</span> anElement <span class="token operator">=</span> <span class="token string">&quot;an element&quot;</span><span class="token punctuation">;</span>

            <span class="token annotation punctuation">@BeforeEach</span>
            <span class="token keyword">void</span> <span class="token function">pushAnElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>anElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Test</span>
            <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;it is no longer empty&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">void</span> <span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">assertFalse</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Test</span>
            <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;returns the element when popped and is empty&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">void</span> <span class="token function">returnElementWhenPopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">assertEquals</span><span class="token punctuation">(</span>anElement<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">assertTrue</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Test</span>
            <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;returns the element when peeked but remains not empty&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">void</span> <span class="token function">returnElementWhenPeeked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">assertEquals</span><span class="token punctuation">(</span>anElement<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">assertFalse</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、参数化测试" tabindex="-1"><a class="header-anchor" href="#_6、参数化测试" aria-hidden="true">#</a> 6、参数化测试</h3><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。<br> 利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持<strong>八大基础类以及String类型,Class类型</strong><br><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参<br><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参<br><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参<br><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p><p>CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestingDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ParameterizedTest</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;参数化测试&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">testParameterized</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ParameterizedTest</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;参数化测试2&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">&quot;stringProvider&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">testParameterized2</span><span class="token punctuation">(</span><span class="token class-name">String</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">stringProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、迁移指南" tabindex="-1"><a class="header-anchor" href="#_7、迁移指南" aria-hidden="true">#</a> 7、迁移指南</h3><p>使用junit5测试，在进行迁移的时候需要注意如下的变化：<br> 注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。<br> 把@Before 和@After 替换成@BeforeEach 和@AfterEach。<br> 把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。<br> 把@Ignore 替换成@Disabled。<br> 把@Category 替换成@Tag。<br> 把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。</p><h2 id="_8、指标监控" tabindex="-1"><a class="header-anchor" href="#_8、指标监控" aria-hidden="true">#</a> 8、指标监控</h2><h3 id="_1、springboot-actuator" tabindex="-1"><a class="header-anchor" href="#_1、springboot-actuator" aria-hidden="true">#</a> 1、SpringBoot Actuator</h3><h4 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介" aria-hidden="true">#</a> 1、简介</h4><p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p><p>引入场景：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、1-x与2-x的不同" tabindex="-1"><a class="header-anchor" href="#_2、1-x与2-x的不同" aria-hidden="true">#</a> 2、1.x与2.x的不同</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230131173627517.png" alt="image-20230131173627517" loading="lazy"></p><h4 id="_3、如何使用" tabindex="-1"><a class="header-anchor" href="#_3、如何使用" aria-hidden="true">#</a> 3、如何使用</h4>`,51),cn=n("br",null,null,-1),ln={href:"http://localhost:8080/actuator/%5C*%5C",target:"_blank",rel:"noopener noreferrer"},un=e(`<p>暴露所有监控信息为HTTP:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#management是所有的actuator的配置</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled-by-default</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#默认开启所有监控端点</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>  <span class="token comment">#以web方式暴露所有端点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、可视化" tabindex="-1"><a class="header-anchor" href="#_4、可视化" aria-hidden="true">#</a> 4、可视化</h4>`,3),rn={href:"https://github.com/codecentric/spring-boot-admin",target:"_blank",rel:"noopener noreferrer"},dn=e(`<h3 id="_2、actuator-endpoint" tabindex="-1"><a class="header-anchor" href="#_2、actuator-endpoint" aria-hidden="true">#</a> 2、Actuator Endpoint</h3><h4 id="_1、最常使用的端点" tabindex="-1"><a class="header-anchor" href="#_1、最常使用的端点" aria-hidden="true">#</a> 1、最常使用的端点</h4><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td></tr><tr><td><code>beans</code></td><td>显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td></tr><tr><td><code>conditions</code></td><td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td><code>configprops</code></td><td>显示所有<code>@ConfigurationProperties</code>。</td></tr><tr><td><code>env</code></td><td>暴露Spring的属性<code>ConfigurableEnvironment</code></td></tr><tr><td><code>flyway</code></td><td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td></tr><tr><td><code>health</code></td><td>显示应用程序运行状况信息。</td></tr><tr><td><code>httptrace</code></td><td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td></tr><tr><td><code>integrationgraph</code></td><td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志的配置。</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的“指标”信息。</td></tr><tr><td><code>mappings</code></td><td>显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的计划任务。</td></tr><tr><td><code>sessions</code></td><td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td></tr><tr><td><code>shutdown</code></td><td>使应用程序正常关闭。默认禁用。</td></tr><tr><td><code>startup</code></td><td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td></tr><tr><td><code>threaddump</code></td><td>执行线程转储。</td></tr></tbody></table><p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>返回<code>hprof</code>堆转储文件。</td></tr><tr><td><code>jolokia</code></td><td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td></tr><tr><td><code>logfile</code></td><td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td></tr><tr><td><code>prometheus</code></td><td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td></tr></tbody></table><p>最常用的Endpoint（端点）<br><strong>Health：监控状况</strong><br><strong>Metrics：运行时指标</strong><br><strong>Loggers：日志记录</strong></p><h4 id="_2、health-endpoint" tabindex="-1"><a class="header-anchor" href="#_2、health-endpoint" aria-hidden="true">#</a> 2、Health Endpoint</h4><p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p><p>重要的几点：<br> health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告<br> 很多的健康检查默认已经自动配置好了，比如：数据库、redis等<br> 可以很容易的添加自定义的健康检查机制</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#management是所有的actuator的配置</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled-by-default</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#默认开启所有监控端点 默认为true</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>  <span class="token comment">#以web方式暴露所有端点</span>

<span class="token comment">#management.endpoint.端点名。xxxx 对某个端点的具体配置</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>  <span class="token comment">#控制单个端点显示详细信息</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、metrics-endpoint" tabindex="-1"><a class="header-anchor" href="#_3、metrics-endpoint" aria-hidden="true">#</a> 3、Metrics Endpoint</h4><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到；</p><ul><li>通过Metrics对接多种监控系统</li><li>简化核心Metrics开发</li><li>添加自定义Metrics或者扩展已有Metrics</li></ul><h4 id="_4、管理endpoints" tabindex="-1"><a class="header-anchor" href="#_4、管理endpoints" aria-hidden="true">#</a> 4、管理Endpoints</h4><h6 id="_1、开启与禁用endpoints" tabindex="-1"><a class="header-anchor" href="#_1、开启与禁用endpoints" aria-hidden="true">#</a> 1、开启与禁用Endpoints</h6><p>默认所有的Endpoint除shutdown都是开启的。<br> 需要开启或者禁用某个Endpoint。配置模式为 management.endpoint.&lt;endpointName&gt;.enabled = true<br> 或者禁用所有的Endpoint然后手动开启指定的Endpoint</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#management是所有的actuator的配置</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled-by-default</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#默认关闭所有监控端点 默认为true</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>  <span class="token comment">#以web方式暴露所有端点</span>

<span class="token comment">#management.endpoint.端点名。xxxx 对某个端点的具体配置</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>  <span class="token comment">#控制单个端点显示详细信息</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">info</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">beans</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、暴露endpoints" tabindex="-1"><a class="header-anchor" href="#_2、暴露endpoints" aria-hidden="true">#</a> 2、暴露Endpoints</h5><p>支持的暴露方式</p><ul><li>HTTP：默认只暴露<strong>health</strong>和<strong>info</strong> Endpoint</li><li><strong>JMX</strong>：默认暴露所有Endpoint</li><li>除health和info，剩下的Endpoint都应该进行保护访问。如果引入SpringSecurity，则会默认配置安全访问规则</li></ul><h5 id="_3、定制-endpoint" tabindex="-1"><a class="header-anchor" href="#_3、定制-endpoint" aria-hidden="true">#</a> 3、定制 Endpoint</h5><h6 id="_1、定制-health-信息" tabindex="-1"><a class="header-anchor" href="#_1、定制-health-信息" aria-hidden="true">#</a> 1、定制 Health 信息</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//编写类继承AbstractHealthIndicator</span>
<span class="token annotation punctuation">@Component</span> <span class="token comment">//组件名为MyCom（把后面的截取掉）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComHealthIndicator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHealthIndicator</span> <span class="token punctuation">{</span>
    <span class="token comment">//编写真实的检查方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doHealthCheck</span><span class="token punctuation">(</span><span class="token class-name">Health<span class="token punctuation">.</span>Builder</span> builder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//mongodb 获取连接进行测试</span>
        <span class="token comment">//带回的数据</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//检查是否健康</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//builder.up(); //健康</span>
            builder<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;ms&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//builder.down();</span>
            builder<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">OUT_OF_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;连接超时&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;ms&quot;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        builder<span class="token punctuation">.</span><span class="token function">withDetail</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withDetails</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always <span class="token comment">#总是显示详细信息。可显示每个模块的状态信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、定制metrics信息" tabindex="-1"><a class="header-anchor" href="#_2、定制metrics信息" aria-hidden="true">#</a> 2、定制Metrics信息</h6><p>增加定制Metrics</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyService</span><span class="token punctuation">{</span>
    <span class="token class-name">Counter</span> counter<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">MeterRegistry</span> meterRegistry<span class="token punctuation">)</span><span class="token punctuation">{</span>
         counter <span class="token operator">=</span> meterRegistry<span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;myservice.method.running.counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">//也可以使用下面的方式</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token class-name">MeterBinder</span> <span class="token function">queueSize</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>registry<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;queueSize&quot;</span><span class="token punctuation">,</span> queue<span class="token operator">::</span><span class="token function">size</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、定制endpoint" tabindex="-1"><a class="header-anchor" href="#_3、定制endpoint" aria-hidden="true">#</a> 3、定制Endpoint</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Endpoint</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span> <span class="token comment">//端点名</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DockerEndpoint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ReadOperation</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">getDockerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;docker started...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@WriteOperation</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">restartDocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;docker restarted....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、原理解析" tabindex="-1"><a class="header-anchor" href="#_9、原理解析" aria-hidden="true">#</a> 9、原理解析</h2><h3 id="_1、profile功能" tabindex="-1"><a class="header-anchor" href="#_1、profile功能" aria-hidden="true">#</a> 1、Profile功能</h3><p>为了方便多环境适配，springboot简化了profile功能。（在不同的生产环境下切换不同的配置文件）</p><h4 id="_1、application-profile功能" tabindex="-1"><a class="header-anchor" href="#_1、application-profile功能" aria-hidden="true">#</a> 1、application-profile功能</h4><p>默认配置文件 application.yaml；任何时候都会加载<br> 指定环境配置文件 application-{参数}.yaml<br> 激活指定环境：<br> 配置文件激活<br> 命令行激活：java -jar xxx.jar --<strong>spring.profiles.active=prod --person.name=haha</strong><br> 修改配置文件的任意值，命令行优先<br> 默认配置与环境配置同时生效<br> 同名配置项，profile配置优先</p><h4 id="_2、-profile条件装配功能" tabindex="-1"><a class="header-anchor" href="#_2、-profile条件装配功能" aria-hidden="true">#</a> 2、@Profile条件装配功能</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span> <span class="token comment">//当生产环境是production时，类才生效</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductionConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、profile分组" tabindex="-1"><a class="header-anchor" href="#_3、profile分组" aria-hidden="true">#</a> 3、profile分组</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.profiles.group.production[0]</span><span class="token punctuation">=</span><span class="token value attr-value">proddb</span>
<span class="token key attr-name">spring.profiles.group.production[1]</span><span class="token punctuation">=</span><span class="token value attr-value">prodmq</span>

<span class="token comment">#使用：--spring.profiles.active=production  激活</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、外部化配置" tabindex="-1"><a class="header-anchor" href="#_2、外部化配置" aria-hidden="true">#</a> 2、外部化配置</h3><h4 id="_1、外部配置源" tabindex="-1"><a class="header-anchor" href="#_1、外部配置源" aria-hidden="true">#</a> 1、外部配置源</h4><p>常用：<strong>Java属性文件</strong>、<strong>YAML文件</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong>；</p><h4 id="_2、配置文件查找位置" tabindex="-1"><a class="header-anchor" href="#_2、配置文件查找位置" aria-hidden="true">#</a> 2、配置文件查找位置</h4><p>(1) classpath 根路径</p><p>(2) classpath 根路径下config目录</p><p>(3) jar包当前目录</p><p>(4) jar包当前目录的config目录</p><p>(5) /config子目录的直接子目录</p><h4 id="_3、配置文件加载顺序" tabindex="-1"><a class="header-anchor" href="#_3、配置文件加载顺序" aria-hidden="true">#</a> 3、配置文件加载顺序：</h4><ol><li>当前jar包内部的application.properties和application.yml</li><li>当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</li><li>引用的外部jar包的application.properties和application.yml</li><li>引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</li></ol><h4 id="_4、指定环境优先-外部优先-后面的可以覆盖前面的同名配置项" tabindex="-1"><a class="header-anchor" href="#_4、指定环境优先-外部优先-后面的可以覆盖前面的同名配置项" aria-hidden="true">#</a> 4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</h4><h3 id="_3、自定义starter" tabindex="-1"><a class="header-anchor" href="#_3、自定义starter" aria-hidden="true">#</a> 3、自定义starter</h3><h4 id="_1、starter启动原理" tabindex="-1"><a class="header-anchor" href="#_1、starter启动原理" aria-hidden="true">#</a> 1、starter启动原理</h4><p>starter-pom（pom的场景启动器）引入 <strong>autoconfigurer</strong> 包<br> autoconfigure包中配置使用 META-INF/spring.factories 中 EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类</p><p>starter→autoconfigure→spring-boot-starter</p><p>编写自动配置类 xxxAutoConfiguration -&gt; xxxxProperties</p><p>引入starter --- xxxAutoConfiguration --- 容器中放入组件 ---- 绑定xxxProperties ---- 配置项</p><h4 id="_2、自定义starter" tabindex="-1"><a class="header-anchor" href="#_2、自定义starter" aria-hidden="true">#</a> 2、自定义starter</h4><p>atguigu-hello-spring-boot-starter（启动器）<br> atguigu-hello-spring-boot-starter-autoconfigure（自动配置包）</p><h3 id="_4、springboot原理" tabindex="-1"><a class="header-anchor" href="#_4、springboot原理" aria-hidden="true">#</a> 4、SpringBoot原理</h3><p>Spring原理、SpringMVC原理、自动配置原理、SpringBoot原理</p><h4 id="_1、springboot启动过程" tabindex="-1"><a class="header-anchor" href="#_1、springboot启动过程" aria-hidden="true">#</a> 1、SpringBoot启动过程</h4><p>分两大步：</p><p><strong>①创建 SpringApplication</strong><br> 保存一些信息<br> 判断当前应用的类型（通过 ClassUtils 类：原生servlet 还是 响应式编程）<br> 获取所有初始化启动引导器 bootstrappers（去spring.factories文件中找）<br> 找 ApplicationContextInitializer（去spring.factories找）<br> 找 ApplicationListener ；应用监听器（去spring.factories找）</p><p><strong>②运行SpringApplication</strong><br> StopWahtch：监听整个应用程序启动停止的监听器<br> 记录应用启动时间<br> 创建引导上下文（Context环境）<br> 获取到所有之前的 bootstrappers 挨个执行 intitialize() 来完成对引导启动器上下文环境设置<br> 让当前应用进入headless模式（简言之就是自力更生模式）<br> 获取所有 RunListener保存到SpringApplicationRunListene（运行监听器）（为了方便所有Listener进行事件感知）<br> 遍历 SpringApplicationRunListener 调用 starting 方法（项目正在 starting）<br> 保存命令行参数；ApplicationArguments<br> 准备环境 prepareEnvironment（）<br> 返回或者创建基础环境信息对象<br><strong>创建IOC容器</strong>（createApplicationContext（）） <br> 根据项目类型（Servlet）创建容器<br> 遍历所有的 ApplicationContextInitializer 。调用 initialize.。来对ioc容器进行初始化扩展功能<br> 遍历所有的 listener 调用 contextPrepared。EventPublishRunListenr；通知所有的监听器contextPrepared<br> 刷新IOC容器。refreshContext<br> 创建容器中的所有组件（Spring注解）<br> 所有监听 器 调用 listeners.started(context); 通知所有的监听器 started<br> 调用所有runners；callRunners()<br> 获取容器中的 ApplicationRunner<br> 获取容器中的 CommandLineRunner<br> 如果以上有异常，调用Listener 的 failed</p><h4 id="_2、application-events-and-listeners" tabindex="-1"><a class="header-anchor" href="#_2、application-events-and-listeners" aria-hidden="true">#</a> 2、Application Events and Listeners</h4>`,65),kn={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners",target:"_blank",rel:"noopener noreferrer"},mn=e('<h4 id="_3、applicationrunner-与-commandlinerunner" tabindex="-1"><a class="header-anchor" href="#_3、applicationrunner-与-commandlinerunner" aria-hidden="true">#</a> 3、ApplicationRunner 与 CommandLineRunner</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230201174654270.png" alt="image-20230201174654270" loading="lazy"></p><h2 id="_10、常见问题" tabindex="-1"><a class="header-anchor" href="#_10、常见问题" aria-hidden="true">#</a> 10、常见问题</h2><p>1、过滤器与拦截器的区别是什么</p><p>过滤器(Filter)和拦截器(Interceptor)都是在Web应用程序中用于拦截请求和响应的机制，但它们之间有以下几个区别：</p><ol><li>触发时间：过滤器在请求被分发给目标资源之前拦截请求，而拦截器在请求被分发给目标处理器(例如Controller)之前或之后拦截请求。</li><li>应用范围：过滤器可以在Web应用程序中的任何地方使用，而拦截器只能在Spring MVC应用程序中使用。</li><li>执行顺序：过滤器的执行顺序是根据它们在Web.xml中的声明顺序执行的，而拦截器的执行顺序是根据它们在Spring配置文件中的声明顺序执行的。</li><li>功能不同：过滤器是用于过滤请求和响应，例如修改请求参数，添加HTTP头等等。而拦截器用于在请求处理前或后执行某些操作，例如权限检查，日志记录等等。</li><li>对于返回结果的处理：过滤器可以直接处理请求和响应的内容，而拦截器只能拦截请求和响应的处理流程，无法直接处理内容。</li></ol><p>综上所述，虽然过滤器和拦截器都是用于拦截请求和响应的机制，但它们的触发时间、应用范围、执行顺序、功能和对于返回结果的处理等方面都存在差异。在实际开发中，开发人员应该根据具体的需求来选择合适的机制。</p>',7);function vn(gn,bn){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,d,l(" more "),k,n("p",null,[n("strong",null,[n("a",m,[s("springboot的官方文档"),t(a)])])]),v,n("p",null,[s("1、"),g,s(" ： *就某种场景（"),b,s("）"),h,s(" 2、只要引入 "),y,s("，这个场景的所有常规需要的 "),f,s(" 都 "),q,x,s(" 3、SpringBoot所有支持的场景"),w,n("a",_,[s("https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter"),t(a)]),S,s(" 4、见到的 "),C,s("： "),j,s("为我们提供的简化开发的场景启动器。"),M,s(" 5、所有 "),P,s(),A,s(":")]),I,n("p",null,[s("1、引入场景依赖："),E,n("a",R,[s("https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters"),t(a)])]),B,n("p",null,[s("3、是否需要修改"),T,s(" 参照文档修改配置项"),H,n("a",D,[s("https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties"),t(a)]),U,s(" 自己分析，xxxxProperties绑定了配置文件的哪些。"),L,s(" 自定义或加入替换组件"),J,s(" @Bean、@Component..."),N,s(" 自定义器"),F,O,s("；")]),V,n("p",null,[s("自动映射 /"),n("a",W,[s("webjars"),t(a)]),s("/**")]),z,n("p",null,[s("访问地址："),n("a",X,[s("http://localhost:8080/webjars/"),$,t(a)]),s(" 后面地址要按照依赖里面的包路径")]),G,n("p",null,[s("发送请求时，带上format参数："),Y,n("a",Q,[s("http://localhost:8080/test/person?format=json"),t(a)]),Z,n("a",K,[s("http://localhost:8080/test/person?format=xml"),t(a)])]),nn,sn,an,n("p",null,[s("MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定："),n("strong",null,[n("a",tn,[s("mybatis-plus.xxx"),t(a)])]),s(" 就是对 mybatis-plus 的定制")]),en,n("p",null,[s("JUnit5的注解与JUnit4的注解有所变化"),n("a",pn,[s("https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations"),t(a)])]),on,n("p",null,[s("引入场景"),cn,s(" 访问 "),n("strong",null,[n("a",ln,[s("http://localhost:8080/actuator/\\*\\"),t(a)])]),s("*")]),un,n("p",null,[n("a",rn,[s("https://github.com/codecentric/spring-boot-admin"),t(a)])]),dn,n("p",null,[n("a",kn,[s("https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners"),t(a)])]),mn])}const fn=p(u,[["render",vn],["__file","SpringBoot.html.vue"]]);export{fn as default};
