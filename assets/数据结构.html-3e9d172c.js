import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as n,f as o}from"./app-2e8b2354.js";const s={},e=o('<h2 id="_1、线性表" tabindex="-1"><a class="header-anchor" href="#_1、线性表" aria-hidden="true">#</a> 1、线性表</h2><p>线性表按存储方式分为 <strong>顺序存储</strong> 和 <strong>链式存储</strong>，其 <strong>优缺点</strong> 不再赘述</p><p>线性表的基本操作：增删改查插计数等，注意链表的插入和删除等操作的指针指向顺序问题</p><p>链表有 <strong>单链表</strong>，<strong>循环链表</strong>，<strong>双向链表</strong> 等</p><h2 id="_2、栈与队列" tabindex="-1"><a class="header-anchor" href="#_2、栈与队列" aria-hidden="true">#</a> 2、栈与队列</h2><p>栈：<strong>先进后出</strong> 的线性表<br> 队列：<strong>先进先出</strong> 的线性表</p><p>栈的主要操作：出栈，入栈，取栈顶<br> 栈分为 <strong>顺序栈</strong>、<strong>链栈</strong></p><p>队列有 <strong>循环队列（注意判空判满的算法）</strong>、<strong>链队列</strong>、<strong>优先队列（有优先级的队列）</strong></p><p>栈与队列的比较在此不再赘述</p><h2 id="_3、串与数组" tabindex="-1"><a class="header-anchor" href="#_3、串与数组" aria-hidden="true">#</a> 3、串与数组</h2><p>串（通常指字符串）同样有 <strong>顺序存储</strong> 和 <strong>链式存储</strong></p><p>串的常规算法有增删改查插截取比较等</p><p>模式匹配算法（在 s 主串中寻找 t 子串）：</p><ul><li>Brute-Force 算法<br> 子串以步长 1来一遍遍匹配</li><li>KMP 算法</li></ul><p>数组通常讨论 <strong>一维数组</strong> 和 <strong>二维数组</strong></p><p>对称矩阵的压缩矩阵</p><p>三角矩阵的压缩矩阵</p><p>对角矩阵的压缩矩阵</p><p>稀疏矩阵的三元组表存储（数组下标、行下标、列下标、元素值）</p><h2 id="_4、树与二叉树" tabindex="-1"><a class="header-anchor" href="#_4、树与二叉树" aria-hidden="true">#</a> 4、树与二叉树</h2>',20),a=[e];function p(g,h){return t(),n("div",null,a)}const d=r(s,[["render",p],["__file","数据结构.html.vue"]]);export{d as default};
