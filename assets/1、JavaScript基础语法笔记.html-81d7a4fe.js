import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,b as n,d as c,e as l,f as s}from"./app-876c9d16.js";const i={},r=s(`<p>js是一种运行在客户端（浏览器）的编程语言，实现人机交互效果</p><p>js的作用：网页特效、表单验证、数据交互、服务端编程（node.js）</p><p>js的组成：ECMAScript（js基础语言） + Web ApIs（DOM+BOM）</p><h2 id="_1、js-引入方式" tabindex="-1"><a class="header-anchor" href="#_1、js-引入方式" aria-hidden="true">#</a> 1、JS 引入方式</h2><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p><h3 id="_1-1、内部方式" tabindex="-1"><a class="header-anchor" href="#_1-1、内部方式" aria-hidden="true">#</a> 1.1、内部方式</h3><p>通过 <code>script</code> 标签包裹 JavaScript 代码</p><p>内部方式通常写在底部（HTML的顺序加载）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2、外部形式" tabindex="-1"><a class="header-anchor" href="#_1-2、外部形式" aria-hidden="true">#</a> 1.2、外部形式</h3><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.js</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 script 标签<strong>使用 src 属性引入了某 .js 文件</strong>，那么 标签<strong>内部的代码会被忽略</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 此处的代码会被忽略</span>
  	<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3、js的注释" tabindex="-1"><a class="header-anchor" href="#_1-3、js的注释" aria-hidden="true">#</a> 1.3、js的注释</h3><p>单行注释：// <code>ctrl + /</code><br> 多行注释：/**/ <code>ctrl + alt + a</code></p><h3 id="_1-4、结束符" tabindex="-1"><a class="header-anchor" href="#_1-4、结束符" aria-hidden="true">#</a> 1.4、结束符</h3><p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用<strong>回车（enter）替代 ;</strong>。（注：css必须写 <code>;</code> ）</p><p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p><h2 id="_2、js-输入、输出" tabindex="-1"><a class="header-anchor" href="#_2、js-输入、输出" aria-hidden="true">#</a> 2、JS 输入、输出</h2><h3 id="_2-1、输出" tabindex="-1"><a class="header-anchor" href="#_2-1、输出" aria-hidden="true">#</a> 2.1、输出</h3><p><strong><code>alert()</code></strong> ：页面弹出警告对话框<br><strong><code>document.wirte()</code></strong>：向body输出内容或标签<br><strong>\`\`console.log()<code>**：控制台输出语法，调试用 （简写：log） **</code>console.dir(对象)\`</strong>：打印对象全部属性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;title&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、输入" tabindex="-1"><a class="header-anchor" href="#_2-2、输入" aria-hidden="true">#</a> 2.2、输入</h3><p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;input a number:&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、js-变量、常量" tabindex="-1"><a class="header-anchor" href="#_3、js-变量、常量" aria-hidden="true">#</a> 3、JS 变量、常量</h2><h3 id="_3-1、变量" tabindex="-1"><a class="header-anchor" href="#_3-1、变量" aria-hidden="true">#</a> 3.1、变量</h3><h4 id="_3-1-1、声明变量" tabindex="-1"><a class="header-anchor" href="#_3-1-1、声明变量" aria-hidden="true">#</a> 3.1.1、声明变量</h4><p>语法： <strong>let 变量名</strong></p><p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）<br> let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> 
    <span class="token keyword">let</span> age
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，推荐使用 <code>let</code> 声明变量</p><h4 id="_3-1-2、变量赋值" tabindex="-1"><a class="header-anchor" href="#_3-1-2、变量赋值" aria-hidden="true">#</a> 3.1.2、变量赋值</h4><p>声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 声明</span>
    <span class="token keyword">let</span> age
    <span class="token comment">// 赋值</span>
    age <span class="token operator">=</span> <span class="token number">18</span>
    
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
    num <span class="token operator">=</span> <span class="token number">12</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：字符串需要加引号</p></blockquote><h4 id="_3-1-3、关键字" tabindex="-1"><a class="header-anchor" href="#_3-1-3、关键字" aria-hidden="true">#</a> 3.1.3、关键字</h4><p>以下是使用 <code>let</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li><strong>不允许重复声明</strong></li><li>允许同时声明多个变量并赋值</li><li>JavaScript 中内置的一些关键字不能被当做变量名</li></ol><p>以下是使用 <code>var</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li><strong>允许重复声明</strong></li><li>允许同时声明多个变量并赋值</li><li>可以先使用 再声明</li></ol><h4 id="_3-1-4、变量命名规则" tabindex="-1"><a class="header-anchor" href="#_3-1-4、变量命名规则" aria-hidden="true">#</a> 3.1.4、变量命名规则</h4><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p><ol><li>只能是<strong>字母、数字、_ 、$</strong>，且不能能数字开头</li><li>字母<strong>区分大小写</strong>，如 Age 和 age 是不同的变量</li><li>JavaScript 内部已占用于单词**（关键字或保留字）不允许使用**</li><li>尽量保证变量具有一定的语义，见字知义</li><li>命名使用<strong>小驼峰</strong>，如userName</li></ol><h3 id="_3-2、常量" tabindex="-1"><a class="header-anchor" href="#_3-2、常量" aria-hidden="true">#</a> 3.2、常量</h3><p>使用 <strong>const</strong> 声明的变量称为“常量”<br> 命名规范：和变量一致<br> 声明变量建议：<strong>const优先</strong>，<strong>数组和对象</strong>尽量使用const</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意： <strong>常量</strong>不允许重新赋值,<strong>声明的时候必须赋值（初始化）</strong></p><blockquote><p>注意：const声明的对象，可以改变它的属性方法</p></blockquote><h3 id="_3-3、数组" tabindex="-1"><a class="header-anchor" href="#_3-3、数组" aria-hidden="true">#</a> 3.3、数组</h3><p>数组的定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">,</span>data3<span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的取值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">]</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的长度：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4、js-数据类型" tabindex="-1"><a class="header-anchor" href="#_4、js-数据类型" aria-hidden="true">#</a> 4、JS 数据类型</h2><p>JS 数据类型整体分为两类：<br> 基本数据类型（number，string，boolean，undefined，null）<br> 引用数据类型（object对象）</p><h3 id="_4-1、number-数值类型" tabindex="-1"><a class="header-anchor" href="#_4-1、number-数值类型" aria-hidden="true">#</a> 4.1、number 数值类型</h3><p>JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 正整数</span>
<span class="token keyword">let</span> price <span class="token operator">=</span> <span class="token number">12.345</span> <span class="token comment">// 小数</span>
<span class="token keyword">let</span> temperature <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">40</span> <span class="token comment">// 负数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算数运算符：+ - * / % （加减乘除 取余）</p><p><strong>NaN （not a number）</strong> 代表一个计算错误，它是一个不正确的或者一个未定义的数学操作<br> NaN 是<strong>粘性</strong>的。任何对NaN的操作都会返回NaN</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、字符串类型" tabindex="-1"><a class="header-anchor" href="#_4-2、字符串类型" aria-hidden="true">#</a> 4.2、字符串类型</h3><p>通过单引号（ <code>&#39;&#39;</code>） 、双引号（ <code>&quot;&quot;</code>）或反引号包裹的数据都叫字符串，<strong>单引号</strong>和<strong>双引号没有本质上的区别</strong>，推荐<strong>使用单引号</strong>。</p><p>注意事项：<br> 1、无论单引号或是双引号必须成对使用<br> 2、单引号/双引号可以互相嵌套，但是不以自已嵌套自已（引号找与之匹配的最近的）<br> 3/必要时可以使用<strong>转义符 <code>\\</code></strong>，输出单引号或双引号</p><p>字符串拼接：+ 可以实现字符串拼接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;AA&#39;</span>
<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;BB&#39;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>str <span class="token operator">+</span> str2<span class="token punctuation">)</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token function">alert</span><span class="token punctuation">(</span>str <span class="token operator">+</span> str2<span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>str <span class="token operator">+</span> age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、模板字符串" tabindex="-1"><a class="header-anchor" href="#_4-3、模板字符串" aria-hidden="true">#</a> 4.3、模板字符串</h3><p>拼接字符串和变量比较麻烦，因此引入<strong>模板字符串</strong></p><p>语法：<strong>\`\`</strong> （反引号）<br> 内容拼接变量时，用 <strong>\${}</strong> 包住变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4、boolean-类型" tabindex="-1"><a class="header-anchor" href="#_4-4、boolean-类型" aria-hidden="true">#</a> 4.4、boolean 类型</h3><p>boolean类型的两种取值：<strong>true、false</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显示装换 Boolen()：<br> **<code>&#39;&#39;、0、undefined、null、false、NaN </code>**转换为布尔值后都是 <strong>false</strong>，其余则为 True</p><h3 id="_4-5、undefined-未定义类型" tabindex="-1"><a class="header-anchor" href="#_4-5、undefined-未定义类型" aria-hidden="true">#</a> 4.5、undefined 未定义类型</h3><p>未定义类型只有一个值：undefined</p><p>只声明变量，<strong>不赋值的情况下，变量默认值为undefined</strong>，一般很少（直接）为某个变量赋值为undefined</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> 
    <span class="token comment">// 只声明了变量，并末赋值</span>
    <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token comment">// 结果为 undefined</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6、null-空类型" tabindex="-1"><a class="header-anchor" href="#_4-6、null-空类型" aria-hidden="true">#</a> 4.6、null 空类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>undefined 表示没有赋值<br> null 表示赋值了，但是内容为空（null：尚未创建的对象）</p><h3 id="_4-7、检测数据类型" tabindex="-1"><a class="header-anchor" href="#_4-7、检测数据类型" aria-hidden="true">#</a> 4.7、检测数据类型</h3><p>通过关键字 typeof 检测数据类型</p><p>用法：<br><strong>1、作为运算符：typeof data</strong><br><strong>2、函数形式：type(data)</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token comment">//object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8、类型转换" tabindex="-1"><a class="header-anchor" href="#_4-8、类型转换" aria-hidden="true">#</a> 4.8、类型转换</h3><h4 id="_4-8-1、隐式转换" tabindex="-1"><a class="header-anchor" href="#_4-8-1、隐式转换" aria-hidden="true">#</a> 4.8.1、隐式转换</h4><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换</p><p><code>console.log(+&#39;123&#39;) //转换为数字型</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">13</span> <span class="token comment">// 数值</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span> <span class="token comment">// 字符串</span>

<span class="token comment">//将数值 num 转换成了字符串，相当于 &#39;13&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">+</span> num2<span class="token punctuation">)</span> <span class="token comment">//132</span>

<span class="token comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">-</span> num2<span class="token punctuation">)</span> <span class="token comment">//11</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment">//转换为数字型</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-8-2、显示转换" tabindex="-1"><a class="header-anchor" href="#_4-8-2、显示转换" aria-hidden="true">#</a> 4.8.2、显示转换</h4><p>为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p><p>通过 <code>Number</code> 显示转换成数值类型，当转换失败时结果为 <code>NaN</code><br> NaN 也是number 类型的数据，代表非数字</p><p>语法：<strong>Number(data)</strong><br><strong>praseInt(data)</strong> 只保留整数<br><strong>parseFloat(data)</strong> 可以保留小数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//123</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;12.5px3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;15.25px50.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//51.25</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;aaa15.25px50.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、js-运算符" tabindex="-1"><a class="header-anchor" href="#_5、js-运算符" aria-hidden="true">#</a> 5、JS 运算符</h2><h3 id="_5-1、算数运算符" tabindex="-1"><a class="header-anchor" href="#_5-1、算数运算符" aria-hidden="true">#</a> 5.1、算数运算符</h3><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>求和</td></tr><tr><td>-</td><td>求差</td></tr><tr><td>*</td><td>求积</td></tr><tr><td>/</td><td>求商</td></tr><tr><td>%</td><td>取余</td></tr></tbody></table><p>注意：在计算失败时，显示的结果是 NaN （not a number）</p><h3 id="_5-2、赋值运算符" tabindex="-1"><a class="header-anchor" href="#_5-2、赋值运算符" aria-hidden="true">#</a> 5.2、赋值运算符</h3><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值</td></tr><tr><td>-+</td><td>减法赋值</td></tr><tr><td>*=</td><td>乘法赋值</td></tr><tr><td>/=</td><td>除法赋值</td></tr><tr><td>%=</td><td>取余赋值</td></tr></tbody></table><h3 id="_5-3、自增-自减运算符" tabindex="-1"><a class="header-anchor" href="#_5-3、自增-自减运算符" aria-hidden="true">#</a> 5.3、自增/自减运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量自身的值加1，例如: x++</td></tr><tr><td>--</td><td>自减</td><td>变量自身的值减1，例如: x--</td></tr></tbody></table><h3 id="_5-4、比较运算符" tabindex="-1"><a class="header-anchor" href="#_5-4、比较运算符" aria-hidden="true">#</a> 5.4、比较运算符</h3><p>根据比较结果返回一个布尔值（true / false）</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>&gt;</td><td>左边是否大于右边</td></tr><tr><td>&lt;</td><td>左边是否小于右边</td></tr><tr><td>&gt;=</td><td>左边是否大于或等于右边</td></tr><tr><td>&lt;=</td><td>左边是否小于或等于右边</td></tr><tr><td><strong>===</strong></td><td>左右两边是否 <strong>类型和值</strong> 都相等（重点）</td></tr><tr><td>==</td><td>左右两边 <strong>值</strong> 是否相等</td></tr><tr><td>!=</td><td>左右值<strong>不相等</strong></td></tr><tr><td>!==</td><td>左右两边是否<strong>不全等</strong>（值和数据）</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 比较运算符有隐式转换 把 &#39;2&#39; 转换为 2 </span>
<span class="token comment">// == 值判断值</span>
<span class="token comment">// 以后判断相等用===</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!==</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false</span>

<span class="token comment">//ascii比较</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aa&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;aac&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token comment">//涉及到NaN都是false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：尽量不要比较小数，小数有精度问题<br> 不同类型之间比较会发生隐式转换，转换成number类型再比较<br> 因此开发中，使用 <strong>===</strong> 和 <strong>!==</strong> 更多</p></blockquote><h3 id="_5-5、逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_5-5、逻辑运算符" aria-hidden="true">#</a> 5.5、逻辑运算符</h3><table><thead><tr><th>符号</th><th>名称</th><th>日常读法</th><th>特点</th><th>口诀</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>并且</td><td>符号两边有一个假的结果为假</td><td>一假则假</td></tr><tr><td>||</td><td>逻辑或</td><td>或者</td><td>符号两边有一个真的结果为真</td><td>一真则真</td></tr><tr><td>!</td><td>逻辑非</td><td>取反</td><td>true变false false变true</td><td>真变假，假变真</td></tr></tbody></table><p><strong>|| 与 &amp;&amp; 有短路现象</strong></p><p><strong>逻辑运算符优先级： ！&gt; &amp;&amp; &gt; ||</strong></p><h3 id="_5-6、展开运算符" tabindex="-1"><a class="header-anchor" href="#_5-6、展开运算符" aria-hidden="true">#</a> 5.6、展开运算符</h3><p>展开运算符：<strong><code>...</code></strong> ，将一个<strong>数组 / 对象</strong>进行<strong>展开</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span> <span class="token comment">// 1,2,5,6,8</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span> <span class="token comment">//浅拷贝</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：该方式不会修改原数组</p><p>典型运用场景：求数组<strong>最大值</strong>，<strong>合并数组</strong>等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、js-流程控制" tabindex="-1"><a class="header-anchor" href="#_6、js-流程控制" aria-hidden="true">#</a> 6、JS 流程控制</h2><h3 id="_6-1、if" tabindex="-1"><a class="header-anchor" href="#_6-1、if" aria-hidden="true">#</a> 6.1、if</h3><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 满足条件要执行的语句</span>
<span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token keyword">if</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小括号内的结果若<strong>不是布尔类型</strong>时，会发生<strong>类型转换</strong>为布尔值，类似Boolean()</p><p>如果大括号只有一个语句，大括号可以省略（不建议）</p><blockquote><p><strong>所有数字，除了0都是 true</strong><br><strong>所有字符串，除了空字符串都是 true</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 用户输入</span>
<span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入成绩：&#39;</span><span class="token punctuation">)</span> <span class="token comment">//转number</span>
<span class="token comment">// 2. 判断输出</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2、三元运算符" tabindex="-1"><a class="header-anchor" href="#_6-2、三元运算符" aria-hidden="true">#</a> 6.2、三元运算符</h3><p>语法：<strong>条件 ? 表达式1 : 表达式2</strong></p><p>如果条件为真，则执行表达式1<br> 如果条件为假，则执行表达式2</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请您输入一个数字:&#39;</span><span class="token punctuation">)</span>
num <span class="token operator">=</span> num <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token operator">?</span> num <span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">+</span> num
<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3、switch" tabindex="-1"><a class="header-anchor" href="#_6-3、switch" aria-hidden="true">#</a> 6.3、switch</h3><p>switch中的值与case中的值进行 <strong>全等</strong> 运算</p><ol><li>switch case语句一般用于等值判断, if适合于区间判断</li><li>switch case一般需要配合break关键字使用 没有break会造成case穿透（继续执行）</li><li>if 多分支语句开发要比switch更重要，使用也更多</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;您选择的是1&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>  <span class="token comment">// 退出switch</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;您选择的是2&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>  <span class="token comment">// 退出switch</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;您选择的是3&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>  <span class="token comment">// 退出switch</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;没有符合条件的&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4、while" tabindex="-1"><a class="header-anchor" href="#_6-4、while" aria-hidden="true">#</a> 6.4、while</h3><p>循环三要素：<br> 1、初始值 （经常用变量）<br> 2、终止条件<br> 3、变量的变化量</p><p>while(true) 来构造“无限”循环，需要使用break退出循环。（常用）</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 循环体    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">)</span>
  i<span class="token operator">++</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5、for" tabindex="-1"><a class="header-anchor" href="#_6-5、for" aria-hidden="true">#</a> 6.5、for</h3><p>for(;😉 也可以来构造“无限”循环，同样需要使用break退出循环</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;循环控制，即重复执行&lt;h</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当如果明确了循环的次数的时候推荐使用<code>for</code>循环,当不明确循环的次数的时候推荐使用<code>while</code>循环<br><code>for</code> 的语法结构更简洁，故 <code>for</code> 循环的使用频次会更多。</p><p>练习：九九乘法表</p><p>css：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">span</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid pink<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 2px 2px 2px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 192<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 192<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 外层打印几行</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 里层打印几个星星</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 只需要吧 ★ 换成  1 x 1 = 1   </span>
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
		&lt;div&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> x </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j <span class="token operator">*</span> i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/div&gt;
     </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-6、终止循环" tabindex="-1"><a class="header-anchor" href="#_6-6、终止循环" aria-hidden="true">#</a> 6.6、终止循环</h3><p><strong>break</strong> 中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用</p><p><strong>continue</strong> 中止本次循环，一般用于排除或者跳过某一个选项的时候</p><h2 id="_7、浏览器断点调试" tabindex="-1"><a class="header-anchor" href="#_7、浏览器断点调试" aria-hidden="true">#</a> 7、浏览器断点调试</h2><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230405215004.png" alt="" loading="lazy"></p><p>鼠标依附到变量可以看到值</p><p>或者主动查看值：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230405215228.png" alt="" loading="lazy"></p><h2 id="_8、数组" tabindex="-1"><a class="header-anchor" href="#_8、数组" aria-hidden="true">#</a> 8、数组</h2><h3 id="_8-1、数组定义" tabindex="-1"><a class="header-anchor" href="#_8-1、数组定义" aria-hidden="true">#</a> 8.1、数组定义</h3><p>1、字面量声明数组（推荐）：</p><p>使用 [] 来定义一个空数组，定义一个空数组，然后赋值给变量：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小丽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用new Array构造函数声明</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2、访问数组" tabindex="-1"><a class="header-anchor" href="#_8-2、访问数组" aria-hidden="true">#</a> 8.2、访问数组</h3><p>索引值实际是按着数据单元在数组中的位置依次排列的，注意是从<code> 0</code> 开始的</p><p>数组[下标]</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小丽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">]</span>  
  <span class="token comment">// 访问数组，语法格式为：变量名[索引值]</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 结果为：小明</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3、数据单元值类型" tabindex="-1"><a class="header-anchor" href="#_8-3、数据单元值类型" aria-hidden="true">#</a> 8.3、数据单元值类型</h3><p>数组做为数据的集合，它的单元值可以是任意数据类型</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> mixin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4、数组长度属性" tabindex="-1"><a class="header-anchor" href="#_8-4、数组长度属性" aria-hidden="true">#</a> 8.4、数组长度属性</h3><p>数组在 JavaScript 中并不是新的数据类型，它属于对象类型。</p><p><strong>arr.length</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 定义一个数组</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">]</span>
  <span class="token comment">// 数组对应着一个 length 属性，它的含义是获取数组的长度</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 3</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-5、数组函数" tabindex="-1"><a class="header-anchor" href="#_8-5、数组函数" aria-hidden="true">#</a> 8.5、数组函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>push()</td><td>动态向数组的<strong>尾部</strong>添加一个单元</td></tr><tr><td>unshift()</td><td>动态向数组<strong>头部</strong>添加一个单元</td></tr><tr><td>pop()</td><td><strong>删除最后</strong>一个单元</td></tr><tr><td>shift()</td><td><strong>删除第一个</strong>单元</td></tr><tr><td>splice(a,b)</td><td>动态<strong>删除任意</strong>单元，a：起始位置，b：删除几个</td></tr></tbody></table><p>使用以上4个方法时，都是直接在原数组上进行操作，即成功调任何一个方法，原数组都跟着发生相应的改变。并且在添加或删除单元时 <code>length</code> 并不会发生错乱。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 定义一个数组</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">]</span>

  <span class="token comment">// 1. push 动态向数组的尾部添加一个单元</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Nodejs&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Vue&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;EUI&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// 2. unshit 动态向数组头部添加一个单元</span>
  arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&#39;VS Code&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

  <span class="token comment">// 3. splice 动态删除任意单元</span>
  arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 从索引值为2的位置开始删除1个单元</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

  <span class="token comment">// 4. pop 删除最后一个单元</span>
  arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

  <span class="token comment">// 5. shift 删除第一个单元</span>
  arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、函数" tabindex="-1"><a class="header-anchor" href="#_9、函数" aria-hidden="true">#</a> 9、函数</h2><h3 id="_9-1、函数声明和调用" tabindex="-1"><a class="header-anchor" href="#_9-1、函数声明和调用" aria-hidden="true">#</a> 9.1、函数声明和调用</h3><p><strong>声明（定义）：</strong><br> 一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/function.jpg" alt="" loading="lazy"></p><p><strong>调用：</strong><br> 声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span>
    <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;嗨~&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 函数调用，这些函数体内的代码逻辑会被执行</span>
    <span class="token comment">// 函数名()</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：函数名的命名规则与变量是一致的，并且尽量保证函数名的语义。</p></blockquote><h3 id="_9-2、函数的参数" tabindex="-1"><a class="header-anchor" href="#_9-2、函数的参数" aria-hidden="true">#</a> 9.2、函数的参数</h3><p>通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。</p><ol><li>声明（定义）函数时的形参没有数量限制，当有多个形参时使用 <strong><code>,</code></strong> 分隔</li><li>调用函数传递的实参要与形参的顺序一致</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 参数 name 可以被理解成是一个变量</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">&#39;小红&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 结果为 小红</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3、形参与实参" tabindex="-1"><a class="header-anchor" href="#_9-3、形参与实参" aria-hidden="true">#</a> 9.3、形参与实参</h3><p>形参：<strong>声明函数</strong>时写的参数为形参<br> 实参：<strong>调用函数</strong>时写的参数为实参</p><p>形参可以理解为是在这个函数内声明的变量（比如 num1 = 10）实参可以理解为是给这个变量赋值</p><p><strong>给参数的默认值：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token comment">/*传参不执行赋值*/</span>
    <span class="token selector">function getSum(x = 0,y = 0)</span><span class="token punctuation">{</span>
        document.<span class="token function">write</span><span class="token punctuation">(</span>x + y<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">getSum</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span>2<span class="token punctuation">)</span> <span class="token comment">/*3*/</span>
    <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/*0*/</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">getArrSum</span><span class="token punctuation">(</span><span class="token parameter">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">getArrSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义两个相同的函数，后面的会覆盖前面的</p><p>在Js中，<strong>实参</strong>的<strong>个数</strong>和<strong>形参</strong>的<strong>个数</strong>可能<strong>不一致</strong><br> 如果 形参 过多，自动填上undefined<br> 如果实参过多，多余的会被忽略（函数内部有一个arguments，里面装着所有实参）</p><h3 id="_9-4、返回值" tabindex="-1"><a class="header-anchor" href="#_9-4、返回值" aria-hidden="true">#</a> 9.4、返回值</h3><p>函数的本质是封装，函数体内的逻辑执行完毕后，要想获得函数内部逻辑的执行结果，需要通过 <strong><code>return</code></strong> 这个关键字，将内部执行结果传递到函数外部</p><ol><li>在函数体中使用 <strong>return</strong> 关键字能将内部的执行结果交给函数外部使用</li><li>函数内部只能出现1 次 return，并且 <strong>return 下一行代码不会再被执行</strong>，所以return 后面的数据不要换行写</li><li><strong>return会立即结束当前函数</strong></li><li>函数可以<strong>没有return</strong>，这种情况<strong>默认返回值为 undefined</strong></li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 定义求和函数</span>
    <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> s <span class="token operator">=</span> a <span class="token operator">+</span> b
        <span class="token keyword">return</span> s
    <span class="token punctuation">}</span>
    
    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-5、作用域" tabindex="-1"><a class="header-anchor" href="#_9-5、作用域" aria-hidden="true">#</a> 9.5、作用域</h3><p>作用域的使用提高了程序逻辑的<strong>局部性</strong>，增强了程序的可靠性，减少了名字冲突。</p><h4 id="_9-5-1、全局作用域" tabindex="-1"><a class="header-anchor" href="#_9-5-1、全局作用域" aria-hidden="true">#</a> 9.5.1、全局作用域</h4><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件<br> 处于全局作用域内的变量，称为全局变量</p><h4 id="_9-5-2、局部作用域" tabindex="-1"><a class="header-anchor" href="#_9-5-2、局部作用域" aria-hidden="true">#</a> 9.5.2、局部作用域</h4><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。<br> 处于局部作用域内的变量称为局部变量</p><blockquote><p>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是<strong>强烈不推荐</strong><br> 但是有一种情况，函数内部的形参可以看做是局部变量。</p></blockquote><h4 id="_9-5-3、找值方式" tabindex="-1"><a class="header-anchor" href="#_9-5-3、找值方式" aria-hidden="true">#</a> 9.5.3、找值方式</h4><p>从当前函数逐层往外层函数查找（先局部，再全局 就近原则 ）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出10</span>
    <span class="token punctuation">}</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-6、匿名函数" tabindex="-1"><a class="header-anchor" href="#_9-6、匿名函数" aria-hidden="true">#</a> 9.6、匿名函数</h3><p>函数可以分为<strong>具名函数</strong>和<strong>匿名函数</strong></p><p><strong>匿名函数：没有名字的函数,无法直接使用。</strong></p><h4 id="_9-6-1、函数表达式" tabindex="-1"><a class="header-anchor" href="#_9-6-1、函数表达式" aria-hidden="true">#</a> 9.6.1、函数表达式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
<span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数表达式&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 调用</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数表达式 和 具名函数（functioin fn() {}）:<br> 1、具名函数的调用可以写到任何位置<br> 2、函数表达式，必须先声明函数表达式，后调用</p><h4 id="_9-6-2、立即执行函数" tabindex="-1"><a class="header-anchor" href="#_9-6-2、立即执行函数" aria-hidden="true">#</a> 9.6.2、立即执行函数</h4><p>好处：避免全局变量之间的污染</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 函数体  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 函数体 <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*形参*/</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*实参*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无需调用，立即执行，其实本质已经调用了<br> 多个立即执行函数之间用分号隔开</p><h2 id="_10、对象" tabindex="-1"><a class="header-anchor" href="#_10、对象" aria-hidden="true">#</a> 10、对象</h2><p>对象是 JavaScript 数据类型的一种，之前已经学习了数值类型、字符串类型、布尔类型、undefined。<br><strong>对象数据类型</strong>可以被理解成是一种数据集合。它由<strong>属性和方法两部分</strong>构成。</p><h3 id="_10-1、对象声明" tabindex="-1"><a class="header-anchor" href="#_10-1、对象声明" aria-hidden="true">#</a> 10.1、对象声明</h3><p>语法：</p><ol><li>属性包括属性名和值，它们之间使用 <code>:</code> 分隔</li><li>多个属性之间使用 <code>,</code> 分隔</li><li>属性就是依附在对象上的变量</li><li><strong>属性名</strong>可以使用 <strong><code>&quot;&quot;</code> 或 <code>&#39;&#39;</code></strong>，一般情况下省略，除非名称遇到<strong>特殊符号如空格、中横线等</strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">属性名</span><span class="token operator">:</span> 属性值<span class="token punctuation">,</span>
    <span class="token literal-property property">方法名</span><span class="token operator">:</span> 函数
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 声明对象类型变量，使用一对花括号</span>
    <span class="token comment">// user 便是一个对象了，目前它是一个空对象</span>
    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 描述人的姓名</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token comment">// 描述人的年龄</span>
    <span class="token literal-property property">stature</span><span class="token operator">:</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token comment">// 描述人的身高</span>
    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 描述人的性别</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-2、属性增删改查" tabindex="-1"><a class="header-anchor" href="#_10-2、属性增删改查" aria-hidden="true">#</a> 10.2、属性增删改查</h3><p>访问属性：<strong>对象名.属性名</strong> 或 <strong>对象名[&#39;属性名&#39;]</strong><br> 修改属性：<strong>对象名.属性名 = 值</strong> 或 <strong>对象名[&#39;属性名&#39;] = 值</strong><br> 增加属性：<strong>对象名.新属性 = 新值</strong><br> 删除属性（了解）：delete 对象名.属性</p><p>注：使用<strong>中括号写法</strong>要带<strong>引号<code>&#39;&#39;</code></strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 声明一个空的对象（没有任何属性）</span>
    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 动态追加属性</span>
    user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小明&#39;</span>
    user<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-3、方法和调用" tabindex="-1"><a class="header-anchor" href="#_10-3、方法和调用" aria-hidden="true">#</a> 10.3、方法和调用</h3><p>语法</p><ol><li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li><li>多个方法之间使用 <code>,</code> 分隔</li><li>方法是依附在对象中的函数</li><li>方法名可以使用 <strong><code>&quot;&quot;</code> 或 <code>&#39;&#39;</code></strong>，一般情况下省略，除非名称遇到<strong>特殊符号如空格、中横线等</strong></li></ol><p>方法调用：<strong>对象名.方法名</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span>
    <span class="token function-variable function">singing</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;BB&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用对象中 singing 方法</span>
person<span class="token punctuation">.</span><span class="token function">singing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 调用对象中的 run 方法</span>
person<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以动态为对象添加方法，动态添加与直接定义是一样的，只是语法上更灵活。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 动态追加属性</span>
user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小明&#39;</span>
user<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>

<span class="token comment">// 动态添加方法</span>
user<span class="token punctuation">.</span><span class="token function-variable function">move</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;移动一点距离...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</strong></p></blockquote><h3 id="_10-4、遍历对象属性" tabindex="-1"><a class="header-anchor" href="#_10-4、遍历对象属性" aria-hidden="true">#</a> 10.4、遍历对象属性</h3><p>使用 <strong>for in</strong> 语句</p><blockquote><p>for in 语句可以遍历数组，但不推荐<br> for (let m in arr) {<br> console.log(k) //数组的下标 但是为<strong>字符串</strong>类型<br> console.log(arr[k]) //arr[k]<br> }</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token comment">//属性名 &#39;uname&#39;</span>
    <span class="token comment">//console.log(obj.k)  等于console.log(obj.&#39;uname&#39;) undefined</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> students <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;man&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">hometown</span><span class="token operator">:</span> <span class="token string">&#39;CN&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;woman&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">hometown</span><span class="token operator">:</span> <span class="token string">&#39;CN&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;19&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;woman&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">hometown</span><span class="token operator">:</span> <span class="token string">&#39;CN&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;22&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;man&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">hometown</span><span class="token operator">:</span> <span class="token string">&#39;CN&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> students<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-5、内置对象-方法" tabindex="-1"><a class="header-anchor" href="#_10-5、内置对象-方法" aria-hidden="true">#</a> 10.5、内置对象/方法</h3><p>内置对象：js内部提供的对象</p><h4 id="_10-5-1、math" tabindex="-1"><a class="header-anchor" href="#_10-5-1、math" aria-hidden="true">#</a> 10.5.1、Math</h4>`,257),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>常用方法：</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>random()</td><td>生成 <strong>[0,1)</strong> 的随机数</td></tr><tr><td>round()</td><td>四舍五入</td></tr><tr><td>ceil()</td><td>向上取整</td></tr><tr><td>floor()</td><td>向下取整</td></tr><tr><td>max()</td><td>最大</td></tr><tr><td>min()</td><td>最小</td></tr><tr><td>pow()</td><td>幂运算</td></tr><tr><td>abs()</td><td>绝对值</td></tr></tbody></table><p><strong>生成 M~N 的随机整数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token constant">N</span> <span class="token operator">-</span> <span class="token constant">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">N</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>数组随机下标：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ramdom <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">20.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//21</span>
x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//-20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-5-1、null" tabindex="-1"><a class="header-anchor" href="#_10-5-1、null" aria-hidden="true">#</a> 10.5.1、null</h4><p>null 也是 JavaScript 中数据类型的一种，通常只用它来表示不存在的对象。使用 typeof 检测类型它的类型时，结果为 <code>object</code>。</p><h4 id="_10-5-2、trim" tabindex="-1"><a class="header-anchor" href="#_10-5-2、trim" aria-hidden="true">#</a> 10.5.2、trim()</h4><p>trim用于去除字符串两侧的空格</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;   AA   &#39;</span>
str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function k(v,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[n("a",u,[c("MDN：Math对象"),l(a)])]),d])}const h=t(i,[["render",k],["__file","1、JavaScript基础语法笔记.html.vue"]]);export{h as default};
