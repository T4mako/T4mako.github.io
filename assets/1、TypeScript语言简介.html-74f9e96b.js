import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as p,c as i,b as n,d as a,e as s,f as o}from"./app-b75a4e56.js";const c={},l={href:"https://www.typescriptlang.org/zh/docs/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://wangdoc.com/typescript/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://www.typescriptlang.org/play/",target:"_blank",rel:"noopener noreferrer"},h=o(`<h2 id="一、typescript-语言简介" tabindex="-1"><a class="header-anchor" href="#一、typescript-语言简介" aria-hidden="true">#</a> 一、TypeScript 语言简介</h2><h3 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h3><p>TypeScript（简称 TS）是微软公司开发的一种 <strong>基于 JavaScript</strong> （简称 JS）语言的编程语言。</p><p>它的目的并不是创造一种全新语言，而是 <strong>增强 JavaScript</strong> 的功能，使其更适合多人合作的企业级项目。</p><p>TypeScript 可以看成是 JavaScript 的 <strong>超集</strong>（superset），即它继承了后者的全部语法，所有 JavaScript 脚本都可以当作 TypeScript 脚本（但是可能会报错），此外它再增加了一些自己的语法。</p><h3 id="_2、类型的概念" tabindex="-1"><a class="header-anchor" href="#_2、类型的概念" aria-hidden="true">#</a> 2、类型的概念</h3><p><strong>类型是人为添加的一种编程约束和用法提示</strong>，目的是在软件开发过程中，为编译器和开发工具提供更多的验证和帮助，帮助提高代码质量，减少错误。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">addOne</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">addOne</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 是在开发阶段报错，这样有利于提早发现错误，避免使用时报错。<br> 另一方面，函数定义里面加入类型，具有提示作用，可以告诉开发者这个函数怎么用。</p><h3 id="_3、动态类型与静态类型" tabindex="-1"><a class="header-anchor" href="#_3、动态类型与静态类型" aria-hidden="true">#</a> 3、动态类型与静态类型</h3><p><strong>JavaScript</strong> 的类型系统非常弱，而且没有使用限制，运算符可以接受各种类型的值。在语法上，JavaScript 属于 <strong>动态类型语言</strong><br><strong>TypeScript</strong> 引入了一个更强大、更严格的类型系统，属于 <strong>静态类型语言</strong></p><h3 id="_4、静态类型的优缺点" tabindex="-1"><a class="header-anchor" href="#_4、静态类型的优缺点" aria-hidden="true">#</a> 4、静态类型的优缺点</h3><p>优点：</p><ul><li>有利于代码的静态分析。</li><li>有利于发现错误。</li><li>更好的 IDE 支持，做到语法提示和自动补全。</li><li>提供了代码文档。</li><li>有助于代码重构。</li></ul><p>缺点：</p><ul><li>丧失了动态类型的代码灵活性。</li><li>增加了编程工作量。</li><li>更高的学习成本。</li><li>引入了独立的编译步骤。</li><li>兼容性问题。</li></ul>`,16);function _(g,k){const e=r("ExternalLinkIcon");return p(),i("div",null,[n("p",null,[n("a",l,[a("官方文档"),s(e)])]),n("p",null,[n("a",d,[a("参考文章"),s(e)])]),n("p",null,[a("官网的在线编译页面 "),n("a",u,[a("TypeScript Playground"),s(e)]),a("。")]),h])}const v=t(c,[["render",_],["__file","1、TypeScript语言简介.html.vue"]]);export{v as default};
