import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,f as s}from"./app-d2fb2937.js";const i={},t=s(`<h2 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h2><p>Java 最大的优势是平台无关性（不因 OS 和 CPU 的变化而发生错误或无法运行）</p><p>Java 使用 Unicode 标准字符集</p><p>Java技术平台体系：<br> Java SE （standard edition） 标准版<br> Java EE （enterprise edition） 企业版<br> Java ME （micro edition）小型版</p><p>JDK（Java Development Kit）= JRE + 开发工具集（javac.exe,java..exe,javadoc.exe...）<br> JRE（Java Runtime Environment Java运行环境）= JVM + Java SE标准类库<br> JVM（Java Virtual Machine）</p><h3 id="编译与执行" tabindex="-1"><a class="header-anchor" href="#编译与执行" aria-hidden="true">#</a> 编译与执行</h3><p>在 dos 命令行下 java 文件的编译与执行<br> ① 编译（不区分大小写，windows中找文件）：<br><code>javac Hello.java</code><br><code>javac a.java b.java</code> 编译多个文件<br><code>javac *.java</code> 编译目录下所有源文件</p><p>② 执行（解释器，区分大小写，类名）：<br><code>java hello</code></p><p>编译以后会生成一个或多个字节码文件，字节码文件的文件名与java源文件中的类名相同</p><p><strong>一个Java文件中可以有多个类，但最多只能有一个Public类</strong><br><strong>而且要求声明为public的类的类名必须与源文件名相同</strong><br><strong>程序的入口是main()方法，格式固定</strong><br><strong>每一个执行语句都以 “;” 结尾</strong></p><h3 id="反编译" tabindex="-1"><a class="header-anchor" href="#反编译" aria-hidden="true">#</a> 反编译</h3><p>JDK 提供反编译器 javap.exe 可以将字节码编译为源码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出 Date 中的所有 public 的方法和变量</span>
javap java.util.Date
<span class="token comment"># 列出所有方法和成员变量</span>
javap <span class="token parameter variable">-private</span> ***
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件生成器" tabindex="-1"><a class="header-anchor" href="#文件生成器" aria-hidden="true">#</a> 文件生成器</h3><p>JDK 提供 javadoc.exe 可以制作 HTML 格式的文档</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javadoc XXX.java
<span class="token comment"># 指定目录</span>
javadoc <span class="token parameter variable">-d</span> C:<span class="token punctuation">\\</span>doc xxx.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、注释-comment" tabindex="-1"><a class="header-anchor" href="#_2、注释-comment" aria-hidden="true">#</a> 2、注释（Comment）</h2><p>Java中注释有三种：单行注释，多行注释与文档注释（Java特有）</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>文档注释可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档 （doc命令行下 javadoc -d 自定义名 -author -version 文件名）</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//arguments:参数</span>
        <span class="token comment">//单行注释</span>
        <span class="token comment">/*多行注释*/</span>
        <span class="token doc-comment comment">/**
        文档注释
        @author T4mako
        @version v1.0
        */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、命名规范" tabindex="-1"><a class="header-anchor" href="#_3、命名规范" aria-hidden="true">#</a> 3、命名规范</h2><h3 id="_1、关键字" tabindex="-1"><a class="header-anchor" href="#_1、关键字" aria-hidden="true">#</a> 1、关键字</h3><p>关键字：具有特殊含义，专门用途</p><p>Java 50个关键字：<br> abstract, assert, boolean, break, byte,<br> case, catch, char, class, const,<br> continue, default, do, double, else,<br> enum, extends, final, finally, float,<br> for, goto, if, implements, import,<br> instanceof, int, interface, long, native,<br> new, package, private, protected, public,<br> return, strictfp, static, super, switch,<br> synchronized, this, throw, throws, transient,<br> try, void, volatile, while, final.</p><h3 id="_2、保留字" tabindex="-1"><a class="header-anchor" href="#_2、保留字" aria-hidden="true">#</a> 2、保留字</h3><p>保留字：现有Java版本尚未使用，以后版本可能会作为关键字使用。goto，const</p><h3 id="_3、标识符" tabindex="-1"><a class="header-anchor" href="#_3、标识符" aria-hidden="true">#</a> 3、标识符</h3><p>标识符命名规则：</p><ul><li>不能以数字开头</li><li>包含<code>字母</code>、<code>数字</code>、<code>下划线</code> 和 <code>$</code>，不能使用关键字和保留字</li><li>不能使用 <code>true</code>、<code>false</code>、<code>null</code></li></ul><h3 id="_4、命名规范" tabindex="-1"><a class="header-anchor" href="#_4、命名规范" aria-hidden="true">#</a> 4、命名规范</h3><p>Java中名称的命名规范：</p><p><strong>包名：多个单词小写</strong><br><strong>类名，接口名：多个单词首字母分别大写</strong><br><strong>变量名，方法名：第一个单词首字母小写，其他单词首字母大写</strong><br><strong>常量名：所有字母大写，单词之间下划线连接</strong></p>`,32),c=[t];function o(r,d){return n(),e("div",null,c)}const v=a(i,[["render",o],["__file","1、基础概念.html.vue"]]);export{v as default};
