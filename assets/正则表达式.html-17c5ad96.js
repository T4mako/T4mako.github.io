import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as e,a as p,b as n,d as s,f as o}from"./app-00a348fd.js";const c={},l=n("h2",{id:"正则表达式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正则表达式","aria-hidden":"true"},"#"),s(" 正则表达式")],-1),i=n("p",null,[n("strong",null,[s("正则表达式的使用三步骤："),n("br"),s(" 1、定义正则表达式的对象"),n("br"),s(" 2、定义带校验字符串"),n("br"),s(" 3、校验")])],-1),r=o(`<h2 id="_1-1-正则表达式的概念" tabindex="-1"><a class="header-anchor" href="#_1-1-正则表达式的概念" aria-hidden="true">#</a> 1.1 正则表达式的概念</h2><p><strong>正则表达式用来校验字符串是否满足一定的规则的公式</strong><br> 正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑</p><h2 id="_1-2-正则表达式的用途" tabindex="-1"><a class="header-anchor" href="#_1-2-正则表达式的用途" aria-hidden="true">#</a> 1.2 正则表达式的用途</h2><p>所以正则表达式有三个主要用途：</p><ul><li>模式验证: 检测某个字符串是否符合规则，例如检测手机号、身份证号等等是否符合规范</li><li>匹配读取: 将目标字符串中满足规则的部分<strong>读取</strong>出来，例如将整段文本中的邮箱地址读取出来</li><li>匹配替换: 将目标字符串中满足标准的部分<strong>替换</strong>为其他字符串,例如将整段文本中的&quot;hello&quot;替换成&quot;haha&quot;</li></ul><h2 id="_1-3-正则表达式的语法" tabindex="-1"><a class="header-anchor" href="#_1-3-正则表达式的语法" aria-hidden="true">#</a> 1.3 正则表达式的语法</h2><h3 id="_1-3-1-创建正则表达式对象" tabindex="-1"><a class="header-anchor" href="#_1-3-1-创建正则表达式对象" aria-hidden="true">#</a> 1.3.1 创建正则表达式对象</h3><ul><li><strong>对象形式：<code>var reg = new RegExp(&quot;正则表达式&quot;)</code> 当正则表达式中有&quot;/&quot;那么就使用这种</strong></li><li><strong>直接量形式：<code>var reg = /正则表达式/</code>一般使用这种声明方式</strong></li></ul><h3 id="_2-3-2-正则表达式入门案例" tabindex="-1"><a class="header-anchor" href="#_2-3-2-正则表达式入门案例" aria-hidden="true">#</a> 2.3.2 正则表达式入门案例</h3><h4 id="_2-3-2-1-模式验证" tabindex="-1"><a class="header-anchor" href="#_2-3-2-1-模式验证" aria-hidden="true">#</a> 2.3.2.1 模式验证</h4><p>校验字符串中 <strong>是否包含o</strong> 字母</p><p><strong>注意</strong>：这里是使用<strong>正则表达式对象</strong>来<strong>调用</strong>方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个最简单的正则表达式对象</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个字符串对象作为目标字符串</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 调用正则表达式对象的test()方法验证目标字符串是否满足我们指定的这个模式，返回结果true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;字符串中是否包含&#39;o&#39;=&quot;</span><span class="token operator">+</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-2-匹配读取" tabindex="-1"><a class="header-anchor" href="#_2-3-2-2-匹配读取" aria-hidden="true">#</a> 2.3.2.2 匹配读取</h4><p>读取字符串中的<strong>所有</strong>&#39;o&#39;<em>（全局匹配，对应所有匹配到的字符）</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//匹配读取: 读取一个字符串中的所有&#39;l&#39;字母</span>
<span class="token comment">// g表示全文查找,如果不使用g那么就只能查找到第一个匹配的内容</span>
<span class="token comment">//1. 编写一个正则表达式</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">l</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">//2. 使用正则表达式去读取字符串</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-3-匹配替换" tabindex="-1"><a class="header-anchor" href="#_2-3-2-3-匹配替换" aria-hidden="true">#</a> 2.3.2.3 匹配替换:</h4><p>将字符串中的第一个&#39;o&#39;<strong>替换</strong>==成&#39;@&#39;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 只有第一个o被替换了，说明我们这个正则表达式只能匹配第一个满足的字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;str.replace(reg)=&quot;</span><span class="token operator">+</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hell@ World!</span>
<span class="token comment">// 原字符串并没有变化，只是返回了一个新字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;str=&quot;</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str=Hello World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-3-正则表达式的匹配模式" tabindex="-1"><a class="header-anchor" href="#_2-3-3-正则表达式的匹配模式" aria-hidden="true">#</a> 2.3.3 正则表达式的匹配模式</h3><h4 id="_2-3-3-1-全文查找" tabindex="-1"><a class="header-anchor" href="#_2-3-3-1-全文查找" aria-hidden="true">#</a> 2.3.3.1 全文查找</h4><p>如果<strong>不使用g</strong>对正则表达式对象进行修饰，则使用正则表达式进行查找时，<strong>仅返回第一个匹配</strong>；使用g后，返回所有匹配。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 目标字符串</span>
<span class="token keyword">var</span> targetStr <span class="token operator">=</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 没有使用全局匹配的正则表达式</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 获取全部匹配</span>
<span class="token keyword">var</span> resultArr <span class="token operator">=</span> targetStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 数组长度为1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resultArr.length=&quot;</span><span class="token operator">+</span>resultArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 遍历数组，发现只能得到&#39;H&#39;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resultArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resultArr[&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;]=&quot;</span><span class="token operator">+</span>resultArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 目标字符串</span>
<span class="token keyword">var</span> targetStr <span class="token operator">=</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 使用了全局匹配的正则表达式</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token comment">// 获取全部匹配</span>
<span class="token keyword">var</span> resultArr <span class="token operator">=</span> targetStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 数组长度为2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resultArr.length=&quot;</span><span class="token operator">+</span>resultArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 遍历数组，发现可以获取到“H”和“W”</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resultArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resultArr[&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;]=&quot;</span><span class="token operator">+</span>resultArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2-3-3-2-忽略大小写-i" tabindex="-1"><a class="header-anchor" href="#_2-3-3-2-忽略大小写-i" aria-hidden="true">#</a> 2.3.3.2 忽略大小写（i）</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//目标字符串</span>
<span class="token keyword">var</span> targetStr <span class="token operator">=</span> <span class="token string">&#39;Hello WORLD!&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//没有使用忽略大小写的正则表达式</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token comment">//获取全部匹配</span>
<span class="token keyword">var</span> resultArr <span class="token operator">=</span> targetStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//数组长度为1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resultArr.length=&quot;</span><span class="token operator">+</span>resultArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//遍历数组，仅得到&#39;o&#39;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resultArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resultArr[&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;]=&quot;</span><span class="token operator">+</span>resultArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//目标字符串</span>
<span class="token keyword">var</span> targetStr <span class="token operator">=</span> <span class="token string">&#39;Hello WORLD!&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//使用了忽略大小写的正则表达式</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>
<span class="token comment">//获取全部匹配</span>
<span class="token keyword">var</span> resultArr <span class="token operator">=</span> targetStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//数组长度为2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resultArr.length=&quot;</span><span class="token operator">+</span>resultArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//遍历数组，得到&#39;o&#39;和&#39;O&#39;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resultArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resultArr[&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;]=&quot;</span><span class="token operator">+</span>resultArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2-3-3-3-多行查找-m" tabindex="-1"><a class="header-anchor" href="#_2-3-3-3-多行查找-m" aria-hidden="true">#</a> 2.3.3.3 多行查找（m）</h6><p><em><strong>不使用多行查找模式，目标字符串中不管有没有换行符都会被当作一行。</strong></em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//目标字符串1</span>
<span class="token keyword">var</span> targetStr01 <span class="token operator">=</span> <span class="token string">&#39;Hello\\nWorld!&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//目标字符串2</span>
<span class="token keyword">var</span> targetStr02 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//匹配以&#39;Hello&#39;结尾的正则表达式，没有使用多行匹配</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Hello$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>targetStr01<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>targetStr02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//目标字符串1</span>
<span class="token keyword">var</span> targetStr01 <span class="token operator">=</span> <span class="token string">&#39;Hello\\nWorld!&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//目标字符串2</span>
<span class="token keyword">var</span> targetStr02 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//匹配以&#39;Hello&#39;结尾的正则表达式，使用了多行匹配</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Hello$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">m</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>targetStr01<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>targetStr02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-4-元字符" tabindex="-1"><a class="header-anchor" href="#_2-3-4-元字符" aria-hidden="true">#</a> 2.3.4 元字符</h3><p>在正则表达式中被赋予特殊含义的字符，不能被直接当做普通字符使用。如果要匹配元字符本身，需要对元字符进行转义，转义的方式是在元字符前面加上“\\”，例如：^</p><h4 id="_2-3-4-1-常用的元字符" tabindex="-1"><a class="header-anchor" href="#_2-3-4-1-常用的元字符" aria-hidden="true">#</a> 2.3.4.1 常用的元字符</h4><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行字符以外的任意字符。</td></tr><tr><td>\\w</td><td>匹配字母或数字或下划线等价于[a-zA-Z0-9_]</td></tr><tr><td>\\W</td><td>匹配任何非单词字符。等价于[^A-Za-z0-9_]</td></tr><tr><td>\\s</td><td>匹配任意的空白符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]。</td></tr><tr><td>\\S</td><td>匹配任何非空白字符。等价于[^\\f\\n\\r\\t\\v]。</td></tr><tr><td>\\d</td><td>匹配数字。等价于[0-9]。</td></tr><tr><td>\\D</td><td>匹配一个非数字字符。等价于[^0-9]</td></tr><tr><td>\\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始，但在[]中使用表示取反</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><h4 id="_2-3-4-2-例子一" tabindex="-1"><a class="header-anchor" href="#_2-3-4-2-例子一" aria-hidden="true">#</a> 2.3.4.2 例子一</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;one two three four&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 匹配全部空格</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token comment">// 将空格替换为@</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// one@two@three@four</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;newStr=&quot;</span><span class="token operator">+</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-3-例子二" tabindex="-1"><a class="header-anchor" href="#_2-3-4-3-例子二" aria-hidden="true">#</a> 2.3.4.3 例子二</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;今年是2014年&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 匹配至少一个数字</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str=&#39;</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 今年是abcd年</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-4-例子三" tabindex="-1"><a class="header-anchor" href="#_2-3-4-4-例子三" aria-hidden="true">#</a> 2.3.4.4 例子三</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str01 <span class="token operator">=</span> <span class="token string">&#39;I love Java&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str02 <span class="token operator">=</span> <span class="token string">&#39;Java love me&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 匹配以Java开头</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^Java</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reg.test(str01)=&#39;</span><span class="token operator">+</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// flase</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;br /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reg.test(str02)=&#39;</span><span class="token operator">+</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-5-例子四" tabindex="-1"><a class="header-anchor" href="#_2-3-4-5-例子四" aria-hidden="true">#</a> 2.3.4.5 例子四</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str01 <span class="token operator">=</span> <span class="token string">&#39;I love Java&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str02 <span class="token operator">=</span> <span class="token string">&#39;Java love me&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 匹配以Java结尾</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Java$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reg.test(str01)=&#39;</span><span class="token operator">+</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;br /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reg.test(str02)=&#39;</span><span class="token operator">+</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// flase</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-5-字符集合" tabindex="-1"><a class="header-anchor" href="#_2-3-5-字符集合" aria-hidden="true">#</a> 2.3.5 字符集合</h3><table><thead><tr><th>语法格式</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>[字符列表]</td><td>[abc] 含义：目标字符串包含abc中的任何一个字符 <br>目标字符串：plain 是否匹配：是 <br>原因：plain中的“a”在列表“abc”中</td><td>目标字符串中任何一个字符出现在字符列表中就算匹配。</td></tr><tr><td>[^字符列表]</td><td>[^abc] 含义：目标字符串包含abc以外的任何一个字符 <br>目标字符串：plain 是否匹配：是 <br>原因：plain中包含“p”、“l”、“i”、“n”</td><td>匹配字符列表中未包含的任意字符。</td></tr><tr><td>[字符范围]</td><td>[a-z] 含义：所有小写英文字符组成的字符列表 <br>正则表达式：[A-Z] <br>含义：所有大写英文字符组成的字符列表</td><td>匹配指定范围内的任意字符。匹配指定范围内的任意字符。</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str01 <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str02 <span class="token operator">=</span> <span class="token string">&#39;I am Tom&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//匹配abc中的任何一个</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reg.test(str01)=&#39;</span><span class="token operator">+</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str01<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flase</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reg.test(str02)=&#39;</span><span class="token operator">+</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-6-出现次数" tabindex="-1"><a class="header-anchor" href="#_2-3-6-出现次数" aria-hidden="true">#</a> 2.3.6 出现次数</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 代码  </span><span class="token punctuation">|</span><span class="token table-header important"> 说明           </span><span class="token punctuation">|</span>
</span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">-----</span> <span class="token punctuation">|</span> <span class="token punctuation">--------------</span> <span class="token punctuation">|</span>
</span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> <span class="token list punctuation">*</span>     </span><span class="token punctuation">|</span><span class="token table-data"> 出现零次或多次 </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> <span class="token list punctuation">+</span>     </span><span class="token punctuation">|</span><span class="token table-data"> 出现一次或多次 </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> ?     </span><span class="token punctuation">|</span><span class="token table-data"> 出现零次或一次 </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> {n}   </span><span class="token punctuation">|</span><span class="token table-data"> 出现n次        </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> {n,}  </span><span class="token punctuation">|</span><span class="token table-data"> 出现n次或多次  </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> {n,m} </span><span class="token punctuation">|</span><span class="token table-data"> 出现n到m次     </span><span class="token punctuation">|</span>
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;/[a]{3}/.test(&#39;aa&#39;)=&quot;</span><span class="token operator">+</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a]{3}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// flase</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;/[a]{3}/.test(&#39;aaa&#39;)=&quot;</span><span class="token operator">+</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a]{3}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;/[a]{3}/.test(&#39;aaaa&#39;)=&quot;</span><span class="token operator">+</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a]{3}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;aaaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-7-在正则表达式中表达『或者』" tabindex="-1"><a class="header-anchor" href="#_2-3-7-在正则表达式中表达『或者』" aria-hidden="true">#</a> 2.3.7 在正则表达式中表达『或者』</h3><p>使用符号：|</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 目标字符串</span>
<span class="token keyword">var</span> str01 <span class="token operator">=</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str02 <span class="token operator">=</span> <span class="token string">&#39;I love Java&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 匹配&#39;World&#39;或&#39;Java&#39;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">World|Java</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;str01.match(reg)[0]=&quot;</span><span class="token operator">+</span>str01<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//World</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;str02.match(reg)[0]=&quot;</span><span class="token operator">+</span>str02<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Java</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-常用正则表达式" tabindex="-1"><a class="header-anchor" href="#_2-4-常用正则表达式" aria-hidden="true">#</a> 2.4 常用正则表达式</h2><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 需求     </span><span class="token punctuation">|</span><span class="token table-header important"> 正则表达式                                            </span><span class="token punctuation">|</span>
</span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">--------</span> <span class="token punctuation">|</span> <span class="token punctuation">-----------------------------------------------------</span> <span class="token punctuation">|</span>
</span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 用户名   </span><span class="token punctuation">|</span><span class="token table-data"> /^\\[a-zA-Z\\_][a-zA-Z_\\-0-9]{5,9}$/                    </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 密码     </span><span class="token punctuation">|</span><span class="token table-data"> /^[a-zA-Z0-9_\\-\\@\\#\\&amp;\\*]{6,12}$/                      </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 前后空格 </span><span class="token punctuation">|</span><span class="token table-data"> /^\\s+\\|\\s+$/g                                         </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 电子邮箱 </span><span class="token punctuation">|</span><span class="token table-data"> /^[a-zA-Z0-9_\\.-]+@([a-zA-Z0-9-]+[\\.]{1})+[a-zA-Z]+$/ </span><span class="token punctuation">|</span>
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57);function u(k,d){return t(),e("div",null,[l,i,p(" more "),r])}const m=a(c,[["render",u],["__file","正则表达式.html.vue"]]);export{m as default};
