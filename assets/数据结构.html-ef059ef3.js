import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as s,d as t,b as l,f as r}from"./app-392a5c85.js";const o={},e=t('<h2 id="_1、线性表" tabindex="-1"><a class="header-anchor" href="#_1、线性表" aria-hidden="true">#</a> 1、线性表</h2><p>线性表按存储方式分为 <strong>顺序存储</strong> 和 <strong>链式存储</strong>，其 <strong>优缺点</strong> 不再赘述</p><p>线性表的基本操作：增删改查插计数等，注意链表的插入和删除等操作的指针指向顺序问题</p><p>链表有 <strong>单链表</strong>，<strong>循环链表</strong>，<strong>双向链表</strong> 等</p><h2 id="_2、栈与队列" tabindex="-1"><a class="header-anchor" href="#_2、栈与队列" aria-hidden="true">#</a> 2、栈与队列</h2><p>栈：<strong>先进后出</strong> 的线性表<br> 队列：<strong>先进先出</strong> 的线性表</p><p>栈的主要操作：出栈，入栈，取栈顶<br> 栈分为 <strong>顺序栈</strong>、<strong>链栈</strong></p><p>队列有 <strong>循环队列（注意判空判满的算法）</strong>、<strong>链队列</strong>、<strong>优先队列（有优先级的队列）</strong></p><p>栈与队列的比较在此不再赘述</p><h2 id="_3、串与数组" tabindex="-1"><a class="header-anchor" href="#_3、串与数组" aria-hidden="true">#</a> 3、串与数组</h2><p>串（通常指字符串）同样有 <strong>顺序存储</strong> 和 <strong>链式存储</strong></p><p>串的常规算法有增删改查插截取比较等</p><p>模式匹配算法（在 s 主串中寻找 t 子串）：</p><ul><li>Brute-Force 算法<br> 子串以步长 1来一遍遍匹配</li><li>KMP 算法</li></ul><p>数组通常讨论 <strong>一维数组</strong> 和 <strong>二维数组</strong></p><p>对称矩阵的压缩矩阵</p><p>三角矩阵的压缩矩阵</p><p>对角矩阵的压缩矩阵</p><p>稀疏矩阵的三元组表存储（数组下标、行下标、列下标、元素值）</p><h2 id="_4、树与二叉树" tabindex="-1"><a class="header-anchor" href="#_4、树与二叉树" aria-hidden="true">#</a> 4、树与二叉树</h2><p>常用术语：<br> 结点、结点路径、路径长度，结点的度，树的度、叶结点、分支结点、孩子结点、父结点、树的度...</p><p>二叉树：</p><ul><li>概念 <ul><li>满二叉树、完全二叉树</li></ul></li><li>二叉树的存储： <ul><li>顺序存储结构：顺序表</li><li>链式存储结构：定义结点类</li></ul></li><li>树的遍历：先序遍历、中序遍历，后序遍历、层序遍历</li></ul><p>哈夫曼树及哈夫曼编码：</p>',24),a=l("ul",null,[l("li",null,"解决的问题：有一堆带权值的结点，使带权路径总和最小"),l("li",null,[r("构造哈夫曼树： "),l("ul",null,[l("li",{"w1，w2，w3...":""},"有 n 个结点，权值为"),l("li",{"w1，w2，...，wi，...":""},"选择其中最小的组成新的结点，权值为 wi，此时有 n-1 个结点，权值为"),l("li",null,"再选择其中最小的两个，以此类推，得到哈夫曼树")])]),l("li",null,[r("哈夫曼编码： "),l("ul",null,[l("li",null,"每个结点有其编码，左 0 右 1")])])],-1),p=t("<p>树与僧林</p><ul><li>树转换为二叉树：每个结点只保留最左孩子的度，所有孩子节点连接起来，并顺时针旋转一定角度</li><li>二叉树转换为树</li><li>森林转换为二叉树</li></ul><p>树的存储结构：</p><ul><li>双亲链表存储，属性有：data、parent</li><li>孩子链表存储，孩子以链表形式存储</li><li>双亲孩子链表存储</li><li>孩子兄弟链表存储</li></ul>",4),g=[e,a,p];function d(u,_){return i(),s("div",null,g)}const f=n(o,[["render",d],["__file","数据结构.html.vue"]]);export{f as default};
