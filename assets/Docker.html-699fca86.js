import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,b as a,d as n,e,f as t}from"./app-4c86df21.js";const l={},p=t(`<h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>  <span class="token comment"># 启动docker服务</span>
systemctl stop <span class="token function">docker</span>  <span class="token comment"># 停止docker服务</span>
systemctl restart <span class="token function">docker</span>  <span class="token comment"># 重启docker服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1、docker介绍与安装" tabindex="-1"><a class="header-anchor" href="#_1、docker介绍与安装" aria-hidden="true">#</a> 1、Docker介绍与安装</h2><h3 id="_1-1、docker概念" tabindex="-1"><a class="header-anchor" href="#_1-1、docker概念" aria-hidden="true">#</a> 1.1、Docker概念</h3><h4 id="_1-1-1、应用部署的环境问题" tabindex="-1"><a class="header-anchor" href="#_1-1-1、应用部署的环境问题" aria-hidden="true">#</a> 1.1.1、应用部署的环境问题</h4><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦：</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异</li></ul><h4 id="_1-1-2、docker解决依赖兼容问题" tabindex="-1"><a class="header-anchor" href="#_1-1-2、docker解决依赖兼容问题" aria-hidden="true">#</a> 1.1.2、Docker解决依赖兼容问题</h4><p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用<strong>一起打包</strong></p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230324200128.png" alt="" loading="lazy"></p><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，<strong>无需再操作系统上安装这些</strong>，自然就不存在不同应用之间的兼容问题了。</p><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h4 id="_1-1-3、docker解决操作系统环境差异" tabindex="-1"><a class="header-anchor" href="#_1-1-3、docker解决操作系统环境差异" aria-hidden="true">#</a> 1.1.3、Docker解决操作系统环境差异</h4><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例</p><p>结构包括：<br> 计算机硬件：例如CPU、内存、磁盘等<br> 系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。<br><strong>系统应用</strong>：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</p><p>应用于计算机交互的流程如下：<br> 应用调用操作系统应用（函数库），实现各种功能<br><strong>系统函数库</strong>是对内核指令集的封装，会调用内核指令<br> 内核指令操作计算机硬件</p><p>Ubuntu和CentOs都是基于Linux内核，无非是系统应用不同，<strong>提供的函数库有差异</strong><br> 此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了</p><p><em><strong>Docker如何解决不同系统环境的问题？</strong></em></p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230324200848.png" alt="" loading="lazy"></p><h4 id="_1-1-4、小结" tabindex="-1"><a class="header-anchor" href="#_1-1-4、小结" aria-hidden="true">#</a> 1.1.4、小结</h4><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li><strong>Docker镜像中包含完整运行环境</strong>，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个<strong>快速交付应用、运行应用的技术</strong>，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，<strong>可以迁移到任意Linux操作系统</strong></li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul><h3 id="_1-2、docker和虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#_1-2、docker和虚拟机的区别" aria-hidden="true">#</a> 1.2、Docker和虚拟机的区别</h3><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p><p>两者的差异：</p><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟硬件设备</strong>，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。<br><strong>Docker</strong>仅仅是<strong>封装函数库</strong>，并没有模拟完整的操作系统，如图：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230324202321.png" alt="" loading="lazy"></p><table><thead><tr><th>特性</th><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>性能</td><td>接近原生</td><td>性能较差</td></tr><tr><td>硬盘占用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr></tbody></table><ul><li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p></li><li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p></li></ul><h3 id="_1-3、docker架构" tabindex="-1"><a class="header-anchor" href="#_1-3、docker架构" aria-hidden="true">#</a> 1.3、Docker架构</h3><h4 id="_1-3-1、镜像和容器" tabindex="-1"><a class="header-anchor" href="#_1-3-1、镜像和容器" aria-hidden="true">#</a> 1.3.1、镜像和容器</h4><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件<strong>打包在一起</strong>，称为<strong>镜像</strong></p><p><strong>容器（Container）</strong>：镜像中的<strong>应用程序运行后形成的进程</strong>就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见</p><p>镜像，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是<strong>只读</strong>的<br> 容器，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此<strong>一个镜像可以启动多次，形成多个容器进程</strong></p><h4 id="_1-3-2、dockerhub" tabindex="-1"><a class="header-anchor" href="#_1-3-2、dockerhub" aria-hidden="true">#</a> 1.3.2、DockerHub</h4>`,43),d={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://c.163yun.com/hub",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cr.console.aliyun.com/",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像</p><h4 id="_1-3-3、docker架构" tabindex="-1"><a class="header-anchor" href="#_1-3-3、docker架构" aria-hidden="true">#</a> 1.3.3、Docker架构</h4><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p></li><li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p></li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230324203906.png" alt="" loading="lazy"></p><h3 id="_1-4、安装docker" tabindex="-1"><a class="header-anchor" href="#_1-4、安装docker" aria-hidden="true">#</a> 1.4、安装Docker</h3><p>在CentOS下安装Docker：<br> Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求</p><h4 id="_1-4-1、卸载-可选" tabindex="-1"><a class="header-anchor" href="#_1-4-1、卸载-可选" aria-hidden="true">#</a> 1.4.1、卸载（可选）</h4><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum remove docker \\
                  docker-client \\
                  docker-client-latest \\
                  docker-common \\
                  docker-latest \\
                  docker-latest-logrotate \\
                  docker-logrotate \\
                  docker-selinux \\
                  docker-engine-selinux \\
                  docker-engine \\
                  docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\\ 表示命令的拼贴，表示一行写不下</p></blockquote><h4 id="_1-4-2、安装docker" tabindex="-1"><a class="header-anchor" href="#_1-4-2、安装docker" aria-hidden="true">#</a> 1.4.2、安装Docker</h4><p>安装yum工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\\</span>
           device-mapper-persistent-data <span class="token punctuation">\\</span>
           lvm2 --skip-broken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后更新本地镜像源：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 设置docker镜像源</span>
yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
    
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/download.docker.com/mirrors.aliyun.com\\/docker-ce/g&#39;</span> /etc/yum.repos.d/docker-ce.repo

yum makecache fast
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker-ce为<strong>社区免费版本</strong>。稍等片刻，docker即可安装成功。</p><h3 id="_1-5、启动docker" tabindex="-1"><a class="header-anchor" href="#_1-5、启动docker" aria-hidden="true">#</a> 1.5、启动docker</h3><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接<strong>关闭防火墙</strong>！<br> 启动docker前，一定要关闭防火墙</p><p>关闭防火墙：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 关闭</span>
systemctl stop firewalld
<span class="token comment">## 禁止开机启动防火墙</span>
systemctl disable firewalld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过命令启动docker：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>  <span class="token comment"># 启动docker服务</span>
systemctl stop <span class="token function">docker</span>  <span class="token comment"># 停止docker服务</span>
systemctl restart <span class="token function">docker</span>  <span class="token comment"># 重启docker服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后输入命令，可以查看docker版本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230324205228531.png" alt="image-20230324205228531" loading="lazy"></p><h3 id="_1-6、配置介绍" tabindex="-1"><a class="header-anchor" href="#_1-6、配置介绍" aria-hidden="true">#</a> 1.6、配置介绍</h3><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p>`,31),v={href:"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors",target:"_blank",rel:"noopener noreferrer"},g=t('<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230324205410.png" alt="" loading="lazy"></p><h2 id="_2、docker基本操作" tabindex="-1"><a class="header-anchor" href="#_2、docker基本操作" aria-hidden="true">#</a> 2、Docker基本操作</h2><h3 id="_2-1、镜像操作" tabindex="-1"><a class="header-anchor" href="#_2-1、镜像操作" aria-hidden="true">#</a> 2.1、镜像操作</h3><h4 id="_2-1-1、镜像名称" tabindex="-1"><a class="header-anchor" href="#_2-1-1、镜像名称" aria-hidden="true">#</a> 2.1.1、镜像名称</h4><p>镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p>比如Mysql : 5.7<br> 这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h4 id="_2-1-2、镜像命令" tabindex="-1"><a class="header-anchor" href="#_2-1-2、镜像命令" aria-hidden="true">#</a> 2.1.2、镜像命令</h4><p>常见的镜像操作命令如图：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325201245.png" alt="" loading="lazy"></p><h4 id="_2-1-3、拉取、查看镜像" tabindex="-1"><a class="header-anchor" href="#_2-1-3、拉取、查看镜像" aria-hidden="true">#</a> 2.1.3、拉取、查看镜像</h4><p>从DockerHub中拉取一个nginx镜像并查看：</p>',12),b={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},h=t(`<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325201540.png" alt="" loading="lazy"></p><p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：<strong>docker pull nginx</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325201611.png" alt="" loading="lazy"></p><p>3）通过命令：<strong>docker images</strong> 查看拉取到的镜像</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325201958.png" alt="" loading="lazy"></p><h4 id="_2-1-4、保存、导入镜像" tabindex="-1"><a class="header-anchor" href="#_2-1-4、保存、导入镜像" aria-hidden="true">#</a> 2.1.4、保存、导入镜像</h4><p>利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><p>1）<strong>docker xx --help</strong> 命令查看docker命令的语法</p><p>例如：docker save --help</p><p>2）<strong>docker save</strong> 保存镜像</p><p>docker save 的命令格式</p><p>o：output</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> <span class="token punctuation">[</span>保存的目标文件名称<span class="token punctuation">]</span> <span class="token punctuation">[</span>镜像名称<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用docker save导出镜像到磁盘</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> nginx.tar nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325202433.png" alt="" loading="lazy"></p><p>3）**docker rmi **删除镜像</p><div class="language-0sh line-numbers-mode" data-ext="0sh"><pre class="language-0sh"><code>docker rmi nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325203133.png" alt="" loading="lazy"></p><p>4）使用<strong>docker load</strong> 加载镜像</p><p>先删除本地的nginx镜像，然后运行命令，加载本地文件：</p><p>i：inpute</p><div class="language-SH line-numbers-mode" data-ext="SH"><pre class="language-SH"><code>docker load -i nginx.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2、容器操作" tabindex="-1"><a class="header-anchor" href="#_2-2、容器操作" aria-hidden="true">#</a> 2.2、容器操作</h3><h4 id="_2-2-1-容器相关命令" tabindex="-1"><a class="header-anchor" href="#_2-2-1-容器相关命令" aria-hidden="true">#</a> 2.2.1.容器相关命令</h4><p>容器操作的命令如图：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325204158.png" alt="" loading="lazy"></p><p>容器保护三个状态：<br> 运行：进程正常运行<br> 暂停：进程暂停，CPU不再运行，并不释放内存<br> 停止：进程终止，回收进程占用的内存、CPU等资源</p><p><strong>docker ps -a</strong>：查看全部容器命令<br><strong>docker run</strong>：创建并运行一个容器，处于运行状态<br><strong>docker pause</strong>：让一个运行的容器暂停<br><strong>docker unpause</strong>：让一个容器从暂停状态恢复运行<br><strong>docker stop</strong>：停止一个运行的容器<br><strong>docker start</strong>：让一个停止的容器再次运行<br><strong>docker rm</strong>：删除一个容器</p><h4 id="_2-2-2、创建并运行一个容器" tabindex="-1"><a class="header-anchor" href="#_2-2-2、创建并运行一个容器" aria-hidden="true">#</a> 2.2.2、创建并运行一个容器</h4><p>首先去docker hub查看Nginx的容器运行命令</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325204823.png" alt="" loading="lazy"></p><p>创建并运行nginx容器的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mynginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>docker run</strong> ：创建并运行一个容器<br> --name : 给容器起一个名字，比如叫做mn<br> -p ：将宿主机端口与容器端口映射，冒号<strong>左侧是宿主机端口，右侧是容器端口</strong>（容器是隔离环境，访问不到容器中的nginx）<br> -d：后台运行容器<br> nginx：镜像名称，例如nginx</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325205509.png" alt="" loading="lazy"></p><p>使用 **docker ps **查看容器状态：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325205636.png" alt="" loading="lazy"></p><p>使用 <strong>docker log 容器名</strong> ：查看容器日志信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs mynginx
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> mynginx <span class="token comment">#持续跟踪</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325210207.png" alt="" loading="lazy"></p><h4 id="_2-2-3、进入容器-修改文件" tabindex="-1"><a class="header-anchor" href="#_2-2-3、进入容器-修改文件" aria-hidden="true">#</a> 2.2.3、进入容器，修改文件</h4><p>1）进入容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mynginx <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>docker exec</strong> ：进入容器内部，执行一个命令<br> -it: 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互<br> mynginx：要进入的容器的名称<br> bash：进入容器后执行的命令，bash是一个linux终端交互命令</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325211126.png" alt="" loading="lazy"></p><p>2）进入nginx的HTML所在目录 /usr/share/nginx/html</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325212440.png" alt="" loading="lazy"></p><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/share/nginx/html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3）修改index.html的内容</p><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s#Welcome to nginx#T4mako欢迎您#g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#39;</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**exit：**退出容器</p><p><strong>docker stop</strong> mynginx：停止容器</p><p><strong>docker ps -a</strong> （查看所有容器，不带-a是正在运行的）</p><p><strong>docker start mynginx</strong>：开启容器</p><p><strong>docker rm</strong> mynginx：删除容器（要先stop才能删除）</p><p><strong>docker rm -f</strong> mynginx：强制删除容器</p><h3 id="_2-3、数据卷-容器数据管理" tabindex="-1"><a class="header-anchor" href="#_2-3、数据卷-容器数据管理" aria-hidden="true">#</a> 2.3、数据卷（容器数据管理）</h3><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。<br> 这就是因为<strong>容器与数据（容器内文件）耦合</strong>带来的后果。</p><p>要解决这个问题，必须将数据与容器解耦，这就要用到<strong>数据卷</strong>了。</p><h4 id="_2-3-1、数据卷的概念" tabindex="-1"><a class="header-anchor" href="#_2-3-1、数据卷的概念" aria-hidden="true">#</a> 2.3.1、数据卷的概念</h4><p>**数据卷（volume）**是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325214249.png" alt="" loading="lazy"></p><p>一旦完成数据卷挂载，<strong>对容器的一切操作</strong>都会作用<strong>在数据卷对应的宿主机目录</strong>了。<br> 这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p><h4 id="_2-3-2、数据卷操作命令" tabindex="-1"><a class="header-anchor" href="#_2-3-2、数据卷操作命令" aria-hidden="true">#</a> 2.3.2、数据卷操作命令</h4><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker volume命令是数据卷操作，根据命令后<strong>跟随的command</strong>来确定<strong>下一步</strong>的操作：</p><p><strong>create</strong> 创建一个volume<br><strong>inspect</strong> 显示一个或多个volume的信息<br><strong>ls</strong> 列出所有的volume<br><strong>prune</strong> 删除未使用的volume<br><strong>rm</strong> 删除一个或多个指定的volume</p><h4 id="_2-3-3、创建和查看数据卷" tabindex="-1"><a class="header-anchor" href="#_2-3-3、创建和查看数据卷" aria-hidden="true">#</a> 2.3.3、创建和查看数据卷</h4><p>创建一个数据卷，并查看数据卷在宿主机的目录位置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create html    <span class="token comment">#创建数据卷</span>
<span class="token function">docker</span> volume <span class="token function">ls</span>		    <span class="token comment">#查看所有数据</span>
<span class="token function">docker</span> volume inspect html   <span class="token comment">#docker volume inspect html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325215020.png" alt="" loading="lazy"></p><h4 id="_2-3-4、挂载数据卷" tabindex="-1"><a class="header-anchor" href="#_2-3-4、挂载数据卷" aria-hidden="true">#</a> 2.3.4、挂载数据卷</h4><p>在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> mynginx <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> html:/usr/share/nginx/html <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">80</span>:80
  <span class="token parameter variable">-d</span>
  nginx <span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：如果容器运行时volume不存在，会被自动创建出来</strong>（即无需创建卷，在容器创建时直接挂在卷即可）</p></blockquote><h4 id="_2-3-6、挂载本地目录" tabindex="-1"><a class="header-anchor" href="#_2-3-6、挂载本地目录" aria-hidden="true">#</a> 2.3.6、挂载本地目录</h4><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录</li><li><strong>直接挂载</strong>模式：宿主机目录 ---&gt; 容器内目录</li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230325221338.png" alt="" loading="lazy"></p><p>目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><p>举例：<br> 创建并运行一个MySQL容器，将宿主机目录直接挂载到容器<br> 1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像<br> 2）创建目录/tmp/mysql/data<br> 3）创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf<br> 4）去DockerHub查阅资料，创建并运行MySQL容器，要求：<br> ① 挂载/tmp/mysql/data到mysql容器内数据存储目录<br> ② 挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件<br> ③ 设置MySQL密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
	<span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
	<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWOES</span><span class="token operator">=</span>root <span class="token punctuation">\\</span>
	<span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
	<span class="token parameter variable">-v</span> /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf
	<span class="token parameter variable">-v</span> /tmp/mysql/data:/var/lib/mysql
	<span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
	mysql:5.7.25
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、dockerfile自定义镜像" tabindex="-1"><a class="header-anchor" href="#_3、dockerfile自定义镜像" aria-hidden="true">#</a> 3、Dockerfile自定义镜像</h2><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><h3 id="_3-1、镜像结构" tabindex="-1"><a class="header-anchor" href="#_3-1、镜像结构" aria-hidden="true">#</a> 3.1、镜像结构</h3><p><strong>镜像</strong>是将<strong>应用程序及其需要的系统函数库、环境、配置、依赖打包</strong>而成。</p><p>镜像是一个分层结构，每一层称为一个Layer<br><strong>BaseImage</strong>层：包含基本的系统函数库，环境变量，文件系统<br><strong>Entrypoint</strong>：入口，是镜像中应用启动的命令<br> 其他：在BaseImage基础上添加依赖，安装程序、完成整个应用的安装和配置</p><p>简单来说，镜像就是在<strong>系统函数库</strong>、运行环境基础上，<strong>添加应用程序文件、配置文件、依赖文件</strong>等组合，然后编写好<strong>启动脚本</strong>打包在一起形成的<strong>文件</strong>。</p><p>构建镜像，其实就是实现上述打包的过程。</p><h3 id="_3-2、dockerfile语法" tabindex="-1"><a class="header-anchor" href="#_3-2、dockerfile语法" aria-hidden="true">#</a> 3.2、Dockerfile语法</h3><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包<br> 只需要告诉Docker，我们的镜像的组成，需要哪些<strong>BaseImage</strong>、需要<strong>拷贝什么文件</strong>、需要安装什么<strong>依赖</strong>、<strong>启动脚本</strong>是什么，将来Docker会帮助我们构建镜像。</p><p>而描述上述信息的文件就是<strong>Dockerfile文件</strong></p>`,98),_=a("strong",null,"Dockerfile",-1),y=a("strong",null,"文本文件",-1),x=a("strong",null,"指令(Instruction)",-1),f=a("br",null,null,-1),D={href:"https://docs.docker.com/engine/reference/builder",target:"_blank",rel:"noopener noreferrer"},q=t(`<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230326100643.png" alt="" loading="lazy"></p><h3 id="_3-3、构建java项目案例" tabindex="-1"><a class="header-anchor" href="#_3-3、构建java项目案例" aria-hidden="true">#</a> 3.3、构建Java项目案例</h3><h4 id="_3-3-1、基于ubuntu构建java项目-麻烦" tabindex="-1"><a class="header-anchor" href="#_3-3-1、基于ubuntu构建java项目-麻烦" aria-hidden="true">#</a> 3.3.1、基于Ubuntu构建Java项目（麻烦）</h4><p>基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><p>步骤1：新建一个空文件夹docker-demo<br> 步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录<br> 步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录<br> 步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录<br> 其中的内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment">## 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span>
<span class="token comment">## 配置环境变量，JDK的安装目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span>

<span class="token comment">## 拷贝jdk和java项目的包</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span>

<span class="token comment">## 安装JDK</span>
<span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> <span class="token operator">\\</span>
 &amp;&amp; tar -xf ./jdk8.tar.gz <span class="token operator">\\</span>
 &amp;&amp; mv ./jdk1.8.0_144 ./java8</span>

<span class="token comment">## 配置环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span>

<span class="token comment">## 暴露端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token comment">## 入口，java项目的启动命令</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤5：进入docker-demo<br> 将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p><p>步骤6：运行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> web <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8090 <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),j={href:"http://192.168.80.135:8090/hello/count",target:"_blank",rel:"noopener noreferrer"},w=t(`<h4 id="_3-3-2、基于java8构建java项目-简便" tabindex="-1"><a class="header-anchor" href="#_3-3-2、基于java8构建java项目-简便" aria-hidden="true">#</a> 3.3.2、基于java8构建Java项目（简便）</h4><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以<strong>在一些安装了部分软件的基础镜像上做改造</strong>。<br> 构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><p>基于java:8-alpine镜像，将一个Java项目构建为镜像：</p><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile<br> ② 拷贝课前资料提供的docker-demo.jar到这个目录中<br> ③ 修改Dockerfile文件：<br> a ）基于java:8-alpine作为基础镜像<br> b ）将app.jar拷贝到镜像中<br> c ）暴露端口<br> d ）编写入口ENTRYPOINT</p><p>内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> java:8-alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./app.jar /tmp/app.jar</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④ 使用docker build命令构建镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb2.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑤ 使用docker run创建容器并运行</p><h2 id="_4、docker-compose" tabindex="-1"><a class="header-anchor" href="#_4、docker-compose" aria-hidden="true">#</a> 4、Docker-Compose</h2><p>Docker Compose可以<strong>基于Compose文件</strong>帮我们<strong>快速的部署分布式应用，而无需手动一个个创建和运行容器</strong>！</p><h3 id="_4-1、认识dockercompose" tabindex="-1"><a class="header-anchor" href="#_4-1、认识dockercompose" aria-hidden="true">#</a> 4.1、认识DockerCompose</h3><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>version<span class="token operator">:</span> <span class="token string">&quot;3.8&quot;</span>
 services<span class="token operator">:</span>
  mysql<span class="token operator">:</span>  <span class="token comment">//mysql服务，服务名即容器名</span>
    image<span class="token operator">:</span> mysql<span class="token operator">:</span><span class="token number">5.7</span>.<span class="token number">25</span> <span class="token comment">//镜像名称</span>
    environment<span class="token operator">:</span>
     MYSQL_ROOT_PASSWORD<span class="token operator">:</span> <span class="token number">123</span>  <span class="token comment">//环境变量</span>
    volumes<span class="token operator">:</span> <span class="token comment">//数据卷配置</span>
     - <span class="token string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span>
     - <span class="token string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span>
  web<span class="token operator">:</span>
    build<span class="token operator">:</span> . <span class="token comment">//当前目录构建镜像</span>
    ports<span class="token operator">:</span>
     - <span class="token string">&quot;8090:8090&quot;</span> <span class="token comment">//暴露端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),I={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p><h3 id="_4-2、centos7安装dockercompose" tabindex="-1"><a class="header-anchor" href="#_4-2、centos7安装dockercompose" aria-hidden="true">#</a> 4.2、CentOS7安装DockerCompose</h3><h4 id="_4-2-1、下载" tabindex="-1"><a class="header-anchor" href="#_4-2-1、下载" aria-hidden="true">#</a> 4.2.1、下载</h4><p>Linux下需要通过命令下载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 安装</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.23.1/docker-compose-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">\`</span></span>-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果下载速度较慢，或者下载失败，可以使用课前资料提供的docker-compose文件，上传到<code>/usr/local/bin/</code>目录也可以。</p><h4 id="_4-2-2、修改文件权限" tabindex="-1"><a class="header-anchor" href="#_4-2-2、修改文件权限" aria-hidden="true">#</a> 4.2.2、修改文件权限</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 修改权限</span>
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-3、base自动补全命令" tabindex="-1"><a class="header-anchor" href="#_4-3-3、base自动补全命令" aria-hidden="true">#</a> 4.3.3、Base自动补全命令：</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 补全命令</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose <span class="token operator">&gt;</span> /etc/bash_completion.d/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这里出现错误，需要修改自己的hosts文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3、部署微服务集群案例" tabindex="-1"><a class="header-anchor" href="#_4-3、部署微服务集群案例" aria-hidden="true">#</a> 4.3、部署微服务集群案例</h3><p>案例：将cloud-demo微服务集群利用DockerCompose部署</p><p><strong>实现思路</strong>：</p><p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件<br> ② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名<br> ③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar<br> ④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中<br> ⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p><h4 id="_4-3-1、compose文件" tabindex="-1"><a class="header-anchor" href="#_4-3-1、compose文件" aria-hidden="true">#</a> 4.3.1、compose文件</h4><p>课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.2&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MODE</span><span class="token punctuation">:</span> standalone
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8848:8848&quot;</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.25
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span>
  <span class="token key atrule">userservice</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user<span class="token punctuation">-</span>service
  <span class="token key atrule">orderservice</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./order<span class="token punctuation">-</span>service
  <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./gateway
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;10010:10010&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中包含5个service服务：<br><code>nacos</code>：作为注册中心和配置中心<br><code>image: nacos/nacos-server</code>： 基于nacos/nacos-server镜像构建<br><code>environment</code>：环境变量<br><code>MODE: standalone</code>：单点模式启动<br><code>ports</code>：端口映射，这里暴露了8848端口</p><p><code>mysql</code>：数据库<br><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25<br><code>environment</code>：环境变量<br><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123<br><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有提前准备好的数据</p><p>​ <code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</p><p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表<br> 查看微服务目录，可以看到都包含Dockerfile文件</p><p>内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> java:8-alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./app.jar /tmp/app.jar</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2、修改微服务配置" tabindex="-1"><a class="header-anchor" href="#_4-3-2、修改微服务配置" aria-hidden="true">#</a> 4.3.2、修改微服务配置</h4><p><strong>微服务</strong>将来要<strong>部署为docker容器</strong>，而<strong>容器之间</strong>互联不是通过IP地址，而是<strong>通过容器名</strong>。这里我们<strong>将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//mysql<span class="token punctuation">:</span>3306/cloud_order<span class="token punctuation">?</span>useSSL=false
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> orderservice
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> nacos<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos服务地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-3、打包" tabindex="-1"><a class="header-anchor" href="#_4-3-3、打包" aria-hidden="true">#</a> 4.3.3、打包</h4><p>接下来需要将我们的每个微服务都打包。因为之前查看到<strong>Dockerfile中的jar包名称都是app.jar</strong>，因此我们的每个微服务都需要用这个名称。</p><p>可以通过<strong>修改pom.xml</strong>中的<strong>打包名称</strong>来实现，每个微服务都需要修改：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 服务打包的最终名称 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包后</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230326113508.png" alt="" loading="lazy"></p><h4 id="_4-3-4、拷贝jar包到部署目录" tabindex="-1"><a class="header-anchor" href="#_4-3-4、拷贝jar包到部署目录" aria-hidden="true">#</a> 4.3.4、拷贝jar包到部署目录</h4><p>编译打包好的app.jar文件，需要<strong>放到Dockerfile的同级目录中</strong><br> 注意：每个微服务的app.jar放到与服务名称对应的目录</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230326113628.png" alt="" loading="lazy"></p><h4 id="_4-3-5、部署" tabindex="-1"><a class="header-anchor" href="#_4-3-5、部署" aria-hidden="true">#</a> 4.3.5、部署</h4><p>最后，需要将文件整个cloud-demo文件夹上传到虚拟机中，由DockerCompose部署。</p><p>进入cloud-demo目录，然后运行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-docker镜像仓库" aria-hidden="true">#</a> 5.Docker镜像仓库</h2><h3 id="_5-1、搭建私有镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-1、搭建私有镜像仓库" aria-hidden="true">#</a> 5.1、搭建私有镜像仓库</h3>`,43),O={href:"https://hub.docker.com/_/registry",target:"_blank",rel:"noopener noreferrer"},S=t(`<h4 id="_5-1-1、简化版镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-1-1、简化版镜像仓库" aria-hidden="true">#</a> 5.1.1、简化版镜像仓库</h4><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> registry	<span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> registry-data:/var/lib/registry <span class="token punctuation">\\</span>
    registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。</p>`,5),B={href:"http://YourIp:5000/v2/_catalog",target:"_blank",rel:"noopener noreferrer"},L=t(`<h4 id="_5-1-2、带有图形化界面版本" tabindex="-1"><a class="header-anchor" href="#_5-1-2、带有图形化界面版本" aria-hidden="true">#</a> 5.1.2、带有图形化界面版本</h4><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.0&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">registry</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> registry
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./registry<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/registry
  <span class="token key atrule">ui</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> joxit/docker<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>static
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">80</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> REGISTRY_TITLE=Tmako私有仓库
      <span class="token punctuation">-</span> REGISTRY_URL=http<span class="token punctuation">:</span>//registry<span class="token punctuation">:</span><span class="token number">5000</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-1-3、配置docker信任地址" tabindex="-1"><a class="header-anchor" href="#_5-1-3、配置docker信任地址" aria-hidden="true">#</a> 5.1.3、配置Docker信任地址</h4><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 打开要修改的文件</span>
<span class="token function">vi</span> /etc/docker/daemon.jsonn j
<span class="token comment">## 添加内容：</span>
<span class="token string">&quot;insecure-registries&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;http://192.168.80.135:8080&quot;</span><span class="token punctuation">]</span>
<span class="token comment">## 重加载</span>
systemctl daemon-reload
<span class="token comment">## 重启docker</span>
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2、推送、拉取镜像" tabindex="-1"><a class="header-anchor" href="#_5-2、推送、拉取镜像" aria-hidden="true">#</a> 5.2、推送、拉取镜像</h3><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：<br> 192.168.80.135:8080/</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag nginx:latest <span class="token number">192.168</span>.80.130:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 推送镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token number">192.168</span>.80.130:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③ 拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token number">192.168</span>.80.130:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14);function z(C,R){const s=o("ExternalLinkIcon");return i(),c("div",null,[p,a("p",null,[a("strong",null,[a("a",d,[n("DockerHub"),e(s)])]),n("：一个Docker镜像的托管平台，这样的平台称为Docker Registry")]),a("p",null,[n("国内也有类似于DockerHub 的公开服务，比如 "),a("a",u,[n("网易云镜像服务"),e(s)]),n("、"),a("a",m,[n("阿里云镜像库"),e(s)]),n("等。")]),k,a("p",null,[n("参考阿里云的镜像加速文档："),a("a",v,[n("https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors"),e(s)])]),g,a("p",null,[n("1）首先去镜像仓库搜索nginx镜像，比如"),a("a",b,[n("DockerHub"),e(s)]),n(":")]),h,a("p",null,[_,n("就是一个"),y,n("，其中包含一个个的"),x,n("，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。"),f,a("a",D,[n("官网文档"),e(s)])]),q,a("p",null,[n("最后访问 "),a("a",j,[n("http://192.168.80.135:8090/hello/count"),e(s)])]),w,a("p",null,[a("a",I,[n("DockerCompose的详细语法参考官网"),e(s)])]),T,a("p",null,[n("搭建镜像仓库可以基于Docker官方提供的"),a("a",O,[n("DockerRegistry"),e(s)]),n("来实现。")]),S,a("p",null,[n("访问"),a("a",B,[n("http://YourIp:5000/v2/_catalog"),e(s)]),n(" 可以查看当前私有镜像服务中包含的镜像")]),L])}const M=r(l,[["render",z],["__file","Docker.html.vue"]]);export{M as default};
