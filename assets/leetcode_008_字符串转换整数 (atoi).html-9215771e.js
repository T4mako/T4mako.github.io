const t=JSON.parse(`{"key":"v-ff6ec796","path":"/code/leetcode/leetcode_008_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi).html","title":"008_字符串转换整数 (atoi)","lang":"zh-CN","frontmatter":{"description":"008_字符串转换整数 (atoi) tag：字符串 难度：中等 题目： 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。 函数 myAtoi(string s) 的算法如下： 读入字符串并丢弃无用的前导空格 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。 将前面步骤读入的这些数字转换为整数（即，\\"123\\" -&gt; 123， \\"0032\\" -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。 如果整数数超过 32 位有符号整数范围 [−231, 231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。 返回整数作为最终结果。 注意： 本题中的空白字符只包括空格字符 ' ' 。 除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。 示例 1： 输入：s = \\"42\\" 输出：42 解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。 第 1 步：\\"42\\"（当前没有读入字符，因为没有前导空格） ^ 第 2 步：\\"42\\"（当前没有读入字符，因为这里不存在 '-' 或者 '+'） ^ 第 3 步：\\"42\\"（读入 \\"42\\"） ^ 解析得到整数 42 。 由于 \\"42\\" 在范围 [-231, 231 - 1] 内，最终结果为 42 。 示例 2： 输入：s = \\" -42\\" 输出：-42 解释： 第 1 步：\\" -42\\"（读入前导空格，但忽视掉） ^ 第 2 步：\\" -42\\"（读入 '-' 字符，所以结果应该是负数） ^ 第 3 步：\\" -42\\"（读入 \\"42\\"） ^ 解析得到整数 -42 。 由于 \\"-42\\" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。 来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/string-to-integer-atoi 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/leetcode/leetcode_008_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi).html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"008_字符串转换整数 (atoi)"}],["meta",{"property":"og:description","content":"008_字符串转换整数 (atoi) tag：字符串 难度：中等 题目： 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。 函数 myAtoi(string s) 的算法如下： 读入字符串并丢弃无用的前导空格 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。 将前面步骤读入的这些数字转换为整数（即，\\"123\\" -&gt; 123， \\"0032\\" -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。 如果整数数超过 32 位有符号整数范围 [−231, 231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。 返回整数作为最终结果。 注意： 本题中的空白字符只包括空格字符 ' ' 。 除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。 示例 1： 输入：s = \\"42\\" 输出：42 解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。 第 1 步：\\"42\\"（当前没有读入字符，因为没有前导空格） ^ 第 2 步：\\"42\\"（当前没有读入字符，因为这里不存在 '-' 或者 '+'） ^ 第 3 步：\\"42\\"（读入 \\"42\\"） ^ 解析得到整数 42 。 由于 \\"42\\" 在范围 [-231, 231 - 1] 内，最终结果为 42 。 示例 2： 输入：s = \\" -42\\" 输出：-42 解释： 第 1 步：\\" -42\\"（读入前导空格，但忽视掉） ^ 第 2 步：\\" -42\\"（读入 '-' 字符，所以结果应该是负数） ^ 第 3 步：\\" -42\\"（读入 \\"42\\"） ^ 解析得到整数 -42 。 由于 \\"-42\\" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。 来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/string-to-integer-atoi 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"008_字符串转换整数 (atoi)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"解法：","slug":"解法","link":"#解法","children":[]}],"readingTime":{"minutes":2.71,"words":814},"filePathRelative":"code/leetcode/leetcode_008_字符串转换整数 (atoi).md","excerpt":"<h1> 008_字符串转换整数 (atoi)</h1>\\n<blockquote>\\n<p>tag：字符串</p>\\n<p>难度：中等</p>\\n</blockquote>\\n<blockquote>\\n<p>题目：</p>\\n<p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</p>\\n<p>函数 myAtoi(string s) 的算法如下：</p>\\n<p>读入字符串并丢弃无用的前导空格<br>\\n检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。<br>\\n读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。<br>\\n将前面步骤读入的这些数字转换为整数（即，\\"123\\" -&gt; 123， \\"0032\\" -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。<br>\\n如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。<br>\\n返回整数作为最终结果。<br>\\n注意：</p>\\n<p>本题中的空白字符只包括空格字符 ' ' 。<br>\\n除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</p>\\n<p>示例 1：</p>\\n<p>输入：s = \\"42\\"<br>\\n输出：42<br>\\n解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。<br>\\n第 1 步：\\"42\\"（当前没有读入字符，因为没有前导空格）<br>\\n^<br>\\n第 2 步：\\"42\\"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）<br>\\n^<br>\\n第 3 步：\\"42\\"（读入 \\"42\\"）<br>\\n^<br>\\n解析得到整数 42 。<br>\\n由于 \\"42\\" 在范围 [-231, 231 - 1] 内，最终结果为 42 。<br>\\n示例 2：</p>\\n<p>输入：s = \\"   -42\\"<br>\\n输出：-42<br>\\n解释：<br>\\n第 1 步：\\"   -42\\"（读入前导空格，但忽视掉）<br>\\n^<br>\\n第 2 步：\\"   -42\\"（读入 '-' 字符，所以结果应该是负数）<br>\\n^<br>\\n第 3 步：\\"   -42\\"（读入 \\"42\\"）<br>\\n^<br>\\n解析得到整数 -42 。<br>\\n由于 \\"-42\\" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。</p>\\n<p>来源：力扣（LeetCode）<br>\\n链接：<a href=\\"https://leetcode.cn/problems/string-to-integer-atoi\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://leetcode.cn/problems/string-to-integer-atoi</a><br>\\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\\n</blockquote>","autoDesc":true}`);export{t as data};
