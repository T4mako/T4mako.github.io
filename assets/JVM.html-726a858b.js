import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as r,b as a,d as n,e as s,f as o}from"./app-fa4f30e7.js";const l={},d={href:"https://javaguide.cn/java/jvm/jvm-intro.html",target:"_blank",rel:"noopener noreferrer"},u=a("p",null,[n("JVM(Java Virtual Machine) 其实就类似于一台小电脑运行在 windows 或者 linux 这些操作系统环境下即可。"),a("br"),n(" 它直接和操作系统进行交互，与硬件不直接交互，而操作系统可以帮我们完成和硬件进行交互的工作。")],-1),h=o('<h2 id="一、基础知识" tabindex="-1"><a class="header-anchor" href="#一、基础知识" aria-hidden="true">#</a> 一、基础知识</h2><h3 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h3><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。</p><p>JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p>字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><p><strong>JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。</strong><br> 也就是说我们平时接触到的 HotSpot VM（Sun/Oracle JDK 和 OpenJDK 中所带的虚拟机） 仅仅是是 JVM 规范的一种实现而已</p><blockquote><p>Oracle JDK 是基于 OpenJDK 源代码构建的</p></blockquote><h3 id="jdk-和-jre" tabindex="-1"><a class="header-anchor" href="#jdk-和-jre" aria-hidden="true">#</a> JDK 和 JRE</h3><ul><li>JDK（Java Development Kit）= JRE + 开发工具集（javac.exe,java..exe,javadoc.exe...）</li><li>JRE（Java Runtime Environment Java运行环境）= JVM + Java SE 标准类库（Java Class Library）</li></ul><p>JDK（Java Development Kit），它是功能齐全的 Java SDK（软件开发套件 Software development kit），是提供给开发者使用的，能够创建和编译 Java 程序。</p><p>它包含了 JRE，同时还包含了编译 java 源码的编译器 javac 以及一些其他工具比如 javadoc（文档注释工具）、jdb（调试器）、jconsole（基于 JMX 的可视化监控⼯具）、javap（反编译工具）等等。</p><p>JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，主要包括 Java 虚拟机（JVM）、Java 基础类库（Class Library）。</p><p>JRE 是 Java 运行时环境，仅包含 Java 应用程序的运行时环境和必要的类库。</p><p>JDK 则包含了 JRE，同时还包括了 javac、javadoc、jdb、jconsole、javap 等工具，可以用于 Java 应用程序的开发和调试。</p><p>如果需要进行 Java 编程工作，比如编写和编译 Java 程序、使用 Java API 文档等，就需要安装 JDK。<br> 而对于某些需要使用 Java 特性的应用程序，如 JSP 转换为 Java Servlet、使用反射等，也需要 JDK 来编译和运行 Java 代码。<br> 因此，即使不打算进行 Java 应用程序的开发工作，也有可能需要安装 JDK。</p><h3 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码" aria-hidden="true">#</a> 字节码</h3><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。</p><p>Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>',18),v=a("p",null,[a("code",null,".class->机器码"),n(" 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器"),a("strong",null,"逐行解释执行"),n("，这种方式的执行速度会相对比较慢。")],-1),m=a("p",null,"而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。",-1),k=a("p",null,"而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言",-1),b=a("div",{class:"hint-container info"},[a("p",{class:"hint-container-title"},"相关信息"),a("p",null,[n("HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（"),a("strong",null,"热点代码"),n("），而这也就是 JIT 所需要编译的部分。")]),a("p",null,"JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。"),a("p",null,"JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。")],-1),g=o('<p>JVM 大致结构模型：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230821005244740.png" alt="image-20230821005244740" loading="lazy"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>为什么不全部使用 AOT 呢?</p><p>AOT 可以提前编译节省启动时间，那为什么不全部使用这种编译方式呢？</p><p>长话短说，这和 Java 语言的动态特性有千丝万缕的联系了。举个例子，CGLIB 动态代理使用的是 ASM 技术，而这种技术大致原理是运行时直接在内存中生成并加载修改后的字节码文件也就是 .class 文件，如果全部使用 AOT 提前编译，也就不能使用 ASM 技术了。为了支持类似的动态特性，所以选择使用 JIT 即时编译器。</p></div><h3 id="java-语言-编译与解释并存-的原因" tabindex="-1"><a class="header-anchor" href="#java-语言-编译与解释并存-的原因" aria-hidden="true">#</a> Java 语言“编译与解释并存”的原因</h3><p>高级编程语言按照程序的执行方式分为两种：</p><ul><li>编译型：编译型语言 会通过编译器将源代码 <strong>一次性翻译</strong> 成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</li><li>解释型：解释型语言会通过解释器 <strong>一句一句的将代码解释</strong>（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</li></ul>',6),J=a("h3",{id:"oracle-jdk-vs-openjdk",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#oracle-jdk-vs-openjdk","aria-hidden":"true"},"#"),n(" Oracle JDK vs OpenJDK")],-1),f=a("p",null,[n("2006 年 SUN 公司将 Java 开源，也就有了 OpenJDK。"),a("br"),n(" 2009 年 Oracle 收购了 Sun 公司，于是自己在 OpenJDK 的基础上搞了一个 Oracle JDK。 Oracle JDK 是不开源的，并且刚开始的几个版本（Java8 ~ Java11）还会相比于 OpenJDK 添加一些特有的功能和工具。")],-1),_=a("p",null,"Oracle JDK 是基于 OpenJDK 7 构建的，只添加了一些小功能，由 Oracle 工程师参与维护。",-1),S=a("p",null,"Oracle JDK 和 OpenJDK 的区别：",-1),M=a("br",null,null,-1),x={href:"https://github.com/openjdk/jdk",target:"_blank",rel:"noopener noreferrer"},j=o("<li>是否免费：Oracle JDK 会提供免费版本，但一般有时间限制。<br> JDK17 之后的版本可以免费分发和商用，但是仅有 3 年时间，3 年后无法免费商用<br> 不过，JDK8u221 之前只要不升级可以无限期免费。OpenJDK 是完全免费的。</li><li>功能性：Oracle JDK 在 OpenJDK 的基础上添加了一些特有的功能和工具，比如 Java Flight Recorder（JFR，一种监控工具）、Java Mission Control（JMC，一种监控工具）等工具。<br> 不过，在 Java 11 之后，OracleJDK 和 OpenJDK 的功能基本一致，之前 OracleJDK 中的私有组件大多数也已经被捐赠给开源组织。</li><li>稳定性：OpenJDK 不提供 LTS 服务，而 OracleJDK 大概每三年都会推出一个 LTS 版进行长期支持。<br> 不过，很多公司都基于 OpenJDK 提供了对应的和 OracleJDK 周期相同的 LTS 版。因此，两者稳定性其实也是差不多的。</li><li>协议：Oracle JDK 使用 <code>BCL/OTN</code> 协议获得许可，而 OpenJDK 根据 <code>GPL v2</code> 许可获得许可。</li>",4),X={class:"hint-container info"},O=a("p",{class:"hint-container-title"},"相关信息",-1),C=a("p",null,"既然 Oracle JDK 这么好，那为什么还要有 OpenJDK？",-1),D={href:"https://github.com/alibaba/dragonwell8",target:"_blank",rel:"noopener noreferrer"},A=a("li",null,"OpenJDK 是商业免费的（这也是为什么通过 yum 包管理器上默认安装的 JDK 是 OpenJDK 而不是 Oracle JDK）。虽然 Oracle JDK 也是商业免费（比如 JDK 8），但并不是所有版本都是免费的。",-1),K=a("li",null,"OpenJDK 更新频率更快。Oracle JDK 一般是每 6 个月发布一个新版本，而 OpenJDK 一般是每 3 个月发布一个新版本。（现在你知道为啥 Oracle JDK 更稳定了吧，先在 OpenJDK 试试水，把大部分问题都解决掉了才在 Oracle JDK 上发布）基于以上这些原因，OpenJDK 还是有存在的必要的！",-1),y=o('<h3 id="java-文件是如何被运行的" tabindex="-1"><a class="header-anchor" href="#java-文件是如何被运行的" aria-hidden="true">#</a> Java 文件是如何被运行的</h3><p>假设编写了一个 <code>A.java</code> 文件，目前它只是一个文本文件且有一定的缩进<br> JVM 是不认识文本文件的，所以它需要一个 <strong>编译</strong> ，让其成为一个它会读二进制文件的 <code>A.class</code></p><h4 id="_1-类加载器" tabindex="-1"><a class="header-anchor" href="#_1-类加载器" aria-hidden="true">#</a> ① 类加载器</h4><p>如果 JVM 想要执行这个 .class 文件，我们需要将其装进一个 <strong>类加载器</strong> 中，它就像一个搬运工一样，会把所有的 .class 文件全部搬进 JVM 里面来。</p>',4),V=o(`<h4 id="_2-方法区" tabindex="-1"><a class="header-anchor" href="#_2-方法区" aria-hidden="true">#</a> ② 方法区</h4><p><strong>方法区</strong> 是用于存放类似于 <strong>元数据</strong> 信息方面的数据的<br> 比如类信息，常量，静态变量，编译后代码···等<br> 类加载器将 .class 文件搬过来就是先丢到这一块上</p><h4 id="_3-堆" tabindex="-1"><a class="header-anchor" href="#_3-堆" aria-hidden="true">#</a> ③ 堆</h4><p>堆 主要放了一些存储的数据，比如对象实例，数组···等，它和方法区都同属于 线程共享区域 。也就是说它们都是 <strong>线程不安全</strong> 的</p><h4 id="_4-栈" tabindex="-1"><a class="header-anchor" href="#_4-栈" aria-hidden="true">#</a> ④ 栈</h4><p>栈 这是我们的代码运行空间。我们编写的每一个方法都会放到 栈 里面运行。我们会听说过 本地方法栈 或者 本地方法接口 这两个名词，不过我们基本不会涉及这两块的内容，它俩底层是使用 C 来进行工作的，和 Java 没有太大的关系。</p><h4 id="_5-程序计数器" tabindex="-1"><a class="header-anchor" href="#_5-程序计数器" aria-hidden="true">#</a> ⑤ 程序计数器</h4><p>主要就是完成一个加载工作，类似于一个指针一样的，指向下一行我们需要执行的代码。和栈一样，都是 <strong>线程独享</strong> 的，就是说每一个线程都会有自己对应的一块区域而不会存在并发和多线程的问题。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230823001104289.png" alt="image-20230823001104289" loading="lazy"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li><code>.java</code> 文件经过编译后变成 <code>.class</code> 字节码文件</li><li>字节码文件通过 <code>类加载器</code> 被搬运到 JVM 虚拟机中</li><li>虚拟机主要的 5 大块： <ul><li><code>方法区</code>，<code>堆</code> 都为<code>线程共享</code>区域，有线程安全问题</li><li><code>栈</code> 和 <code>本地方法栈</code> 和 <code>计数器</code> 都是 <code>独享区域</code>，不存在线程安全问题</li><li>而 JVM 的调优主要就是围绕 <code>堆</code>，<code>栈</code> 两大块进行</li></ul></li></ul></div><h3 id="一个简单的示例" tabindex="-1"><a class="header-anchor" href="#一个简单的示例" aria-hidden="true">#</a> 一个简单的示例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Stu类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">pringln</span><span class="token punctuation">(</span><span class="token string">&quot;stu_name:&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 主函数</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Stu</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token string">&quot;T4mako&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stu<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>App.java</code> 编译后得到 <code>App.class</code> ，执行 <code>App.class</code> ，系统会启动一个 <code>JVM 进程</code> ，从 <code>classpath</code> 路径中找到一个名为 <code>App.class</code> 的二进制文件，将 App 的类信息加载到运行时数据区的 <code>方法区</code> 内，这个过程叫做 App <code>类的加载</code></li><li>JVM 找到 App 的主程序入口，执行 main 方法</li><li>main 中的第一条语句为 <code>Stu stu = new Stu(&quot;T4mako&quot;);</code> ，就是让 JVM 创建一个 Stu 对象，但是这个时候方法区中是没有 Stu 类的信息的，所以 JVM 马上加载 Stu 类，把 Stu 类的信息放到 <code>方法区</code> 中</li><li>加载完 Stu 类后，JVM 在 <code>堆</code> 中为一个新的 stu 实例分配内存，然后调用构造函数初始化 stu 实例，这个 stu 实例持有 <strong>指向方法区中的 Stu 类的类型信息的引用</strong></li><li>执行 <code>stu.say();</code> 时，JVM 根据 stu 的引用找到 stu 对象，然后根据 stu 对象持有的引用定位到方法区中 Stu 类的类型信息的方法表，获得 say() 的字节码地址。</li><li>执行 say()</li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>只需要知道 <code>对象实例初始化</code> 时会去 <code>方法区中找类信息</code><br> 完成后再到 <code>栈</code> 那里去 <code>运行方法</code> 。<br> 找方法就在方法表中找</p></div><h2 id="二、类加载器的介绍" tabindex="-1"><a class="header-anchor" href="#二、类加载器的介绍" aria-hidden="true">#</a> 二、类加载器的介绍</h2><p>类的加载器：</p><ul><li>负责加载 .class 文件，.class 文件开头会有特定的文件标示</li><li><strong>将 class 文件字节码内容加载到内存中</strong>，并将这些内容转换成方法区中的运行时数据结构，并且 ClassLoader 只负责 class 文件的加载，而是否能够运行则由 Execution Engine 来决定</li></ul><h3 id="_2-1-类加载器的流程" tabindex="-1"><a class="header-anchor" href="#_2-1-类加载器的流程" aria-hidden="true">#</a> 2.1 类加载器的流程</h3><p>类被加载到虚拟机内存中开始，到释放内存总共有 7 个步骤：<br> 加载，连接（验证，准备，解析），初始化，使用，卸载。</p><h4 id="_2-1-1-加载" tabindex="-1"><a class="header-anchor" href="#_2-1-1-加载" aria-hidden="true">#</a> 2.1.1 加载</h4><ol><li>将 class 文件加载到内存</li><li>将 <strong>静态数据结构</strong> 转化成 <strong>方法区中运行时的数据结构</strong></li><li>在 <strong>堆</strong> 中生成一个代表这个类的 <code>java.lang.Class 对象</code> 作为数据访问的入口</li></ol><h4 id="_2-1-2-链接" tabindex="-1"><a class="header-anchor" href="#_2-1-2-链接" aria-hidden="true">#</a> 2.1.2 链接</h4><p>连接：为类的静态变量赋予正确的初始值</p><ol><li>验证：<br> 安全检查 （确保加载的类符合 JVM 规范和安全，保证被校验类的方法在运行时不会做出危害虚拟机的事件）</li><li>准备：<br> 为 <code>static</code> 变量在方法区中分配内存空间，设置变量的初始值<br> （注意：准备阶段只设置类中的 <strong>静态</strong> 变量（ <strong>方法区</strong> 中），不包括 <strong>实例变量</strong>（ <strong>堆内存</strong> 中），实例变量是对象初始化时赋值的）</li><li>解析：<br> 虚拟机将常量池内的符号引用替换为直接引用的过程<br> （符号引用比如我现在 <code>import java.util.ArrayList</code> 这就算符号引用<br> 直接引用就是指针或者对象地址，注意 <strong>引用对象</strong> 一定是在<strong>内存</strong>进行）</li></ol><h4 id="_2-1-3-初始化" tabindex="-1"><a class="header-anchor" href="#_2-1-3-初始化" aria-hidden="true">#</a> 2.1.3 初始化</h4><p>初始化：执行类构造器方法的 <code>&lt;clinit&gt;()</code> 的过程，且要保证父类的 <code>&lt;clinit&gt;()</code> 方法执行完毕<br> 这个方法由编译器收集，顺序执行所有 <strong>类变量（static）</strong> 显式初始化和 <strong>静态代码块</strong> 中语句。</p><p>初始化执行时机：</p><ul><li>new一个对象</li><li>访问某个类或接口的静态变量</li><li>调用类的静态方法，反射 <code>Class.forName</code></li><li>初始化一个类的子类</li><li>JVM启动时标明的启动类，即文件名和类名相同的那个类</li></ul><p>注：静态代码块 和 类变量初始化 顺序执行</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>初始化顺序依次是：（静态变量、静态初始化块）–&gt;（变量、初始化块）–&gt; 构造器；如果有父类，则顺序是：父类 static 方法 –&gt; 子类 static 方法 –&gt; 父类构造方法- -&gt; 子类构造方法</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// a 最终为 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>字节码文件中初始化方法有两种，非静态资源初始化的 <code>&lt;init&gt;</code> 和静态资源初始化的 <code>&lt;clinit&gt;</code> ，类构造器方法 <code>&lt;clinit&gt;()</code> 不同于类的构造器，这些方法都是字节码文件中只能给 JVM 识别的特殊方法。</p></div><h4 id="_2-1-4-卸载" tabindex="-1"><a class="header-anchor" href="#_2-1-4-卸载" aria-hidden="true">#</a> 2.1.4 卸载</h4><p>GC 将无用对象从内存中卸载</p><h3 id="_2-2-类加载器加载顺序" tabindex="-1"><a class="header-anchor" href="#_2-2-类加载器加载顺序" aria-hidden="true">#</a> 2.2 类加载器加载顺序</h3><p>类加载器顺序：<br> BootStrap ClassLoader：rt.jar<br> Extension ClassLoader: 加载扩展的 jar 包<br> App ClassLoader：指定的 classpath 下面的 jar 包<br> Custom ClassLoader：自定义的类加载器</p><blockquote><p>第一步： 字底向上检查类是否已加载<br> 第二步： 自顶向下尝试加载类</p></blockquote><h3 id="_2-3-双亲委派机制" tabindex="-1"><a class="header-anchor" href="#_2-3-双亲委派机制" aria-hidden="true">#</a> 2.3 双亲委派机制</h3><p>当一个类收到了加载请求时，它是不会先自己去尝试加载的，而是委派给父类去完成，比如我现在要 new 一个 Person，这个 Person 是我们自定义的类，如果我们要加载它，就会先委派 App ClassLoader ，只有当父类加载器都反馈自己无法完成这个请求（也就是父类加载器都没有找到加载所需的 Class）时，子类加载器才会自行尝试加载。</p><p>这样做的好处是，加载位于 rt.jar 包中的类时不管是哪个加载器加载，最终都会委托到 BootStrap ClassLoader 进行加载，这样保证了使用不同的类加载器得到的都是同一个结果。</p><p>其实这个也是一个隔离的作用，避免了我们的代码影响了 JDK 的代码，比如我现在自己定义一个 java.lang.String：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试运行当前类的 <code>main</code> 函数的时候，我们的代码肯定会报错。这是因为在加载的时候其实是找到了 <code>rt.jar</code> 中的 <code>java.lang.String</code>，然而发现这个里面并没有 <code>main</code> 方法。</p><h2 id="三、运行时数据区" tabindex="-1"><a class="header-anchor" href="#三、运行时数据区" aria-hidden="true">#</a> 三、运行时数据区</h2><h3 id="_3-1-本地方法栈和程序计数器" tabindex="-1"><a class="header-anchor" href="#_3-1-本地方法栈和程序计数器" aria-hidden="true">#</a> 3.1 本地方法栈和程序计数器</h3><ul><li><p>本地方法栈：<br><code>native</code> 修饰的方法就是本地方法，这是使用 C 来实现的（比如 Thread 类的 start0 方法）<br> 一般这些方法都会放到一个叫做本地方法栈的区域。</p></li><li><p>程序计数器其实就是一个指针，它指向了我们程序中下一句需要执行的指令<br> 它是内存区域中唯一一个不会出现 OutOfMemoryError 的区域，且占用很小的内存空间<br> 这个内存仅代表当前线程所执行的字节码的行号指示器，字节码解析器通过改变这个计数器的值选取下一条需要执行的字节码指令</p></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果执行的是 native 方法，那这个指针就不工作了。</p></div><h3 id="_3-2-方法区" tabindex="-1"><a class="header-anchor" href="#_3-2-方法区" aria-hidden="true">#</a> 3.2 方法区</h3><p><strong>方法区</strong> 主要的作用是存放 <strong>类的元数据</strong> 信息，常量和静态变量···等。当它存储的信息过大时，会在无法满足内存分配时报错</p><h3 id="_3-3-虚拟机栈和虚拟机堆" tabindex="-1"><a class="header-anchor" href="#_3-3-虚拟机栈和虚拟机堆" aria-hidden="true">#</a> 3.3 虚拟机栈和虚拟机堆</h3><p>栈管运行，堆管存储。<br> 则虚拟机栈负责运行代码，而虚拟机堆负责存储数据</p><h4 id="_3-3-1、虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_3-3-1、虚拟机栈" aria-hidden="true">#</a> 3.3.1、虚拟机栈</h4><p>它是 Java 方法执行的内存模型。<br> 里面会对局部变量，动态链表，方法出口，栈的操作（入栈和出栈）进行存储，且线程独享。<br> 同时如果我们听到 <strong>局部变量表</strong>，那也是在说 <strong>虚拟机栈</strong></p><h4 id="_3-3-2、虚拟机栈的异常" tabindex="-1"><a class="header-anchor" href="#_3-3-2、虚拟机栈的异常" aria-hidden="true">#</a> 3.3.2、虚拟机栈的异常</h4><p>线程请求的栈的深度大于虚拟机栈的最大深度，就会报 <code>StackOverflowError </code>（这种错误经常出现在递归中）<br> Java 虚拟机也可以动态扩展，但随着扩展会不断地申请内存，当无法申请足够内存时就会报错 <code>OutOfMemoryError</code></p><h4 id="_3-3-3、虚拟机栈的生命周期" tabindex="-1"><a class="header-anchor" href="#_3-3-3、虚拟机栈的生命周期" aria-hidden="true">#</a> 3.3.3、虚拟机栈的生命周期</h4><p>对于栈来说，不存在垃圾回收。<br> 只要程序运行结束，栈的空间自然就会释放了。<br><strong>栈的生命周期</strong> 和 <strong>所处的线</strong>程是一致的。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>8 种基本类型的变量+对象的引用变量+实例方法都是在栈里面分配内存</p></div><h4 id="_3-3-4、虚拟机栈的执行" tabindex="-1"><a class="header-anchor" href="#_3-3-4、虚拟机栈的执行" aria-hidden="true">#</a> 3.3.4、虚拟机栈的执行</h4><p>我们经常说的栈帧数据（说白了在 JVM 中叫栈帧，放到 Java 中其实就是 <strong>方法</strong>）它也是存放在栈中的。</p><p>栈中的数据都是以栈帧的格式存在，它是一个关于方法和运行期数据的数据集。</p><p>比如我们执行一个方法 a，就会对应产生一个栈帧 A1，然后 A1 会被压入栈中。<br> 同理方法 b 会有一个 B1<br> 方法 c 会有一个 C1<br> 等到这个线程执行完毕后，栈弹出 C1，B1，A1。（<strong>先进后出</strong>）</p><h4 id="_3-3-5、局部变量的复用" tabindex="-1"><a class="header-anchor" href="#_3-3-5、局部变量的复用" aria-hidden="true">#</a> 3.3.5、局部变量的复用</h4><p>局部变量表用于存放方法参数和方法内部所定义的局部变量。<br> 它的容量是以 Slot 为最小单位，一个 slot 可以存放 32 位以内的数据类型。</p><p>为了节省栈帧空间，这些 slot 是可以复用的，当方法执行位置超过了某个变量，那么这个变量的 slot 可以被其它变量复用。当然如果需要复用，那我们的垃圾回收自然就不会去动这些内存</p><h4 id="_3-3-6、虚拟机堆的概念" tabindex="-1"><a class="header-anchor" href="#_3-3-6、虚拟机堆的概念" aria-hidden="true">#</a> 3.3.6、虚拟机堆的概念</h4><p>JVM 内存会划分为堆内存和非堆内存，堆内存中也会划分为 <strong>年轻代</strong> 和 <strong>老年代</strong>，而非堆内存则为 <strong>永久代</strong></p><p>Eden，FromPlace 和 ToPlace 的默认占比为 8:1:1。<br> 可以通过一个 <code>-XX:+UsePSAdaptiveSurvivorSizePolicy</code> 参数来根据生成对象的速率动态调整</p>`,69),E=o('<div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>堆内存</strong> 中存放的是 <strong>对象</strong><br> 垃圾收集就是收集这些对象然后交给 GC 算法进行回收</p><p><strong>非堆内存</strong> 就是 <strong>方法区</strong></p><p>在 1.8 中已经移除永久代，替代品是 <strong>元空间（MetaSpace）</strong><br> 最大区别是 metaSpace 是不存在于 JVM 中的，它使用的是本地内存。并有两个参数：<br><code>MetaspaceSize</code>：初始化元空间大小，控制发生 GC<br><code>MaxMetaspaceSize</code>：限制元空间大小上限，防止占用过多物理内存。</p><p>移除的大致原因：融合 HotSpot JVM 和 JRockit VM 而做出的改变，因为 JRockit 是没有永久代的，不过这也间接性地解决了永久代的 OOM 问题。</p></div><h4 id="_3-3-7、eden-年轻代" tabindex="-1"><a class="header-anchor" href="#_3-3-7、eden-年轻代" aria-hidden="true">#</a> 3.3.7、Eden 年轻代</h4><p>对象放入 Eden：</p><ul><li>new 一个对象后，会先放到 Eden 划分出来的一块作为存储空间的内存</li><li>由于堆内存是线程共享的，所以有可能会出现两个对象共用一个内存的情况</li><li>JVM 的处理是为每个线程都预先申请好一块连续的内存空间并规定了对象存放的位置，而如果空间不足会再申请多块内存空间。这个操作我们会称作 TLAB</li></ul><p>Eden 空间满了后，会触发 <code>Minor GC</code>（一个发生在年轻代的 GC）<br> 存活下来的对象移动到 Survivor0 区，并把 from 和 to 两个指针交换，保证了一段时间内总有一个 survivor 区为空且 to 所指向的 survivor 区为空<br> 经过多次的 Minor GC 后仍然存活的对象（这里的存活判断是 15 次，对应到虚拟机参数为 <code>-XX:MaxTenuringThreshold</code> 。为什么是 15？，因为 HotSpot 会在对象头中的标记字段里记录年龄，分配到的空间仅有 4 位，所以最多只能记录到 15）会移动到 <strong>老年代</strong></p><p>当 Eden 区内存空间满了的时候，就会触发 Minor GC，Survivor0 区满不会触发 Minor GC<br> Survivor0 区 的对象什么时候垃圾回收呢？<br> 假设 Survivor0 区现在是满的，此时又触发了 Minor GC ，发现 Survivor0 区依旧是满的，存不下，此时会将 S0 区与 Eden 区的对象一起进行可达性分析，找出活跃的对象，将它复制到 S1 区并且将 S0 区域和 Eden 区的对象给清空，这样那些不可达的对象进行清除，并且将 S0 区 和 S1 区交换。</p><p>老年代是存储长期存活的对象的，占满时就会触发我们最常听说的 Full GC，期间会停止所有线程等待 GC 的完成。<br> 所以对于响应要求高的应用应该尽量去减少发生 Full GC 从而避免响应超时的问题。</p><p>老年区执行了 full gc 之后仍然无法进行对象保存的操作，就会产生 <code>Out of Memory</code>，这时候就是虚拟机中的堆内存不足，原因可能会是堆内存设置的大小过小，这个可以通过参数 -Xms、-Xmx 来调整。也可能是代码中创建的对象大且多，而且它们一直在被引用从而长时间垃圾收集无法收集它们。</p>',8),T=o('<p>补充说明：关于 <code>-XX:TargetSurvivorRatio</code> 参数的问题。<br> 其实也不一定是要满足 <code>-XX:MaxTenuringThreshold</code> 才移动到老年代。<br> 举例：如对象年龄 5 的占 30%，年龄 6 的占 36%，年龄 7 的占 34%，加入某个年龄段后，当总占用超过 Survivor 空间 *TargetSurvivorRatio 的时候，从该年龄段开始及大于的年龄对象就要进入老年代，这时候无需等到 MaxTenuringThreshold 中要求的 15</p><h4 id="_3-3-8、判断一个对象需要被干掉" tabindex="-1"><a class="header-anchor" href="#_3-3-8、判断一个对象需要被干掉" aria-hidden="true">#</a> 3.3.8、判断一个对象需要被干掉</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230828223704998.png" alt="image-20230828223704998" loading="lazy"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>程序计数器、虚拟机栈、本地方法栈，3 个区域随着线程的生存而生存的。内存分配和回收都是确定的。<br> 随着线程的结束内存自然就被回收了，因此不需要考虑垃圾回收的问题</p><p>Java 堆和方法区，各线程共享，内存的分配和回收都是动态的。因此垃圾收集器所关注的都是堆和方法区这部分内存</p></div><p>判断哪些对象还存活，哪些已经死去:</p><ol><li>引用计数器计算：给对象添加一个引用计数器，每次引用这个对象时计数器加一，引用失效时减一，计数器等于 0 时就是不会再次使用的。不过这个方法有一种情况就是出现对象的循环引用时 GC 没法回收。</li><li>可达性分析计算：这是一种类似于二叉树的实现，将一系列的 GC ROOTS 作为起始的存活对象集，从这个节点往下搜索，搜索所走过的路径成为引用链，把能被该集合引用到的对象加入到集合中。搜索当一个对象到 GC Roots 没有使用任何引用链时，则说明该对象是不可用的。主流的商用程序语言，例如 Java，C#等都是靠这招去判定对象是否存活的。</li></ol><h4 id="_3-3-9、宣告一个对象的真正死亡" tabindex="-1"><a class="header-anchor" href="#_3-3-9、宣告一个对象的真正死亡" aria-hidden="true">#</a> 3.3.9、宣告一个对象的真正死亡</h4><p>判断一个对象的死亡至少需要两次标记</p><p><code>finalize()</code> 方法：<br><code>finalize()</code> 是 Object 类的一个方法、一个对象的 <code>finalize()</code> 方法只会被系统自动调用一次，经过 finalize()方法逃脱死亡的对象，第二次不会再调用。<br> 注：并不提倡在程序中调用 finalize()来进行自救</p><ol><li>如果对象进行可达性分析之后没发现与 GC Roots 相连的引用链，那它将会第一次标记并且进行一次筛选。判断的条件是决定这个对象是否有必要执行 <code>finalize()</code> 方法。如果对象有必要执行 <code>finalize()</code> 方法，则被放入 F-Queue 队列中。</li><li>GC 对 F-Queue 队列中的对象进行二次标记。如果对象在 <code>finalize()</code> 方法中重新与引用链上的任何一个对象建立了关联，那么二次标记时则会将它移出“即将回收”集合。如果此时对象还没成功逃脱，那么只能被回收了。</li></ol><p>对象宣告死亡后，下一步就是垃圾回收</p><h3 id="_3-4-垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#_3-4-垃圾回收算法" aria-hidden="true">#</a> 3.4 垃圾回收算法</h3><p>常用的有标记清除，复制，标记整理和分代收集算法</p><h3 id="_3-5-各种垃圾回收器与-jvm-常用参数" tabindex="-1"><a class="header-anchor" href="#_3-5-各种垃圾回收器与-jvm-常用参数" aria-hidden="true">#</a> 3.5 各种垃圾回收器与 JVM 常用参数</h3>',14),w={href:"https://javaguide.cn/java/jvm/jvm-intro.html#_3-5-%E4%BA%86%E8%A7%A3-%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},L=a("br",null,null,-1),B={href:"https://javaguide.cn/java/jvm/jvm-intro.html#_3-6-%E4%BA%86%E8%A7%A3-jvm-%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},R=o(`<h2 id="四、jvm-调优" tabindex="-1"><a class="header-anchor" href="#四、jvm-调优" aria-hidden="true">#</a> 四、JVM 调优</h2><p>JVM 调优，主要就是堆内存那块</p><p>所有线程共享数据区大小 = 新生代大小 + 年老代大小 + 持久代大小。<br> 持久代一般固定大小为 64m。所以 java 堆中增大年轻代后，将会减小年老代大小（因为老年代的清理是使用 fullgc，所以老年代过小的话反而是会增多 fullgc 的）。此值对系统性能影响较大，Sun 官方推荐配置为 java 堆的 3/8。</p><h3 id="_4-1-调整最大堆内存和最小堆内存" tabindex="-1"><a class="header-anchor" href="#_4-1-调整最大堆内存和最小堆内存" aria-hidden="true">#</a> 4.1 调整最大堆内存和最小堆内存</h3><ol><li><code>-Xmx</code><br> 指定 java 堆最大值（默认值是物理内存的 1/4(&lt;1GB)）<br> 如 <code>- Xmx3550m</code> 设置 JVM 堆最大值为 3550M。</li><li><code>–Xms</code>：初始 java 堆最小值（默认值是物理内存的 1/64(&lt;1GB)）<br> 如 <code>-Xms200m</code>，表示分配 200M</li><li><code>-Xss</code><br> 为 jvm 启动的每个线程分配的内存大小，默认 JDK1.4 中是256K，JDK1.5+ 中是 1M</li><li><code>-Xmn</code><br> 年轻代大小<br> 如 <code>-Xmn2g</code>：设置年轻代大小为 2G。整个堆大小 = 年轻代大小 + 年老代大小 + 持久代大小</li></ol><p>默认空余堆内存小于 40% 时，JVM 就会增大堆直到 -Xmx 的最大限制 （MinHeapFreeRatio 参数可以调整）<br> 默认空余堆内存大于 70% 时，JVM 会减少堆直到 -Xms 的最小限制（MaxHeapFreeRatio 参数可以调整）</p><p>简单来说，不停往堆内存里丢数据，等它剩余大小 &lt;40%，JVM 就会动态申请内存空间且 &lt;-Xmx<br> 如果剩余大小 &gt;70%，又会动态缩小 且 &gt;–Xms。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>开发过程中，通常会将 -Xms 与 -Xmx 两个参数配置成相同的值，其目的是为了能够在 java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Xmx=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024.0</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//系统的最大空间</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;free mem=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024.0</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//系统的空闲空间</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;total mem=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024.0</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//当前可用的总空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>运行结果：<br> Xmx=3621.5M<br> free mem=240.37600708007812M<br> total mem=245.5M</p></blockquote><p>可以设置 VM options 的参数：<code>-Xmx20m -Xms5m -XX:+PrintGCDetails</code></p><p>Java 会尽可能将 total mem 的值维持在最小堆内存大小<br> 当最小堆内存顶不住时。total memory 就会申请内存。</p><p>当手动执行 <code>System.gc();</code>（full gc）， total memory 会把申请的内存释放掉</p><h3 id="_4-2、调整新生代和老年代的比值" tabindex="-1"><a class="header-anchor" href="#_4-2、调整新生代和老年代的比值" aria-hidden="true">#</a> 4.2、调整新生代和老年代的比值</h3><p><code>-XX:NewRatio</code> ：新生代（eden + 2*Survivor）和老年代（不包含永久区）的比值</p><p>例如：<code>-XX:NewRatio=4</code>，表示 <code>新生代:老年代=1:4</code> ，即新生代占整个堆的 1/5。</p><p>在 Xms = Xmx 并且设置了 Xmn 的情况下，该参数不需要进行设置。</p><h3 id="_4-3、调整-survivor-区和-eden-区的比值" tabindex="-1"><a class="header-anchor" href="#_4-3、调整-survivor-区和-eden-区的比值" aria-hidden="true">#</a> 4.3、调整 Survivor 区和 Eden 区的比值</h3><p><code>-XX:SurvivorRatio</code>（幸存代）：设置两个 Survivor 区和 eden 的比值</p><p>如：<code>-XX:SurvivorRatio=8</code>，表示两个 <code>Survivor:eden=2:8</code>，即一个 Survivor 占年轻代的 1/10</p><h3 id="_4-4、设置年轻代和老年代的大小" tabindex="-1"><a class="header-anchor" href="#_4-4、设置年轻代和老年代的大小" aria-hidden="true">#</a> 4.4、设置年轻代和老年代的大小</h3><ul><li><code>-XX:NewSize</code> --- 设置年轻代大小</li><li><code>-XX:MaxNewSize</code> --- 设置年轻代最大值</li></ul><p>可以通过设置不同参数来测试不同的情况，反正最优解当然就是官方的 Eden 和 Survivor 的占比为 8:1:1</p><p>最大堆内存和最小堆内存如果数值不同会导致多次的 gc，需要注意。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>根据实际事情调整新生代和幸存代的大小，官方推荐新生代占 java 堆的 3/8，幸存代占新生代的 1/10<br> 在 OOM 时，记得 Dump 出堆，确保可以排查现场问题，通过下面命令你可以输出一个.dump 文件，这个文件可以使用 VisualVM 或者 Java 自带的 Java VisualVM 工具。</p><p><code>-Xmx20m -Xms5m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=你要输出的日志路径</code></p><p>一般我们也可以通过编写脚本的方式来让 OOM 出现时给我们报个信，可以通过发送邮件或者重启程序等来解决。</p></div><h3 id="_4-5、永久区的设置" tabindex="-1"><a class="header-anchor" href="#_4-5、永久区的设置" aria-hidden="true">#</a> 4.5、永久区的设置</h3><p><code>-XX:PermSize -XX:MaxPermSize</code></p><p>初始空间（默认为物理内存的 1/64）和最大空间（默认为物理内存的 1/4）。<br> 也就是说，jvm 启动时，永久区一开始就占用了 PermSize 大小的空间，如果空间还不够，可以继续扩展，但是不能超过 MaxPermSize，否则会 OOM。<br> tips：如果堆空间没有用完也抛出了 OOM，有可能是永久区导致的。堆空间实际占用非常少，但是永久区溢出 一样抛出 OOM。</p><h3 id="_4-6、jvm-的栈参数调优" tabindex="-1"><a class="header-anchor" href="#_4-6、jvm-的栈参数调优" aria-hidden="true">#</a> 4.6、JVM 的栈参数调优</h3><h4 id="调整每个线程栈空间的大小" tabindex="-1"><a class="header-anchor" href="#调整每个线程栈空间的大小" aria-hidden="true">#</a> 调整每个线程栈空间的大小</h4><p>可以通过 <code>-Xss</code> ：调整每个线程栈空间的大小<br> JDK5.0 以后每个线程堆栈大小为 1M，以前每个线程堆栈大小为 256K。<br> 在相同物理内存下，减小这个值能生成更多的线程。<br> 但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 <code>3000~5000</code> 左右</p><h4 id="设置线程栈的大小" tabindex="-1"><a class="header-anchor" href="#设置线程栈的大小" aria-hidden="true">#</a> 设置线程栈的大小</h4><p><code>-XXThreadStackSize</code>：设置线程栈的大小(0 means use default stack size)</p><h3 id="_4-7、其他参数介绍" tabindex="-1"><a class="header-anchor" href="#_4-7、其他参数介绍" aria-hidden="true">#</a> 4.7、其他参数介绍</h3><ul><li><code>-XXThreadStackSize</code>：设置内存页的大小，不可设置过大，会影响Perm的大小</li><li><code>-XX:+UseFastAccessorMethods</code>：设置原始类型的快速优化</li><li><code>-XX:+DisableExplicitGC</code>：设置关闭 <code>System.gc()</code> (这个参数需要严格的测试)</li><li><code>-XX:MaxTenuringThreshold</code><br> 设置垃圾最大年龄。如果设置为0的话,则年轻代对象不经过 Survivor 区,直接进入年老代<br> 对于年老代比较多的应用,可以提高效率。如果将此值设置为一个较大值,<br> 则年轻代对象会在 Survivor 区进行多次复制,这样可以增加对象再年轻代的存活时间,<br> 增加在年轻代即被回收的概率。该参数只有在串行GC时才有效</li><li><code>-XX:+AggressiveOpts</code>：加快编译速度</li><li><code>-XX:+UseBiasedLocking</code>：改善锁机制性能</li><li><code>-Xnoclassgc</code>：禁用垃圾回收</li><li><code>-XX:SoftRefLRUPolicyMSPerMB</code>：设置每兆堆空闲空间中 SoftReference 的存活时间，默认值是 1s。</li><li><code>-XX:PretenureSizeThreshold</code>：设置对象超过多大时直接在老年代分配，默认值是 0。</li><li><code>-XX:TLABWasteTargetPercent</code>：设置 TLAB 占 eden 区的百分比，默认值是 1%</li><li><code>-XX:+CollectGen0First</code>：设置 FullGC 时是否先 YGC，默认值是 false</li></ul>`,35);function z(P,q){const t=i("ExternalLinkIcon"),e=i("Mermaid");return p(),r("div",null,[a("blockquote",null,[a("p",null,[n("参考："),a("a",d,[n("https://javaguide.cn/java/jvm/jvm-intro.html"),s(t)])])]),u,s(e,{id:"mermaid-8",code:"eJxLy8kvT85ILCpR8AniUgACx2glrzBfpVgFG11dOwWnaKVnk3uf7J3zfPPu57vnw4Sdo5WeL1zzZPe293s6ni9ufD57xvs9PU/bWp+uBTGSC0r19PTe7+lUiuUCAF8OLDQ="}),h,s(e,{id:"mermaid-74",code:"eJzT1dXlKsksyUm1UvBKLEtUeL6i++mu/ie7+57tmvBk9+LnCxqfdmx4sX/Ci4U9z2e1vNjfDlTABdKUlpNfnpyRWFSi4BPEpQAEmSnRSnpZIDOeTWt/snubUqyCrq6CEkgkWeH5nmkv1k9UAorYKTgB1SXnJBYXwxWC1L1Yvvhle9fTmSvUvDxDIAqdo5WezdkFFHrav/75hDagCqATII5SiuUCAMSjV4o="}),v,m,k,s(e,{id:"mermaid-84",code:"eJzjSsvJL0/OSCwqUfAJ4lIAAsdoJb2sxLJEhWfT2p/s3qYUq6Crq6AEEklWeL5n2ov1E5WAInYKTkB1yTmJxcVwhSBR52qlZzPWP52w7MmOXc+b1z5v2vlk9+LnCxrf75mvVAs23xlkXqRrMNgQBZdoJS/PELAldgpu0UrP5ux6OnPF0/71zye0vVi++PmsFoh+pViEZj9/iF7XaCWgkpftXUAdMBO4uADjR1TP"}),b,s(e,{id:"mermaid-96",code:"eJzT1dXlKsksyUm1UvBy8X7c0OgV5Aoiw3xBpGeIwtPZs180tD5t3fx8824ukOq0nPzy5IzEohIFnyAuheLSpPSixIIMkG4uBSBACAS5ggVQBcN84YKoEp4hKBKpeSlwPowNokEYADdBNtk="}),g,s(e,{id:"mermaid-132",code:"eJxLy8kvT85ILCpR8AniUgACx2il53umvVg/8em87hfr175Y0fBs14TnCxqVYhV0de0UnODSM1eAhRSe7Gh4tmbhs4blUPF1PWCFztFKz+bsAqp62r/++YS2F8sXP5/V8mT3YrBRYJtcopWAoi/bu7Db5AqXRrLpaf9SCAmRgtjEBQDlImXI"}),J,f,_,S,a("ol",null,[a("li",null,[n("是否开源：OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是基于 OpenJDK 实现的，并不是完全开源的。"),M,n(" OpenJDK 开源项目："),a("a",x,[n("https://github.com/openjdk/jdk"),s(t)])]),j]),a("div",X,[O,C,a("ul",null,[a("li",null,[n("OpenJDK 是开源的，开源意味着你可以对它根据你自己的需要进行修改、优化，比如 Alibaba 基于 OpenJDK 开发了 Dragonwell8："),a("a",D,[n("https://github.com/alibaba/dragonwell8"),s(t)])]),A,K])]),y,s(e,{id:"mermaid-206",code:"eJxLy8kvT85ILCpR8AniUgACx2glR72sxLJEpVgFXV2F53umvVg/EciyU3ACySTnJBYXg6XsFJyjlZ5v3P20a8GLvXufzlyhFMsFAATjHQI="}),V,s(e,{id:"mermaid-550",code:"eJxLy8kvT85ILCpR8AniUgACx2glrzBfhadtrU/XzlCKVdDVtVNwilZ6uqANIvR+TweQfDZl39P1O19sXPh+TydUkTNQ0c4tL/bufrJ7MVBRZH5pXrqCe2pealFiSWZ+HlghSJ1btJJrSmqewtOeXUqxYCudwfrdo5WCS4vKMsvyiyByYFGPaCW3ovzcgJzE5FSgqTAVBmDjwLrdweo8o5VC8tFVGSJUOYFVuUQrvWhoBDoT4kb/nBR0F0LCAKzYNVrp5dx5yB5/tmHHk52tYL09z6btfLZ5KtChCoZ6FgpPt296vnz3y5lLEIZ4RSv5ppYkFhdA3PRszpqnczbAjOp8Nns/0By4gUA9ACqRtYM="}),E,s(e,{id:"mermaid-600",code:"eJxLy8kvT85ILCpRCHHiUgCC4tKk9KLEggyFZ9M2PJ8y/8nuxWBhEEjJLEpNLsnMz1PwCYILOkYruaak5ik87dmlFKugq6sA5z7bvfD9np4Xy5c97Z+o4JuZl1+k4O4MFHm6oU0Bpubpzh1P1854un7ni40Lny/f/bRrxdOODQrBBkpAk+wUnKKVgkuLyjLL8osMkCwIBnPwGQ9RgcNwQ4jhzgjDDSGGg/2UmpeCGg4vGhqf7twCCweXaKXnu/tf7G9/umTWszUL4RYrPNm9G2jZsy27n89qgViJZiA8PMG2I0wFACV/sRA="}),T,a("p",null,[a("a",w,[n("各种各样的垃圾回收器"),s(t)]),L,a("a",B,[n("JVM 的常用参数"),s(t)])]),R])}const U=c(l,[["render",z],["__file","JVM.html.vue"]]);export{U as default};
