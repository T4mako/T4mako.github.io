const n=JSON.parse('{"key":"v-27707130","path":"/code/leetcode/%E7%AE%97%E6%B3%95/leetcode_080_%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.html","title":"80. 删除有序数组中的重复项 II","lang":"zh-CN","frontmatter":{"category":["算法"],"tag":["链表"],"data":"2024-02-15T00:00:00.000Z","description":"80. 删除有序数组中的重复项 II 解法：判断删除，数组整体移动 class Solution { public int removeDuplicates(int[] nums) { if (nums.length == 1) return 1; int res = nums.length; int left = nums[0]; int count = 1; for (int i = 1; i &lt; res; i++) { if(left == nums[i]) count++; else { left = nums[i]; count = 1; continue; } if(count &gt;= 3){ int right = i; while(right &lt; nums.length &amp;&amp; nums[right] == left){ right++; res--; } if(right &gt;= nums.length) return i; else { System.arraycopy(nums, right, nums, i, nums.length - right); i--; } } } return res; } }","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/leetcode/%E7%AE%97%E6%B3%95/leetcode_080_%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"80. 删除有序数组中的重复项 II"}],["meta",{"property":"og:description","content":"80. 删除有序数组中的重复项 II 解法：判断删除，数组整体移动 class Solution { public int removeDuplicates(int[] nums) { if (nums.length == 1) return 1; int res = nums.length; int left = nums[0]; int count = 1; for (int i = 1; i &lt; res; i++) { if(left == nums[i]) count++; else { left = nums[i]; count = 1; continue; } if(count &gt;= 3){ int right = i; while(right &lt; nums.length &amp;&amp; nums[right] == left){ right++; res--; } if(right &gt;= nums.length) return i; else { System.arraycopy(nums, right, nums, i, nums.length - right); i--; } } } return res; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"链表"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"80. 删除有序数组中的重复项 II\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[],"readingTime":{"minutes":0.36,"words":107},"filePathRelative":"code/leetcode/算法/leetcode_080_删除有序数组中的重复项.md","excerpt":"<h1> 80. 删除有序数组中的重复项 II</h1>\\n<p>解法：判断删除，数组整体移动</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">removeDuplicates</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> res <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> left <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> res<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">==</span> nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                left <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n                count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>count <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">int</span> right <span class=\\"token operator\\">=</span> i<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>right <span class=\\"token operator\\">&lt;</span> nums<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&amp;&amp;</span> nums<span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> left<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                    right<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n                    res<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>right <span class=\\"token operator\\">&gt;=</span> nums<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> i<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">arraycopy</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> right<span class=\\"token punctuation\\">,</span> nums<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> nums<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
