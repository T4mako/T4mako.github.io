const t=JSON.parse('{"key":"v-857bd300","path":"/code/java/Java%20%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/12%E3%80%81%E6%B3%A8%E8%A7%A3.html","title":"12、注解","lang":"zh-CN","frontmatter":{"title":"12、注解","icon":"java","order":12,"category":["java"],"tag":["基础语法","java"],"description":"注解(Annotation) 一定程度上：框架=注解+反射+设计模式 1、理解Annotation： JDK5.0新增 Annotation 就是代码里的特殊标记, 它可以在编译, 类加载, 运行时被读取, 并执行相应的处理。 使用 Annotation, 在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。 代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署 。 Annotation 可以修饰包,类,构造器,方法,成员变量,参数,局部变量的声明,这些信息被保存在 Annotation的 “name=value” 对中 在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/java/Java%20%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/12%E3%80%81%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"12、注解"}],["meta",{"property":"og:description","content":"注解(Annotation) 一定程度上：框架=注解+反射+设计模式 1、理解Annotation： JDK5.0新增 Annotation 就是代码里的特殊标记, 它可以在编译, 类加载, 运行时被读取, 并执行相应的处理。 使用 Annotation, 在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。 代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署 。 Annotation 可以修饰包,类,构造器,方法,成员变量,参数,局部变量的声明,这些信息被保存在 Annotation的 “name=value” 对中 在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"基础语法"}],["meta",{"property":"article:tag","content":"java"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12、注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"注解(Annotation)","slug":"注解-annotation","link":"#注解-annotation","children":[{"level":3,"title":"1、理解Annotation：","slug":"_1、理解annotation","link":"#_1、理解annotation","children":[]},{"level":3,"title":"2、Annotation的使用实例","slug":"_2、annotation的使用实例","link":"#_2、annotation的使用实例","children":[]},{"level":3,"title":"3、自定义注解","slug":"_3、自定义注解","link":"#_3、自定义注解","children":[]},{"level":3,"title":"4、jdk提供的四种元注解","slug":"_4、jdk提供的四种元注解","link":"#_4、jdk提供的四种元注解","children":[]},{"level":3,"title":"5、通过反射获取注解信息","slug":"_5、通过反射获取注解信息","link":"#_5、通过反射获取注解信息","children":[]},{"level":3,"title":"6、jdk8中注解的新特性：可重复注解、类型注解","slug":"_6、jdk8中注解的新特性-可重复注解、类型注解","link":"#_6、jdk8中注解的新特性-可重复注解、类型注解","children":[]}]}],"readingTime":{"minutes":2.54,"words":762},"filePathRelative":"code/java/Java 基础/语法基础/12、注解.md","excerpt":"<h2> 注解(Annotation)</h2>\\n<p>一定程度上：框架=注解+反射+设计模式</p>\\n<h3> 1、理解Annotation：</h3>\\n<ul>\\n<li>JDK5.0新增</li>\\n<li>Annotation 就是代码里的特殊标记, 它可以在编译, 类加载, 运行时被读取, 并执行相应的处理。</li>\\n<li>使用 Annotation, 在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。</li>\\n<li>代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署 。</li>\\n<li>Annotation 可以修饰包,类,构造器,方法,成员变量,参数,局部变量的声明,这些信息被保存在 Annotation的 “name=value” 对中</li>\\n<li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等</li>\\n</ul>\\n","autoDesc":true}');export{t as data};
