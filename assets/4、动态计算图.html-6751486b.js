const t=JSON.parse('{"key":"v-5c598912","path":"/code/python/Machine%20Learning/Pytorch/4%E3%80%81%E5%8A%A8%E6%80%81%E8%AE%A1%E7%AE%97%E5%9B%BE.html","title":"4、动态计算图","lang":"zh-CN","frontmatter":{"description":"4、动态计算图 4.1、动态计算图简介 计算图（Computational Graph）是一个有向无环图（DAG），计算图由节点和边组成 节点：张量或者Function 边：张量和 Function 之间的依赖关系 计算图是动态图，动态图有两层含义： 计算图的 正向传播是立即执行 的。 无需等待完整的计算图创建完毕，每条语句都会在计算图中动态添加节点和边，并立即执行正向传播得到计算结果 计算图在反向传播后立即销毁。 下次调用需要重新构建计算图。 如果在程序中使用了 backward 方法执行了反向传播，或者利用 torch.autograd.grad 方法计算了梯度，那么创建的计算图会被立即销毁，释放存储空间，下次调用需要重新创建","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/python/Machine%20Learning/Pytorch/4%E3%80%81%E5%8A%A8%E6%80%81%E8%AE%A1%E7%AE%97%E5%9B%BE.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"4、动态计算图"}],["meta",{"property":"og:description","content":"4、动态计算图 4.1、动态计算图简介 计算图（Computational Graph）是一个有向无环图（DAG），计算图由节点和边组成 节点：张量或者Function 边：张量和 Function 之间的依赖关系 计算图是动态图，动态图有两层含义： 计算图的 正向传播是立即执行 的。 无需等待完整的计算图创建完毕，每条语句都会在计算图中动态添加节点和边，并立即执行正向传播得到计算结果 计算图在反向传播后立即销毁。 下次调用需要重新构建计算图。 如果在程序中使用了 backward 方法执行了反向传播，或者利用 torch.autograd.grad 方法计算了梯度，那么创建的计算图会被立即销毁，释放存储空间，下次调用需要重新创建"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4、动态计算图\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"4.1、动态计算图简介","slug":"_4-1、动态计算图简介","link":"#_4-1、动态计算图简介","children":[]},{"level":2,"title":"4.2、计算图中的 Function","slug":"_4-2、计算图中的-function","link":"#_4-2、计算图中的-function","children":[]},{"level":2,"title":"4.3、计算图与反向传播","slug":"_4-3、计算图与反向传播","link":"#_4-3、计算图与反向传播","children":[]},{"level":2,"title":"4.4、叶子节点和非叶子节点","slug":"_4-4、叶子节点和非叶子节点","link":"#_4-4、叶子节点和非叶子节点","children":[]},{"level":2,"title":"4.5、计算图在 TensorBoard 中的可视化","slug":"_4-5、计算图在-tensorboard-中的可视化","link":"#_4-5、计算图在-tensorboard-中的可视化","children":[]}],"readingTime":{"minutes":5.46,"words":1639},"filePathRelative":"code/python/Machine Learning/Pytorch/4、动态计算图.md","excerpt":"<h1> 4、动态计算图</h1>\\n<h2> 4.1、动态计算图简介</h2>\\n<p>计算图（Computational Graph）是一个有向无环图（DAG），计算图由节点和边组成</p>\\n<ul>\\n<li>节点：张量或者Function</li>\\n<li>边：张量和 Function 之间的依赖关系</li>\\n</ul>\\n<p>计算图是动态图，动态图有两层含义：</p>\\n<ul>\\n<li>计算图的 <strong>正向传播是立即执行</strong> 的。<br>\\n无需等待完整的计算图创建完毕，每条语句都会在计算图中动态添加节点和边，并立即执行正向传播得到计算结果</li>\\n<li><strong>计算图在反向传播后立即销毁</strong>。<br>\\n下次调用需要重新构建计算图。<br>\\n如果在程序中使用了 backward 方法执行了反向传播，或者利用 torch.autograd.grad 方法计算了梯度，那么创建的计算图会被立即销毁，释放存储空间，下次调用需要重新创建</li>\\n</ul>","autoDesc":true}');export{t as data};
