import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as n,d as s,e as t,f as p}from"./app-591f25ed.js";const i={},u=p(`<h2 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介" aria-hidden="true">#</a> 一、简介</h2><p>Pandas 是开源的数据分析和数据处理库，基于 Python</p><p>Pandas 适用于处理结构化数据</p><p>Pandas 主要引入了两种新的数据结构：</p><ul><li><strong>Series</strong>（一维）</li></ul><p>类似于一维数组，由一组数据以及与之相关的数据标签（索引）构成</p><p>Series 可以看作是 DataFrame 中的一列，也可以是单独存在的一维数据结构</p><ul><li><p><strong>DataFrame</strong> （二维）</p><p>类似于一个二维表格，它是 Pandas 中最重要的数据结构。</p><p>DataFrame 既有行索引也有列索引</p><p>DataFrame 可视为由多个 Series 组成的数据结构</p></li></ul><p>Pandas 提供了丰富的功能，包括：</p><ul><li>数据清洗：处理缺失数据、重复数据等。</li><li>数据转换：改变数据的形状、结构或格式。</li><li>数据分析：进行统计分析、聚合、分组等。</li><li>数据可视化：通过整合 Matplotlib 和 Seaborn 等库，可以进行数据可视化。</li></ul><h2 id="二、series" tabindex="-1"><a class="header-anchor" href="#二、series" aria-hidden="true">#</a> 二、Series</h2><p>Series 特点：</p><ul><li><strong>一维数组</strong></li><li><strong>索引：</strong> 每个 <code>Series</code> 都有一个索引，它可以是整数、字符串、日期等类型。如果不指定索引，Pandas 将默认创建一个从 0 开始的整数索引</li><li><strong>数据类型：</strong> <code>Series</code> 可以容纳不同数据类型的元素</li><li>**大小不变性：**Series 的大小在创建后是不变的，但可以通过某些操作（如 append 或 delete）来改变。</li><li>**操作：**Series 支持各种操作，如数学运算、统计分析、字符串处理等。</li><li>**缺失数据：**Series 可以包含缺失数据，Pandas 使用 NaN（Not a Number）来表示缺失或无值。</li></ul><h3 id="series-创建" tabindex="-1"><a class="header-anchor" href="#series-创建" aria-hidden="true">#</a> Series 创建</h3><p>使用 <code>pd.Series()</code> 构造函数创建一个 Series 对象，传递一个数据数组（可以是列表、NumPy 数组等）和一个可选的索引数组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> fastpath<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>data</code>：Series 数据部分，可以是列表、数组、字典、标量值等。如果不提供此参数，则创建一个空的 Series。</li><li><code>index</code>：Series 索引部分，可以是列表、数组、索引对象等。如果不提供此参数，则创建一个默认的整数索引。</li><li><code>dtype</code>：指定 Series 的数据类型。可以是 NumPy 的数据类型，例如 <code>np.int64</code>、<code>np.float64</code> 等。如果不提供此参数，则根据数据自动推断数据类型。</li><li><code>name</code>：Series 的名称，用于标识 Series 对象。如果提供了此参数，则创建的 Series 对象将具有指定的名称。</li><li><code>copy</code>：是否复制数据。默认为 False，表示不复制数据。如果设置为 True，则复制输入的数据。</li><li><code>fastpath</code>：是否启用快速路径。默认为 False。启用快速路径可能会在某些情况下提高性能。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 创建 Series1 </span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
myvar <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
0    1
1    2
2    3
dtype: int64
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myvar<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myvar<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>



<span class="token comment"># 指定索引</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wiki&quot;</span><span class="token punctuation">]</span>
myvar <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>a<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
x    Google
y    Runoob
z      Wiki
dtype: object
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myvar<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myvar<span class="token punctuation">[</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Runoob</span>

<span class="token comment"># 使用 key/value 对象，类似字典来创建 Series</span>
sites <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&quot;Wiki&quot;</span><span class="token punctuation">}</span>
myvar <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>sites<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
1    Google
2    Runoob
3      Wiki
dtype: object
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myvar<span class="token punctuation">)</span>

<span class="token comment"># 如果我们只需要字典中的一部分数据，只需要指定需要数据的索引即可，如下实例</span>
sites <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&quot;Wiki&quot;</span><span class="token punctuation">}</span>
myvar <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>sites<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
1    Google
2    Runoob
dtype: object
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myvar<span class="token punctuation">)</span>

<span class="token comment"># 使用列表、字典或数组创建一个默认索引的 Series</span>
<span class="token comment"># 使用列表创建 Series</span>
s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 使用 NumPy 数组创建 Series</span>
s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 使用字典创建 Series</span>
s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="series-数据增删改查" tabindex="-1"><a class="header-anchor" href="#series-数据增删改查" aria-hidden="true">#</a> Series 数据增删改查</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 指定索引创建 Series</span>
s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 获取值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 获取索引为 2 的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 返回索引标签 &#39;a&#39; 对应的元素</span>

<span class="token comment"># 获取多个值</span>
subset <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment"># 获取索引为1到3的值</span>

<span class="token comment"># 索引和值的对应关系</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> s<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Index: </span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">, Value: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token comment"># 使用切片语法来访问 Series 的一部分</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 返回索引标签 &#39;a&#39; 到 &#39;c&#39; 之间的元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 返回前三个元素</span>

<span class="token comment"># 为特定的索引标签赋值</span>
s<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 将索引标签 &#39;a&#39; 对应的元素修改为 10</span>

<span class="token comment"># 通过赋值给新的索引标签来添加元素</span>
s<span class="token punctuation">[</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment"># 在 Series 中添加一个新的元素，索引标签为 &#39;e&#39;</span>

<span class="token comment"># 使用 del 删除指定索引标签的元素。</span>
<span class="token keyword">del</span> s<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 删除索引标签 &#39;a&#39; 对应的元素</span>

<span class="token comment"># 使用 drop 方法删除一个或多个索引标签，并返回一个新的 Series。</span>
s_dropped <span class="token operator">=</span> s<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个删除了索引标签 &#39;b&#39; 的新 Series</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="series-基本运算" tabindex="-1"><a class="header-anchor" href="#series-基本运算" aria-hidden="true">#</a> Series 基本运算</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 算术运算</span>
result <span class="token operator">=</span> series <span class="token operator">*</span> <span class="token number">2</span>  <span class="token comment"># 所有元素乘以2</span>
<span class="token comment"># 过滤</span>
filtered_series <span class="token operator">=</span> series<span class="token punctuation">[</span>series <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 选择大于2的元素</span>
<span class="token comment"># 数学函数</span>
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
result <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>series<span class="token punctuation">)</span>  <span class="token comment"># 对每个元素取平方根</span>

<span class="token comment"># 其他属性和方法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>   <span class="token comment"># 数据类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>   <span class="token comment"># 形状</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token comment"># 元素个数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 前几个元素，默认是前 5 个</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 后几个元素，默认是后 5 个</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 求和</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 平均值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 标准差</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 最小值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 最大值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="series-属性与方法" tabindex="-1"><a class="header-anchor" href="#series-属性与方法" aria-hidden="true">#</a> Series 属性与方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取索引</span>
index <span class="token operator">=</span> s<span class="token punctuation">.</span>index <span class="token comment"># [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>

<span class="token comment"># 获取值数组</span>
values <span class="token operator">=</span> s<span class="token punctuation">.</span>values

<span class="token comment"># 获取描述统计信息</span>
stats <span class="token operator">=</span> s<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 获取最大值和最小值的索引</span>
max_index <span class="token operator">=</span> s<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span>
min_index <span class="token operator">=</span> s<span class="token punctuation">.</span>idxmin<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 使用布尔表达式：根据条件过滤 Series</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个布尔 Series，其中的元素值大于 2</span>

<span class="token comment"># 查看数据类型：使用 dtype 属性查看 Series 的数据类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>  <span class="token comment"># 输出 Series 的数据类型</span>

<span class="token comment"># 转换数据类型：使用 astype 方法将 Series 转换为另一种数据类型</span>
s <span class="token operator">=</span> s<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;float64&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 将 Series 中的所有元素转换为 float64 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、dataframe" tabindex="-1"><a class="header-anchor" href="#三、dataframe" aria-hidden="true">#</a> 三、DataFrame</h2><p>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。</p><p>DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</p><p>DataFrame 特点：</p><ul><li><strong>二维结构</strong></li><li><strong>列的数据类型可以不同</strong></li><li><strong>拥有行和列索引</strong></li><li><strong>动态添加删除列</strong></li><li><strong>算术运算、数据对齐自动对齐索引</strong></li><li><strong>包含缺失数据 NaN</strong></li><li><strong>支持数据切片、索引、子集分割等操作</strong></li><li><strong>时间序列支持</strong></li><li><strong>丰富的数据访问功能</strong>：通过 <code>.loc</code>、<code>.iloc</code> 和 <code>.query()</code> 方法，可以灵活地访问和筛选数据。</li><li><strong>灵活的数据处理功能</strong>：包括数据合并、重塑、透视、分组和聚合等。</li><li><strong>数据可视化</strong>：虽然 <code>DataFrame</code> 本身不是可视化工具，但它可以与 Matplotlib 或 Seaborn 等可视化库结合使用，进行数据可视化。</li><li><strong>高效的数据输入输出</strong>：可以方便地读取和写入数据，支持多种格式，如 CSV、Excel、SQL 数据库和 HDF5 格式。</li><li><strong>描述性统计</strong>：提供了一系列方法来计算描述性统计数据，如 <code>.describe()</code>、<code>.mean()</code>、<code>.sum()</code> 等。</li><li><strong>灵活的数据对齐和集成</strong>：可以轻松地与其他 <code>DataFrame</code> 或 <code>Series</code> 对象进行合并、连接或更新操作。</li><li><strong>转换功能</strong>：可以对数据集中的值进行转换，例如使用 <code>.apply()</code> 方法应用自定义函数。</li><li><strong>滚动窗口和时间序列分析</strong>：支持对数据集进行滚动窗口统计和时间序列分析。</li></ul><h3 id="datefrom-创建" tabindex="-1"><a class="header-anchor" href="#datefrom-创建" aria-hidden="true">#</a> DateFrom 创建</h3><p>DataFrame 构造方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pandas<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>data</code>：DataFrame 数据部分，如果不提供此参数，则创建一个空的 DataFrame。</li><li><code>index</code>：DataFrame 的行索引，如果不提供此参数，则创建一个默认的整数索引。</li><li><code>columns</code>：DataFrame 的列索引，如果不提供此参数，则创建一个默认的整数索引。</li><li><code>dtype</code>：指定 DataFrame 的数据类型，可以是 NumPy 的数据类型，如果不提供此参数，则根据数据自动推断数据类型。</li><li><code>copy</code>：是否复制数据。默认为 False。</li></ul><p>创建说明：</p><ul><li>**从字典创建：**字典的键成为列名，值成为列数据</li><li>**从列表创建：**外层列表代表行，内层列表代表列</li><li>**从 NumPy 数组创建：**提供一个二维 NumPy 数组</li><li>**从 Series 创建 DataFrame：**通过 <strong>pd.Series()</strong> 创建</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Wiki&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># 创建 DataFrame</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Site&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 使用 astype 方法设置每列的数据类型</span>
df<span class="token punctuation">[</span><span class="token string">&#39;Site&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;Site&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
     Site   Age
0  Google  10.0
1  Runoob  12.0
2    Wiki  13.0
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>

<span class="token comment"># 使用字典来创建</span>
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Site&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Wiki&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token comment"># 通过 NumPy 数组创建 DataFrame</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 从 Series 创建 DataFrame</span>
s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Charlie&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
s3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Los Angeles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Chicago&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> s1<span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> s2<span class="token punctuation">,</span> <span class="token string">&#39;City&#39;</span><span class="token punctuation">:</span> s3<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下实例使用 ndarrays 创建，ndarray 的长度必须相同， 如果传递了 index，则索引的长度应等于数组的长度。如果没有传递索引，则默认情况下，索引将是 range(n)，其中 n 是数组长度。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个包含网站和年龄的二维 ndarray</span>
ndarray_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;Wiki&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 使用DataFrame构造函数创建数据帧</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>ndarray_data<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Site&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 打印数据帧</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pandas 可以使用 <strong>loc</strong> 属性返回指定行的数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;calories&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">390</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;duration&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment"># 数据载入到 DataFrame 对象</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token comment"># 返回第一行,返回结果其实就是一个 Pandas Series 数据</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
calories    420
duration     50
Name: 0, dtype: int64
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 返回第二行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 使用 [[ ... ]] 格式，返回多行数据</span>
<span class="token comment"># 返回第一行和第二行，返回结果其实就是一个 Pandas DataFrame 数据</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定索引值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;calories&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">390</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;duration&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;day1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;day2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;day3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <strong>loc</strong> 属性返回指定索引对应到某一行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;calories&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">390</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;duration&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;day1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;day2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;day3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 指定索引</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&quot;day2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataframe-的属性和方法" tabindex="-1"><a class="header-anchor" href="#dataframe-的属性和方法" aria-hidden="true">#</a> DataFrame 的属性和方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># DataFrame 的属性和方法</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>     <span class="token comment"># 形状，两个数的数组，[行数，列数]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span>   <span class="token comment"># 列名</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">)</span>     <span class="token comment"># 索引</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 前几行数据，默认是前 5 行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 后几行数据，默认是后 5 行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 数据信息</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 描述统计信息</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 求平均值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 求和</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataframe-增删改查" tabindex="-1"><a class="header-anchor" href="#dataframe-增删改查" aria-hidden="true">#</a> DataFrame 增删改查</h3><p><strong>访问列</strong>：使用列名作为属性或通过 <strong>.loc[]</strong>、<strong>.iloc[]</strong> 访问，也可以使用标签或位置索引</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 通过列名访问</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 通过属性访问</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>     
   
<span class="token comment"># 通过 .loc[] 访问</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token string">&#39;Column1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 通过 .iloc[] 访问</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 带索引的</span>

<span class="token comment"># 访问单个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**访问行：**使用行的标签和 <strong>.loc[]</strong> 访问。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 第一行，列名为 Col1 的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;col&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**修改列数据：**直接对列进行赋值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">[</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**添加新列：**给新列赋值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">[</span><span class="token string">&#39;NewColumn&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**添加新行：**使用 loc、append 或 concat 方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用 loc 为特定索引添加新行</span>
df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span>

<span class="token comment"># 使用 append 添加新行到末尾</span>
new_row <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&#39;Column2&#39;</span><span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">&#39;NewColumn&#39;</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">}</span>
df <span class="token operator">=</span> df<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_row<span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>append()</strong> 方法在 pandas 版本 1.4.0 中已经被标记为弃用,推荐使用 <strong>concat()</strong></p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用concat添加新行</span>
new_row <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个只包含新行的DataFrame</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span> new_row<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 将新行添加到原始DataFrame</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**删除列：**使用 drop 方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df_dropped <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**删除行：**同样使用 drop 方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df_dropped <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 删除索引为 0 的行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dataframe-的统计分析" tabindex="-1"><a class="header-anchor" href="#dataframe-的统计分析" aria-hidden="true">#</a> DataFrame 的统计分析</h3><p>**描述性统计：**使用 <strong>.describe()</strong> 查看数值列的统计摘要。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**计算统计数据：**使用聚合函数如 <strong>.sum()、.mean()、.max()</strong> 等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">[</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataframe-的索引操作" tabindex="-1"><a class="header-anchor" href="#dataframe-的索引操作" aria-hidden="true">#</a> DataFrame 的索引操作</h3><p>**重置索引：**使用 <strong>.reset_index()</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df_reset <span class="token operator">=</span> df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**设置索引：**使用 <strong>.set_index()</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df_set <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dataframe-的布尔索引" tabindex="-1"><a class="header-anchor" href="#dataframe-的布尔索引" aria-hidden="true">#</a> DataFrame 的布尔索引</h3><p>使用布尔表达式：根据条件过滤 DataFrame。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">[</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token comment"># 布尔数组</span>
df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataframe-的数据类型" tabindex="-1"><a class="header-anchor" href="#dataframe-的数据类型" aria-hidden="true">#</a> DataFrame 的数据类型</h3><p>查看数据类型：使用 <strong>dtypes</strong> 属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">.</span>dtypes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**转换数据类型：**使用 <strong>astype</strong> 方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">[</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;float64&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dataframe-的合并与分割" tabindex="-1"><a class="header-anchor" href="#dataframe-的合并与分割" aria-hidden="true">#</a> DataFrame 的合并与分割</h3><p>**合并：**使用 <strong>concat</strong> 或 <strong>merge</strong> 方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 纵向合并</span>
pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 横向合并</span>
pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**分割：**使用 <strong>pivot、melt</strong> 或自定义函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 长格式转宽格式</span>
df_pivot <span class="token operator">=</span> df<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">&#39;Column2&#39;</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token string">&#39;Column3&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 宽格式转长格式</span>
df_melt <span class="token operator">=</span> df<span class="token punctuation">.</span>melt<span class="token punctuation">(</span>id_vars<span class="token operator">=</span><span class="token string">&#39;Column1&#39;</span><span class="token punctuation">,</span> value_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Column2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Column3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataframe-索引和切片" tabindex="-1"><a class="header-anchor" href="#dataframe-索引和切片" aria-hidden="true">#</a> DataFrame 索引和切片</h3><p>DataFrame 支持对行和列进行索引和切片操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 索引和切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 提取多列</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 切片行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 提取单列</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 标签索引提取指定行列</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># 位置索引提取指定列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、pandas-csv" tabindex="-1"><a class="header-anchor" href="#四、pandas-csv" aria-hidden="true">#</a> 四、Pandas CSV</h2><h3 id="读取与保存" tabindex="-1"><a class="header-anchor" href="#读取与保存" aria-hidden="true">#</a> 读取与保存</h3><p>Pandas 可以很方便的处理 CSV 文件，使用 <strong>read_csv(file/url)</strong> 方法读取文件或 url</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;nba.csv&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>to_string()</strong> 用于返回 DataFrame 类型的数据，如果不使用该函数，则输出结果为数据的前面 5 行和末尾 5 行，中间部分以 <strong>...</strong> 代替。</p></blockquote><p>也可以使用 <strong>to_csv()</strong> 方法将 DataFrame 存储为 csv 文件:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 三个字段 name, site, age</span>
name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Taobao&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wiki&quot;</span><span class="token punctuation">]</span>
st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;www.google.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;www.runoob.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;www.taobao.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;www.wikipedia.org&quot;</span><span class="token punctuation">]</span>
ag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span>
   
<span class="token comment"># 字典</span>
<span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">&#39;site&#39;</span><span class="token punctuation">:</span> st<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> ag<span class="token punctuation">}</span> 
     
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
  
<span class="token comment"># 保存 dataframe</span>
df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">&#39;site.csv&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据处理" tabindex="-1"><a class="header-anchor" href="#数据处理" aria-hidden="true">#</a> 数据处理</h3><p><strong>head( n )</strong> 方法用于读取前面的 n 行，如果不填参数 n ，默认返回 5 行。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;nba.csv&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>tail( n )</strong> 方法用于读取尾部的 n 行，如果不填参数 n ，默认返回 5 行，空行各个字段的值返回 NaN</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;nba.csv&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>info()</strong> 方法返回表格的一些基本信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;nba.csv&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、pandas-json" tabindex="-1"><a class="header-anchor" href="#五、pandas-json" aria-hidden="true">#</a> 五、Pandas Json</h2><h3 id="读取与保存-1" tabindex="-1"><a class="header-anchor" href="#读取与保存-1" aria-hidden="true">#</a> 读取与保存</h3><p>使用 <strong>read_json(file/url)</strong> 方法读取文件或 url</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span><span class="token string">&#39;sites.json&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>to_string()</strong> 用于返回 DataFrame 类型的数据，我们也可以直接处理 JSON 字符串</p></blockquote><p>直接处理 json 数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;A001&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;菜鸟教程&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;url&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;www.runoob.com&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;likes&quot;</span><span class="token punctuation">:</span> <span class="token number">61</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;A002&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;url&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;www.google.com&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;likes&quot;</span><span class="token punctuation">:</span> <span class="token number">124</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;A003&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;淘宝&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;url&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;www.taobao.com&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;likes&quot;</span><span class="token punctuation">:</span> <span class="token number">45</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 Python JSON 模块进行数据预处理</p><h2 id="六、数据清洗" tabindex="-1"><a class="header-anchor" href="#六、数据清洗" aria-hidden="true">#</a> 六、数据清洗</h2><h3 id="pandas-清洗空值" tabindex="-1"><a class="header-anchor" href="#pandas-清洗空值" aria-hidden="true">#</a> Pandas 清洗空值</h3><p>如果我们要删除包含空字段的行，可以使用 <strong>dropna()</strong> 方法，语法格式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>DataFrame<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">&#39;any&#39;</span><span class="token punctuation">,</span> thresh<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> subset<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**注意：**默认情况下，dropna() 方法返回一个新的 DataFrame，不会修改源数据。</p><p><strong>参数说明：</strong></p><ul><li>axis：默认为 <strong>0</strong>，表示逢空值剔除整行，如果设置参数 <strong>axis＝1</strong> 表示逢空值去掉整列。</li><li>how：默认为 <strong>&#39;any&#39;</strong> 如果一行（或一列）里任何一个数据有出现 NA 就去掉整行，如果设置 <strong>how=&#39;all&#39;</strong> 一行（或列）都是 NA 才去掉这整行。</li><li>thresh：设置需要多少非空值的数据才可以保留下来的。</li><li>subset：设置想要检查的列。如果是多个列，可以使用列名的 list 作为参数。</li><li>inplace：如果设置 True，将计算得到的值直接覆盖之前的值并返回 None，修改的是源数据。</li></ul><p>我们可以通过 <strong>isnull()</strong> 判断各个单元格是否为空。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;property-data.csv&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;NUM_BEDROOMS&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;NUM_BEDROOMS&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定空数据的值:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>missing_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;n/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;na&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">]</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;property-data.csv&#39;</span><span class="token punctuation">,</span> na_values <span class="token operator">=</span> missing_values<span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;NUM_BEDROOMS&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;NUM_BEDROOMS&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除包含空数据的行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;property-data.csv&#39;</span><span class="token punctuation">)</span>
new_df <span class="token operator">=</span> df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除指定列有空值的行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;property-data.csv&#39;</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;ST_NUM&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <strong>fillna()</strong> 方法替换空字段</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;property-data.csv&#39;</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 用 12345 替换空字段</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定某一个列来替换数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;property-data.csv&#39;</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">&#39;PID&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>替换空单元格的常用方法是计算列的 <strong>均值</strong>、<strong>中位数</strong>值 或 <strong>众数</strong></p><p>Pandas使用 <strong>mean()</strong>、<strong>median()</strong> 和 <strong>mode()</strong> 方法计算列的均值、中位数值和众数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;property-data.csv&#39;</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&quot;ST_NUM&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># x = df[&quot;ST_NUM&quot;].median()，x = df[&quot;ST_NUM&quot;].mode()</span>
df<span class="token punctuation">[</span><span class="token string">&quot;ST_NUM&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>x<span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pandas-清洗格式错误数据" tabindex="-1"><a class="header-anchor" href="#pandas-清洗格式错误数据" aria-hidden="true">#</a> Pandas 清洗格式错误数据</h3><p>可以通过包含空单元格的行，或者将列中的所有单元格转换为相同格式的数据</p><p>以下实例会格式化日期：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 第三个日期格式错误</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;Date&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;2020/12/01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2020/12/02&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;20201226&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;duration&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;day1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;day2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;day3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">&#39;Date&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;Date&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;mixed&#39;</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
       Date  duration
day1 2020-12-01        50
day2 2020-12-02        40
day3 2020-12-26        45
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pandas-清洗错误数据" tabindex="-1"><a class="header-anchor" href="#pandas-清洗错误数据" aria-hidden="true">#</a> Pandas 清洗错误数据</h3><p>对错误的数据进行 <strong>替换</strong> 或 <strong>移除</strong></p><p>手动替换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">]</span>    <span class="token comment"># 12345 年龄数据是错误的</span>
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>person<span class="token punctuation">)</span>
df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment"># 修改数据</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置条件语句</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将 age 大于 120 的设置为 120</span>
person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">]</span>    
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>person<span class="token punctuation">)</span>

<span class="token keyword">for</span> x <span class="token keyword">in</span> df<span class="token punctuation">.</span>index<span class="token punctuation">:</span>
  <span class="token keyword">if</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">120</span><span class="token punctuation">:</span>
    df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">120</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将错误数据的行删除</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将 age 大于 120 的删除</span>
person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">]</span>    <span class="token comment"># 12345 年龄数据是错误的</span>
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>person<span class="token punctuation">)</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> df<span class="token punctuation">.</span>index<span class="token punctuation">:</span>
  <span class="token keyword">if</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">120</span><span class="token punctuation">:</span>
    df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>x<span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pandas-清洗重复数据" tabindex="-1"><a class="header-anchor" href="#pandas-清洗重复数据" aria-hidden="true">#</a> Pandas 清洗重复数据</h3><p>要清洗重复数据，可以使用 <strong>duplicated()</strong> 和 <strong>drop_duplicates()</strong> 方法</p><p>如果对应的数据是重复的，<strong>duplicated()</strong> 会返回 True，否则返回 False。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span>  
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>person<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
0    False
1    False
2     True
3    False
dtype: bool
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除重复数据，可以直接使用 <strong>drop_duplicates()</strong> 方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>DataFrame<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>subset : 用来指定特定的列，默认所有列</li><li>keep : 默认 first，删除重复项并保留第一次出现的项，可选值为 {‘first’, ‘last’, False},</li><li>inplace :默认 False ，返回新的 DataFrame，否则修改原来的数据</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>persons <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span>  
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>persons<span class="token punctuation">)</span>
df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
     name  age
0  Google   50
1  Runoob   40
3  Taobao   23
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、常用函数" tabindex="-1"><a class="header-anchor" href="#七、常用函数" aria-hidden="true">#</a> 七、常用函数</h2><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><ul><li><p>重命名列：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Dataframe<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>mapper<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> level<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">&#39;raise&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>
        columns<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;student_id&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;first&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;first_name&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;last&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;last_name&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;age_in_years&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>改变数据类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>DataFrame<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>dtype<span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">&#39;raise&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>dtype： 它是一种数据类型，或列名-&gt;数据类型的字典。</li><li>copy： 默认情况下，astype 总是返回新分配的对象。如果 copy 设置为 False，则只有在旧对象无法强制转换为所需类型的情况下才会创建新对象。</li><li>errors： 控制对提供的数据类型的无效数据引发异常。默认设置为 raise，表示会引发异常。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>students <span class="token operator">=</span> students<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;grade&#39;</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>数据透视（行变列）</p><p>pivot 函数： 在 pandas 中 pivot 函数被用来基于列的值重塑数据并且在外部得到一个新的 DataFrame。pivot 采用我们将使用的以下参数：</p><ul><li>index： 确定新 DataFrame 中的行。</li><li>columns： 确定新 DataFrame 中的列。</li><li>values： 指定重塑表格时要使用的值。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>new_df <span class="token operator">=</span> df<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">&#39;month&#39;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">&#39;city&#39;</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token string">&#39;temperature&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>数据融合（列变行）</p><p>melt 函数: pandas 的 <code>melt</code> 函数用于转换或重塑数据。它将 DataFrame 从宽格式(列表示多个变量)更改为长格式(每行表示一个唯一变量)</p><p>melt 函数参数定义：</p><ul><li>id_vars：指定应该保持不变的列。</li><li>value_vars：指定要“melt”或将其整形成行的列。</li><li>var_name：这是将存储来自 value_vars 的标头名称的新列的名称。</li><li>value_name：这是将存储 value_vars 中的值的新列的名称。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>new_df <span class="token operator">=</span> df<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">&#39;month&#39;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">&#39;city&#39;</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token string">&#39;temperature&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="读取数据" tabindex="-1"><a class="header-anchor" href="#读取数据" aria-hidden="true">#</a> 读取数据</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">pd.read_csv(filename)</td><td style="text-align:left;">读取 CSV 文件；</td></tr><tr><td style="text-align:left;">pd.read_excel(filename)</td><td style="text-align:left;">读取 Excel 文件；</td></tr><tr><td style="text-align:left;">pd.read_sql(query, connection_object)</td><td style="text-align:left;">从 SQL 数据库读取数据；</td></tr><tr><td style="text-align:left;">pd.read_json(json_string)</td><td style="text-align:left;">从 JSON 字符串中读取数据；</td></tr><tr><td style="text-align:left;">pd.read_html(url)</td><td style="text-align:left;">从 HTML 页面中读取数据。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 从 CSV 文件中读取数据</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;data.csv&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 从 Excel 文件中读取数据</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">&#39;data.xlsx&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 从 SQL 数据库中读取数据</span>
<span class="token keyword">import</span> sqlite3
conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;database.db&#39;</span><span class="token punctuation">)</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM table_name&#39;</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span>

<span class="token comment"># 从 JSON 字符串中读取数据</span>
json_string <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;}&#39;</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span>json_string<span class="token punctuation">)</span>

<span class="token comment"># 从 HTML 页面中读取数据</span>
url <span class="token operator">=</span> <span class="token string">&#39;https://www.runoob.com&#39;</span>
dfs <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
df <span class="token operator">=</span> dfs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 选择第一个数据框</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看数据" tabindex="-1"><a class="header-anchor" href="#查看数据" aria-hidden="true">#</a> 查看数据</h3>`,161),d=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"函数"),n("th",{style:{"text-align":"left"}},"说明")])],-1),r=n("tr",null,[n("td",{style:{"text-align":"left"}},"df.head(n)"),n("td",{style:{"text-align":"left"}},"显示前 n 行数据；")],-1),k=n("tr",null,[n("td",{style:{"text-align":"left"}},"df.tail(n)"),n("td",{style:{"text-align":"left"}},"显示后 n 行数据；")],-1),m={style:{"text-align":"left"}},v={href:"http://df.info",target:"_blank",rel:"noopener noreferrer"},b=n("td",{style:{"text-align":"left"}},"显示数据的信息，包括列名、数据类型、缺失值等；",-1),g=n("tr",null,[n("td",{style:{"text-align":"left"}},"df.describe()"),n("td",{style:{"text-align":"left"}},"显示数据的基本统计信息，包括均值、方差、最大值、最小值等；")],-1),h=n("tr",null,[n("td",{style:{"text-align":"left"}},"df.shape"),n("td",{style:{"text-align":"left"}},"显示数据的行数和列数。")],-1),y=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 显示前五行数据</span>
df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 显示后五行数据</span>
df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 显示数据信息</span>
df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 显示基本统计信息</span>
df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 显示数据的行数和列数</span>
df<span class="token punctuation">.</span>shape
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据清洗" tabindex="-1"><a class="header-anchor" href="#数据清洗" aria-hidden="true">#</a> 数据清洗</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">df.dropna()</td><td style="text-align:left;">删除包含缺失值的行或列；</td></tr><tr><td style="text-align:left;">df.fillna(value)</td><td style="text-align:left;">将缺失值替换为指定的值；</td></tr><tr><td style="text-align:left;">df.replace(old_value, new_value)</td><td style="text-align:left;">将指定值替换为新值；</td></tr><tr><td style="text-align:left;">df.duplicated()</td><td style="text-align:left;">检查是否有重复的数据；</td></tr><tr><td style="text-align:left;">df.drop_duplicates()</td><td style="text-align:left;">删除重复的数据。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 删除包含缺失值的行或列</span>
df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 将缺失值替换为指定的值</span>
df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># 将指定值替换为新值</span>
df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;old_value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;new_value&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 检查是否有重复的数据</span>
df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 删除重复的数据</span>
df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据选择和切片" tabindex="-1"><a class="header-anchor" href="#数据选择和切片" aria-hidden="true">#</a> 数据选择和切片</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">df[column_name]</td><td style="text-align:left;">选择指定的列；</td></tr><tr><td style="text-align:left;">df.loc[row_index, column_name]</td><td style="text-align:left;">通过标签选择数据；</td></tr><tr><td style="text-align:left;">df.iloc[row_index, column_index]</td><td style="text-align:left;">通过位置选择数据；</td></tr><tr><td style="text-align:left;">df.ix[row_index, column_name]</td><td style="text-align:left;">通过标签或位置选择数据；</td></tr><tr><td style="text-align:left;">df.filter(items=[column_name1, column_name2])</td><td style="text-align:left;">选择指定的列；</td></tr><tr><td style="text-align:left;">df.filter(regex=&#39;regex&#39;)</td><td style="text-align:left;">选择列名匹配正则表达式的列；</td></tr><tr><td style="text-align:left;">df.sample(n)</td><td style="text-align:left;">随机选择 n 行数据。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 选择指定的列</span>
df<span class="token punctuation">[</span><span class="token string">&#39;column_name&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 通过标签选择数据</span>
df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_index<span class="token punctuation">,</span> column_name<span class="token punctuation">]</span>

<span class="token comment"># 通过位置选择数据</span>
df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>row_index<span class="token punctuation">,</span> column_index<span class="token punctuation">]</span>

<span class="token comment"># 通过标签或位置选择数据</span>
df<span class="token punctuation">.</span>ix<span class="token punctuation">[</span>row_index<span class="token punctuation">,</span> column_name<span class="token punctuation">]</span>

<span class="token comment"># 选择指定的列</span>
df<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;column_name1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;column_name2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 选择列名匹配正则表达式的列</span>
df<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>regex<span class="token operator">=</span><span class="token string">&#39;regex&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 随机选择 n 行数据</span>
df<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据排序" tabindex="-1"><a class="header-anchor" href="#数据排序" aria-hidden="true">#</a> 数据排序</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">df.sort_values(column_name)</td><td style="text-align:left;">按照指定列的值排序；</td></tr><tr><td style="text-align:left;">df.sort_values([column_name1, column_name2], ascending=[True, False])</td><td style="text-align:left;">按照多个列的值排序；</td></tr><tr><td style="text-align:left;">df.sort_index()</td><td style="text-align:left;">按照索引排序。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 按照指定列的值排序</span>
df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;column_name&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 按照多个列的值排序</span>
df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;column_name1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;column_name2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 按照索引排序</span>
df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据分组和聚合" tabindex="-1"><a class="header-anchor" href="#数据分组和聚合" aria-hidden="true">#</a> 数据分组和聚合</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">df.groupby(column_name)</td><td style="text-align:left;">按照指定列进行分组；</td></tr><tr><td style="text-align:left;">df.aggregate(function_name)</td><td style="text-align:left;">对分组后的数据进行聚合操作；</td></tr><tr><td style="text-align:left;">df.pivot_table(values, index, columns, aggfunc)</td><td style="text-align:left;">生成透视表。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 按照指定列进行分组</span>
df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;column_name&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 对分组后的数据进行聚合操作</span>
df<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token string">&#39;function_name&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 生成透视表</span>
df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>values<span class="token operator">=</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token string">&#39;index_column&#39;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">&#39;column_name&#39;</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">&#39;function_name&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据合并" tabindex="-1"><a class="header-anchor" href="#数据合并" aria-hidden="true">#</a> 数据合并</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">pd.concat([df1, df2])</td><td style="text-align:left;">将多个数据框按照行或列进行合并；</td></tr><tr><td style="text-align:left;">pd.merge(df1, df2, on=column_name)</td><td style="text-align:left;">按照指定列将两个数据框进行合并。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将多个数据框按照行或列进行合并</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 按照指定列将两个数据框进行合并</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">&#39;column_name&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据选择和过滤" tabindex="-1"><a class="header-anchor" href="#数据选择和过滤" aria-hidden="true">#</a> 数据选择和过滤</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">df.loc[row_indexer, column_indexer]</td><td style="text-align:left;">按标签选择行和列。</td></tr><tr><td style="text-align:left;">df.iloc[row_indexer, column_indexer]</td><td style="text-align:left;">按位置选择行和列。</td></tr><tr><td style="text-align:left;">df[df[&#39;column_name&#39;] &gt; value]</td><td style="text-align:left;">选择列中满足条件的行。</td></tr><tr><td style="text-align:left;">df.query(&#39;column_name &gt; value&#39;)</td><td style="text-align:left;">使用字符串表达式选择列中满足条件的行。</td></tr></tbody></table><h3 id="数据统计和描述" tabindex="-1"><a class="header-anchor" href="#数据统计和描述" aria-hidden="true">#</a> 数据统计和描述</h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">df.describe()</td><td style="text-align:left;">计算基本统计信息，如均值、标准差、最小值、最大值等。</td></tr><tr><td style="text-align:left;">df.mean()</td><td style="text-align:left;">计算每列的平均值。</td></tr><tr><td style="text-align:left;">df.median()</td><td style="text-align:left;">计算每列的中位数。</td></tr><tr><td style="text-align:left;">df.mode()</td><td style="text-align:left;">计算每列的众数。</td></tr><tr><td style="text-align:left;">df.count()</td><td style="text-align:left;">计算每列非缺失值的数量。</td></tr></tbody></table><h2 id="八、相关性分析" tabindex="-1"><a class="header-anchor" href="#八、相关性分析" aria-hidden="true">#</a> 八、相关性分析</h2><p>据相关性是一项重要的分析任务，它帮助我们理解数据中各个变量之间的关系</p><p>Pandas 使用 <strong>corr()</strong> 方法计算数据集中每列之间的关系</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">.</span>corr<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">&#39;pearson&#39;</span><span class="token punctuation">,</span> min_periods<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>method</strong> (可选): 字符串类型，用于指定计算相关系数的方法。默认是 &#39;pearson&#39;，还可以选择 &#39;kendall&#39;（Kendall Tau 相关系数）或 &#39;spearman&#39;（Spearman 秩相关系数）。</li><li><strong>min_periods</strong> (可选): 表示计算相关系数时所需的最小观测值数量。默认值是 1，即只要有至少一个非空值，就会进行计算。如果指定了 <code>min_periods</code>，并且在某些列中的非空值数量小于该值，则相应列的相关系数将被设为 NaN。</li></ul><p><strong>df.corr()</strong> 方法返回一个相关系数矩阵，矩阵的行和列对应数据框的列名，矩阵的元素是对应 <strong>列之间的相关系数</strong>。</p><p>常见的相关性系数包括 Pearson 相关系数和 Spearman 秩相关系数：</p><ul><li><strong>Pearson 相关系数:</strong> 即皮尔逊相关系数，用于衡量了两个变量之间的线性关系强度和方向。它的取值范围在 -1 到 1 之间，其中 -1 表示完全负相关，1 表示完全正相关，0 表示无线性相关。可以使用 <strong>corr()</strong> 方法计算数据框中各列之间的 Pearson 相关系数。</li><li>**Spearman 相关系数：**即斯皮尔曼相关系数，是一种秩相关系数。用于衡量两个变量之间的单调关系，即不一定是线性关系。它通过比较变量的秩次来计算相关性。可以使用 <strong>corr(method=&#39;spearman&#39;)</strong> 方法计算数据框中各列之间的 Spearman 相关系数。</li></ul><h2 id="九、其他函数" tabindex="-1"><a class="header-anchor" href="#九、其他函数" aria-hidden="true">#</a> 九、其他函数</h2><h3 id="一般函数" tabindex="-1"><a class="header-anchor" href="#一般函数" aria-hidden="true">#</a> 一般函数</h3>`,30),f={id:"pandas-get-dummies",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#pandas-get-dummies","aria-hidden":"true"},"#",-1),q={href:"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html#pandas-get-dummies",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"独热编码，将值用 0,1 表示",-1);function w(S,F){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("table",null,[d,n("tbody",null,[r,k,n("tr",null,[n("td",m,[n("a",v,[s("df.info"),t(a)]),s("()")]),b]),g,h])]),y,n("h4",f,[x,s(),n("a",q,[s("pandas.get_dummies"),t(a)])]),_])}const T=e(i,[["render",w],["__file","Pandas 介绍.html.vue"]]);export{T as default};
