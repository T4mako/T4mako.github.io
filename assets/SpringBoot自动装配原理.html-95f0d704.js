const o=JSON.parse('{"key":"v-c6597504","path":"/code/java/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86.html","title":"SpringBoot 自动装配原理","lang":"zh-CN","frontmatter":{"title":"SpringBoot 自动装配原理","icon":"leaf","category":["java"],"tag":["Spring","java","SpringBoot"],"description":"早期的Spring项目需要添加需要配置繁琐的xml,比如MVC、事务、数据库连接等繁琐的配置。SpringBoot的出现就无需这些繁琐的配置，因为SpringBoot基于约定大于配置的理念，在项目启动时候，将约定的配置类自动配置到IOC容器里。这些都因为SpringBoot有自动配置的特性。 Sping Boot 如何实现自动配置 Spring Boot都需要创建一个mian启动类，而启动类都含有@SpringBootApplication注解，从启动类，一步步探索源码。","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/java/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"SpringBoot 自动装配原理"}],["meta",{"property":"og:description","content":"早期的Spring项目需要添加需要配置繁琐的xml,比如MVC、事务、数据库连接等繁琐的配置。SpringBoot的出现就无需这些繁琐的配置，因为SpringBoot基于约定大于配置的理念，在项目启动时候，将约定的配置类自动配置到IOC容器里。这些都因为SpringBoot有自动配置的特性。 Sping Boot 如何实现自动配置 Spring Boot都需要创建一个mian启动类，而启动类都含有@SpringBootApplication注解，从启动类，一步步探索源码。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot 自动装配原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Sping Boot 如何实现自动配置","slug":"sping-boot-如何实现自动配置","link":"#sping-boot-如何实现自动配置","children":[{"level":3,"title":"@SpringBootApplication注解","slug":"springbootapplication注解","link":"#springbootapplication注解","children":[]},{"level":3,"title":"@EnableAutoConfiguration注解","slug":"enableautoconfiguration注解","link":"#enableautoconfiguration注解","children":[]},{"level":3,"title":"AutoConfigurationImportSelector类","slug":"autoconfigurationimportselector类","link":"#autoconfigurationimportselector类","children":[]},{"level":3,"title":"selectImports()方法","slug":"selectimports-方法","link":"#selectimports-方法","children":[]},{"level":3,"title":"SpringFactoriesLoader.loadFactoryNames() 方法","slug":"springfactoriesloader-loadfactorynames-方法","link":"#springfactoriesloader-loadfactorynames-方法","children":[]}]},{"level":2,"title":"自动配置生效条件","slug":"自动配置生效条件","link":"#自动配置生效条件","children":[]}],"readingTime":{"minutes":3.08,"words":925},"filePathRelative":"code/java/SpringBoot自动装配原理.md","excerpt":"<p>早期的<code>Spring</code>项目需要添加需要配置繁琐的xml,比如<code>MVC</code>、事务、数据库连接等繁琐的配置。<code>SpringBoot</code>的出现就无需这些繁琐的配置，因为<code>SpringBoot</code>基于<strong>约定大于配置</strong>的理念，在项目启动时候，将约定的配置类自动配置到<code>IOC</code>容器里。这些都因为<code>SpringBoot</code>有自动配置的特性。</p>\\n<h2> Sping Boot 如何实现自动配置</h2>\\n<p><code>Spring Boot</code>都需要创建一个<code>mian</code>启动类，而启动类都含有<code>@SpringBootApplication</code>注解，从启动类，一步步探索源码。</p>","autoDesc":true}');export{o as data};
