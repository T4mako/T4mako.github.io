const o=JSON.parse('{"key":"v-d7c6dccc","path":"/code/leetcode/leetcode_030_%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.html","title":"030_串联所有单词的子串","lang":"zh-CN","frontmatter":{"description":"030_串联所有单词的子串 tag：哈希表、字符串、滑动窗口 难度：困难 题目： 给定一个字符串 s 和一个字符串数组 words。 words 中所有字符串 长度相同。 s 中的 串联子串 是指一个包含 words 中所有字符串以任意顺序排列连接起来的子串。 例如，如果 words = [\\"ab\\",\\"cd\\",\\"ef\\"]， 那么 \\"abcdef\\"， \\"abefcd\\"，\\"cdabef\\"， \\"cdefab\\"，\\"efabcd\\"， 和 \\"efcdab\\" 都是串联子串。 \\"acdbef\\" 不是串联子串，因为他不是任何 words 排列的连接。 返回所有串联字串在 s 中的开始索引。你可以以 任意顺序 返回答案。 示例 1： 输入：s = \\"barfoothefoobarman\\", words = [\\"foo\\",\\"bar\\"] 输出：[0,9] 解释：因为 words.length == 2 同时 words[i].length == 3，连接的子字符串的长度必须为 6。 子串 \\"barfoo\\" 开始位置是 0。它是 words 中以 [\\"bar\\",\\"foo\\"] 顺序排列的连接。 子串 \\"foobar\\" 开始位置是 9。它是 words 中以 [\\"foo\\",\\"bar\\"] 顺序排列的连接。 输出顺序无关紧要。返回 [9,0] 也是可以的。 示例 2： 输入：s = \\"wordgoodgoodgoodbestword\\", words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] 输出：[] 解释：因为 words.length == 4 并且 words[i].length == 4，所以串联子串的长度必须为 16。 s 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。 所以我们返回一个空数组。 示例 3： 输入：s = \\"barfoofoobarthefoobarman\\", words = [\\"bar\\",\\"foo\\",\\"the\\"] 输出：[6,9,12] 解释：因为 words.length == 3 并且 words[i].length == 3，所以串联子串的长度必须为 9。 子串 \\"foobarthe\\" 开始位置是 6。它是 words 中以 [\\"foo\\",\\"bar\\",\\"the\\"] 顺序排列的连接。 子串 \\"barthefoo\\" 开始位置是 9。它是 words 中以 [\\"bar\\",\\"the\\",\\"foo\\"] 顺序排列的连接。 子串 \\"thefoobar\\" 开始位置是 12。它是 words 中以 [\\"the\\",\\"foo\\",\\"bar\\"] 顺序排列的连接。 来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/substring-with-concatenation-of-all-words 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/leetcode/leetcode_030_%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"030_串联所有单词的子串"}],["meta",{"property":"og:description","content":"030_串联所有单词的子串 tag：哈希表、字符串、滑动窗口 难度：困难 题目： 给定一个字符串 s 和一个字符串数组 words。 words 中所有字符串 长度相同。 s 中的 串联子串 是指一个包含 words 中所有字符串以任意顺序排列连接起来的子串。 例如，如果 words = [\\"ab\\",\\"cd\\",\\"ef\\"]， 那么 \\"abcdef\\"， \\"abefcd\\"，\\"cdabef\\"， \\"cdefab\\"，\\"efabcd\\"， 和 \\"efcdab\\" 都是串联子串。 \\"acdbef\\" 不是串联子串，因为他不是任何 words 排列的连接。 返回所有串联字串在 s 中的开始索引。你可以以 任意顺序 返回答案。 示例 1： 输入：s = \\"barfoothefoobarman\\", words = [\\"foo\\",\\"bar\\"] 输出：[0,9] 解释：因为 words.length == 2 同时 words[i].length == 3，连接的子字符串的长度必须为 6。 子串 \\"barfoo\\" 开始位置是 0。它是 words 中以 [\\"bar\\",\\"foo\\"] 顺序排列的连接。 子串 \\"foobar\\" 开始位置是 9。它是 words 中以 [\\"foo\\",\\"bar\\"] 顺序排列的连接。 输出顺序无关紧要。返回 [9,0] 也是可以的。 示例 2： 输入：s = \\"wordgoodgoodgoodbestword\\", words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] 输出：[] 解释：因为 words.length == 4 并且 words[i].length == 4，所以串联子串的长度必须为 16。 s 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。 所以我们返回一个空数组。 示例 3： 输入：s = \\"barfoofoobarthefoobarman\\", words = [\\"bar\\",\\"foo\\",\\"the\\"] 输出：[6,9,12] 解释：因为 words.length == 3 并且 words[i].length == 3，所以串联子串的长度必须为 9。 子串 \\"foobarthe\\" 开始位置是 6。它是 words 中以 [\\"foo\\",\\"bar\\",\\"the\\"] 顺序排列的连接。 子串 \\"barthefoo\\" 开始位置是 9。它是 words 中以 [\\"bar\\",\\"the\\",\\"foo\\"] 顺序排列的连接。 子串 \\"thefoobar\\" 开始位置是 12。它是 words 中以 [\\"the\\",\\"foo\\",\\"bar\\"] 顺序排列的连接。 来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/substring-with-concatenation-of-all-words 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"030_串联所有单词的子串\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"解法：","slug":"解法","link":"#解法","children":[]}],"readingTime":{"minutes":2.71,"words":814},"filePathRelative":"code/leetcode/leetcode_030_串联所有单词的子串.md","excerpt":"<h1> 030_串联所有单词的子串</h1>\\n<blockquote>\\n<p>tag：哈希表、字符串、滑动窗口</p>\\n<p>难度：困难</p>\\n</blockquote>\\n<blockquote>\\n<p>题目：</p>\\n<p>给定一个字符串 s 和一个字符串数组 words。 words 中所有字符串 长度相同。</p>\\n<p>s 中的 串联子串 是指一个包含  words 中所有字符串以任意顺序排列连接起来的子串。</p>\\n<p>例如，如果 words = [\\"ab\\",\\"cd\\",\\"ef\\"]， 那么 \\"abcdef\\"， \\"abefcd\\"，\\"cdabef\\"， \\"cdefab\\"，\\"efabcd\\"， 和 \\"efcdab\\" 都是串联子串。 \\"acdbef\\" 不是串联子串，因为他不是任何 words 排列的连接。<br>\\n返回所有串联字串在 s 中的开始索引。你可以以 任意顺序 返回答案。</p>\\n<p>示例 1：</p>\\n<p>输入：s = \\"barfoothefoobarman\\", words = [\\"foo\\",\\"bar\\"]<br>\\n输出：[0,9]<br>\\n解释：因为 words.length == 2 同时 words[i].length == 3，连接的子字符串的长度必须为 6。<br>\\n子串 \\"barfoo\\" 开始位置是 0。它是 words 中以 [\\"bar\\",\\"foo\\"] 顺序排列的连接。<br>\\n子串 \\"foobar\\" 开始位置是 9。它是 words 中以 [\\"foo\\",\\"bar\\"] 顺序排列的连接。<br>\\n输出顺序无关紧要。返回 [9,0] 也是可以的。<br>\\n示例 2：</p>\\n<p>输入：s = \\"wordgoodgoodgoodbestword\\", words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"]<br>\\n输出：[]<br>\\n解释：因为 words.length == 4 并且 words[i].length == 4，所以串联子串的长度必须为 16。<br>\\ns 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。<br>\\n所以我们返回一个空数组。<br>\\n示例 3：</p>\\n<p>输入：s = \\"barfoofoobarthefoobarman\\", words = [\\"bar\\",\\"foo\\",\\"the\\"]<br>\\n输出：[6,9,12]<br>\\n解释：因为 words.length == 3 并且 words[i].length == 3，所以串联子串的长度必须为 9。<br>\\n子串 \\"foobarthe\\" 开始位置是 6。它是 words 中以 [\\"foo\\",\\"bar\\",\\"the\\"] 顺序排列的连接。<br>\\n子串 \\"barthefoo\\" 开始位置是 9。它是 words 中以 [\\"bar\\",\\"the\\",\\"foo\\"] 顺序排列的连接。<br>\\n子串 \\"thefoobar\\" 开始位置是 12。它是 words 中以 [\\"the\\",\\"foo\\",\\"bar\\"] 顺序排列的连接。</p>\\n<p>来源：力扣（LeetCode）<br>\\n链接：<a href=\\"https://leetcode.cn/problems/substring-with-concatenation-of-all-words\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://leetcode.cn/problems/substring-with-concatenation-of-all-words</a><br>\\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\\n</blockquote>","autoDesc":true}');export{o as data};
