import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c as h,e as i,b as e,d as o,f as d}from"./app-f6596aa1.js";const l={},s=e("h2",{id:"uml-类图简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#uml-类图简介","aria-hidden":"true"},"#"),o(" UML 类图简介")],-1),c=e("p",null,"UML（Unified Modeling Language） 类图（Class Diagram）属于结构图（静态图），常用于被描述一个系统的静态结构。",-1),p=e("p",null,"UML 类图包含 类、接口、泛化（继承）、实现、组合、聚合、关联、依赖关系",-1),_=d('<h3 id="_1-类的-uml-图" tabindex="-1"><a class="header-anchor" href="#_1-类的-uml-图" aria-hidden="true">#</a> 1. 类的 UML 图</h3><p>类图分为三层结构：</p><ul><li>第一层：名字层，如果类的名字是斜体，则这个类是抽象类</li><li>第二层：变量层（属性层），格式： <code>变量名:类型</code></li><li>第三层：方法层，格式：<code>方法名(参数列表)</code></li></ul><p>四种权限修饰符：public、protected、缺省（友好）、private<br> 对应：+、#、、-</p>',4),u=d('<h3 id="_2-接口的-uml-图" tabindex="-1"><a class="header-anchor" href="#_2-接口的-uml-图" aria-hidden="true">#</a> 2. 接口的 UML 图</h3><p>接口的 UML 图分为三层结构：</p><ul><li>第一层：名字层，接口名字必须使用斜体，且上方使用 <code>&lt;&lt;interface&gt;&gt;</code> 修饰（分为两行）</li><li>第二层：常量层，列出接口的常量以及类型，<code>常量名:类型</code>，常量都是 public，所以使用 +</li><li>第三层：方法层（操作层），列出接口中的方法及返回类型，<code>方法名(参数列表):类型</code>，方法都是 public ，所以使用 +</li></ul>',3),m=d('<div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：接口名、抽象类名为斜体</p></div><h3 id="_3-泛化-继承-关系-generalization-extends" tabindex="-1"><a class="header-anchor" href="#_3-泛化-继承-关系-generalization-extends" aria-hidden="true">#</a> 3. 泛化（继承）关系（Generalization/extends）</h3><p>UML 中的泛化关系（Generalization）就是值指类或接口的继承关系<br> 继承用「实线空心箭头」表示，由子类指向父类。</p><h3 id="_4、实现关系-implements" tabindex="-1"><a class="header-anchor" href="#_4、实现关系-implements" aria-hidden="true">#</a> 4、实现关系（implements）</h3><p>指的是一个 class 类实现 interface 接口（可以是多个）的功能<br> 实现使用「虚线空心箭头」表示，由实现类指向接口</p><h3 id="_5、组合关系-composition" tabindex="-1"><a class="header-anchor" href="#_5、组合关系-composition" aria-hidden="true">#</a> 5、组合关系（Composition）</h3><ul><li>组合是关联关系的一种特例，它体现的是一种 contains-a 的关系，这种关系比聚合更强，也称为强聚合</li><li>它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束</li></ul><p>组合使用的是「实线实心菱形」表示，菱形端为整体类，另一端为部分类</p><h3 id="_6、聚合关系-aggregation" tabindex="-1"><a class="header-anchor" href="#_6、聚合关系-aggregation" aria-hidden="true">#</a> 6、聚合关系（Aggregation）</h3><ul><li>聚合也是关联关系的一种特例，它体现的是整体与部分、拥有的关系，即 has-a 的关系</li><li>此时整体与部分之间是可分离的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享</li></ul><p>聚合使用的是「实线空心菱形」表示，菱形端为整体类，另一端为部分类</p><h3 id="_7、关联关系-association" tabindex="-1"><a class="header-anchor" href="#_7、关联关系-association" aria-hidden="true">#</a> 7、关联关系（Association）</h3><p>如果 A 类中的成员变量有用 B 类（接口）来声明变量，则 A 与 B 为关联关系，称 A 关联于 B<br> 如果 A 关联 B，那么 UML 通过一个「实线」连接 A 和 B 的 UML 图</p><p>关联使用的是「实线普通箭头」，引用类（A）指向被引用类（B）</p><h3 id="_8-依赖关系-dependency" tabindex="-1"><a class="header-anchor" href="#_8-依赖关系-dependency" aria-hidden="true">#</a> 8. 依赖关系（Dependency）</h3><p>如果 A 类中某个方法的参数用 B 类（接口）来声明的变量或某个方法返回的数据类型是 B 类型的，那么 A 和 B 的关系是依赖关系，称 A 依赖于 B</p><p>关联使用的是「虚线普通箭头」，引用类（A）指向被依赖类（B）</p><h3 id="_9-注释" tabindex="-1"><a class="header-anchor" href="#_9-注释" aria-hidden="true">#</a> 9. 注释</h3><p>UML 使用注释（Annotation）为类图提供附加的说明，UML 在一个带卷角的长方形中显式给出注释，并使用虚线将这个长方形和它注释的实体连接起来</p><h3 id="_10-设计类的原则" tabindex="-1"><a class="header-anchor" href="#_10-设计类的原则" aria-hidden="true">#</a> 10. 设计类的原则</h3><h4 id="「开-闭」原则" tabindex="-1"><a class="header-anchor" href="#「开-闭」原则" aria-hidden="true">#</a> 「开-闭」原则</h4><h4 id="「多用组合、少用继承」原则" tabindex="-1"><a class="header-anchor" href="#「多用组合、少用继承」原则" aria-hidden="true">#</a> 「多用组合、少用继承」原则</h4><h4 id="「高内聚-低耦合」原则" tabindex="-1"><a class="header-anchor" href="#「高内聚-低耦合」原则" aria-hidden="true">#</a> 「高内聚-低耦合」原则</h4><ul><li>高内聚：类中的方法是一组相关行为</li><li>低耦合：尽量不让一个类含有太多其他类的实例的引用</li></ul>',24);function x(A,b){const a=r("Mermaid");return t(),h("div",null,[s,c,p,i(a,{id:"mermaid-9",code:"eJxLzkksLnbJTEwvSszlet6x7fnG3QqOCjY1uroKT9dOAPGcuJ71LX3avxjEdgbK6OkpPF0373nfBpCAC9ezqVue7J0MYrsqaAF1vWxe8bSjDcR3Q5JzV8hHkfPgerFo9dM9U59PWQHieirYgCyE871A0k/2zX2xdRqI661gA7IVLu3DBQBY6F9t"}),_,i(a,{id:"mermaid-36",code:"eJxLzkksLnbJTEwvSszlAnMUAlLzC3JSq7kUgEA7LzE31Sq4pCgzLx0ikJieapWZVwLm6Obm56VWWqXklyblpEKki1NL/IBaNCBaNBXK8jNTwDLKBUCBEt/U4mINJFHt9NQSx/RUoBDMTKABqAK6QCW+IHs0NK25arkAPig1GA=="}),u,i(a,{id:"mermaid-60",code:"eJxLzkksLnbJTEwvSszlAnMUgjMSC1KruRSAwMYmM68ktSgtMTnVzg4souvrGGEFFARztBNTUjSAHB0g1lSAixaXJqGK1nIBAJJ+HzM="}),m])}const B=n(l,[["render",x],["__file","面向对象设计基本原则.html.vue"]]);export{B as default};
