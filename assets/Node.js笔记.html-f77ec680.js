import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as n,d as s,e as t,f as p}from"./app-acbf79fc.js";const l={},u={href:"https://nodejs.cn/api-v16/",target:"_blank",rel:"noopener noreferrer"},r=p('<h2 id="_1、node-js介绍" tabindex="-1"><a class="header-anchor" href="#_1、node-js介绍" aria-hidden="true">#</a> 1、Node.js介绍</h2><h3 id="_1-1、node-js-概念" tabindex="-1"><a class="header-anchor" href="#_1-1、node-js-概念" aria-hidden="true">#</a> 1.1、Node.js 概念</h3><p><strong>Node.js</strong> 是一个<strong>开源</strong>的，<strong>跨平台</strong>的 JavaScript 运行环境<br> 通俗来讲，Node.js 就是一款<strong>应用程序</strong>，是一款<strong>软件</strong>，它可以运行JS</p><p><strong>Node.js 作用：</strong></p><ul><li>开发服务器应用</li><li>开发工具类应用</li><li>开发桌面端应用</li></ul><h3 id="_1-2、node-js-的安装" tabindex="-1"><a class="header-anchor" href="#_1-2、node-js-的安装" aria-hidden="true">#</a> 1.2、Node.js 的安装</h3>',6),d={href:"https://nodejs.org/en",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[s("打开cmd，输入 "),n("code",null,"node -v"),s(" 查看安装情况"),n("br"),n("img",{src:"https://raw.githubusercontent.com/T4mako/ImageBed/main/20230420185728.png",alt:"",loading:"lazy"})],-1),m={href:"https://www.jianshu.com/p/e8c29211fba9",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="_2、node-js-入门" tabindex="-1"><a class="header-anchor" href="#_2、node-js-入门" aria-hidden="true">#</a> 2、Node.js 入门</h2><h3 id="_2-1、nodejs-初体验" tabindex="-1"><a class="header-anchor" href="#_2-1、nodejs-初体验" aria-hidden="true">#</a> 2.1、NodeJS 初体验</h3><p>新建一个js文件，通过vs使用终端运行文件</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230420192316.png" alt="" loading="lazy"></p><p>使用 <code>node hello.js</code> 运行文件</p><blockquote><p>注意：Node.js 中<strong>不能使用 BOM 和 DOM 的 API</strong><br> Node.js 中的顶级对象为 <strong>global</strong>（相当于浏览器中的windows）<br><strong>console，定时器</strong> 的API可以使用</p></blockquote><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230420192544.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230420192620431.png" alt="image-20230420192620431" loading="lazy"></p><h2 id="_3、buffer" tabindex="-1"><a class="header-anchor" href="#_3、buffer" aria-hidden="true">#</a> 3、Buffer</h2><h3 id="_3-1、概念" tabindex="-1"><a class="header-anchor" href="#_3-1、概念" aria-hidden="true">#</a> 3.1、概念</h3><p>Buffer 是一个类似于数组的 <strong>对象</strong> ，用于表示固定长度的字节序列<br> Buffer 本质是一段内存空间，专门用来处理 <strong>二进制数据</strong> 。</p><h3 id="_3-2、特点" tabindex="-1"><a class="header-anchor" href="#_3-2、特点" aria-hidden="true">#</a> 3.2、特点</h3><ol><li>Buffer 大小固定且无法调整</li><li>Buffer 性能较好，可以直接对计算机内存进行操作</li><li>每个元素的大小为 1 字节（byte）</li></ol><h3 id="_3-3、创建-buffer" tabindex="-1"><a class="header-anchor" href="#_3-3、创建-buffer" aria-hidden="true">#</a> 3.3、创建 Buffer</h3><p>Node.js 中创建 Buffer 的方式主要如下几种：</p><ol><li>Buffer.alloc</li><li>Buffer.allocUnsafe</li><li>Buffer.from</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建了一个长度为 10 字节的 Buffer，相当于申请了 10 字节的内存空间，每个字节的值为 0</span>
<span class="token keyword">let</span> buf_1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为 &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span>

<span class="token comment">//创建了一个长度为 10 字节的 Buffer，buffer 中可能存在旧的数据, 可能会影响执行结果，所以叫unsafe</span>
<span class="token keyword">let</span> buf_2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//通过字符串创建 Buffer 转换为unicode</span>
<span class="token keyword">let</span> buf_3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;0Aa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;Buffer 30 41 61&gt;</span>

<span class="token comment">//通过数组创建 Buffer 转换为16进制</span>
<span class="token keyword">let</span> buf_4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;Buffer 01 0a 10 32&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4、buffer-与字符串的转化" tabindex="-1"><a class="header-anchor" href="#_3-4、buffer-与字符串的转化" aria-hidden="true">#</a> 3.4、Buffer 与字符串的转化</h3><p>可以借助 <strong>toString</strong> 方法将 Buffer 转为字符串</p><p>toString 默认是按照 utf-8 编码方式进行转换的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">let</span> buf4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf4<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 01Aa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5、buffer-的读写" tabindex="-1"><a class="header-anchor" href="#_3-5、buffer-的读写" aria-hidden="true">#</a> 3.5、Buffer 的读写</h3><p>Buffer 可以直接通过 <strong>[ ]</strong> 的方式对数据进行处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//读取</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//97</span>
<span class="token comment">//修改</span>
buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>
<span class="token comment">//查看字符串结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//aac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意:<br> 如果修改的数值<strong>超过 255</strong> ，则超过 8 位数据会被舍弃<br> 一个 utf-8 的字符 一般占 <strong>3</strong> 个字节</p></blockquote><h2 id="_4、fs-模块" tabindex="-1"><a class="header-anchor" href="#_4、fs-模块" aria-hidden="true">#</a> 4、fs 模块</h2><p>fs 全称为 <strong>file system</strong> ，称之为 文件系统 ，是 Node.js 中的 内置模块 ，可以对计算机中的磁盘进行操作。</p><h4 id="fs模块的导入" tabindex="-1"><a class="header-anchor" href="#fs模块的导入" aria-hidden="true">#</a> <em><strong>fs模块的导入：</strong></em></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-1、文件写入" tabindex="-1"><a class="header-anchor" href="#_4-1、文件写入" aria-hidden="true">#</a> 4.1、文件写入</h3><p>文件写入就是将 数据 保存到 文件 中，我们可以使用如下几个方法来实现该效果</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>writeFile()</td><td>异步写入</td></tr><tr><td>writeFileSync()</td><td>同步写入</td></tr><tr><td>appendFile() / appendFileSync()</td><td>追加写入</td></tr><tr><td>createWriteStream()</td><td>流式写入</td></tr></tbody></table><h4 id="_4-1-1、writefile-异步写入" tabindex="-1"><a class="header-anchor" href="#_4-1-1、writefile-异步写入" aria-hidden="true">#</a> 4.1.1、writeFile 异步写入</h4><p><strong>主线程 不会等待 其他线程的执行结果，直接执行后续的主线程代码，效率较好</strong></p><p><strong>语法</strong>： <strong>fs.writeFile(file, data[, options], callback)</strong></p><blockquote><p>注：<strong>callback（回调函数）</strong></p></blockquote><p><strong>参数</strong>说明：<br> file 文件名<br> data 待写入的数据<br> options 选项设置 （可选）<br> callback 写入回调</p><p><strong>返回值</strong>： undefined</p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入fs模块</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2.写入文件 (文件名：a.txt，写入数据：aa)</span>
fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// err 写入失败：错误对象 写入成功：null</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2、writefilesync-同步写入" tabindex="-1"><a class="header-anchor" href="#_4-1-2、writefilesync-同步写入" aria-hidden="true">#</a> 4.1.2、writeFileSync 同步写入</h4><p>**主线程等待写入完成后继续执行，效率较低 **</p><p><strong>语法</strong>: fs.writeFileSync(file, data[, options])</p><p><strong>参数</strong>与 fs.writeFile 大体一致，只是没有 callback 参数</p><p><strong>返回值</strong>： undefined</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./b.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-3、appendfile-appendfilesync-追加写入" tabindex="-1"><a class="header-anchor" href="#_4-1-3、appendfile-appendfilesync-追加写入" aria-hidden="true">#</a> 4.1.3、appendFile / appendFileSync 追加写入</h4><p><strong>appendFile</strong> 作用是在文件尾部追加内容，appendFile 语法与 writeFile 语法完全相同</p><p><strong>语法:</strong><br> fs.appendFile(file, data[, options], callback)<br> fs.appendFileSync(file, data[, options])</p><p><strong>返回值</strong>： 都为 undefined</p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ABCD&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;追加成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">appendFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;\\r\\nDCBA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <strong>writeFile 实现追加写入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;love love&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;succees&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-4、createwritestream-流式写入" tabindex="-1"><a class="header-anchor" href="#_4-1-4、createwritestream-流式写入" aria-hidden="true">#</a> 4.1.4、createWriteStream 流式写入</h4><p><strong>语法</strong>： fs.createWriteStream(path[, options])</p><p><strong>参数</strong>说明：<br> path 文件路径<br> options 选项配置（ 可选 ）</p><p><strong>返回值</strong>： Object</p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./读后感.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;哈哈\\r\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;嘿嘿\\r\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;吼吼\\r\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;呵呵\\r\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ws在js执行完毕后自动关闭，可视情况不写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序打开一个文件是需要消耗资源的 ，流式写入可以<strong>减少打开关闭文件的次数</strong>。<br><strong>流式写入</strong>方式 <strong>适用于大文件写入或者频繁写入</strong> 的场景, writeFile 适合于写入频率较低的场景</p><h3 id="_4-2、文件读取" tabindex="-1"><a class="header-anchor" href="#_4-2、文件读取" aria-hidden="true">#</a> 4.2、文件读取</h3><p>通过程序从文件中取出其中的数据，有如下几种方式：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>readFile()</td><td>异步读取</td></tr><tr><td>readFileSync()</td><td>同步读取</td></tr><tr><td>createReadStream()</td><td>流式读取</td></tr></tbody></table><h4 id="_4-2-1、readfile-异步读取" tabindex="-1"><a class="header-anchor" href="#_4-2-1、readfile-异步读取" aria-hidden="true">#</a> 4.2.1、readFile 异步读取</h4><p><strong>语法</strong>： fs.readFile(path[, options], callback)</p><p><strong>参数</strong>说明：<br> path 文件路径<br> options 选项配置<br> callback 回调函数</p><p><strong>返回值</strong>： undefined</p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//导入 fs 模块</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./A.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//err 错误信息 //data 读取的数据</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./A.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2、readfilesync-同步读取" tabindex="-1"><a class="header-anchor" href="#_4-2-2、readfilesync-同步读取" aria-hidden="true">#</a> 4.2.2、readFileSync 同步读取</h4><p><strong>语法</strong>： fs.readFileSync(path[, options])</p><p><strong>参数</strong>说明：<br> path 文件路径<br> options 选项配置</p><p><strong>返回值</strong>： string | Buffer</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./A.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> data2 <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./A.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3、createreadstream-流式读取" tabindex="-1"><a class="header-anchor" href="#_4-2-3、createreadstream-流式读取" aria-hidden="true">#</a> 4.2.3、createReadStream 流式读取</h4><p>流式读取 为 <strong>一块一块读取</strong><br> 每次从文件中读取数据 <strong>64K</strong></p><p><strong>语法</strong>： fs.createReadStream(path[, options])</p><p><strong>参数</strong>说明：<br> path 文件路径<br> options 选项配置（ 可选 ）</p><p><strong>返回值</strong>： Object</p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;../AAA.mp4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//data事件</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//chunk 块，大块</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//console.log(chunk.toString());</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//end 可选事件</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取完成&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、复制文件" tabindex="-1"><a class="header-anchor" href="#_4-3、复制文件" aria-hidden="true">#</a> 4.3、复制文件</h3><p>方式一：readFile</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式一：readFile</span>
fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;../test.mp4&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 读取</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;../new File.mp4&#39;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：流式操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式二：流式操作</span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;../test.mp4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建读取流</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;../new File2.mp4&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 创建写入流</span>
<span class="token comment">// 绑定 data 事件</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式三：pip（不常用）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;../test.mp4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建读取流</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;../new File3.mp4&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 创建写入流</span>
rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4、文件移动与重命名" tabindex="-1"><a class="header-anchor" href="#_4-4、文件移动与重命名" aria-hidden="true">#</a> 4.4、文件移动与重命名</h3><p>在 Node.js 中，我们可以使用 <strong>rename</strong> 或 <strong>renameSync</strong> 来移动或<strong>重命名 文件或文件夹</strong></p><p><strong>语法</strong>：<br> fs.rename(oldPath, newPath, callback)<br> fs.renameSync(oldPath, newPath)</p><p><strong>参数</strong>说明：<br> oldPath 文件当前的路径<br> newPath 文件新的路径（可以用于移动文件）<br> callback 操作后的回调</p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;../b.txt&#39;</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5、文件删除" tabindex="-1"><a class="header-anchor" href="#_4-5、文件删除" aria-hidden="true">#</a> 4.5、文件删除</h3><p>在 Node.js 中，我们可以使用 <strong>unlink</strong> 或 <strong>unlinkSync</strong> 或 <strong>rm</strong> 来删除文件</p><p><strong>语法</strong>：<br> fs.unlink(path, callback)<br> fs.unlinkSync(path)<br> fs.rm(path,callback)</p><p><strong>参数</strong>说明：<br> path 文件路径<br> callback 操作后的回调</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// rm 方法</span>
fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6、文件夹操作" tabindex="-1"><a class="header-anchor" href="#_4-6、文件夹操作" aria-hidden="true">#</a> 4.6、文件夹操作</h3><p>借助 Node.js 的能力，我们可以对文件夹进行 <strong>创建 、 读取 、 删除</strong> 等操作</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>mkdir / mkdirSync</td><td>创建文件夹</td></tr><tr><td>readdir / readdirSync</td><td>读取文件夹</td></tr><tr><td>rmdir / rmdirSync</td><td>删除文件夹</td></tr></tbody></table><h4 id="_4-6-1、mkdir-创建文件夹" tabindex="-1"><a class="header-anchor" href="#_4-6-1、mkdir-创建文件夹" aria-hidden="true">#</a> 4.6.1、mkdir 创建文件夹</h4><p>在 Node.js 中，我们可以使用 <strong>mkdir</strong> 或 <strong>mkdirSync</strong> 来创建文件夹</p><p><strong>语法</strong>：<br> fs.mkdir(path[, options], callback)<br> fs.mkdirSync(path[, options])</p><p>参数说明：<br> path 文件夹路径<br> options 选项配置（ 可选 ）<br> callback 操作后的回调</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;./html&#39;</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归创建：<br><strong>recursive:true</strong> 表示递归创建</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;./a/b/c&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-6-2、readdir-读取文件夹" tabindex="-1"><a class="header-anchor" href="#_4-6-2、readdir-读取文件夹" aria-hidden="true">#</a> 4.6.2、readdir 读取文件夹</h4><p>在 Node.js 中，我们可以使用 <strong>readdir</strong> 或 <strong>readdirSync</strong> 来读取文件夹</p><p><strong>语法</strong>：<br> fs.readdir(path[, options], callback)<br> fs.readdirSync(path[, options])</p><p><strong>参数</strong>说明：<br> path 文件夹路径<br> options 选项配置（ 可选 ）<br> callback 操作后的回调</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&#39;../资料&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//data为文件名数组</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-6-3、-rmdir-删除文件夹" tabindex="-1"><a class="header-anchor" href="#_4-6-3、-rmdir-删除文件夹" aria-hidden="true">#</a> 4.6.3、 rmdir 删除文件夹</h4><p>在 Node.js 中，我们可以使用 <strong>rm</strong> ， <strong>rmdir</strong> 或 <strong>rmdirSync</strong> 来删除文件夹</p><p><strong>语法</strong>：<br> fs.rmdir(path[, options], callback)<br> fs.rmdirSync(path[, options])</p><p><strong>参数</strong>说明：<br> path 文件夹路径<br> options 选项配置（ 可选 ）<br> callback 操作后的回调</p><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">&#39;../资料&#39;</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归删除：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议使用 <strong>rm</strong> 方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-7、查看资源状态" tabindex="-1"><a class="header-anchor" href="#_4-7、查看资源状态" aria-hidden="true">#</a> 4.7、查看资源状态</h3><p>在 Node.js 中，我们可以使用 <strong>stat</strong> 或 <strong>statSync</strong> 来查看资源的详细信息</p><p><strong>语法</strong>：<br> fs.stat(path[, options], callback)<br> fs.statSync(path[, options])</p><p><strong>参数</strong>说明：<br> path 文件夹路径<br> options 选项配置（ 可选 ）<br> callback 操作后的回调</p><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">requier</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//stat 方法 status 状态缩写</span>
fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&#39;../a.mp4&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">consolelog</span><span class="token punctuation">(</span><span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>isFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8、-dirname" tabindex="-1"><a class="header-anchor" href="#_4-8、-dirname" aria-hidden="true">#</a> 4.8、__dirname</h3><p><strong>相对路径存在的问题：</strong><br> fs模块<strong>相对路径</strong>的<strong>参照</strong>为：<strong>命令行的工作目录</strong>，并非是文件的所在目录</p><p><strong>__dirname</strong> 与 <strong>require</strong> 类似，都是 Node.js 环境中的 <strong>&#39;全局变量&#39;</strong><br> __dirname 保存着 当前<strong>文件</strong>所在目录的<strong>绝对路径</strong> ，可以使用 __dirname 与文件名拼接成绝对路径</p><p>作用：通过 <strong>__dirname</strong> 拼接 绝对路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;love&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-9、批量重命名" tabindex="-1"><a class="header-anchor" href="#_4-9、批量重命名" aria-hidden="true">#</a> 4.9、批量重命名</h3><p>案例：批量重命名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入fs模块</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 读取 code 文件夹</span>
<span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//遍历数组</span>
files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拆分文件名</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token comment">// 判断</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> newName <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token comment">// 重命名</span>
    fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./code/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./code/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、path-模块" tabindex="-1"><a class="header-anchor" href="#_5、path-模块" aria-hidden="true">#</a> 5、path 模块</h2><p>path模块的导入：<strong>const path = require(&#39;path&#39;)</strong></p><p>path 模块提供了 操作路径 的功能，如下为几个较常用的API：</p><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径 常用</td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td></tr><tr><td>path.basename</td><td>获取路径的基础名称</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td></tr></tbody></table><p>为 <strong>规范化</strong> 绝对路径 （将路径中的斜线都改为 <code>/</code> ）可以使用 <strong>path.resolve</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 \\ </span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前文件的绝对路径</span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;E:\\\\Study\\\\Web前端\\\\3、Node.js\\\\代码练习\\\\index.html&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前文件夹下的文件名</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前所在文件夹路径</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取后缀名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、http-模块" tabindex="-1"><a class="header-anchor" href="#_6、http-模块" aria-hidden="true">#</a> 6、http 模块</h2><p>HTTP（hypertext transport protocol）协议；中文叫超文本传输协议<br> 是一种基于TCP/IP的应用层通信协议<br> 这个协议详细规定了 浏览器 和万维网 服务器 之间互相通信的规则。</p><p>协议中主要规定了两个方面的内容<br> 客户端：用来向服务器发送数据，可以被称之为<strong>请求报文</strong><br> 服务端：向客户端返回数据，可以被称之为<strong>响应报文</strong></p><h3 id="_6-1、请求报文" tabindex="-1"><a class="header-anchor" href="#_6-1、请求报文" aria-hidden="true">#</a> 6.1、请求报文</h3><p>请求报文的组成：请求行、请求头、空行、请求体</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422090654.png" alt="" loading="lazy"></p><h4 id="_6-1-1、请求行" tabindex="-1"><a class="header-anchor" href="#_6-1-1、请求行" aria-hidden="true">#</a> 6.1.1、请求行</h4><p>请求行的组成：<br> 请求方法（get、post、put、delete等），请求URL（统一资源定位器）</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422090923.png" alt="" loading="lazy"></p><h4 id="_6-1-2、请求头" tabindex="-1"><a class="header-anchor" href="#_6-1-2、请求头" aria-hidden="true">#</a> 6.1.2、请求头</h4><p>请求头为<strong>键值对</strong>类型</p><p>格式：『头名：头值』</p><p>常见的请求头有：</p><table><thead><tr><th>请求头</th><th>解释</th></tr></thead><tbody><tr><td>Host</td><td>主机名</td></tr><tr><td>Connection</td><td>连接的设置 keep-alive（保持连接）；close（关闭连接）</td></tr><tr><td>Cache-Control</td><td>缓存控制 max-age = 0 （没有缓存）</td></tr><tr><td>Upgrade Insecure Requests</td><td>将网页中的http请求转化为https请求（很少用）老网站升级</td></tr><tr><td>User-Agent</td><td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自 哪个客户端 ，一般在PC端和手机端的区分</td></tr><tr><td>Accept</td><td>设置浏览器接收的数据类型</td></tr><tr><td>Accept-Encoding</td><td>设置接收的压缩方式</td></tr><tr><td>Accept Language</td><td>设置接收的语言 q=0.7 为喜好系数，满分为1</td></tr><tr><td>Cookie</td><td>cookie</td></tr></tbody></table><h4 id="_6-1-3、请求体" tabindex="-1"><a class="header-anchor" href="#_6-1-3、请求体" aria-hidden="true">#</a> 6.1.3、请求体</h4><p>请求体内容的格式是非常灵活的，</p><p>（可以是空）=&gt; GET请求，<br> （也可以是字符串，还可以是JSON）=&gt; POST请求</p><h3 id="_6-2、响应报文" tabindex="-1"><a class="header-anchor" href="#_6-2、响应报文" aria-hidden="true">#</a> 6.2、响应报文</h3><p>响应报文组成：</p><p>响应行：<br> HTTP协议版本号 、状态码、响应状态描述 <code>例如 HTTP/1.1 200 OK </code><br> 响应状态码和响应字符串关系是一一对应的。</p><p>响应头</p><p>空行</p><p>响应体:<br> 响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON</p><h3 id="_6-3、创建-http-服务" tabindex="-1"><a class="header-anchor" href="#_6-3、创建-http-服务" aria-hidden="true">#</a> 6.3、创建 HTTP 服务</h3><p>使用 nodejs 创建 HTTP 服务</p><p>操作步骤：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2.创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello HTTP Server&#39;</span><span class="token punctuation">)</span> <span class="token comment">//设置响应体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">// 3监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sever start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>http.createServer 里的回调函数的执行时机： 当接收到 HTTP 请求的时候，就会执行</p></blockquote><p>使用浏览器访问：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422095002.png" alt="" loading="lazy"></p><p>停止服务的方式：<strong>ctrl+c</strong></p><p>响应内容<strong>中文乱码</strong>的<strong>解决办法</strong> ：response.setHeader(&#39;content-type&#39;,&#39;text/html;charset=utf-8&#39;);</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 2.创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;text/html;charset=utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello HTTP Server&#39;</span><span class="token punctuation">)</span> <span class="token comment">//设置响应体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443, HTTP 服务开发常用端口有 3000，8080，8090，9000 等<br> 端口号被占用 的报错：Error: listen EADDRINUSE: address already in use :::9000</p><p>如果端口被其他程序占用，可以使用 资源监视器 找到占用端口的程序，然后使用 任务管理器 关闭对应的程序</p><h3 id="_6-4、查看-http-报文" tabindex="-1"><a class="header-anchor" href="#_6-4、查看-http-报文" aria-hidden="true">#</a> 6.4、查看 HTTP 报文</h3><p>查看请求行，请求头</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422101448.png" alt="" loading="lazy"></p><p>查看请求体</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422101526.png" alt="" loading="lazy"></p><p>查看响应行，响应头</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422101053.png" alt="" loading="lazy"></p><p>查看响应体</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422101148.png" alt="" loading="lazy"></p><h3 id="_6-5、获取-http-请求报文" tabindex="-1"><a class="header-anchor" href="#_6-5、获取-http-请求报文" aria-hidden="true">#</a> 6.5、获取 HTTP 请求报文</h3><p>想要获取请求的数据，需要通过 <strong>request</strong> 对象</p><table><thead><tr><th>含义</th><th>语法</th></tr></thead><tbody><tr><td><strong>请求方法</strong></td><td><strong>request.method</strong></td></tr><tr><td>请求版本</td><td>request.httpVersion</td></tr><tr><td><strong>请求路径</strong></td><td><strong>request.url</strong></td></tr><tr><td><strong>URL 路径</strong></td><td><strong>require(&#39;url&#39;).parse(request.url).pathname</strong></td></tr><tr><td><strong>URL 查询字符串</strong></td><td><strong>require(&#39;url&#39;).parse(request.url, true).query</strong></td></tr><tr><td><strong>请求头</strong></td><td><strong>request.headers</strong></td></tr><tr><td>请求体</td><td>request.on(&#39;data&#39;, function(chunk){}) request.on(&#39;end&#39;, function(){});</td></tr></tbody></table><p>注意：</p><p>1、<strong>request.url</strong> 只能获取<strong>路径以及查询字符串</strong>，无法获取 URL 中的域名以及协议的内容（如 <code>/search?name=A</code>）<br> 2、 <strong>request.headers</strong> 将请求信息转化成一个<strong>对象</strong>，并将<strong>属性名</strong>都转化成了『<strong>小写</strong>』<br> 3、favicon.ico：这个请求是属于浏览器自动发送的请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2.创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取请求的方法</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取请求的url</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只包含url中的路径与查询字符串</span>
    <span class="token comment">//获取http协议的版本号</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>httpVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取http请求头</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>

    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">//设置响应体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">// 3监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sever start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-5-1、提取请求体" tabindex="-1"><a class="header-anchor" href="#_6-5-1、提取请求体" aria-hidden="true">#</a> 6.5.1、提取请求体</h4><p>请求为POST才有请求体，GET没有请求体</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2.创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1、声明一个变量</span>
    <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 2、绑定data事件</span>
    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        body <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 3、绑定and事件</span>
    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">//响应</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello HTTP&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">// 3.监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sever start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-5-2、获取请求路径和查询字符串" tabindex="-1"><a class="header-anchor" href="#_6-5-2、获取请求路径和查询字符串" aria-hidden="true">#</a> 6.5.2、获取请求路径和查询字符串</h4><p>方式一：</p><p>const res = <strong>url.parse(request.url,true)</strong><br> 该方法用于解析request.url （<code>比如解析/search?name=A</code>）<br> 第二个参数用于将返回结果 res 的 <strong>query</strong> 属性设置为对象<br> 参数二默认为 false ，query对象为数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 1、导入url模块</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>resqonse</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token comment">//console.log(request.url); --&gt; /search?name=A /favicon.ico</span>

    <span class="token comment">// 2、解析url模块</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//解析request.url</span>
    <span class="token comment">// url路径</span>
    <span class="token keyword">let</span> pathname <span class="token operator">=</span> res<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span> <span class="token comment">// --&gt; /search /favicon.ico</span>
    <span class="token comment">//查询字符串</span>
    <span class="token keyword">let</span> name <span class="token operator">=</span> res<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token comment">//console.log(name); // A undefined</span>

    resqonse<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sever start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><p>实例化 UR L对象 url<br> 通过 url 的 <strong>pathname</strong> 属性 和 <strong>searchParams.get()</strong> 方法 获取请求路径和查询字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实例化URL对象</span>
    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token string">&#39;http://17.0.0.1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//补全url</span>
    <span class="token comment">//输出路径</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输出查询字符串</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;url new&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-5-3、练习-获取请求报文" tabindex="-1"><a class="header-anchor" href="#_6-5-3、练习-获取请求报文" aria-hidden="true">#</a> 6.5.3、练习：获取请求报文</h4><table><thead><tr><th>请求类型(方法)</th><th>请求地址</th><th>响应体结果</th></tr></thead><tbody><tr><td>get</td><td>/login</td><td>登录页面</td></tr><tr><td>get</td><td>/reg</td><td>注册页面</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入http模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//创建server对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取请求和url</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>method<span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>pathname<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token string">&#39;http://127.0.0.1&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判断</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">&amp;&amp;</span> pathname <span class="token operator">==</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//注意GET大写</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;登录页面&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">&amp;&amp;</span> pathname <span class="token operator">==</span> <span class="token string">&#39;/reg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;注册页面&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-6、获取-http-响应报文" tabindex="-1"><a class="header-anchor" href="#_6-6、获取-http-响应报文" aria-hidden="true">#</a> 6.6、获取 HTTP 响应报文</h3><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td>response.statusCode</td></tr><tr><td>设置响应状态描述</td><td>response.statusMessage （ 用的非常少 ）</td></tr><tr><td>设置响应头信息</td><td>response.setHeader(&#39;头名&#39;, &#39;头值&#39;)</td></tr><tr><td>设置响应体</td><td>response.write(&#39;xx&#39;) response.end(&#39;xxx&#39;)</td></tr><tr><td>返回对 <code>ClientRequest</code> 的引用</td><td>response.end(字符串 或 <strong>buffer</strong>)</td></tr></tbody></table><p>注意：setHeader() 可以<strong>多次调用</strong>，使用了该方法一般不在 end() 方法中写值，end() 方法只能<strong>调用一次</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入http模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1、设置响应状态代码</span>
    response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token comment">// 2、响应状态的描述</span>
    response<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> <span class="token string">&#39;love&#39;</span>
    <span class="token comment">// 3、添加响应头</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;text/html;charset=utf-8&#39;</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Server&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Node.js&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 3.1 设置多个同名的响应头</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">//4、设置响应体，write可以多次调用</span>
    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;love&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//如果用write设置了响应体，一般end中就不写了</span>
    <span class="token comment">//注：response.end() 方法只能调用一次</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="响应文件内容" tabindex="-1"><a class="header-anchor" href="#响应文件内容" aria-hidden="true">#</a> 响应文件内容</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入http模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/table.html&#39;</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment">//end中的参数可以是字符串，也可以是buffer</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：网页资源加载的基本过程：浏览器向服务器先发送访问 html 的请求，解析 html 文件中的其他文件，发送的请求包括请求 css，js，图片等等，这些请求许多是并行的。</p></blockquote><h4 id="实现网页引入外部资源" tabindex="-1"><a class="header-anchor" href="#实现网页引入外部资源" aria-hidden="true">#</a> 实现网页引入外部资源</h4><p>根据不同的请求路径，获取不同的文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入http模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据不同的请求路径，获取不同的文件</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>pathname<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token string">&#39;http://127.0.0.1&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/table.html&#39;</span><span class="token punctuation">)</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment">//end中的参数可以是字符串，也可以是buffer</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">&#39;/table.css&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> css <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/table.css&#39;</span><span class="token punctuation">)</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">&#39;/table.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> js <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/table.js&#39;</span><span class="token punctuation">)</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码仍然存在麻烦的问题<br> 因此引入静态资源服务</p><h3 id="_6-7、静态资源服务" tabindex="-1"><a class="header-anchor" href="#_6-7、静态资源服务" aria-hidden="true">#</a> 6.7、静态资源服务</h3><p>静态资源：图片，视频，css，js，html文件，字体文件<br> 动态资源：内容常更新的资源，例如列表搜索页面等</p><h4 id="_6-7-1、网站根目录或静态资源目录" tabindex="-1"><a class="header-anchor" href="#_6-7-1、网站根目录或静态资源目录" aria-hidden="true">#</a> 6.7.1、网站根目录或静态资源目录</h4><p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 <strong>静态资源目录</strong> ，也称之为网站 <strong>根目录</strong></p><p>vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是vs打开的当前目录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入http模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取请求url路径</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>pathname<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token string">&#39;http://127.0.0.1&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 拼接文件路径</span>
    <span class="token keyword">let</span> filePath<span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/page&#39;</span> <span class="token operator">+</span> pathname<span class="token punctuation">;</span> <span class="token comment">//静态资源全部存放在page下</span>
    <span class="token comment">// 读取文件 fs异步API</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
            response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;文件读取失败&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 响应文件内容</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 NOT FOUND&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-8、网页中的url" tabindex="-1"><a class="header-anchor" href="#_6-8、网页中的url" aria-hidden="true">#</a> 6.8、网页中的URL</h3><p>网页中的 URL 主要分为两大类：相对路径与绝对路径</p><h4 id="_6-8-1-绝对路径" tabindex="-1"><a class="header-anchor" href="#_6-8-1-绝对路径" aria-hidden="true">#</a> 6.8.1 绝对路径</h4><p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p>`,233),g=n("thead",null,[n("tr",null,[n("th",null,"形式"),n("th",null,"特点")])],-1),b={href:"http://bilibli.com/web",target:"_blank",rel:"noopener noreferrer"},h=n("td",null,"直接向目标资源发送请求，容易理解。网站的外链会用到此形式",-1),f={href:"//bilibili.com/web",target:"_blank",rel:"noopener noreferrer"},_=n("td",null,"与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多",-1),y=n("tr",null,[n("td",null,[n("strong",null,"/web")]),n("td",null,[s("与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小 型网站（"),n("strong",null,"常用"),s("，方便在修改域名时防止大规模修改代码url）")])],-1),x=n("h4",{id:"_6-8-2-相对路径",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-8-2-相对路径","aria-hidden":"true"},"#"),s(" 6.8.2 相对路径")],-1),j=n("strong",null,"与当前页面 URL",-1),w=n("strong",null,"计算",-1),q=n("br",null,null,-1),S={href:"http://www.bilibili.com/course/h5.html",target:"_blank",rel:"noopener noreferrer"},T=n("thead",null,[n("tr",null,[n("th",null,"形式"),n("th",null,"最终的 URL")])],-1),P=n("td",null,"./css/app.css",-1),B={href:"http://www.bilibili.com/course/css/app.css",target:"_blank",rel:"noopener noreferrer"},N=n("td",null,"js/app.js",-1),F={href:"http://www.bilibili.com/course/js/app.js",target:"_blank",rel:"noopener noreferrer"},A=n("td",null,"../img/logo.png",-1),I={href:"http://www.bilibili.com/img/logo.png",target:"_blank",rel:"noopener noreferrer"},R=n("td",null,"../../mp4/show.mp4",-1),H={href:"http://www.bilibili.com/mp4/show.mp4",target:"_blank",rel:"noopener noreferrer"},E=p(`<p>网页中使用 URL ：a 标签 href、link 标签 href、script 标签 src、img 标签 src、video audio 标签 src、form 中的 action、AJAX 请求中的 URL 等</p><h3 id="_6-9、设置资源类型-mime类型" tabindex="-1"><a class="header-anchor" href="#_6-9、设置资源类型-mime类型" aria-hidden="true">#</a> 6.9、设置资源类型 （MIME类型）</h3><p>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mime 类型结构： [type]/[subType]
例如： text/html text/css image/jpeg image/png application/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP 服务可以<strong>设置响应头</strong> <strong>Content-Type</strong> 来表明响应体的 <strong>MIME 类型</strong>，浏览器会根据该类型决定如何处理资源</p><p>下面是常见文件对应的 mime 类型<br> 可以根据请求文件路径<strong>后缀名</strong>获取对应类型（便于规范）（如果获取不到可选application/octet-stream类型）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>html<span class="token operator">:</span> &#39;text/html&#39;<span class="token punctuation">,</span>
css<span class="token operator">:</span> &#39;text/css&#39;<span class="token punctuation">,</span>
js<span class="token operator">:</span> &#39;text/javascript&#39;<span class="token punctuation">,</span>
png<span class="token operator">:</span> &#39;image/png&#39;<span class="token punctuation">,</span>
jpg<span class="token operator">:</span> &#39;image/jpeg&#39;<span class="token punctuation">,</span>
gif<span class="token operator">:</span> &#39;image/gif&#39;<span class="token punctuation">,</span>
mp4<span class="token operator">:</span> &#39;video/mp4&#39;<span class="token punctuation">,</span>
mp3<span class="token operator">:</span> &#39;audio/mpeg&#39;<span class="token punctuation">,</span>
json<span class="token operator">:</span> &#39;application/json&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对于未知的资源类型，可以选择 <strong>application/octet-stream</strong> 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 <strong>下载</strong> 效果</p></blockquote><p>解决乱码问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// type 为对应 mime 类型</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span>type <span class="token operator">+</span> <span class="token string">&#39;;charset=utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：响应头的字符集优先级大于 html 中的 meta 标签</p><p>网页字符集为utf-8，所以一般不需要设置字符集</p></blockquote><h2 id="_7、node-js-模块化" tabindex="-1"><a class="header-anchor" href="#_7、node-js-模块化" aria-hidden="true">#</a> 7、Node.js 模块化</h2><h3 id="_7-1、模块化介绍" tabindex="-1"><a class="header-anchor" href="#_7-1、模块化介绍" aria-hidden="true">#</a> 7.1、模块化介绍</h3><p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 <strong>模块化</strong><br> 其中拆分出的 <strong>每个文件就是一个模块</strong> ，模块的<strong>内部数据</strong>是<strong>私有</strong>的，不过模块可以<strong>暴露内部数据</strong>以便其他模块使用</p><p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p><p>模块化好处：防止命名冲突、高复用性、高维护性</p><h3 id="_7-2、模块暴露数据" tabindex="-1"><a class="header-anchor" href="#_7-2、模块暴露数据" aria-hidden="true">#</a> 7.2、模块暴露数据</h3><h4 id="_7-2-1、暴露数据" tabindex="-1"><a class="header-anchor" href="#_7-2-1、暴露数据" aria-hidden="true">#</a> 7.2.1、暴露数据</h4><p>模块暴露数据的方式有两种：</p>`,19),U=n("li",null,[n("strong",null,"module.exports = value")],-1),C={href:"http://exports.name",target:"_blank",rel:"noopener noreferrer"},L=p(`<p>注：<br> ① module.exports 可以暴露 <strong>任意</strong> 数据<br> ② 不能使用 exports = value 的形式暴露数据<br> 模块内部 module 与 exports 的隐式关系：<strong>exports = module.exports = {}</strong> ，<strong>require()</strong> 函数返回的是<strong>目标模块</strong>中 <strong>module.exports 的值</strong></p><p>exports 与 module.exports地址关系：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230423093420.png" alt="" loading="lazy"></p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// me.js</span>
<span class="token comment">// 声明函数</span>
<span class="token keyword">function</span> <span class="token function">tiemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;AAA....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//暴露数据</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> tiemo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token comment">// 导入模块</span>
<span class="token keyword">const</span> tiemo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./me.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用函数</span>
<span class="token function">tiemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3、require-函数" tabindex="-1"><a class="header-anchor" href="#_7-3、require-函数" aria-hidden="true">#</a> 7.3、require() 函数</h3><p>在模块中使用 <strong>require()</strong> 传入<strong>文件路径</strong>即可引入文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./filename.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>require 使用的一些注意事项：</p><ol><li>对于<strong>自己创建的模块</strong>，导入时路径建议写 <strong>相对路径</strong> ，且<strong>不能省略 ./ 和 ../</strong></li><li><strong>js</strong> 和 <strong>json</strong> 文件导入时可以<strong>不用写后缀</strong>，c/c++编写的 node 扩展文件也可以不写后缀，但是一般用不到</li><li>如果导入其他类型的文件，会以 <strong>js</strong> 文件进行处理</li><li>如果<strong>导入</strong>的路径是个<strong>文件夹</strong>，则会 <strong>首先</strong> 检测该文件夹下 <strong>package.json</strong> 文件中 <strong>main</strong> 属性<strong>对应的文件</strong>，如果存在则导入，反之如果文件不存在会报错。<br> 如果 main 属性<strong>不存在</strong>，或者 package.json 不存在，则会尝试<strong>导入</strong>文件夹下的 i<strong>ndex.js 和index.json</strong> ，如果还是没找到，就会报错</li><li>导入 <strong>node.js 内置模块</strong>时，直接 <strong>require</strong> <strong>模块</strong>的<strong>名</strong>字即可，<strong>无需加 ./ 和 ../</strong></li></ol><h3 id="_7-4、require-导入的基本流程" tabindex="-1"><a class="header-anchor" href="#_7-4、require-导入的基本流程" aria-hidden="true">#</a> 7.4、require 导入的基本流程</h3><p><strong>require</strong> 导入 <strong>自定义模块</strong> 的基本流程</p><ol><li>将相对路径转为绝对路径，定位目标文件</li><li>缓存检测</li><li>读取目标文件代码</li><li>将代码包裹为一个函数并执行（自执行函数）。可以通过 <strong>arguments.callee.toString()</strong> 查看自执行函数</li><li>缓存模块的值</li><li>返回 <strong>module.exports</strong> 的值</li></ol><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230423100033.png" alt="" loading="lazy"></p><h3 id="_7-5、-commonjs-规范" tabindex="-1"><a class="header-anchor" href="#_7-5、-commonjs-规范" aria-hidden="true">#</a> 7.5、 CommonJS 规范</h3><p>module.exports 、 exports 以及 require 这些都是 CommonJS 模块化规范中的内容。<br> 而 Node.js 是实现了 CommonJS 模块化规范，二者关系有点像 JavaScript 与 ECMAScript</p><h2 id="_8、npm-包管理工具" tabindex="-1"><a class="header-anchor" href="#_8、npm-包管理工具" aria-hidden="true">#</a> 8、npm 包管理工具</h2><p>『包』package ，代表了一组特定功能的源码集合</p><p>管理『包』的应用软件，可以对「包」进行 <strong>下载安装 ， 更新 ， 删除 ， 上传</strong> 等操作<br> 借助包管理工具，可以快速开发项目，提升开发效率<br> 包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 掌握好包管理工具非常重要</p><p>常用的包管理工具：<strong>npm</strong>、yarn、cnpm</p><p>npm 全称 <strong>Node Package Manager</strong> ，翻译为中文意思是Node 的包管理工具<br> npm 是 node.js 官方内置的包管理工具，是 必须要掌握住的工具</p><h3 id="_8-1、npm-的安装" tabindex="-1"><a class="header-anchor" href="#_8-1、npm-的安装" aria-hidden="true">#</a> 8.1、npm 的安装</h3><p>node.js 在安装时会 自动安装 npm ，安装了 node.js，可以直接使用 npm<br> 在 cmd 通过 <strong>npm -v</strong> 查看版本号测试，如果显示版本号说明安装成功</p><h3 id="_8-2、npm-初始化" tabindex="-1"><a class="header-anchor" href="#_8-2、npm-初始化" aria-hidden="true">#</a> 8.2、npm 初始化</h3><p>创建一个空目录，然后以此目录作为工作目录 启动命令行工具 ，执行 <strong>npm init</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230423101809069.png" alt="image-20230423101809069" loading="lazy"></p><p>输入一些值（没有直接回车，括号中的为默认）</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230423102006.png" alt="" loading="lazy"></p><p><strong>npm init</strong> 命令的作用是将文件夹初始化为一个包， 交互式创建 <strong>package.json</strong> 文件<br> package.json 是包的配置文件，<strong>每个包都必须要有 package.json</strong></p><p>初始化的过程中还有一些<strong>注意事项</strong>：</p>`,30),J=n("li",null,[n("strong",null,"package name"),s(" ( 包名 ) "),n("strong",null,"不能使用中文、大写"),s("，默认值是 文件夹的名称 ，所以文件夹名称也不能使用中文和大写")],-1),M=n("li",null,"version ( 版本号 )要求 x.x.x 的形式定义， x 必须是数字，默认值是 1.0.0",-1),z={href:"http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html",target:"_blank",rel:"noopener noreferrer"},O=n("li",null,"package.json 可以手动创建与修改",-1),D=n("li",null,"使用 npm init -y 或者 npm init --yes 极速创建 package.json",-1),W=p(`<p>package.json 讲解：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
<span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1-npm&quot;</span><span class="token punctuation">,</span> #包的名字
<span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span> #包的版本
<span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> #包的描述
<span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span> #包的入口文件
<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> #脚本配置
<span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token string-property property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> #作者
<span class="token string-property property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span> #开源证书
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3、npm-搜索包" tabindex="-1"><a class="header-anchor" href="#_8-3、npm-搜索包" aria-hidden="true">#</a> 8.3、npm 搜索包</h3><p>搜索包的方式有两种</p>`,4),V=n("li",null,[s("命令行 "),n("strong",null,"npm s/search"),s(" 关键字")],-1),G={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},K=p(`<h3 id="_8-4、npm-下载包" tabindex="-1"><a class="header-anchor" href="#_8-4、npm-下载包" aria-hidden="true">#</a> 8.4、npm 下载包</h3><p>可以通过 <strong>npm install</strong> 和 <strong>npm i</strong> 命令安装包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 格式</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span>
<span class="token comment">## 示例</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token function">uniq</span>
<span class="token function">npm</span> i <span class="token function">uniq</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载包之后会增加两个资源：<br><strong>node_modules</strong> 文件夹 存放 <strong>下载的包</strong><br><strong>package-lock.json</strong> 包的锁文件 ，用来<strong>锁定包的版本</strong></p><p>依赖的概念：<br> 创建一个包名字为 A，A 中安装了包名字是 B，我们就说 B 是 A 的一个依赖包，也会说A 依赖 B</p><h3 id="_8-5、npm-包使用" tabindex="-1"><a class="header-anchor" href="#_8-5、npm-包使用" aria-hidden="true">#</a> 8.5、npm 包使用</h3><p>通过 <strong>require</strong> 导入 npm 包</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、导入 uniq 包</span>
<span class="token keyword">const</span> uniq <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;uniq&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>require</strong> 导入 npm 包<strong>基本流程</strong>：<br> ① 在当前文件夹下 node_modules 中寻找同名的文件夹<br> ② 在上级目录中下的 node_modules 中寻找同名的文件夹，直至找到磁盘根目录</p><h3 id="_8-6、-生产依赖与开发依赖" tabindex="-1"><a class="header-anchor" href="#_8-6、-生产依赖与开发依赖" aria-hidden="true">#</a> 8.6、 生产依赖与开发依赖</h3><p>生产环境与开发环境 对应 生产依赖与开发依赖</p><p>可以在安装时设置选项来 <strong>区分依赖的类型</strong> ，目前分为两类：</p><table><thead><tr><th>类型</th><th>命令</th><th>补充</th></tr></thead><tbody><tr><td><strong>生产</strong>依赖</td><td>npm i -S uniq npm i --save uniq</td><td>-S 等效于 --save， -S 是<strong>默认选项</strong> 包信息保存在 package.json 中 <strong>dependencies</strong> 属性下</td></tr><tr><td><strong>开发</strong>依赖</td><td>npm i -D less npm i --save-dev less</td><td>-D 等效于 --save-dev 包信息保存在 package.json 中 <strong>devDependencies</strong> 属性下</td></tr></tbody></table><p>开发依赖 是只在开发阶段使用的依赖包 -D<br> 生产依赖 是开发阶段和最终上线运行阶段都用到的依赖包 -S（默认选项）</p><h3 id="_8-7、npm-全局安装" tabindex="-1"><a class="header-anchor" href="#_8-7、npm-全局安装" aria-hidden="true">#</a> 8.7、npm 全局安装</h3><p>可以执行安装选项 <strong>npm i -g 包名</strong> 进行全局安装</p><p>安装 <strong>nodemon</strong> 包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> nodemon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nodemon 该命令的作用是 <strong>自动重启 node 应用程序</strong> （文件保存后自动重启）<br> 全局安装后可以在命令行的任何位置运行 nodemon 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nodemon .<span class="token punctuation">\\</span>httptest.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>全局安装的命令不受工作目录位置影响<br> 可以通过 <strong>npm root -g</strong> 可以查看<strong>全局安装包的位置</strong><br> 不是所有的包都适合全局安装 ， 只有全局类的工具才适合，可以通过 查看包的官方文档来确定安装方式</p><blockquote><p>注：windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略：<br> ① 以管理员身份打开PowerShell<br> ② 键入命令 set-ExecutionPolicy remoteSigned<br> ③ 键入 A 然后敲回车<br> ④ 重启 vscode</p><p>方法二：修改默认配置文件，使用cmd运行<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230423111538.png" alt="" loading="lazy"></p></blockquote><h3 id="_8-8、npm-安装包所有依赖" tabindex="-1"><a class="header-anchor" href="#_8-8、npm-安装包所有依赖" aria-hidden="true">#</a> 8.8、npm 安装包所有依赖</h3><p>在项目协作中有一个常用的命令就是 <strong>npm i</strong> ，通过该命令可以<strong>依据</strong> <strong>package.json</strong> 和 <strong>packagelock.json</strong> 的依赖声明安装项目依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i
<span class="token function">npm</span> <span class="token function">install</span> <span class="token comment">#效果一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>node_modules 文件夹大多数情况都不会存入版本库 （文件大，数量多）</p><h3 id="_8-9、npm-安装指定版本包" tabindex="-1"><a class="header-anchor" href="#_8-9、npm-安装指定版本包" aria-hidden="true">#</a> 8.9、npm 安装指定版本包</h3><p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">### 格式</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>包名@版本号<span class="token operator">&gt;</span>
<span class="token comment">### 示例</span>
<span class="token function">npm</span> i jquery@1.11.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-10、npm-删除包" tabindex="-1"><a class="header-anchor" href="#_8-10、npm-删除包" aria-hidden="true">#</a> 8.10、npm 删除包</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">### 局部删除</span>
<span class="token function">npm</span> remove <span class="token function">uniq</span>
<span class="token function">npm</span> r <span class="token function">uniq</span>
<span class="token comment">### 全局删除</span>
<span class="token function">npm</span> remove <span class="token parameter variable">-g</span> nodemon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-11、npm-配置命令别名" tabindex="-1"><a class="header-anchor" href="#_8-11、npm-配置命令别名" aria-hidden="true">#</a> 8.11、npm 配置命令别名</h3><p>通过配置命令别名可以更简单的执行命令<br> 配置 package.json 中的 <strong>scripts</strong> 属性<br> 配置完成后，可以使用 <strong>npm run 别名</strong> 执行别名</p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> 
	<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&quot;server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node server.js&quot;</span><span class="token punctuation">,</span>
		<span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node index.js&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span> <span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用别名执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run server
<span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过 <strong>start</strong> 别名比较特别，使用时可以省略 run</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>npm start</strong> 是项目中常用的一个命令，一般用来启动项目<br><strong>npm run</strong> 有自动向上级目录查找的特性，跟 require 函数也一样<br> 对于陌生的项目，我们可以通过查看 <strong>scripts</strong> 属性来参考项目的一些操作</p><h3 id="_8-12、npm-配置淘宝镜像" tabindex="-1"><a class="header-anchor" href="#_8-12、npm-配置淘宝镜像" aria-hidden="true">#</a> 8.12、npm 配置淘宝镜像</h3><p>方式一：直接配置</p><p>​ 执行如下命令即可完成配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：工具配置（推荐）</p><p>​ 使用 <strong>nrm</strong> 配置 npm 的镜像地址 （nrm：<strong>npm registry manager</strong>）：</p><p>​ ① 安装nrm：<br> （最新的open版本变成了ES Module版本）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> nrm open@8.4.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ ② 修改镜像 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nrm use taobao
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ ③ 检查是否配置成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,52),$={href:"https://registry.npmmirror.com/",target:"_blank",rel:"noopener noreferrer"},X=n("p",null,"建议使用第二种方式 进行镜像配置，因为后续修改起来会比较方便",-1),Q=n("h2",{id:"_9、cnpm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9、cnpm","aria-hidden":"true"},"#"),s(" 9、cnpm")],-1),Y=n("h3",{id:"_9-1、介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-1、介绍","aria-hidden":"true"},"#"),s(" 9.1、介绍")],-1),Z={href:"http://npmjs.com",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://npmmirror.com/",target:"_blank",rel:"noopener noreferrer"},sn=n("br",null,null,-1),an=n("br",null,null,-1),tn=n("strong",null,"cnpm",-1),pn=p(`<h3 id="_9-2、安装" tabindex="-1"><a class="header-anchor" href="#_9-2、安装" aria-hidden="true">#</a> 9.2、安装</h3><p>可以通过 npm 来安装 cnpm 工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npmmirror.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-3、命令" tabindex="-1"><a class="header-anchor" href="#_9-3、命令" aria-hidden="true">#</a> 9.3、命令</h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td>cnpm init</td></tr><tr><td>安装包</td><td>cnpm i uniq<br>cnpm i -S uniq<br> cnpm i -D uniq <br>cnpm i -g nodemon</td></tr><tr><td>安装项目依赖</td><td>cnpm i</td></tr><tr><td>删除</td><td>cnpm r uniq</td></tr></tbody></table><p>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 npm 的使用率还是高于 cnpm</p><h2 id="_10、yarn" tabindex="-1"><a class="header-anchor" href="#_10、yarn" aria-hidden="true">#</a> 10、yarn</h2><h3 id="_10-1、yarn-介绍" tabindex="-1"><a class="header-anchor" href="#_10-1、yarn-介绍" aria-hidden="true">#</a> 10.1、yarn 介绍</h3>`,8),en={href:"https://yarnpkg.com/",target:"_blank",rel:"noopener noreferrer"},on=p(`<p>yarn 官方宣称的一些特点 ：<br> 速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快<br> 超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性<br> 超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的<br> 工作</p><h3 id="_10-2、yarn-安装" tabindex="-1"><a class="header-anchor" href="#_10-2、yarn-安装" aria-hidden="true">#</a> 10.2、yarn 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-3、yarn-常用命令" tabindex="-1"><a class="header-anchor" href="#_10-3、yarn-常用命令" aria-hidden="true">#</a> 10.3、yarn 常用命令</h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td>yarn init / yarn init -y</td></tr><tr><td>安装包</td><td>yarn add uniq 生产依赖 <br>yarn add less --dev 开发依赖 <br>yarn global add nodemon 全局安装</td></tr><tr><td>删除包</td><td>yarn remove uniq 删除项目依赖包 yarn global remove nodemon 全局删除包</td></tr><tr><td>安装项目依赖</td><td>yarn</td></tr><tr><td>运行命令别名</td><td>yarn &lt;别名&gt; # 不需要添加 run<br>(yarn start / yarn server)</td></tr></tbody></table><p>这里有个小问题就是 全局安装的包（ nodemon）不可用 ，yarn 全局安装包的位置可以通过 yarn global bin 来查看，将查看到的文件夹配置到环境变量即可解决问题</p><h3 id="_10-4、yarn-配置淘宝镜像" tabindex="-1"><a class="header-anchor" href="#_10-4、yarn-配置淘宝镜像" aria-hidden="true">#</a> 10.4、yarn 配置淘宝镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 <strong>yarn config list</strong> 查看 yarn 的配置项</p><h3 id="_10-5、npm-和-yarn-选择" tabindex="-1"><a class="header-anchor" href="#_10-5、npm-和-yarn-选择" aria-hidden="true">#</a> 10.5、npm 和 yarn 选择</h3><p>哪个工具都可以</p><p>他人的项目可以通过<strong>锁文件</strong>判断 项目的包管理工具</p><p>npm 的锁文件为 package-lock.json<br> yarn 的锁文件为 yarn.lock</p><p>包管理工具 <strong>不要混着用</strong>，切记，切记，切记</p><h2 id="_11、nvm" tabindex="-1"><a class="header-anchor" href="#_11、nvm" aria-hidden="true">#</a> 11、nvm</h2><p>nvm 全称 Node Version Manager 顾名思义它是用来管理 node 版本的工具，方便 <strong>切换不同版本的Node.js</strong></p><p>nvm 的使用非常的简单，跟 npm 的使用方法类似</p>`,17),cn={href:"https://github.com/coreybutler/nvm-windows/releases%EF%BC%8C",target:"_blank",rel:"noopener noreferrer"},ln=p('<p>nvm 常用命令（cmd下）：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>nvm list available</td><td>显示所有可以下载的 Node.js 版本</td></tr><tr><td>nvm list</td><td>显示已安装的版本</td></tr><tr><td>nvm install 18.12.1</td><td>安装 18.12.1 版本的 Node.js</td></tr><tr><td>nvm install latest</td><td>安装最新版的 Node.js</td></tr><tr><td>nvm uninstall 18.12.1</td><td>删除某个版本的 Node.js</td></tr><tr><td>nvm use 18.12.1</td><td>切换 18.12.1 的 Node.js</td></tr></tbody></table><h2 id="_12、express-js" tabindex="-1"><a class="header-anchor" href="#_12、express-js" aria-hidden="true">#</a> 12、Express JS</h2><h3 id="_12-1、express-介绍" tabindex="-1"><a class="header-anchor" href="#_12-1、express-介绍" aria-hidden="true">#</a> 12.1、express 介绍</h3>',4),un={href:"https://www.expressjs.com.cn/",target:"_blank",rel:"noopener noreferrer"},rn=n("br",null,null,-1),dn=n("strong",null,"封装好的工具包",-1),kn=n("strong",null,"开发 WEB 应用（HTTP 服务）",-1),mn=p(`<h3 id="_12-2、express-使用" tabindex="-1"><a class="header-anchor" href="#_12-2、express-使用" aria-hidden="true">#</a> 12.2、express 使用</h3><p>express 本身是一个 npm 包，所以可以通过 npm 安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init
<span class="token function">npm</span> i express
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. 导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. 创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 创建路由规则</span>
<span class="token comment">// 如果请求方式是get，url是 /home，则执行后面的回调函数</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello express server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4. 监听端口 启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动, 端口监听为 3000...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行下执行该脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>
<span class="token comment">## 或者</span>
nodemon <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),vn={href:"http://127.0.0.1:3000/home",target:"_blank",rel:"noopener noreferrer"},gn=p(`<h3 id="_12-3、express-路由" tabindex="-1"><a class="header-anchor" href="#_12-3、express-路由" aria-hidden="true">#</a> 12.3、express 路由</h3><p><strong>路由</strong>的概念：路由确定了<strong>应用程序（服务端）<strong>如何 <strong>响应客户端</strong> 对</strong>特定端点</strong>的请求</p><h4 id="_12-3-1、路由的使用" tabindex="-1"><a class="header-anchor" href="#_12-3-1、路由的使用" aria-hidden="true">#</a> 12.3.1、路由的使用</h4><p>一个路由的组成有 <strong>请求方法</strong> ， <strong>路径</strong> 和 <strong>回调函数</strong> 组成</p><p>express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token operator">&lt;</span>method<span class="token operator">&gt;</span><span class="token punctuation">(</span>path，callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建 get 路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;网站首页&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//首页路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;我才是真正的首页&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建 post 路由</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;登录成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//匹配所有的请求方法</span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&#39;/search&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;1 秒钟为您找到相关结果约 100,000,000 个&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//自定义 404 路由</span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//404路由</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//监听端口 启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动, 端口监听为 3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-3-2、获取请求参数" tabindex="-1"><a class="header-anchor" href="#_12-3-2、获取请求参数" aria-hidden="true">#</a> 12.3.2、获取请求参数</h4><p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取请求的路由规则</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//1. 获取报文的方式与原生 HTTP 获取方式是兼容的</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>httpVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2. express 独有的获取报文的方式</span>
    <span class="token comment">//获取查询字符串</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 『相对重要』</span>
    <span class="token comment">// 获取指定的请求头</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;host&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;请求报文的获取&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;启动成功....&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-3-3、获取路由参数" tabindex="-1"><a class="header-anchor" href="#_12-3-3、获取路由参数" aria-hidden="true">#</a> 12.3.3、获取路由参数</h4><p>路由参数指的是 <strong>URL 路径中的参数（数据）</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /1654616654.html -&gt; req.params.id = 1654616654</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/:id.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;商品详情, 商品 id 为&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-4、express-响应设置" tabindex="-1"><a class="header-anchor" href="#_12-4、express-响应设置" aria-hidden="true">#</a> 12.4、express 响应设置</h3><p>express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取请求的路由规则</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/response&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//res.setHeader(&#39;content-type&#39;,&#39;text/html;charset=utf-8&#39;);</span>
  
    <span class="token comment">// 方式一：</span>
    <span class="token comment">//1. express 中设置响应的方式兼容 HTTP 模块的方式</span>
    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;yyy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;设置响应体&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;+xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 方式二：</span>
    <span class="token comment">//2. express 的响应方法</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置响应状态码</span>
    res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;yyy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置响应头</span>
    <span class="token comment">//sent 方法自动添加字符集编码的响应头</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;中文响应不乱码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置响应体</span>
    
    <span class="token comment">//连贯操作</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;yyy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;你好朋友&#39;</span><span class="token punctuation">)</span>
    
    <span class="token comment">//3. 其他响应</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;http://atguigu.com&#39;</span><span class="token punctuation">)</span><span class="token comment">//重定向</span>
    res<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下载响应</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应 JSON</span>
    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/home.html&#39;</span><span class="token punctuation">)</span> <span class="token comment">//响应文件内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-5、express-中间件" tabindex="-1"><a class="header-anchor" href="#_12-5、express-中间件" aria-hidden="true">#</a> 12.5、express 中间件</h3><p>中间件（Middleware）本质是一个回调函数</p><p>中间件函数 可以像路由回调一样访问 请求对象（request） ， 响应对象（response）</p><p>中间件的作用 就是 <strong>使用函数封装公共操作，简化代码</strong></p><p>中间件的类型：全局中间件， 路由中间件</p><h4 id="_12-5-1、全局中间件" tabindex="-1"><a class="header-anchor" href="#_12-5-1、全局中间件" aria-hidden="true">#</a> 12.5.1、全局中间件</h4><p>（拦截）<strong>每一个请求</strong> 到达服务端之后 都会<strong>执行全局中间件函数</strong></p><p>声明全局中间件函数：<br> 函数： function(request,response,next) <code>（公共部分提取）</code><br> next：调用后续的路由回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">recordMiddleware</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//实现功能代码</span>
    <span class="token comment">//.....</span>
    <span class="token comment">//执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next)</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用中间件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>recordMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>声明时可以直接将匿名函数传递给 <strong>use</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定义第一个中间件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230425170744017.png" alt="image-20230425170744017" loading="lazy"></p><p>多个全局中间件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定义第一个中间件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定义第二个中间件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_15-2-2、路由中间件" tabindex="-1"><a class="header-anchor" href="#_15-2-2、路由中间件" aria-hidden="true">#</a> 15.2.2、路由中间件</h4><p>如果 只需要对某一些路由进行功能封装 ，则就需要路由中间件</p><p>调用格式如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">recordMiddleware1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//实现功能代码</span>
    <span class="token comment">//.....</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/路径&#39;</span><span class="token punctuation">,</span>recordMiddleware1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/路径&#39;</span><span class="token punctuation">,</span>中间件函数<span class="token number">1</span><span class="token punctuation">,</span>中间件函数<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_15-2-3、静态资源中间件" tabindex="-1"><a class="header-anchor" href="#_15-2-3、静态资源中间件" aria-hidden="true">#</a> 15.2.3、静态资源中间件</h4><p>express 内置处理静态资源的中间件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//引入express框架</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建服务对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//静态资源中间件的设置，将当前文件夹下的public目录作为网站的根目录</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;./public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当然这个目录中都是一些静态资源</span>


<span class="token comment">//如果访问的内容经常变化，还是需要设置路由</span>
<span class="token comment">//但是，在这里有一个问题，如果public目录下有index.html文件，单独也有index.html的路由，</span>
<span class="token comment">//则谁书写在前，优先执行谁</span>
<span class="token comment">//创建路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
respsonse<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//监听端口</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3000 端口启动....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：<br> index.html 文件为<strong>默认打开</strong>的资源<br> 如果静态资源与路由规则同时匹配，谁<strong>先</strong>匹配谁就响应<br><strong>路由</strong>响应<strong>动态资源</strong>，<strong>静态</strong>资源中间件响应<strong>静态资源</strong></p></blockquote><h3 id="_12-6、获取请求体数据-body-parser" tabindex="-1"><a class="header-anchor" href="#_12-6、获取请求体数据-body-parser" aria-hidden="true">#</a> 12.6、获取请求体数据 body-parser</h3><p>express 可以使用 <strong>body-parser</strong> 包处理请求体</p><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i body-parser  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导入 body-parser 包 ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取中间件函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//处理 querystring 格式的请求体</span>
<span class="token keyword">let</span> urlParser <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">extended</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//处理 JSON 格式的请求体</span>
<span class="token keyword">let</span> jsonParser <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置路由中间件，然后使用 <strong>request.body</strong> 来获取请求体数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> urlParser<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">//当urlParser中间件执行完毕后，自动为request添加body对象</span>
    <span class="token comment">//获取请求体数据</span>
    <span class="token comment">//用户名</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//密码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userpass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;获取请求体数据&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-7、防盗链实现" tabindex="-1"><a class="header-anchor" href="#_12-7、防盗链实现" aria-hidden="true">#</a> 12.7、防盗链实现</h3><p>防盗链：禁止其他网站访问非此域名下的资源（图片，css等）</p><p>防盗链实现：通过 请求头中 <strong>referer</strong>（参考页）判断是否为当前域名下的访问，如果不是返回404</p><p>实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 声明中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检测请求头中的 referer 是否为 127.0.0.1</span>
    <span class="token keyword">let</span> referer <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;referer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//console.log(referer);</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//实例化</span>
        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>referer<span class="token punctuation">)</span>
        <span class="token comment">//获取hostname</span>
        <span class="token keyword">let</span> hostname <span class="token operator">=</span> url<span class="token punctuation">.</span>hostname
        <span class="token comment">// console.log(hostname);</span>
        <span class="token comment">//判断</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hostname <span class="token operator">!==</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 NOT Found&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-8、router-路由模块化" tabindex="-1"><a class="header-anchor" href="#_12-8、router-路由模块化" aria-hidden="true">#</a> 12.8、Router 路由模块化</h3><p>express 中的 <strong>Router</strong> 是一个完整的中间件和路由系统，可以看做是一个<strong>小型的 app 对象</strong>。</p><p>Router 的作用：对路由进行模块化，更好的 <strong>管理路由</strong></p><p>使用案例：</p><p>创建独立的 JS 文件（homeRouter.js）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. 导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2. 创建路由器对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3. 在 router 对象身上添加路由</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/cart&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;购物车&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4. 暴露</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//5.引入子路由文件</span>
<span class="token keyword">const</span> homeRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/homeRouter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//6.设置和使用中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>homeRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3000 端口启动....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-9、express-generator工具" tabindex="-1"><a class="header-anchor" href="#_12-9、express-generator工具" aria-hidden="true">#</a> 12.9、express generator工具</h3>`,64),bn={href:"http://expressjs.com/en/starter/generator.html#express-application-generator",target:"_blank",rel:"noopener noreferrer"},hn=p(`<p>可以使用命令运行应用程序生成器<code>npx</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx express-generator
express <span class="token parameter variable">-e</span> accounts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>npm start 开启服务</p><h2 id="_13、接口" tabindex="-1"><a class="header-anchor" href="#_13、接口" aria-hidden="true">#</a> 13、接口</h2><h3 id="_13-1、介绍" tabindex="-1"><a class="header-anchor" href="#_13-1、介绍" aria-hidden="true">#</a> 13.1、介绍</h3><p>接口API (Application Program Interface) 是 前后端通信的桥梁 ，这里的接口指的是 <strong>数据接口</strong></p><p>一个接口就是 服务中的一个路由规则 ，根据请求响应结果</p><h3 id="_13-2、restful" tabindex="-1"><a class="header-anchor" href="#_13-2、restful" aria-hidden="true">#</a> 13.2、Restful</h3><p>RESTful API 是一种特殊风格的接口</p><p>规则示例：</p><table><thead><tr><th>操作</th><th>请求类型</th><th>URL</th><th>返回</th></tr></thead><tbody><tr><td>新增歌曲</td><td>POST</td><td>/song</td><td>返回新生成的歌曲信息</td></tr><tr><td>删除歌曲</td><td>DELETE</td><td>/song/10</td><td>返回一个空文档</td></tr><tr><td>修改歌曲</td><td>PUT</td><td>/song/10</td><td>返回更新后的歌曲信息</td></tr><tr><td>修改歌曲</td><td>PATCH</td><td>/song/10</td><td>返回更新后的歌曲信息</td></tr><tr><td>获取所有歌曲</td><td>GET</td><td>/song</td><td>返回歌曲列表数组</td></tr><tr><td>获取单个歌曲</td><td>GET</td><td>/song/10</td><td>返回单个歌曲信息</td></tr></tbody></table><h3 id="_13-3、json-server" tabindex="-1"><a class="header-anchor" href="#_13-3、json-server" aria-hidden="true">#</a> 13.3、json-server</h3>`,12),fn={href:"https://github.com/typicode/json-server",target:"_blank",rel:"noopener noreferrer"},_n=p(`<p>全局安装 json-server ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> json-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用：</p><p>创建 JSON 文件（db.json），编写基本结构</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;song&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;干杯&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;singer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;五月天&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;当&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;singer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;动力火车&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;不能说的秘密&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;singer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;周杰伦&quot;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 JSON 文件所在文件夹作为工作目录 ，执行如下命令 ，默认监听端口为 3000</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>json-server <span class="token parameter variable">--watch</span> db.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试访问：<br> 127.0.0.1:3000/song<br> 127.0.0.1:3000/song/2</p><h2 id="_14、会话控制" tabindex="-1"><a class="header-anchor" href="#_14、会话控制" aria-hidden="true">#</a> 14、会话控制</h2><p>HTTP 是一种 <strong>无状态</strong> 协议，它没有办法区分多次的请求是否来自于同一个客户端， <strong>无法区分用户</strong>，所以我们需要通过 <strong>会话控制</strong> 来解决该问题</p><p>常见的会话控制技术有三种：<br><strong>cookie ，session ，token</strong></p><h3 id="_14-1、cookie" tabindex="-1"><a class="header-anchor" href="#_14-1、cookie" aria-hidden="true">#</a> 14.1、cookie</h3><p>cookie 是 **保存在 浏览器端 **（本地）的一小块数据<br> cookie 是按照域名划分保存的</p><p>浏览器向服务器发送请求时，会自动将 当前域名下 <strong>可用的 cookie 设置在请求头中</strong>，然后传递给服务器<br> 这个请求头的名字也叫 cookie ，所以将 cookie 理解为一个 HTTP 的请求头也是可以的</p><p>不同浏览器中的 cookie 是相互独立的，不共享<br> 浏览器限制单个 cookie 保存的数据不能超过 4K</p><p>express 中可以使用 cookie-parser 进行处理 （使用较少）：<br> 向cookie中添加，读取，删除数据，设置数据的时效性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//1. 安装 cookie-parser npm i cookie-parser</span>
<span class="token comment">//2. 引入 cookieParser 包</span>
<span class="token keyword">const</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cookie-parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3. 设置 cookieParser 中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4-1 设置 cookie</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/set-cookie&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 不带时效性（会在浏览器关闭时销毁）</span>
	response<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 带时效性</span>
	response<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;23123456@qq.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//响应</span>
	response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Cookie的设置&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4-2 读取 cookie</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/get-cookie&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">//读取 cookie</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//响应体</span>
	response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Cookie的读取&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4-3 删除cookie</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/delete-cookie&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">//删除</span>
	response<span class="token punctuation">.</span><span class="token function">clearCookie</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//响应</span>
	response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;cookie 的清除&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//4. 启动服务</span>
	app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-2、session" tabindex="-1"><a class="header-anchor" href="#_14-2、session" aria-hidden="true">#</a> 14.2、session</h3><p>session 是<strong>保存在 服务器端</strong> 的一块儿数据 ，保存当前访问用户的相关信息</p><p>填写账号和密码校验身份，校验通过后创建 session 信息 ，然后将 session_id 的值通过响应头返回给浏览器<br> 有了 cookie，下次发送请求时会自动携带 cookie，服务器通过 cookie 中的 session_id 的值确定用户的身份</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230430123721044.png" alt="image-20230430123721044" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230430123752.png" alt="" loading="lazy"></p><p>express 中可以使用 express-session 对 session 进行操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//1. 安装包 npm i express-session connect-mongo</span>
<span class="token comment">//2. 引入 express-session connect-mongo</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express-session&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MongoStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;connect-mongo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 设置 session 的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;sid&#39;</span><span class="token punctuation">,</span> <span class="token comment">//设置cookie的name，默认值是：connect.sid</span>
	<span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">,</span> <span class="token comment">//参与加密的字符串（又称签名） 别称：加盐</span>
	<span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否为每次请求都设置一个cookie用来存储session的id</span>
	<span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否在每次请求时重新保存session（重置保存时间）</span>
	<span class="token literal-property property">store</span><span class="token operator">:</span> MongoStore<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">mongoUrl</span><span class="token operator">:</span> <span class="token string">&#39;mongodb://127.0.0.1:27017/project&#39;</span> <span class="token comment">//数据库的连接配置</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token literal-property property">cookie</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">httpOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启后前端无法通过 JS 操作</span>
		<span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment">// 这一条 是控制 sessionID 的过期时间的！！！5分钟</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//创建 session</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">//设置session</span>
	req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>
	req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">&#39;zhangsan@qq.com&#39;</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;登录成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//获取 session</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;session的信息&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;登录 注册&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//销毁 session</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/logout&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">//销毁session</span>
	<span class="token comment">// res.send(&#39;设置session&#39;);</span>
	req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;成功退出&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动, 端口 &#39;</span> <span class="token operator">+</span> <span class="token number">3000</span> <span class="token operator">+</span> <span class="token string">&#39; 监听中...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cookie 和 session 的区别：<br> ① 存储位置：<br> cookie：浏览器端<br> session：服务端</p><p>② 安全性：<br> cookie 是以<strong>明文</strong>的方式存放在客户端的，安全性相对较低<br> session 存放于服务器中，所以安全性 相对 较好</p><p>③ 网络传输量<br> cookie 设置内容过多会增大报文体积， 会影响传输效率<br> session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</p><p>④ 存储限制<br> 浏览器限制单个 cookie 保存的数据不能超过 4K ，且单个域名下的存储数量也有限制<br> session 数据存储在服务器中，所以没有这些限制</p><h3 id="_14-3、token" tabindex="-1"><a class="header-anchor" href="#_14-3、token" aria-hidden="true">#</a> 14.3、token</h3><p><strong>token 保存在客户端</strong></p><p><strong>token</strong> 是 <strong>服务端生成</strong> 并 <strong>返回给 HTTP 客户端</strong> 的一串<strong>加密字符串</strong>， token 中保存着 用户信息</p><p>token 可以实现会话控制，识别用户的身份，主要用于<strong>移动端 APP</strong></p><p>token 工作流程：<br> 填写账号和密码校验身份，<strong>服务端</strong> 校验通过后创建并<strong>响应 token</strong>，token 一般是在 <strong>响应体</strong> 中返回给客户端的</p><p>后续 <strong>客户端</strong> 发送请求时，需要 <strong>手动</strong>将 <strong>token 添加在</strong> 请求报文** 中，一般是放在 <strong>请求头</strong> 中</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230430135704524.png" alt="image-20230430135704524" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230430135727.png" alt="" loading="lazy"></p><p>token特点：<br> ① 数据存储在客户端<br> ② 数据加密 ，可以避免 CSRF（跨站请求伪造）<br> ③ 扩展性更强 ，服务间可以共享 ，增加服务节点更简单</p><h4 id="jwt-工具" tabindex="-1"><a class="header-anchor" href="#jwt-工具" aria-hidden="true">#</a> JWT 工具</h4><p>JWT（JSON Web Token ）是目前最流行的跨域认证解决方案，可用于基于 token 的身份验证<br> JWT 使 <strong>token 的生成与校验更规范</strong><br> 可以使用 jsonwebtoken 包 来操作 token</p><p>安装 jsonwebtoken ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i jsonwebtoken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建（生成）token：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>数据<span class="token punctuation">,</span> 加密字符串<span class="token punctuation">,</span> 配置对象<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//导入 jsonwebtokan</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建 token</span>
<span class="token comment">// jwt.sign(数据, 加密字符串, 配置对象)</span>
<span class="token keyword">let</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;t4mako&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token number">60</span> <span class="token comment">//单位是 秒</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//解析 token</span>
jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">&#39;t4mako&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;校验失败~~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15、ejs-不常用" tabindex="-1"><a class="header-anchor" href="#_15、ejs-不常用" aria-hidden="true">#</a> 15、EJS（不常用）</h2><p>EJS 是一个高效的 Javascript 的模板引擎 ，文件后缀名 .ejs</p>`,46),yn={href:"https://ejs.co/",target:"_blank",rel:"noopener noreferrer"},xn=n("br",null,null,-1),jn={href:"https://ejs.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},wn=n("h2",{id:"_16、扩展-配置https证书",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_16、扩展-配置https证书","aria-hidden":"true"},"#"),s(" 16、扩展：配置HTTPS证书")],-1),qn=n("p",null,[s("https = http + ssl"),n("br"),s(" https 可以加密 http 报文")],-1),Sn={href:"https://certbot.eff.org",target:"_blank",rel:"noopener noreferrer"};function Tn(Pn,Bn){const a=o("ExternalLinkIcon");return c(),i("div",null,[n("p",null,[n("a",u,[s("node.js API"),t(a)])]),r,n("p",null,[n("a",d,[s("Node.js 官网"),t(a)]),s(" 下载LTS版本")]),k,n("blockquote",null,[n("p",null,[s("注："),n("a",m,[s("注册表配置使用VSCode打开文件与文件夹"),t(a)])])]),v,n("table",null,[g,n("tbody",null,[n("tr",null,[n("td",null,[n("strong",null,[n("a",b,[s("http://bilibli.com/web"),t(a)])])]),h]),n("tr",null,[n("td",null,[n("a",f,[s("//bilibili.com/web"),t(a)])]),_]),y])]),x,n("p",null,[s("相对路径在发送请求时，需要"),j,s(" 路径进行 "),w,s(" ，得到完整 URL 后，再发送请求，学习阶段用的较多"),q,s(" 例如当前网页 url 为 "),n("a",S,[s("http://www.bilibili.com/course/h5.html"),t(a)])]),n("table",null,[T,n("tbody",null,[n("tr",null,[P,n("td",null,[n("a",B,[s("http://www.bilibili.com/course/css/app.css"),t(a)])])]),n("tr",null,[N,n("td",null,[n("a",F,[s("http://www.bilibili.com/course/js/app.js"),t(a)])])]),n("tr",null,[A,n("td",null,[n("a",I,[s("http://www.bilibili.com/img/logo.png"),t(a)])])]),n("tr",null,[R,n("td",null,[n("a",H,[s("http://www.bilibili.com/mp4/show.mp4"),t(a)])])])])]),E,n("ol",null,[U,n("li",null,[n("strong",null,[n("a",C,[s("exports.name"),t(a)]),s(" = value")])])]),L,n("ol",null,[J,M,n("li",null,[s("ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读"),n("a",z,[s("http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html"),t(a)])]),O,D]),W,n("ol",null,[V,n("li",null,[s("网站搜索 网址是 "),n("a",G,[s("https://www.npmjs.com/"),t(a)]),s(" （常用）")])]),K,n("p",null,[s("检查 registry 地址是否为 "),n("a",$,[s("https://registry.npmmirror.com/"),t(a)]),s(" , 如果 是 则表明成功")]),X,Q,Y,n("p",null,[s("cnpm 是一个淘宝构建的 "),n("strong",null,[n("a",Z,[s("npmjs.com"),t(a)])]),s(" 的完整镜像，也称为 淘宝镜像，网址"),n("a",nn,[s("https://npmmirror.com/"),t(a)]),sn,s(" cnpm 服务部署在国内 阿里云服务器上 ， 可以提高包的下载速度"),an,s(" 官方也提供了一个全局工具包 "),tn,s(" ，操作命令与 npm 大体相同")]),pn,n("p",null,[n("a",en,[s("yarn"),t(a)]),s(" 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具")]),on,n("p",null,[s("首先先下载 nvm，下载地址 "),n("a",cn,[s("https://github.com/coreybutler/nvm-windows/releases，"),t(a)]),s(" 选择 nvm-setup.exe 下载即可")]),ln,n("p",null,[s("express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址："),n("a",un,[s("https://www.expressjs.com.cn/"),t(a)]),rn,s(" 简单来说，express 是一个"),dn,s("，封装了很多功能，便于我们"),kn]),mn,n("p",null,[s("在浏览器就可以访问 "),n("a",vn,[s("http://127.0.0.1:3000/home"),t(a)])]),gn,n("p",null,[s("使用应用程序生成器工具 "),n("a",bn,[s("express-generator"),t(a)]),s(" 快速创建应用程序框架。")]),hn,n("p",null,[n("a",fn,[s("json-server"),t(a)]),s(" 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务")]),_n,n("p",null,[s("官网: "),n("a",yn,[s("https://ejs.co/"),t(a)]),xn,s(" 中文站："),n("a",jn,[s("https://ejs.bootcss.com/"),t(a)])]),wn,qn,n("p",null,[s("工具官网："),n("a",Sn,[s("https://certbot.eff.org"),t(a)])])])}const An=e(l,[["render",Tn],["__file","Node.js笔记.html.vue"]]);export{An as default};
