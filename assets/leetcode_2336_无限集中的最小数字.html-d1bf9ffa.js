import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as r,c as d,e,b as n,d as s,w as t,f as k}from"./app-bf2d5e0d.js";const m={},v=n("h1",{id:"_2336-无限集中的最小数字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2336-无限集中的最小数字","aria-hidden":"true"},"#"),s(" 2336. 无限集中的最小数字")],-1),b={href:"https://leetcode.cn/problems/smallest-number-in-infinite-set/description/?envType=study-plan-v2&envId=leetcode-75",target:"_blank",rel:"noopener noreferrer"},_=k('<p>解题思路：<br> 初始时，设置一个小根堆和一个 min 记录最小的数<br> 调用 <code>addBack(int num)</code> 方法时，如果 num 比 min 小，并且 heap 中不包含它，则将它加入到 heap 中<br> 调用 <code>popSmallest()</code> 方法时，如果 heap 中为空，返回 <code>min++</code>，若果不为空，返回 <code>heap.popll()</code></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>关于 Java 中的 PriorityQueue(优先队列)</p><p>Java 中 PriorityQueue 通过二叉小顶堆实现，可以用一棵完全二叉树表示。<br> 优先队列的作用是能保证每次取出的元素都是队列中权值最小的（ Java 的优先队列每次取最小元素， C++ 的优先队列每次取最大元素）<br> 可以通过构造时传入的比较器 <code>Comparator</code> 实现大根堆或者小根堆</p><p>方法：<br><code>add(E e)</code> 和 <code>offer(E e)</code> 的语义相同，都是向优先队列中插入元素，<br> 只是 Queue 接口规定二者对插入失败时的处理不同，前者在插入失败时抛出异常，后则则会返回 <code>false</code> 。对于 PriorityQueue 这两个方法其实没什么差别。</p><p><code>element()</code> 和 <code>peek()</code> 的语义完全相同，都是获取但不删除队首元素，也就是队列中权值最小的那个元素，二者唯一的区别是当方法失败时前者抛出异常，后者返回 <code>null</code> 。</p><p><code>remove()</code> 和 <code>poll()</code> 方法的语义也完全相同，都是获取并删除队首元素，区别是当方法失败时前者抛出异常，后者返回 <code>null</code></p><p><code>remove(Object o)</code> 方法用于删除队列中跟o相等的某一个元素（如果有多个相等，只删除一个），该方法不是 Queue 接口内的方法，而是Collection 接口的方法</p></div>',2),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"SmallestInfiniteSet"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"Queue"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" heap"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" min"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"SmallestInfiniteSet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        min `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        heap `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"PriorityQueue"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("o1"),n("span",{class:"token punctuation"},","),s("o2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s("  o1 "),n("span",{class:"token operator"},"-"),s(" o2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//创建小顶堆"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"popSmallest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 将 min 和 堆中最小的数返回"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("heap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isEmpty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" min"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" heap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"poll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"addBack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("num "),n("span",{class:"token operator"},"<"),s(" min "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("heap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"contains"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            heap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"offer"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function h(y,w){const o=a("Badge"),c=a("ExternalLinkIcon"),l=a("CodeTabs");return r(),d("div",null,[v,e(o,{text:"中等",type:"warning",vertical:"middle"}),n("p",null,[n("a",b,[s("题目描述"),e(c)])]),_,e(l,{id:"31",data:[{id:"Java"}]},{title0:t(({value:p,isActive:i})=>[s("Java")]),tab0:t(({value:p,isActive:i})=>[f]),_:1})])}const B=u(m,[["render",h],["__file","leetcode_2336_无限集中的最小数字.html.vue"]]);export{B as default};
