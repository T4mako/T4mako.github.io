import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-2ac1fdf0.js";const e={},p=t(`<h2 id="_1、string" tabindex="-1"><a class="header-anchor" href="#_1、string" aria-hidden="true">#</a> 1、String</h2><h3 id="_1、理解-string-的不可变性" tabindex="-1"><a class="header-anchor" href="#_1、理解-string-的不可变性" aria-hidden="true">#</a> 1、理解 String 的不可变性</h3><p>String 字符串，使用一对「&quot;&quot;」来表示</p><ul><li>String 类声明为 final 的，不可被继承</li><li>String 类实现了 Serializable 接口：表示字符串是支持序列化的</li><li>String 类实现了 Comparable 接口，表示 String 可以比较大小</li><li>String 内部定义了 <code>final char[] value</code> 用于存储字符串数据</li><li>String 代表不可变的字符序列，简称「不可变性」</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>注意使用 String 相关方法时，用于 String 是不可变类，因此需返回新的 String 类型变量得到操作后的结果</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>String 不可变的体现：</p><ul><li>当字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的 value 进行赋值</li><li>当对现有的字符串重新赋值时，也需要重新指定内存区域赋值</li><li>当调用 String 的 replace() 方法修改指定字符或字符串时，也需要重新指定内存区域赋值</li><li>通过「字面量」的方式（区别于 new）给一个字符串赋值，此时的字符串值声明在字符串「常量池」中</li><li>字符串「常量池」中不会存储相同内容的字符串</li></ul><p>JVM 中字符串常量池存放位置说明：<br> JDK1.6：存储在方法区(永久区)<br> JDK1.7：存储在堆空间<br> JDK1.8：存储在方法区(元空间)</p></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220717211454938.png" alt="image-20220717211454938" loading="lazy"></p><h3 id="_2、string-的实例化式" tabindex="-1"><a class="header-anchor" href="#_2、string-的实例化式" aria-hidden="true">#</a> 2、String 的实例化式</h3><ul><li>通过「字面量」定义的方式</li><li>new + 构造器</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>String s = new String(&quot;abc&quot;);</code> 方式创建对象，在内存中创建了几个对象？<br> 两个，一个是堆空间中 new 的结构，一个是 char[] 对应的常量池中的数据：&quot;abc&quot;</p></div><p>结论：</p><ul><li>常量与（注意final）常量的拼接结果在常量池。 且常量池中不会存在相同内容的常量。</li><li>只要其中有一个是变量， 结果就在堆中</li><li>如果拼接的方法调用 intern() 方法，返回值接在常量池冲</li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220717212301406.png" alt="image-20220717212301406" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220717213536203.png" alt="image-20220717213536203" loading="lazy"></p><h3 id="_3、string-常用方法" tabindex="-1"><a class="header-anchor" href="#_3、string-常用方法" aria-hidden="true">#</a> 3、String 常用方法</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>int length()</td><td>返回字符串的长度</td></tr><tr><td>char charAt(int index)</td><td>返回某索引处的字符</td></tr><tr><td>boolean equals(Object obj)</td><td>比较字符串的内容是否相同</td></tr><tr><td>boolean equalsIgnoreCase(String anotherString)</td><td>比较字符串的内容是否相同， 忽略大小写</td></tr><tr><td>String trim()</td><td>返回字符串的副本， 忽略前导空白和尾部空白</td></tr><tr><td>int compareTo(String anotherString)：</td><td>按字典序比较大小，相同返回0，大于返回正值，否则返回负值</td></tr><tr><td>boolean startsWith(String prefix)</td><td>判断字符串是否以指定的前缀开始</td></tr><tr><td>boolean endsWith(String suffix)</td><td>判断字符串是否以指定的后缀结束</td></tr><tr><td>boolean startsWith(String prefix, int offset)</td><td>测试此字符串从指定索引开始的子字符串是否以指定前缀开始</td></tr><tr><td>boolean regionMaches(int firstStart,String other,int otherStart,int length)</td><td>比较当前字符串 firstStart 开始取长度为 length 的字符串与 other 从 otherStart 开始取长度为 length 的字符串的字符序列大小</td></tr><tr><td>boolean regionMaches(int firstStart,String other,int otherStart,int length)</td><td>通过参数 b，决定是否忽略大小写</td></tr><tr><td>String concat(String str)</td><td>将指定字符串连接到此字符串的结尾。 等价于用「+」</td></tr><tr><td>boolean contains(String s)</td><td>判断当前 String 对象的字符串序列是否有 s 的字符序列</td></tr><tr><td>int indexOf(String str)</td><td>返回指定子字符串在此字符串中第一次出现处的索引</td></tr><tr><td>int indexOf(String str, int fromIndex)</td><td>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</td></tr><tr><td>int lastIndexOf(String str)</td><td>返回指定子字符串在此字符串中最右边出现处的索引</td></tr><tr><td>int lastIndexOf(String str, int fromIndex)</td><td>返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</td></tr><tr><td>String substring(int beginIndex)</td><td>返回一个此字符串的从 beginIndex 开始截取到最后的一个子字符串</td></tr><tr><td>String substring(int start, int end)</td><td>返回一个此字符串从 start 开始截取到 end（不包含）的一个子字符串</td></tr><tr><td>boolean isEmpty()</td><td>判断是否是空字符串</td></tr><tr><td>String toLowerCase()</td><td>将 String 中的所有字符转换为小写</td></tr><tr><td>String toUpperCase()</td><td>将 String 中的所有字符转换为大写</td></tr><tr><td>String replace(char oldChar, char newChar)</td><td>返回一个新的字符串， 它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的</td></tr><tr><td>String replace(CharSequence target, CharSequence replacement)</td><td>使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符</td></tr><tr><td>String replaceAll(String regex, String replacement)</td><td>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td></tr><tr><td>String replaceFirst(String regex, String replacement)</td><td>使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串</td></tr><tr><td>boolean matches(String regex)</td><td>告知此字符串是否匹配给定的正则表达式</td></tr><tr><td>String[] split(String regex)</td><td>根据给定正则表达式的匹配拆分此字符串</td></tr><tr><td>String[] split(String regex, int limit)</td><td>根据匹配给定的正则表达式来拆分此字符串， 最多不超过limit个， 如果超过了， 剩下的全部都放到最后一个元素中</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>indexOf 和 lastIndexOf 方法如果未找到都是返回 -1</p></div><h3 id="_4、string-与基本数据类型包装类的转换" tabindex="-1"><a class="header-anchor" href="#_4、string-与基本数据类型包装类的转换" aria-hidden="true">#</a> 4、String 与基本数据类型包装类的转换</h3><h4 id="string-与基本数据类型、包装类之间的转换" tabindex="-1"><a class="header-anchor" href="#string-与基本数据类型、包装类之间的转换" aria-hidden="true">#</a> String 与基本数据类型、包装类之间的转换</h4><ul><li>String 到基本数据类型，包装类：调用包装类的静态方法 <code>parseXxx(str)</code></li><li>基本数据类型，包装类到 String：调用 String 重载的 <code>valueOf(xxx)</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest1</span> <span class="token punctuation">{</span>
    <span class="token comment">// String 到基本数据类型，包装类:调用包装类的静态方法：parseXxx(str)</span>
    <span class="token comment">// 基本数据类型，包装类到 String：调用 String 重载的valueOf(xxx)</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-与字符数组之间的转换" tabindex="-1"><a class="header-anchor" href="#string-与字符数组之间的转换" aria-hidden="true">#</a> String 与字符数组之间的转换</h4><p>String 到 char[]：调用 String 的 <code>toCharArray()</code><br> char[] 到 String：调用 String 的构造器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest1</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//String到char[]:调用String的toCharArray()</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//char[]到String:调用String的构造器</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-与-byte-之间的转换" tabindex="-1"><a class="header-anchor" href="#string-与-byte-之间的转换" aria-hidden="true">#</a> String 与 byte[] 之间的转换</h4><p>String 到 byte：调用 String 的 <code>getBytes()</code><br> byte 到 String：调用 String 的构造器<br> （注意字符集编码解码问题）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span>
        <span class="token comment">// String到byte:调用String的getBytes()</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;abc123中国&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 编码:字符串--&gt;字节(二进制数据)</span>
        <span class="token comment">// 解码:字节--&gt;字符串</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用默认的字符集，进行编码</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbks <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用GBK字符集进行编码</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// byte到String：调用String的构造器</span>
        <span class="token class-name">String</span> s2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用默认字符集解码</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> s3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 乱码，编码集合解码集不同</span>

        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">,</span> <span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、stringbuffer、stringbuilder" tabindex="-1"><a class="header-anchor" href="#_2、stringbuffer、stringbuilder" aria-hidden="true">#</a> 2、StringBuffer、StringBuilder</h2><h3 id="_1、string-stringbuffer-stringbuilder-三者的异同" tabindex="-1"><a class="header-anchor" href="#_1、string-stringbuffer-stringbuilder-三者的异同" aria-hidden="true">#</a> 1、String，StringBuffer，StringBuilder 三者的异同</h3><ul><li>String：不可变的字符序列；底层使用 char[] 存储(jdk1.9 之后用 byte 数组)</li><li>StringBuffer：可变的字符序列，线程安全的，效率低；底层使用 char[] 存储(jdk1.9 之后用 byte 数组)</li><li>StringBuilder：可变的字符序列：jdk5.0 新增，线程不安全的，效率高；底层使用 char[] 存储(jdk1.9 之后用 byte 数组)</li></ul><p>StringBuffer 类的三个构造方法：</p><ul><li><code>StringBuffer()</code>：使用该构造方法时，分配给该对象实体的初始容量可以容纳 <strong>16</strong> 个字符，当存放的字符序列长度大于 16 时，实体容量自动增加</li><li><code>StringBuffer(int size)</code>：分配指定容量，不够时自动增加</li><li><code>StringBuffer(String s)</code>：初始长度为 s 的长度加 16 ，不够时自动增加</li></ul><p>StringBuffer 扩容机制：默认情况下，扩容为原来容量的「2 倍 + 2」，同时将原有数组的元素复制到新数组中</p><p>源码分析：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// new char[0];</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// new char[]{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};</span>

<span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//new char[16];底层创建了一个长度为 16 的数组</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[0]=&#39;a&#39;;</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[1]=&#39;b&#39;;</span>

<span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token comment">// char[] value = new char[&quot;abc&quot;.length() + 16]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、stringbuffer-类的常用方法" tabindex="-1"><a class="header-anchor" href="#_2、stringbuffer-类的常用方法" aria-hidden="true">#</a> 2、StringBuffer 类的常用方法</h3><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>StringBuffer append()</code></td><td>用于进行字符串拼接，参数可以是多种类型</td></tr><tr><td><code>char charAt(int n)</code></td><td>得到第 n 个字符</td></tr><tr><td><code>char setCharAt(int n,setCharAt(int n,char ch))</code></td><td>改变第 n 个字符</td></tr><tr><td><code>StringBuffer insert(int index,String str)</code></td><td>将 str 插入 index 位置</td></tr><tr><td><code>StringBuffer reverse()</code></td><td>反转字符串</td></tr><tr><td><code>StringBuffer delete(int startIndex,int endIndex)</code></td><td>删除一个字符序列，从 startIndex 到 endIndex - 1</td></tr><tr><td><code>StringBuffer replace(int start, int end, String str)</code></td><td>把 <code>[start,end)</code> 位置替换为str</td></tr><tr><td><code>public int length()</code></td><td>返回 stringBuffer 的长度</td></tr><tr><td><code>public String substring(int start,int end)</code></td><td>返回一个从 start 开始到 end 索引结束的左闭右开区间的子字符串</td></tr><tr><td><code>public int indexOf(String str)</code></td><td>返回 str 所在的位置</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">StringBuffer</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc1</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc11</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//s1.delete(2,4);//ab1</span>
        <span class="token comment">//s1.replace(2,4,&quot;hello&quot;);//abhello1</span>
        <span class="token comment">//s1.insert(2,false);//abfalsec11</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s2=bc</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>总结：<br> 增：append()<br> 删：delete(int start,int end)<br> 改：setCharAt(int n ,char ch)<br> 查：charAt(int n )<br> 插： insert(int offset, xxx)<br> 长度：length()<br> 遍历：for()+charAt()</p></div><h2 id="_3、-stringtokenizer-类" tabindex="-1"><a class="header-anchor" href="#_3、-stringtokenizer-类" aria-hidden="true">#</a> 3、 StringTokenizer 类</h2><p>StringTokenizer 类用于分析字符序列并分解成独立的单词</p><p>StringTokenizer 类在 java.util 包中</p><p>构造方法：</p><ul><li><code>StringTokenizer(String str)</code>：为字符串 str 构造一个 tokenizer 对象</li><li><code>StringTokenizer(String str,String delim)</code>：为字符串 str 构造一个 tokenizer 对象，分隔标记为 delim 中的字符</li></ul><p>常用方法：</p><ul><li><code>int countTokens()</code>：返回 tokenizer 对象所含单独单词个数</li><li><code>boolean hasMoreElements()</code>：返回是否还有单词</li><li><code>boolean hasMoreTokens()</code>：与 hasMoreElements() 功能相同，</li><li><code>String nextToken()</code>：取出下一个单词</li></ul><p>案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;I,love;you&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">StringTokenizer</span> stringTokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">&quot;,;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>stringTokenizer<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stringTokenizer<span class="token punctuation">.</span><span class="token function">countTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringTokenizer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
输出：
3 I
2 love
1 you
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、scanner-类" tabindex="-1"><a class="header-anchor" href="#_4、scanner-类" aria-hidden="true">#</a> 4、Scanner 类</h2><ul><li><code>import java.util.Scanner</code></li><li>Scanner 的实例化： <ul><li><code>Scanner sc = new Scanner(System.in);</code></li><li><code>Scanner sc = new Scanner(&quot;i love u&quot;);</code></li></ul></li><li>调用 Scanner 类的相关方法，获取指定类型的变量 <ul><li>sc 对象调用 <code>next()</code> 方法依此返回 s 的字符序列中的单词</li><li>如果最后一个单词已被 <code>next()</code> 方法返回，sc 调用 <code>hasNext()</code> 将返回 false，否则返回 true</li><li>sc 可以调用 <code>nextDouble()</code>，<code>nextInt()</code> 方法将数字型单词转换为 int 或 double 数据返回</li><li>scanner 默认使用「空格」做分隔标记，通过 <code>sc.useDelimiter(正则表达式)</code> 将正则表达式作为分隔标记</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token class-name">CLass</span> <span class="token class-name">ScannerTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> db <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token string">&quot;i;love:u&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sc<span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i;love</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>对于 char 型的获取，Scanner 没有提供相关的方法，只能获取一个字符串<br> 将字符串提取出 char 字符<br> 如果输入的数据类型与要求的不匹配时，会报异常 <code>InputMismatchException</code></p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>StringTokenizer 类和 Scanner 类都可用于分解字符序列中的单词，StringTokenizer 类把分解出来的单词全部存入对象实体中，<br> Scanner 仅仅存放怎样获取单词的分隔标记</p><ul><li>StringTokenizer 更快的获取单词，占用较多内存，对象一诞生就可知道单词的数目</li><li>Scanner 类节省更多内存空间，不能立刻知道单词数目，必须一个一个取出</li></ul></div>`,53),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","String、Scanner相关类.html.vue"]]);export{d as default};
