const t=JSON.parse('{"key":"v-863258ca","path":"/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"title":"正则表达式","icon":"code","order":2,"category":"基础","tag":["正则表达式"],"description":"正则表达式是含有一些具有特殊意字符的字符序列 正则表达式有三个主要用途： 模式验证: 检测某个字符串是否符合规则，如手机号、身份证号等 匹配读取: 将目标字符串中满足规则的部分 读取 出来，如将整段文本中的邮箱地址读取出来（） 匹配替换: 将目标字符串中满足标准的部分 替换 为其他字符串，如将整段文本中的 \\"hello\\" 替换成 \\"haha\\" Java 中 String 类用到正则表达式的方法： 方法 描述 String replaceAll(String regex, String replacement) 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 String replaceFirst(String regex, String replacement) 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串 boolean matches(String regex) 告知此字符串是否匹配给定的正则表达式 String[] split(String regex) 根据给定正则表达式的匹配拆分此字符串 String[] split(String regex, int limit) 根据匹配给定的正则表达式来拆分此字符串，最多不超过 limit 个，如果超过了，剩下的全部都放到最后一个元素中","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"正则表达式是含有一些具有特殊意字符的字符序列 正则表达式有三个主要用途： 模式验证: 检测某个字符串是否符合规则，如手机号、身份证号等 匹配读取: 将目标字符串中满足规则的部分 读取 出来，如将整段文本中的邮箱地址读取出来（） 匹配替换: 将目标字符串中满足标准的部分 替换 为其他字符串，如将整段文本中的 \\"hello\\" 替换成 \\"haha\\" Java 中 String 类用到正则表达式的方法： 方法 描述 String replaceAll(String regex, String replacement) 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 String replaceFirst(String regex, String replacement) 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串 boolean matches(String regex) 告知此字符串是否匹配给定的正则表达式 String[] split(String regex) 根据给定正则表达式的匹配拆分此字符串 String[] split(String regex, int limit) 根据匹配给定的正则表达式来拆分此字符串，最多不超过 limit 个，如果超过了，剩下的全部都放到最后一个元素中"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"正则表达式"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、元字符","slug":"_1、元字符","link":"#_1、元字符","children":[]},{"level":2,"title":"2、字符集合","slug":"_2、字符集合","link":"#_2、字符集合","children":[]},{"level":2,"title":"3、限定符","slug":"_3、限定符","link":"#_3、限定符","children":[]},{"level":2,"title":"4、创建正则表达式","slug":"_4、创建正则表达式","link":"#_4、创建正则表达式","children":[]},{"level":2,"title":"5、正则表达式案例","slug":"_5、正则表达式案例","link":"#_5、正则表达式案例","children":[]},{"level":2,"title":"6、常用正则表达式","slug":"_6、常用正则表达式","link":"#_6、常用正则表达式","children":[]}],"readingTime":{"minutes":7.36,"words":2207},"filePathRelative":"code/基础知识/正则表达式.md","excerpt":"<p>正则表达式是含有一些具有特殊意字符的字符序列</p>\\n<p>正则表达式有三个主要用途：</p>\\n<ul>\\n<li>模式验证: 检测某个字符串是否符合规则，如手机号、身份证号等</li>\\n<li>匹配读取: 将目标字符串中满足规则的部分 <strong>读取</strong> 出来，如将整段文本中的邮箱地址读取出来（）</li>\\n<li>匹配替换: 将目标字符串中满足标准的部分 <strong>替换</strong> 为其他字符串，如将整段文本中的 \\"hello\\" 替换成 \\"haha\\"</li>\\n</ul>\\n<p>Java 中 String 类用到正则表达式的方法：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>String replaceAll(String regex, String replacement)</td>\\n<td>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td>\\n</tr>\\n<tr>\\n<td>String replaceFirst(String regex, String replacement)</td>\\n<td>使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串</td>\\n</tr>\\n<tr>\\n<td>boolean matches(String regex)</td>\\n<td>告知此字符串是否匹配给定的正则表达式</td>\\n</tr>\\n<tr>\\n<td>String[] split(String regex)</td>\\n<td>根据给定正则表达式的匹配拆分此字符串</td>\\n</tr>\\n<tr>\\n<td>String[] split(String regex, int limit)</td>\\n<td>根据匹配给定的正则表达式来拆分此字符串，最多不超过 limit 个，如果超过了，剩下的全部都放到最后一个元素中</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
