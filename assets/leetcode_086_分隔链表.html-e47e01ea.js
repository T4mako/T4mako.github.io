import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as c,c as l,b as n,f as t,e as a,d as i}from"./app-58504b5c.js";const u={},r=n("h1",{id:"_86-分隔链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_86-分隔链表","aria-hidden":"true"},"#"),t(" 86. 分隔链表")],-1),k={href:"https://leetcode.cn/problems/partition-list/",target:"_blank",rel:"noopener noreferrer"},d=i(`<p>解法思路：创建新链表，遍历链表</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> le <span class="token operator">=</span> l<span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> re <span class="token operator">=</span> r<span class="token punctuation">;</span>
		<span class="token class-name">ListNode</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				le<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
				le <span class="token operator">=</span> le<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
				re<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
				re <span class="token operator">=</span> re<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		le<span class="token punctuation">.</span>next <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token keyword">return</span> l<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function v(m,_){const e=s("ExternalLinkIcon"),p=s("Badge");return c(),l("div",null,[r,n("p",null,[n("a",k,[t("题目描述"),a(e)])]),a(p,{text:"中等",type:"warning",vertical:"middle"}),d])}const h=o(u,[["render",v],["__file","leetcode_086_分隔链表.html.vue"]]);export{h as default};
