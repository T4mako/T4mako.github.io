const a=JSON.parse('{"key":"v-1cafb8cc","path":"/code/leetcode/%E7%AE%97%E6%B3%95/leetcode_141_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.html","title":"141. 环形链表","lang":"zh-CN","frontmatter":{"date":"2023-10-28T00:00:00.000Z","category":["算法"],"tag":["哈希表","链表","双指针"],"description":"141. 环形链表 解法一：Set 存储 public class Solution { public boolean hasCycle(ListNode head) { HashSet&lt;ListNode&gt; set = new HashSet&lt;&gt;(); while (head != null){ if(!set.add(head)) return true; // add() 未添加成功返回 false head = head.next; } return false; } }","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/code/leetcode/%E7%AE%97%E6%B3%95/leetcode_141_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:title","content":"141. 环形链表"}],["meta",{"property":"og:description","content":"141. 环形链表 解法一：Set 存储 public class Solution { public boolean hasCycle(ListNode head) { HashSet&lt;ListNode&gt; set = new HashSet&lt;&gt;(); while (head != null){ if(!set.add(head)) return true; // add() 未添加成功返回 false head = head.next; } return false; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["meta",{"property":"article:tag","content":"哈希表"}],["meta",{"property":"article:tag","content":"链表"}],["meta",{"property":"article:tag","content":"双指针"}],["meta",{"property":"article:published_time","content":"2023-10-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"141. 环形链表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"解法一：Set 存储","slug":"解法一-set-存储","link":"#解法一-set-存储","children":[]},{"level":2,"title":"解法二：快慢指针","slug":"解法二-快慢指针","link":"#解法二-快慢指针","children":[]}],"readingTime":{"minutes":0.45,"words":134},"filePathRelative":"code/leetcode/算法/leetcode_141_环形链表.md","localizedDate":"2023年10月28日","excerpt":"<h1> 141. 环形链表</h1>\\n<h2> 解法一：Set 存储</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">hasCycle</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ListNode</span> head<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">HashSet</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">ListNode</span><span class=\\"token punctuation\\">&gt;</span></span> set <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashSet</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>head <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>set<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>head<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// add() 未添加成功返回 false</span>\\n            head <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
