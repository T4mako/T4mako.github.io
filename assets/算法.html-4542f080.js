import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c,b as n,d as a,e,f as i}from"./app-19bef009.js";const o={},d=i(`<h1 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h1><h2 id="算法性能度量方法" tabindex="-1"><a class="header-anchor" href="#算法性能度量方法" aria-hidden="true">#</a> 算法性能度量方法</h2><p>时间复杂度的判别、动态规划状态转移方程</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><p>阶乘、素数、完数、回文数、最小公约数、最小公倍数</p><h2 id="线性表" tabindex="-1"><a class="header-anchor" href="#线性表" aria-hidden="true">#</a> 线性表</h2><p>线性表有「顺序存储结构 ArrayList」和「链式存储结构 LinkedList」</p><p>顺序表和链表的区别及其优缺点：<br> 顺序表：</p><ul><li>原理：顺序表存储是将数据元素放到一块连续的内存存储空间，相邻数据元素的存放地址也相邻（逻辑与物理统一）。</li><li>优点： <ul><li>空间利用率高（局部性原理，连续存放，命中率高）</li><li>存取速度高效，可以随机存取，通过下标来直接存储</li></ul></li><li>缺点： <ul><li>插入和删除比较慢，比如：插入或者删除一个元素时，整个表需要遍历移动元素来重新排一次顺序</li><li>不可以增长长度，有空间限制，当需要存取的元素个数可能多于顺序表的元素个数时，会出现「溢出」问题，当元素个数远少于预先分配的空间时，空间浪费巨大</li><li>顺序表的存储密度为 1（存储密度 = 节点中数据占用的存储量 / 整个节点占用存储量）</li></ul></li><li>时间性能 :查找 O(1)，插入和删除 O(n)</li></ul><p>链表：</p><ul><li>原理：链表存储是在程序运行过程中动态的分配空间，只要存储器还有空间，就不会发生存储溢出问题，相邻数据元素可随意存放，但所占存储空间分两部分，一部分存放结点值，另一部分存放表示结点关系间的指针</li><li>优点： <ul><li>存取某个元素速度慢</li><li>插入和删除速度快，保留原有的物理顺序，比如：插入或者删除一个元素时，只需要改变指针指向即可</li><li>没有空间限制，存储元素的个数无上限，基本只与内存空间大小有关</li></ul></li><li>缺点： <ul><li>占用额外的空间以存储指针</li><li>链表的存储密度小于 1</li><li>查找速度慢，因为查找时，需要从开始节点一个一个节点去查找元素访问</li></ul></li><li>时间性能 :查找 O(n)，插入和删除 O(1)</li></ul><h3 id="链表节点定义" tabindex="-1"><a class="header-anchor" href="#链表节点定义" aria-hidden="true">#</a> 链表节点定义</h3><ul><li>单链表</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>

    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>双链表</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>

    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> left<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线性表常见算法题：</p><h3 id="链表题" tabindex="-1"><a class="header-anchor" href="#链表题" aria-hidden="true">#</a> 链表题</h3>`,18),r={href:"https://t4mako.github.io/tag/%E9%93%BE%E8%A1%A8/",target:"_blank",rel:"noopener noreferrer"},u=n("h3",{id:"数组题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数组题","aria-hidden":"true"},"#"),a(" 数组题")],-1),k={href:"https://t4mako.github.io/tag/%E6%95%B0%E7%BB%84/",target:"_blank",rel:"noopener noreferrer"},h=i('<h2 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h2><h2 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h2><h2 id="递归与分支" tabindex="-1"><a class="header-anchor" href="#递归与分支" aria-hidden="true">#</a> 递归与分支</h2><h2 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h2><h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h2><h2 id="回溯法" tabindex="-1"><a class="header-anchor" href="#回溯法" aria-hidden="true">#</a> 回溯法</h2><h2 id="分支限界法" tabindex="-1"><a class="header-anchor" href="#分支限界法" aria-hidden="true">#</a> 分支限界法</h2>',7);function v(m,b){const s=l("ExternalLinkIcon");return p(),c("div",null,[d,n("p",null,[n("a",r,[a("链表合集"),e(s)])]),u,n("p",null,[n("a",k,[a("数组合集"),e(s)])]),h])}const x=t(o,[["render",v],["__file","算法.html.vue"]]);export{x as default};
