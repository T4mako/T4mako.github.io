import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as o,b as a,d as e,e as t,f as n}from"./app-0d18ecbb.js";const d={},h=n('<p><strong>基于CentOs的Java项目部署</strong></p><h2 id="_1、软件安装" tabindex="-1"><a class="header-anchor" href="#_1、软件安装" aria-hidden="true">#</a> 1、软件安装</h2><h3 id="_1、软件安装方式" tabindex="-1"><a class="header-anchor" href="#_1、软件安装方式" aria-hidden="true">#</a> 1、软件安装方式</h3><p>二进制发布包安装 软件已经针对具体平台编译打包发布，只要解压，修改配置即可<br> rmp安装 (Red-Hat Package Manage)，软件已经按照redhat的包管理规范进行打包，使用rpm命令安装，不能自行解决库依赖问题<br> yum安装 (Yellow dog Updater)一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题<br> 源码编译安装 软件以源码工程形式发布，需要自己编译打包</p><h3 id="_2、搭建环境" tabindex="-1"><a class="header-anchor" href="#_2、搭建环境" aria-hidden="true">#</a> 2、搭建环境</h3><p><strong>安装JDK、Tomcat、MySQL、lrzsz，Redis</strong></p><p>jdk的重新安装位置：/usr/lcoal</p><h4 id="_1、tomcat的开启-使用、关闭" tabindex="-1"><a class="header-anchor" href="#_1、tomcat的开启-使用、关闭" aria-hidden="true">#</a> 1、Tomcat的开启，使用、关闭</h4>',8),c=a("br",null,null,-1),p=a("br",null,null,-1),u=a("br",null,null,-1),m={href:"http://startup.sh",target:"_blank",rel:"noopener noreferrer"},_=a("strong",null,"./startup.sh",-1),g=a("p",null,[a("img",{src:"https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230315131921000.png",alt:"image-20230315131921000",loading:"lazy"})],-1),b=a("p",null,[e("要访问Tomcat，需要开放8080端口"),a("br"),e(" firewall-cmd --zone=public --add-port=8080/tcp --permanent"),a("br"),e(" firewall-cmd --reload")],-1),x=a("p",null,[a("img",{src:"https://raw.githubusercontent.com/T4mako/ImageBed/main/20230315132243.png",alt:"",loading:"lazy"})],-1),v=a("br",null,null,-1),f={href:"http://xn--Tomcatbinshutdown-0g60al89up52et2bl07olesb.sh",target:"_blank",rel:"noopener noreferrer"},z=a("br",null,null,-1),j={href:"http://shutdown.sh",target:"_blank",rel:"noopener noreferrer"},T=a("strong",null,"./shutdowndown.sh",-1),k=n(`<p>结束Tomcat进程：<br> 使用ps -ef | grep tomcat查看tomcat进程，获得进程id<br> 执行kill -9 id命令</p><h4 id="_2、安装lrzsz" tabindex="-1"><a class="header-anchor" href="#_2、安装lrzsz" aria-hidden="true">#</a> 2、安装lrzsz</h4><p>1、搜索lrzsz安装包，命令为yum list lrzsz<br> 2、使用yum命令在线安装，命令为yum install lrzsz.x86_64</p><p><code>Yum是一个在Fedora和RedHat以及CEntOS中的shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理一拉关系，并且一次安装所有依赖的软件包，无需繁琐地一次次下载，安装</code></p><h3 id="_3、安装git" tabindex="-1"><a class="header-anchor" href="#_3、安装git" aria-hidden="true">#</a> 3、安装GIt</h3><p>yum list git 列出git安装包<br> yum install git 在线安装git</p><h3 id="_4、安装maven" tabindex="-1"><a class="header-anchor" href="#_4、安装maven" aria-hidden="true">#</a> 4、安装maven</h3><p>将maven.tar.gz复制到/usr目录下<br> tar -zxvf apache-maven-3.8.8-bin.tar.gz</p><p>修改配置文件：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230315144922.png" alt="" loading="lazy"></p><p>配置环境变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LANG=&quot;en_US.UTF-8&quot;
JAVA_HOME=/usr/local/jdk1.8.0_171
export MAVEN_HOME=/usr/local/apache-maven-3.8.8
export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改settings文件，配置maven的本地仓库为/usr/local/repo<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230315154928.png" alt="" loading="lazy"></p><h2 id="_2、项目部署" tabindex="-1"><a class="header-anchor" href="#_2、项目部署" aria-hidden="true">#</a> 2、项目部署</h2><h3 id="_1、手工部署项目-不推荐" tabindex="-1"><a class="header-anchor" href="#_1、手工部署项目-不推荐" aria-hidden="true">#</a> 1、手工部署项目（不推荐）</h3><h5 id="_1、先将idea中的项目打成jar包" tabindex="-1"><a class="header-anchor" href="#_1、先将idea中的项目打成jar包" aria-hidden="true">#</a> 1、先将idea中的项目打成jar包</h5><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230315140251283.png" alt="image-20230315140251283" loading="lazy"></p><h4 id="_2、将jar包传到linux上-目录-usr-app" tabindex="-1"><a class="header-anchor" href="#_2、将jar包传到linux上-目录-usr-app" aria-hidden="true">#</a> 2、将jar包传到linux上，目录/usr/app</h4><h4 id="_3、通过java-jar-xxx-jar-运行jar包" tabindex="-1"><a class="header-anchor" href="#_3、通过java-jar-xxx-jar-运行jar包" aria-hidden="true">#</a> 3、通过java -jar XXX.jar 运行jar包</h4><h4 id="_4、检查防火墙-确保8080端口对外开放-访问springboot项目" tabindex="-1"><a class="header-anchor" href="#_4、检查防火墙-确保8080端口对外开放-访问springboot项目" aria-hidden="true">#</a> 4、检查防火墙，确保8080端口对外开放，访问springboot项目</h4><p>fire-cmd --zone=public --list-ports</p><h4 id="_5、改为后台运行项目-并将日志输出到日志文件" tabindex="-1"><a class="header-anchor" href="#_5、改为后台运行项目-并将日志输出到日志文件" aria-hidden="true">#</a> 5、改为后台运行项目，并将日志输出到日志文件</h4><p>目前程序运行的问题：<br> 线上程序霸屏控制台，应该后台运行<br> 日志不应输出到控制台，应该输入到文件，方便运维查阅信息</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230315141525.png" alt="" loading="lazy"></p><p>命令：<br><strong>nohup java -jar XXX.jar &amp;&gt; XXX,log &amp;</strong></p><p>关闭项目：<br> ps -ef | grep java -jar 查找id<br> kill -9 id 结束进程</p><h3 id="_2、通过shell脚本自动部署项目" tabindex="-1"><a class="header-anchor" href="#_2、通过shell脚本自动部署项目" aria-hidden="true">#</a> 2、通过Shell脚本自动部署项目</h3><p>操作步骤：<br> ①在Linux中安装Git<br> ②在Linux中安装maven<br> ③编写Shell脚本（拉取代码，编译，打包，启动）<br> ④为用户授予执行shell脚本的权限<br> ⑤执行shell脚本</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230315142408.png" alt="" loading="lazy"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LANG=&quot;en_US.UTF-8&quot;
JAVA_HOME=/usr/local/jdk1.8.0_171
PATH=$JAVA_HOME/bin:$PATH
export MAVEN_HOME=/usr/local/apache-maven-3.8.8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将shell脚本复制到项目中，chmod修改权限777，通过./bootStart.sh运行shell脚本</p>`,31);function A(w,y){const r=i("ExternalLinkIcon");return l(),o("div",null,[h,a("p",null,[e("在Tomecat官网下砸Tomcat8.tar.gz，通过xftp上传至CentOS"),c,e(" 上传地址为**/usr/lcoal/tomcat**"),p,e(" 使用tar -zxvf apache-tomcat-8.5.87.tar.gz解压"),u,e(" 进入Tomcat的bin目录启动服务，命令为"),a("strong",null,[e("sh "),a("a",m,[e("startup.sh"),t(r)])]),e(" 或 "),_]),g,b,x,a("p",null,[e("停止Tomcat服务的方式："),v,a("a",f,[e("运行Tomcat中bin目录的shutdown.sh"),t(r)]),z,a("strong",null,[e("sh "),a("a",j,[e("shutdown.sh"),t(r)])]),e(" 或者 "),T]),k])}const H=s(d,[["render",A],["__file","基于centos部署java项目.html.vue"]]);export{H as default};
