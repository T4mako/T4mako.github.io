import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as n,d as s,e as p,f as a}from"./app-a5eca13b.js";const l={},u=a(`<h2 id="_1、作用域" tabindex="-1"><a class="header-anchor" href="#_1、作用域" aria-hidden="true">#</a> 1、作用域</h2><p>作用域（scope）规定了变量能够被访问的 <strong>范围</strong> ，离开了这个范围的变量便不能被访问</p><h3 id="_1-1、局部作用域" tabindex="-1"><a class="header-anchor" href="#_1-1、局部作用域" aria-hidden="true">#</a> 1.1、局部作用域</h3><h4 id="_1-函数作用域" tabindex="-1"><a class="header-anchor" href="#_1-函数作用域" aria-hidden="true">#</a> ① 函数作用域</h4><p><strong>函数内部</strong>声明的变量只能在函数内部访问，外部无法直接访问。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230416101925.png" alt="" loading="lazy"></p><h4 id="_2-块作用域" tabindex="-1"><a class="header-anchor" href="#_2-块作用域" aria-hidden="true">#</a> ② 块作用域</h4><p>js中使用 <strong><code>{}</code></strong> 包裹的代码称为代码块，代码块内部声明的变量外部<strong>有可能</strong>无法被访问<br><strong>let，const</strong> 产生块作用域<br><strong>var</strong> 不产生块作用域</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230416102105.png" alt="" loading="lazy"></p><h3 id="_1-2、全局作用域" tabindex="-1"><a class="header-anchor" href="#_1-2、全局作用域" aria-hidden="true">#</a> 1.2、全局作用域</h3><p><strong>script</strong> 标签和 <strong>.js</strong> 文件 的 <strong>最外层</strong> 就是全局作用域，在此声明的变量在函数内部也可以被访问</p><p>注意：<br> 1、为window对象添加的属性也是全局的（不推荐）<br> 2、函数中未使用任何关键字声明的变量为全局变量（不推荐）<br> 3、尽可能少的声明全局变量，防止全局变量被污染</p><h3 id="_1-3、作用域链" tabindex="-1"><a class="header-anchor" href="#_1-3、作用域链" aria-hidden="true">#</a> 1.3、作用域链</h3><p>作用域链的本质是底层的<strong>变量查找机制</strong><br> 在函数被执行时，会<strong>优先查找当前</strong>函数作用域中查找变量<br> 如果当前作用域找不到，就<strong>逐级查找父级</strong>作用域</p><h3 id="_1-4、js垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_1-4、js垃圾回收机制" aria-hidden="true">#</a> 1.4、js垃圾回收机制</h3><p>js环境中分配的内存，一般有如下<strong>生命周期</strong>：<br> 1、<strong>内存分配</strong>：当声明变量，函数，对象时，系统会自动为他们分配内存<br> 2、<strong>内存使用</strong>：读写内存，使用变量、函数<br> 3、<strong>内存回收</strong>：使用完毕，<strong>垃圾回收器</strong>自动收回不在使用的内存</p><p>说明：<br> 全局变量一般不会回收，在页面关闭回收<br> 局部变量值不用了，会被自动回收</p><p>内存泄漏：程序中分配的内存由于某种原因<strong>未释放</strong>或<strong>无法释放</strong>叫内存泄漏</p><p><strong>gc算法说明：</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230416104331.png" alt="" loading="lazy"></p><p>gc算法有：</p><h4 id="_1-引用计数法" tabindex="-1"><a class="header-anchor" href="#_1-引用计数法" aria-hidden="true">#</a> ① 引用计数法</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230416104857.png" alt="" loading="lazy"></p><p>引用计数法存在 <strong>嵌套引用</strong> 的问题 （两个对象<strong>相互引用</strong>，尽管它们不再使用，垃圾回收器不会进行回收，导致内存泄漏）。</p><h4 id="_2-标记清除法" tabindex="-1"><a class="header-anchor" href="#_2-标记清除法" aria-hidden="true">#</a> ② 标记清除法</h4><p>目前浏览器都是用标记清除发：<strong>从根部扫描对象</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230416105150.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230416105230.png" alt="" loading="lazy"></p><h3 id="_1-5、闭包" tabindex="-1"><a class="header-anchor" href="#_1-5、闭包" aria-hidden="true">#</a> 1.5、闭包</h3><h4 id="_1-5-1、闭包概念" tabindex="-1"><a class="header-anchor" href="#_1-5-1、闭包概念" aria-hidden="true">#</a> 1.5.1、闭包概念</h4><p>概念：一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域<br><strong>闭包 = 内层函数 + 外层函数的变量</strong></p><p>举例（简单写法）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包的作用：<strong>封闭数据</strong>，提供操作，外部也可以访问函数内部的变量（减少定义全局变量，更加安全）</p><h4 id="_1-5-2、闭包写法" tabindex="-1"><a class="header-anchor" href="#_1-5-2、闭包写法" aria-hidden="true">#</a> 1.5.2、闭包写法</h4><p>**常用写法：**外部使用函数内部变量</p><p>写法一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//常见的闭包的形式   外部可以访问使用 函数内部的变量</span>
<span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> fn <span class="token comment">//返回fn()这个函数</span>
<span class="token punctuation">}</span>

<span class="token comment">// outer()   ===  fn   ===  function fn() {}</span>
<span class="token comment">// const fun = function fn() { }</span>
cosnt fun <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//调用fn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写法二（更简约）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 常见的写法2</span>
<span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// 直接返回函数</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例：统计函数使用次数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token operator">++</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">函数被调用了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> fn
<span class="token punctuation">}</span>
<span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//这样就实现了数据的私有，无法直接修改count</span>
<span class="token comment">//但是有内存泄漏问题（i不被回收）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6、变量提升" tabindex="-1"><a class="header-anchor" href="#_1-6、变量提升" aria-hidden="true">#</a> 1.6、变量提升</h3><p>使用 <strong>var</strong> 定义变量会变量提升：<br> 1、把所有var声明的变量提升到作用域最前面<br> 2、只提升声明，不提升赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 访问变量 str</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">&#39;world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefinedworld</span>
<span class="token comment">// 声明变量 str</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello &#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量在声明之前即被访问，变量的值为 <code>undefined</code><br><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code><br> 推荐<strong>先声明再访问</strong>变量</p><h2 id="_2、函数" tabindex="-1"><a class="header-anchor" href="#_2、函数" aria-hidden="true">#</a> 2、函数</h2><h3 id="_2-1、函数提升" tabindex="-1"><a class="header-anchor" href="#_2-1、函数提升" aria-hidden="true">#</a> 2.1、函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用（提升函数声明）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 调用函数</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 声明函数</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;声明之前即被调用...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 不存在提升现象</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 错误</span>
<span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//只提升变量声明</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数表达式不存在提升现象...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ol><li>函数提升能够使函数的<strong>声明调用更灵活</strong></li><li><strong>函数表达式</strong>不存在提升的现象</li><li>函数提升出现在<strong>相同作用域中</strong></li></ol><h3 id="_2-2、函数参数" tabindex="-1"><a class="header-anchor" href="#_2-2、函数参数" aria-hidden="true">#</a> 2.2、函数参数</h3><h4 id="_2-2-1、动态参数" tabindex="-1"><a class="header-anchor" href="#_2-2-1、动态参数" aria-hidden="true">#</a> 2.2.1、动态参数</h4><p><strong>arguments</strong> 是函数内部<strong>内置</strong>的<strong>伪数组</strong>变量，它包含了调用函数时传入的所有实参。可以通过 for 循环接收</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 调用求和函数</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment">// 两个参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2、剩余参数" tabindex="-1"><a class="header-anchor" href="#_2-2-2、剩余参数" aria-hidden="true">#</a> 2.2.2、剩余参数</h4><p>剩余参数允许我们将一个不定数量的参数表示为一个数组</p><p>参数声明为 <strong>...arr</strong><br> 借助 ... 获取的剩余参数时 <strong>真数组</strong>（可以使用pop等方法）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token parameter">baseURL<span class="token punctuation">,</span> <span class="token operator">...</span>other</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baseURL<span class="token punctuation">)</span> <span class="token comment">// 得到 &#39;http://baidu.com&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span>  <span class="token comment">// other  得到 [&#39;get&#39;, &#39;post&#39;]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 调用函数</span>
<span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&#39;http://baidu.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3、展开运算符" tabindex="-1"><a class="header-anchor" href="#_2-2-3、展开运算符" aria-hidden="true">#</a> 2.2.3、展开运算符</h4><p>展开运算符：<code>...</code> ，将一个<strong>数组</strong>进行<strong>展开</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span> <span class="token comment">// 1,2,5,6,8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：该方式不会修改原数组</p><p>典型运用场景：求数组<strong>最大值</strong>，<strong>合并数组</strong>等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3、箭头函数" tabindex="-1"><a class="header-anchor" href="#_2-3、箭头函数" aria-hidden="true">#</a> 2.3、箭头函数</h3><p>目的：箭头函数目的是更简短的函数写法，并且不绑定this，箭头函数的语法比函数更简简洁<br> 适用场景：箭头函数更适应于那些本来需要匿名函数的地方</p><h4 id="_2-3-1、基本语法" tabindex="-1"><a class="header-anchor" href="#_2-3-1、基本语法" aria-hidden="true">#</a> 2.3.1、基本语法</h4><p><strong>const fn = () =&gt; {}</strong></p><p>1、只有一个形参的时候可以省略小括号<br> 2、只有一行代码的时候可以省略大括号<br> 3、只有一行代码的时候可以省略return<br> 4、返回对象需要加（），否则对象的 {} 易与函数的 {} 冲突</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// const fn = function(){</span>
<span class="token comment">//     console.log(123);</span>
<span class="token comment">// }</span>

<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fn3</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">fn4</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x
<span class="token function">fn4</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">fn5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">uname</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">uname</span><span class="token operator">:</span>uname<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2、箭头函数参数" tabindex="-1"><a class="header-anchor" href="#_2-3-2、箭头函数参数" aria-hidden="true">#</a> 2.3.2、箭头函数参数</h4><p>箭头函数没有arguments动态参数，但是<strong>有剩余参数</strong>...args</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> i
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3、箭头函数this" tabindex="-1"><a class="header-anchor" href="#_2-3-3、箭头函数this" aria-hidden="true">#</a> 2.3.3、箭头函数this</h4><p>以前的this指向：谁调用这个函数，this就指向谁</p><p><strong>箭头函数不会创建自己的this</strong>，它只会从自己的作用域链的<strong>上一层沿用this</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 相当于windows.fn()</span>
<span class="token keyword">const</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//window</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 对象方法箭头函数 this</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//window</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;BB&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token function-variable function">count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//obj2</span>
        <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、解构赋值" tabindex="-1"><a class="header-anchor" href="#_3、解构赋值" aria-hidden="true">#</a> 3、解构赋值</h2><h3 id="_3-1、数组解构" tabindex="-1"><a class="header-anchor" href="#_3-1、数组解构" aria-hidden="true">#</a> 3.1、数组解构</h3><p>数组结构是将数组的单元值快速批量赋值给一系列变量的简洁语法</p><p>基本语法：<br> 1、运算符= 左侧的 [] 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量<br> 2、变量的顺序对应数组单元值的位置一次进行赋值操作</p><p>(const) <strong>[参数1, 参数2...] = [参数1, 参数2...]</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span>
<span class="token comment">//数组结构 赋值</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>max<span class="token punctuation">,</span>min<span class="token punctuation">,</span>avg<span class="token punctuation">]</span> <span class="token operator">=</span> arr
<span class="token comment">// const max = arr[0]</span>
<span class="token comment">// const min = arr[1]</span>
<span class="token comment">// const avg = arr[2]</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//必须加分号</span>
<span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span>

<span class="token comment">//一些情况</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">//1,2,3,undefined</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">//1,2,3</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment">//1,2,真数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>防止undefined传递（默认参数）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment">//5,0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>按需导入赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span> <span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">//a,b,d 为 1,2,4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多维数组的结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token punctuation">[</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">//1,2,3,4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>展开运算符：<strong>...</strong></p><h3 id="_3-2、对象解构" tabindex="-1"><a class="header-anchor" href="#_3-2、对象解构" aria-hidden="true">#</a> 3.2、对象解构</h3><p>对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法</p><p>基本语法：</p><p>=左侧的{} 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量<br> 对象属性的值将被赋值给属性名<strong>相同的</strong>变量<br> 注意解构的变量名不要和外面的变量名冲突否则报错<br> 对象中找不到与变量名一致的属性时变量值为undefined</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对象解构的变量名可以<strong>重新改名</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token literal-property property">uname</span><span class="token operator">:</span>username<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pig <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;BB&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> pig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多级对象解构：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pig <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;BB&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">mother</span><span class="token operator">:</span> <span class="token string">&#39;CC&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">father</span><span class="token operator">:</span> <span class="token string">&#39;DD&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token literal-property property">family</span><span class="token operator">:</span><span class="token punctuation">{</span>mother<span class="token punctuation">,</span>father<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> pig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接通过函数参数获取对象属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">//meg为对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、数组方法" tabindex="-1"><a class="header-anchor" href="#_4、数组方法" aria-hidden="true">#</a> 4、数组方法</h2><h3 id="_4-1、foreach" tabindex="-1"><a class="header-anchor" href="#_4-1、foreach" aria-hidden="true">#</a> 4.1、forEach()</h3><p><strong>forEach()</strong> 方法用于调用数组的每个元素，并将元素传递给回调函数<br> 主要适用场景：遍历数组每个元素<br> forEach() 方法没有返回值</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>被遍历的数组<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter"><span class="token function">functon</span><span class="token punctuation">(</span>当前数组元素，当前元素索引号<span class="token punctuation">)</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//函数体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span>
array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、filter" tabindex="-1"><a class="header-anchor" href="#_4-2、filter" aria-hidden="true">#</a> 4.2、filter()</h3><p><strong>filter()</strong> 方法创建一个新的数组，新数组中的元素时通过<strong>检查指定数组</strong>中符合条件的所有元素<br> 主要使用场景：<strong>筛选数组符合条件的元素</strong>，并返回筛选后元素的新数组</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>
<span class="token comment">/*const newArr = arr.filter(function (item,index){
    console.log(item);
    console.log(index);
    return item &gt;= 20
})*/</span>

cosnt newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、map" tabindex="-1"><a class="header-anchor" href="#_4-3、map" aria-hidden="true">#</a> 4.3、map()</h3><p>map 可以遍历数组 <strong>处理数据</strong>，并且 <strong>返回新的数组</strong></p><p>map 也称为 <strong>映射</strong>。map重点在于有返回值，forEach没有返回值</p><p>语法：<br><strong>arr.map(function(ele,index){具体操作})</strong></p><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;pink&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// console.log(ele); 数组元素</span>
    <span class="token comment">// console.log(index); 索引</span>
    <span class="token keyword">return</span> ele <span class="token operator">+</span> <span class="token string">&#39;颜色&#39;</span> <span class="token comment">//返回数组，arr数组每个元素加颜色两个字</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4、join" tabindex="-1"><a class="header-anchor" href="#_4-4、join" aria-hidden="true">#</a> 4.4、join()</h3><p>join() 方法用于把数组中的所有元素 <strong>转换为一个字符串</strong></p><p>语法：<br><strong>console.log(arr.join(&#39;分隔符&#39;));</strong></p><p>参数：<br> 数组元素通过<strong>参数</strong>里面指定的<strong>分隔符</strong>进行分隔，<strong>空字符串</strong>(&#39;&#39;)，则所有元素之间都<strong>没有任何字符</strong>，不带参数，<strong>默认</strong>为<strong>逗号分割</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将数组中的元素全部加成一个字符串，没有分隔符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>遍历数组元素时，可以通过 map 添加 tr，td 标签，通过 join 将新数组索引对应字符串传给 innerHtml ，完成表格渲染</p><h3 id="_4-5、reduce" tabindex="-1"><a class="header-anchor" href="#_4-5、reduce" aria-hidden="true">#</a> 4.5、reduce()</h3><p><strong>reduce</strong> 返回<strong>累积处理的结果</strong>，经常用于<strong>求和等</strong></p><p>基础语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>初始值<span class="token punctuation">)</span>
arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">上一次值，当前值</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>初始值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数：如果有初始值，把初始值累加到里面</p><blockquote><p>注意：计算<strong>对象数组的累加</strong>时，需要添加<strong>初始值0</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.没有初始值</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>current</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> current
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//14</span>

<span class="token comment">// 2.有初始值</span>
<span class="token keyword">const</span> count2 <span class="token operator">=</span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>current</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> current
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//24</span>

<span class="token comment">// 3.箭头函数写法</span>
<span class="token keyword">const</span> count3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> current<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> total <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> current<span class="token punctuation">.</span>salary <span class="token comment">//第一个prev不需要加属性，上一次返回值为数字类型</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//初始值不能省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reduce执行过程：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230417141543.png" alt="" loading="lazy"></p><h3 id="_4-6、其他方法" tabindex="-1"><a class="header-anchor" href="#_4-6、其他方法" aria-hidden="true">#</a> 4.6、其他方法</h3>`,137),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>1.实例方法 <code>find</code> 查找元素， 返回符合测试条件的第一个数组元素（对象），如果没有符合条件的则返回 undefined(重点)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;AAA&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.实例方法<code>every</code> 检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false(重点)</p><p>3.实例方法<code>some</code> 检测数组中的元素是否满足指定条件 <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p><p>4.实例方法 <code>concat</code> 合并两个数组，返回生成新数组</p><p>5.实例方法 <code>sort</code> 对原数组单元值排序</p><p>6.实例方法 <code>splice</code> 删除或替换原数组单元</p><p>7.实例方法 <code>reverse</code> 反转数组</p><p>8.实例方法 <code>findIndex</code> 查找元素的索引值在</p><h3 id="_4-7、伪数组转换为真数组" tabindex="-1"><a class="header-anchor" href="#_4-7、伪数组转换为真数组" aria-hidden="true">#</a> 4.7、伪数组转换为真数组</h3><p>静态方法：<strong>Array.from()</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;ul li&#39;</span><span class="token punctuation">)</span> <span class="token comment">//伪数组</span>
<span class="token comment">//lis.pop() 伪数组，报错</span>
<span class="token keyword">const</span> liss <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、深入对象" tabindex="-1"><a class="header-anchor" href="#_5、深入对象" aria-hidden="true">#</a> 5、深入对象</h2><h3 id="_5-1、创建对象三种方式" tabindex="-1"><a class="header-anchor" href="#_5-1、创建对象三种方式" aria-hidden="true">#</a> 5.1、创建对象三种方式</h3><p>① 利用对象字面量创建对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 利用new Object() 创建对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③ 利用构造函数创建对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Pig</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> pig1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2、构造函数" tabindex="-1"><a class="header-anchor" href="#_5-2、构造函数" aria-hidden="true">#</a> 5.2、构造函数</h3><p><strong>构造函数</strong>用于初始化对象</p><p>使用场景：通过<strong>构造函数快速创建多个类似对象</strong></p><p>构造函数的约定：<br> 函数名以<strong>大写字母</strong>开头<br> 只能通过 new 操作符来执行</p><blockquote><p>注：构造函数里没有return，默认返回值为创建的对象</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Pig</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//有内存浪费问题</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>

<span class="token comment">//添加属性、方法：</span>
a<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;man&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化过程：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230417131430.png" alt="" loading="lazy"></p><h3 id="_5-3、实例成员-静态成员" tabindex="-1"><a class="header-anchor" href="#_5-3、实例成员-静态成员" aria-hidden="true">#</a> 5.3、实例成员，静态成员</h3><p>实例成员：通过构造器创建的对象称为<strong>实例对象</strong>，实例对象<strong>中的属性和方法</strong>称为实例成员（<strong>实例属性和实例方法</strong>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Pig</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span> <span class="token comment">//实例属性</span>
a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span> <span class="token comment">//实例方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态成员：<strong>构造函数上</strong>的<strong>属性和方法</strong>称为静态成员（<strong>静态属性和静态方法</strong>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token constant">PI</span>    <span class="token comment">//静态属性</span>
Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//静态方法</span>

<span class="token keyword">function</span> <span class="token function">Pig</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Pig<span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">//静态属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、基本包装类型" tabindex="-1"><a class="header-anchor" href="#_6、基本包装类型" aria-hidden="true">#</a> 6、基本包装类型</h2><h3 id="_6-1、概念" tabindex="-1"><a class="header-anchor" href="#_6-1、概念" aria-hidden="true">#</a> 6.1、概念</h3><p>js底层完成，把简单数据类型包装为了引用数据类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//const str = &#39;AA&#39; 相当于</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>内置构造函数</strong>：<br> 引用类型：Object，Array，RegExp(正则)，Date等<br> 包装类型：String，Number，Boolean等</p><h3 id="_6-2、object" tabindex="-1"><a class="header-anchor" href="#_6-2、object" aria-hidden="true">#</a> 6.2、Object</h3><p>三个常用<strong>静态方法</strong>：</p><h4 id="_6-2-1、object-keys" tabindex="-1"><a class="header-anchor" href="#_6-2-1、object-keys" aria-hidden="true">#</a> 6.2.1、Object.keys</h4><p><strong>Object.keys(obj)</strong>：获取对象中所有属性（<strong>键</strong>），返回一个数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">81</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-2、object-values" tabindex="-1"><a class="header-anchor" href="#_6-2-2、object-values" aria-hidden="true">#</a> 6.2.2、Object.values()</h4><p><strong>Object.values(obj)</strong>：获取对象中所有属性（<strong>值</strong>），返回一个数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">81</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-3、object-assign" tabindex="-1"><a class="header-anchor" href="#_6-2-3、object-assign" aria-hidden="true">#</a> 6.2.3、Object.assign()</h4><p><strong>Object.assign(obj2,obj1)</strong>：对象拷贝,obj1拷贝给obj2</p><p>该方法可以<strong>添加属性</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">81</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">//{name: &#39;AA&#39;,age: 81,gender:&#39;女&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3、array" tabindex="-1"><a class="header-anchor" href="#_6-3、array" aria-hidden="true">#</a> 6.3、Array</h3><p>数组常见的<strong>实例方法：</strong></p><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>forEach()</td><td>遍历数组</td><td>不返回数组，用于查找遍历数组元素</td></tr><tr><td>filter()</td><td>过滤数组</td><td><strong>返回新数组</strong>，返回筛选满足条件的数组元素</td></tr><tr><td>map()</td><td>迭代数组</td><td><strong>返回新数组</strong>，返回处理后的数组元素</td></tr><tr><td>reduice()</td><td>累积器</td><td>返回累积处理的结果，经常用于求和</td></tr></tbody></table><p>详见第四章</p><h3 id="_6-4、string" tabindex="-1"><a class="header-anchor" href="#_6-4、string" aria-hidden="true">#</a> 6.4、String</h3>`,55),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>1.实例属性 <strong><code>length</code></strong> 用来获取字符串的度长(重点)</p><p>2.实例方法 <strong><code>split(&#39;分隔符&#39;)</code></strong> 用来将字符串拆分成数组(重点)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;2022-1-1&#39;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.实例方法 <strong><code>substring</code></strong>（需要截取的第一个字符的索引[,结束的索引号]） 用于字符串截取(重点)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;ABCDE&#39;</span>
<span class="token keyword">const</span> sub <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//BC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4.实例方法 <strong><code>startsWith</code></strong>(检测字符串[, 检测位置索引号])\` 检测是否以某字符开头(重点)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;Saturday night plans&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Sat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Sat&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.实例方法 <strong><code>includes</code></strong>(搜索的字符串[, 检测位置索引号]) 判断一个字符串是否包含在另一个字符串中(区分大小写)，根据情况返回 true 或 false(重点)</p><p>6.实例方法 <code>toUpperCase</code> 用于将字母转换成大写</p><p>7.实例方法 <code>toLowerCase</code> 用于将就转换成小写</p><p>8.实例方法 <code>indexOf</code> 检测是否包含某字符</p><p>9.实例方法 <code>endsWith</code> 检测是否以某字符结尾</p><p>10.实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</p><p>11.实例方法 <code>match</code> 用于查找字符串，支持正则匹配</p><h3 id="_6-5、number" tabindex="-1"><a class="header-anchor" href="#_6-5、number" aria-hidden="true">#</a> 6.5、Number</h3><p>常用方法：</p><p><strong>toFixed()</strong>：设置保留两位小数位的长度，<strong>四舍五入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> price <span class="token operator">=</span> <span class="token number">21.345</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>price<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//21.35</span>
<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//10.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、原型" tabindex="-1"><a class="header-anchor" href="#_7、原型" aria-hidden="true">#</a> 7、原型</h2><h3 id="_7-1、prototype-属性-原型对象" tabindex="-1"><a class="header-anchor" href="#_7-1、prototype-属性-原型对象" aria-hidden="true">#</a> 7.1、prototype 属性（原型对象）</h3><p><strong>原型</strong>可以解决<strong>构造函数浪费内存的问题</strong><br> 即<strong>利用原型对象实现方法共享</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230417154705.png" alt="" loading="lazy"></p><ul><li>构造函数通过原型分配的函数是所有对象所 <strong>共享的</strong></li><li>JS规定，每一个<strong>构造函数</strong>都有一个<strong>prototype属性</strong>，指向另一个对象，所以称prototype为<strong>原型对象</strong></li><li>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存</li><li><strong>可以把不变的方法，定义在prototype对象上，这样所有对象的实例就可以共享这些方法</strong></li><li><strong>构造函数和原型对象中this都指向实例化对象</strong></li></ul><p>将 <strong>公共的属性</strong> 写到 <strong>构造函数</strong> 里<br> 将 <strong>公共的方法</strong> 写到 <strong>原型对象</strong> 上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// function Con(uname,age){</span>
<span class="token comment">//     this.name = uname</span>
<span class="token comment">//     this.age = age</span>
<span class="token comment">//     this.sing = function(){</span>
<span class="token comment">//         console.log(&#39;A&#39;);</span>
<span class="token comment">//     }</span>
<span class="token comment">// }</span>
<span class="token comment">// const q = new Con(&#39;AAA&#39;,10)</span>
<span class="token comment">// const w = new Con(&#39;BBB&#39;,20)</span>
<span class="token comment">// console.log(q.sing === w.sing); // false</span>

<span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">&#39;BB&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//调用</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> b<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例：自己定义 数组的扩展方法：求和 和 最大值</p><blockquote><p><strong>注意</strong>：不要使用箭头函数，箭头函数没有this（this指向父层）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//最大值</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">max</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> max <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//求和</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>current</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> prev <span class="token operator">+</span> current<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2、constructor-属性" tabindex="-1"><a class="header-anchor" href="#_7-2、constructor-属性" aria-hidden="true">#</a> 7.2、constructor 属性</h3><p>每个<strong>原型对象（prototype）<strong>都有个</strong>constructor</strong>属性<br> 作用：该属性<strong>指向</strong>该<strong>原型对象的构造函数</strong>，简单理解就是指向最初的构造器</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230417163858.png" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Star<span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用场景：<br> 如果有多个对象的方法，可以给<strong>原型对象采取对象形式赋值</strong><br> 但是直接赋值会<strong>覆盖</strong>构造函数原型对象原来的内容，原型对象的constructor就不再指向当前构造函数了<br> 此时可以<strong>在修改后的原型对象中，添加一个constructor指向原来的构造函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token class-name">Star</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 避免被覆盖，手动指向Star构造函数</span>
    <span class="token literal-property property">constroctor</span><span class="token operator">:</span> Star<span class="token punctuation">,</span>
    <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">dance</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dance&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constroctor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3、-proto-对象原型" tabindex="-1"><a class="header-anchor" href="#_7-3、-proto-对象原型" aria-hidden="true">#</a> 7.3、_<em>proto</em>_ 对象原型</h3><p><strong>对象原型 指向 原型对象</strong></p><p><strong>原型对象</strong>是如何访问<strong>原型对象</strong>（prototype）的属性和方法的：</p><p><strong>对象</strong>都会有一个<strong>属性 _<em>proto</em>_</strong> <strong>指向</strong> 构造函数的 <strong>prototype</strong> 原型对象</p><p>注意：</p><ul><li>__proto__ 是JS非标准属性 （ <strong>__proto__是只读的</strong>，在浏览器中显式为[[Prototype]]）</li><li>[[prototype]]和 _<em>proto</em>_ 意义相同</li><li>用来表明当前实例对象指向哪个原型对象prototype</li><li><strong>_<em>proto</em>_</strong> 对象原型里面也有一个 <strong>constructor</strong>属性，<strong>指向创建该实例对象的构造函数</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Star<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230417224553.png" alt="" loading="lazy"></p><h3 id="_7-4、原型继承" tabindex="-1"><a class="header-anchor" href="#_7-4、原型继承" aria-hidden="true">#</a> 7.4、原型继承</h3><p>JS中大多是借助原型对象实现继承的特性</p><p>JS原型继承：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">//Woman通过原型来继承Person</span>
<span class="token class-name">Woman</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//指回原来的构造函数</span>
<span class="token class-name">Woman</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Woman
<span class="token comment">//Woman添加baby方法</span>
<span class="token class-name">Woman</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">baby</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baby&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> red <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Man</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Man</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Man
<span class="token keyword">const</span> blue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-5、原型链" tabindex="-1"><a class="header-anchor" href="#_7-5、原型链" aria-hidden="true">#</a> 7.5、原型链</h3><p>**对象 都有 _<em>proto</em>_ ， 原型对象也有 **</p><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为<strong>原型链</strong></p><p>对象原型（ _<em>proto</em>_ ）指向原型对象，原型对象里有属性__proto__，再指向父级原型对象以此类推，最后一个对象原型执行null</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1676793388695.png" alt="1676793388695" loading="lazy"></p><p>① 当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。<br> ② 如果没有就查找它的原型（也就是 <strong>proto</strong><strong>指向的</strong> prototype <strong>原型对象</strong>）<br> ③ 如果还没有就查找<strong>原型对象的原型</strong>（Object的原型对象）<br> ④ 依此类推一直找到 Object 为止（null）<br> ⑤ __proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线<br> ⑥ 可以使用 instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//Object 最大的对象</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、深浅拷贝" tabindex="-1"><a class="header-anchor" href="#_8、深浅拷贝" aria-hidden="true">#</a> 8、深浅拷贝</h2><h3 id="_8-1、浅拷贝" tabindex="-1"><a class="header-anchor" href="#_8-1、浅拷贝" aria-hidden="true">#</a> 8.1、浅拷贝</h3><p>浅拷贝：拷贝的是<strong>地址</strong></p><p>常见方法：</p><ol><li>拷贝对象：<strong>Object.assgin()</strong> 或<br> 展开运算符 <strong>{...obj}</strong> 拷贝对象</li><li>拷贝数组：<strong>Array.prototype.concat()</strong> 或<br> 展开运算符 <strong>[...arr]</strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span>
<span class="token punctuation">}</span>
cosnt o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浅拷贝存在的问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">baby</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span>
o<span class="token punctuation">.</span>family<span class="token punctuation">.</span>baby <span class="token operator">=</span> <span class="token string">&#39;BB&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>family<span class="token punctuation">.</span>baby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//BB</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>family<span class="token punctuation">.</span>baby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//BB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2、深拷贝" tabindex="-1"><a class="header-anchor" href="#_8-2、深拷贝" aria-hidden="true">#</a> 8.2、深拷贝</h3><p>深拷贝：拷贝的是<strong>对象</strong>，不是地址</p><p>浅拷贝和深拷贝只针对引用类型</p><p>深拷贝的<strong>三种方式</strong>：</p><ol><li>通过递归实现深拷贝</li><li>lodash/cloneDeep</li><li>通过JSON.stringify()实现</li></ol><h4 id="_8-2-1、递归实现深拷贝" tabindex="-1"><a class="header-anchor" href="#_8-2-1、递归实现深拷贝" aria-hidden="true">#</a> 8.2.1、递归实现深拷贝</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 拷贝函数</span>
<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">newObj<span class="token punctuation">,</span> oldObj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// k 是属性名，oldObj[k] 是属性值</span>
        <span class="token comment">// newobj[k] === o.uname </span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
            newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">deepCopy</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-2-2、lodash-clonedeep" tabindex="-1"><a class="header-anchor" href="#_8-2-2、lodash-clonedeep" aria-hidden="true">#</a> 8.2.2、lodash/cloneDeep</h4>`,69),m={href:"https://www.lodashjs.com/",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 先引用 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./lodash.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
        <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Q&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;W&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">baby</span><span class="token operator">:</span> <span class="token string">&#39;aa&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> o <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
    o<span class="token punctuation">.</span>family<span class="token punctuation">.</span>baby <span class="token operator">=</span> <span class="token string">&#39;bb&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-2-3、json-stringify" tabindex="-1"><a class="header-anchor" href="#_8-2-3、json-stringify" aria-hidden="true">#</a> 8.2.3、JSON.stringify()</h4><p>把 obj <strong>先转化成字符串再转换成对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Q&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;W&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">baby</span><span class="token operator">:</span> <span class="token string">&#39;aa&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 把对象转换为 JSON 字符串</span>
<span class="token comment">// console.log(JSON.stringify(obj))</span>
<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
o<span class="token punctuation">.</span>family<span class="token punctuation">.</span>baby <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、异常处理" tabindex="-1"><a class="header-anchor" href="#_9、异常处理" aria-hidden="true">#</a> 9、异常处理</h2><h3 id="_9-1、throw抛异常" tabindex="-1"><a class="header-anchor" href="#_9-1、throw抛异常" aria-hidden="true">#</a> 9.1、throw抛异常</h3><p><strong>throw</strong> 抛出异常信息，程序也会终止执行<br> throw 后面跟的是错误信息<br><strong>Error 对象</strong> 配合throw 使用，能够设置更详细的错误信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x <span class="token operator">||</span> <span class="token operator">!</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token string">&#39;参数传递错误&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2、try-catch-捕获错误信息" tabindex="-1"><a class="header-anchor" href="#_9-2、try-catch-捕获错误信息" aria-hidden="true">#</a> 9.2、try-catch 捕获错误信息</h3><p>可以通过 try-catch-finally 捕获错误信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token comment">// 可能发送错误的代码</span>
        <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.p&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 拦截错误，提示浏览器提供的错误信息，不中断程序的执行</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 需要加return 中断程序执行</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">//一定会执行的代码</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3、debugger" tabindex="-1"><a class="header-anchor" href="#_9-3、debugger" aria-hidden="true">#</a> 9.3、debugger</h3><p>debugger：在代码中手动打端点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">debugger</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、改变this指向" tabindex="-1"><a class="header-anchor" href="#_10、改变this指向" aria-hidden="true">#</a> 10、改变this指向</h2><h3 id="_10-1、this指向" tabindex="-1"><a class="header-anchor" href="#_10-1、this指向" aria-hidden="true">#</a> 10.1、this指向</h3><p>**普通函数 **的调用方式决定了 <code>this</code> 的值，即【谁调用 <code>this</code> 的值指向谁】<br> 普通函数没有明确调用者时 <code>this</code> 值为 <code>window</code>，<strong>严格模式</strong>下没有调用者时 <code>this</code> 的值为 <code>undefined</code>。</p><p>箭头函数中 this 与普通函数完全不同，也不受调用方式的影响，<strong>箭头函数中不存在this</strong><br> 箭头函数中的 this 引用的就是最近作用域中的 this（向外层作用域中一层一层查找this，直到this有定义）</p><h3 id="_10-2、改变this指向" tabindex="-1"><a class="header-anchor" href="#_10-2、改变this指向" aria-hidden="true">#</a> 10.2、改变this指向</h3><h4 id="_10-2-1、call-了解" tabindex="-1"><a class="header-anchor" href="#_10-2-1、call-了解" aria-hidden="true">#</a> 10.2.1、call() （了解）</h4><p>使用 <code>call</code> 方法调用函数，同时指定函数中 <code>this</code> 的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//调用函数，改变this指向</span>
<span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-2、apply" tabindex="-1"><a class="header-anchor" href="#_10-2-2、apply" aria-hidden="true">#</a> 10.2.2、apply()</h4><p>使用 <strong>apply()</strong> 方法调用函数，同时指定被调用函数中this的值</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span><span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>thisArg</strong>：在fun函数中指定 this 的值<br><strong>argsArray</strong>：传递的值，必须包含在<strong>数组</strong>里<br> 返回值就是函数的返回值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用场景：求数组最大值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span>arr<span class="token punctuation">)</span>
<span class="token keyword">const</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-3、bind" tabindex="-1"><a class="header-anchor" href="#_10-2-3、bind" aria-hidden="true">#</a> 10.2.3、bind()</h4><p><strong>bind()</strong> 方法<strong>不会调用函数</strong>，但是能改变函数内部的 this 指向</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>thisArg</strong>：在fun函数中指定 this 的值<br><strong>arg1,arg2</strong>：传递的其他参数</p><p>返回由指定的 this 值和初始化参数改造的 <strong>原函数拷贝（新函数）</strong></p><p>在只想改变 this 执行，并不想调用这个函数的时候，可以使用bind，比如改变定时器内部的this指向</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 点击按钮禁用，2秒后开启</span>
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span>
    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// btn.disabled = false</span>
        <span class="token comment">// 在这个普通函数内，用this由原来的this改为btn</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11、防抖与节流" tabindex="-1"><a class="header-anchor" href="#_11、防抖与节流" aria-hidden="true">#</a> 11、防抖与节流</h2><h3 id="_11-1、防抖-debounce" tabindex="-1"><a class="header-anchor" href="#_11-1、防抖-debounce" aria-hidden="true">#</a> 11.1、防抖（debounce）</h3><p>防抖：单位时间内，频繁触发事件，<strong>只执行最后一次</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230419141850.png" alt="" loading="lazy"></p><p>使用场景：<br> 搜索框<strong>搜索输入</strong>，只需要最后一次输入完，再发送请求<br> 手机号、验证邮箱<strong>输入检测</strong></p>`,43),g=n("br",null,null,-1),h=n("strong",null,"lodash",-1),f={href:"https://www.lodashjs.com/docs/lodash.debounce#_debouncefunc-wait0-options",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"_.debounce(func, [wait=0], [options=])",-1),w=n("br",null,null,-1),j=n("strong",null,"手写",-1),_=a(`<h4 id="_11-1-1、lodash实现" tabindex="-1"><a class="header-anchor" href="#_11-1-1、lodash实现" aria-hidden="true">#</a> 11.1.1、lodash实现</h4><p>案例：鼠标在盒子上移动，鼠标停止500ms之后，里面的数字才会变化+1</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./lodash.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token comment">// 鼠标移动函数</span>
    <span class="token keyword">function</span> <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">++</span>i
        <span class="token comment">// 如果里面存在大量操作 dom 的情况，可能会卡顿</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// lodash 防抖的写法</span>
    <span class="token comment">// _.debounce(fun,时间)  500毫秒后采取+1</span>
    box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span>mouseMove<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-1-2、手写防抖函数" tabindex="-1"><a class="header-anchor" href="#_11-1-2、手写防抖函数" aria-hidden="true">#</a> 11.1.2、手写防抖函数</h4><p>防抖的核心是利用定时器（<strong>setTimeout</strong>）来实现</p><p>① 声明一个定时器变量<br> ② 当鼠标每次滑动都先判断是否有定时器了，如果有就先清除以前的定时器<br> ③ 如果没有定时器则开启定时器，存到变量里面<br> ④ 定时器里面写函数调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// 让这个变量++</span>
<span class="token comment">// 鼠标移动函数</span>
<span class="token keyword">function</span> <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">++</span>i
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span><span class="token function">debounce</span><span class="token punctuation">(</span>mouseMove<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2、节流-throttle" tabindex="-1"><a class="header-anchor" href="#_11-2、节流-throttle" aria-hidden="true">#</a> 11.2、节流（throttle）</h3><p>节流：在单位时间内，频繁触发事件，<strong>只执行一次</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230419160426.png" alt="" loading="lazy"></p><p>使用场景：鼠标移动 mousemove、页面尺寸缩放 resize，滚动条 scroll 等</p>`,11),x=n("br",null,null,-1),A=n("strong",null,"lodash",-1),S={href:"https://www.lodashjs.com/docs/lodash.throttle#_throttlefunc-wait0-options",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"_.throttle(func, [wait=0], [options=])",-1),B=n("br",null,null,-1),T=n("strong",null,"手写",-1),M=a(`<p>案例：鼠标在盒子上移动，不管移动多少次，每隔500ms才+1</p><h4 id="_11-2-1、lodash实现" tabindex="-1"><a class="header-anchor" href="#_11-2-1、lodash实现" aria-hidden="true">#</a> 11.2.1、lodash实现</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">++</span>i
<span class="token punctuation">}</span>
<span class="token comment">// 语法：_.throttle(fun,时间)</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span>_<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span>mouseMove<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-2-2、手写节流函数" tabindex="-1"><a class="header-anchor" href="#_11-2-2、手写节流函数" aria-hidden="true">#</a> 11.2.2、手写节流函数</h4><p>节流的核心是利用定时器（<strong>setTimeout</strong>）来实现</p><p>①：声明一个<strong>定时器变量</strong><br> ②：当鼠标每次滑动都先判断<strong>是否有定时器</strong>了，如果有定时器则不开启新定时器<br> ③：如果没有定时器则开启定时器，并存到变量里<br> 定时器里<strong>调用</strong>执行的函数<br> 在定时器里面把定时器<strong>清空</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">++</span>i
<span class="token punctuation">}</span>
<span class="token comment">//    // 语法：_.throttle(fun,时间)</span>
<span class="token comment">//    box.addEventListener(&#39;mousemove&#39;,_.throttle(mouseMove,500))</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 清空定时器</span>
                <span class="token comment">// 在 setTimeout 中无法删除定时器，因为定时器还在运作，所以使用timer = null 而不是 clearTimeout(timer)</span>
                timer <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span><span class="token function">throttle</span><span class="token punctuation">(</span>mouseMove<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-3、总结" tabindex="-1"><a class="header-anchor" href="#_11-3、总结" aria-hidden="true">#</a> 11.3、总结</h3><table><thead><tr><th>性能优化</th><th>说明</th></tr></thead><tbody><tr><td>防抖</td><td>单位时间内，频繁触发事件，<strong>只执行最后一次</strong></td></tr><tr><td>节流</td><td>单位时间内，频繁触发事件，<strong>只执行一次</strong></td></tr></tbody></table>`,9);function q(z,E){const t=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[s("其它常用方法"),p(t)])]),k,n("p",null,[n("a",d,[s("String常用方法："),p(t)])]),v,n("p",null,[n("a",m,[s("lodash/cloneDeep"),p(t)]),s(" 方式：")]),b,n("p",null,[s("实现方式："),g,s(" 1、"),h,s(" 提供的防抖 "),n("a",f,[y,p(t)]),w,s(" 2、"),j,s("一个防抖函数来处理")]),_,n("p",null,[s("实现方式："),x,s(" 1、"),A,s(" 提供的节流函数来处理 "),n("a",S,[O,p(t)]),B,s(" 2、"),T,s(" 一个节流函数来处理")]),M])}const C=e(l,[["render",q],["__file","3、JavaScript进阶.html.vue"]]);export{C as default};
