import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as p,e as o,b as n,d as c,f as i}from"./app-c4899791.js";const l={},u=n("h1",{id:"_033-搜索旋转排序数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_033-搜索旋转排序数组","aria-hidden":"true"},"#"),c(" 033_搜索旋转排序数组")],-1),r=i(`<h2 id="解法" tabindex="-1"><a class="header-anchor" href="#解法" aria-hidden="true">#</a> 解法</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> target <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> <span class="token comment">//true为左边区域，false为右边区域</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//mid与target同区</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bool <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token punctuation">)</span><span class="token punctuation">{</span>
                    left <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                    right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token comment">//mid与target不同区</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> 
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//mid在左区，让left往左</span>
                    left <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                    right <span class="token operator">=</span> mid<span class="token punctuation">;</span> <span class="token comment">//mid在右区，让right往右</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先将nums[0]的值得到，如果nums[0]正好为target，返回0，用一个布尔值bool用于判断target位于数组的左半部分还是右半部分，开始二分查找，判断mid所处位置与target所处位置是否同区域，若同区，判断mid与target的值，移动相应指针，若不同区，判断mid与nums[0]的值，让指针往同区域的地方靠</p>`,3);function k(d,m){const s=t("Badge");return e(),p("div",null,[u,o(s,{text:"中等",type:"warning",vertical:"middle"}),r])}const _=a(l,[["render",k],["__file","leetcode_033_搜索旋转排序数组.html.vue"]]);export{_ as default};
