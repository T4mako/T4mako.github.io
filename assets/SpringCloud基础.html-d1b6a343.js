import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,a as r,b as n,d as a,e as s,w as u,f as t}from"./app-00a348fd.js";const d={},k=t('<h2 id="_1、微服务介绍" tabindex="-1"><a class="header-anchor" href="#_1、微服务介绍" aria-hidden="true">#</a> 1、微服务介绍</h2><p><strong>单体架构</strong>：将业务的所有能集中在一个项目中开发，打成一个包部署<br> 优点：架构简单，部署成本低<br> 缺点：耦合度高</p><p><strong>分布式架构</strong>：根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。<br> 优点：降低服务耦合、有利于服务升级拓展<br> 缺点：架构复杂，难度大</p>',3),m=t('<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321132615.png" alt="" loading="lazy"></p><p>分布式架构要考虑的问题：<br> 服务拆分粒度如何？服务集群地址如何维护？服务之间如何实现远程调用？服务健康状态如何感知？</p><p><strong>微服务</strong>：微服务是一种经过<strong>良好架构设计的分布式架构方案</strong>，微服务架构特征：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321134134.png" alt="" loading="lazy"></p><p>微服务技术对比：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321134826.png" alt="" loading="lazy"></p><p>企业需求：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321134909.png" alt="" loading="lazy"></p><h2 id="_2、服务拆分及远程调用" tabindex="-1"><a class="header-anchor" href="#_2、服务拆分及远程调用" aria-hidden="true">#</a> 2、服务拆分及远程调用</h2><h3 id="_2-1、springcloud介绍" tabindex="-1"><a class="header-anchor" href="#_2-1、springcloud介绍" aria-hidden="true">#</a> 2.1、SpringCloud介绍</h3>',7),v={href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),b=t(`<p>SpringCloud与SpringBoot的版本兼容关系如下：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321135409.png" alt="" loading="lazy"></p><p>本次学习的版本是Hoxton.SR10，因此对应的SpringBOot版本：2.3.x版本。</p><h3 id="_2-2、服务拆分及远程调用" tabindex="-1"><a class="header-anchor" href="#_2-2、服务拆分及远程调用" aria-hidden="true">#</a> 2.2、服务拆分及远程调用</h3><p>服务拆分注意事项：<br> 1、不同微服务，不要重复开发相同业务<br> 2、微服务数据独立，不要访问其他微服务的数据库<br> 3、微服务可以将自己的业务暴露为接口，供其他微服务调用</p><p>以课前资料中的微服务cloud-demo为例：</p><p>将项目解压到idea工作空间，通过idea打开工程文件：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321141027.png" alt="" loading="lazy"></p><h4 id="_2-2-1、功能需求" tabindex="-1"><a class="header-anchor" href="#_2-2-1、功能需求" aria-hidden="true">#</a> 2.2.1、功能需求</h4><p>运行项目，根据订单id查询订单的同时，返回的用户为null</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321145505.png" alt="" loading="lazy"></p><p>需求：根据订单id查询订单的同时，把订单所属的用户信息一起返回，<strong>即从一个服务到另一个服务的远程调用</strong></p><p><strong>远程调用</strong>方式解析：<strong>在Java代码中发起Http请求</strong></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321145718.png" alt="" loading="lazy"></p><h4 id="_2-2-2、远程调用-注册resttemplate" tabindex="-1"><a class="header-anchor" href="#_2-2-2、远程调用-注册resttemplate" aria-hidden="true">#</a> 2.2.2、远程调用，注册RestTemplate</h4><p><em><strong>RestTemplate</strong></em>：Spring提供的<strong>发送Http请求的工具</strong>，封装了HTTP请求的细节，可以快速地向其他Web服务发送GET、POST、PUT、DELETE等请求</p><p>在order-service的OrderApplication中<strong>注册RestTemplate</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;cn.itcast.order.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//注册RestTemplate</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>service中使用RestTemplate</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">queryOrderById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.查询订单</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.利用RestTemplate发送http请求，查询用户</span>
    <span class="token comment">// 2.1.url路径：</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;Http://localhost:8081/user/&quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.2发送http请求，实现远程调用</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过反序列化，将json对象转化为java对象</span>
    <span class="token comment">// 3.封装User到Order</span>
    order<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.返回</span>
    <span class="token keyword">return</span> order<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个概念：<br><strong>服务提供者</strong>：一次业务中，被其他微服务调用的服务（提供接口给其他微服务）<br><strong>服务消费者</strong>：一次业务中，调用其他微服务的服务（调用其他微服务提供的接口）<br> 若服务A调用服务B，服务B调用服务C，则它<strong>既是提供者，又是消费者</strong></p><h2 id="_3、eureka注册中心" tabindex="-1"><a class="header-anchor" href="#_3、eureka注册中心" aria-hidden="true">#</a> 3、Eureka注册中心</h2><h3 id="_3-1、eureka的作用" tabindex="-1"><a class="header-anchor" href="#_3-1、eureka的作用" aria-hidden="true">#</a> 3.1、Eureka的作用</h3><ul><li>消费者该如何获取服务提供者具体信息： <ul><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者根据服务名称向eureka拉去提供者信息</li></ul></li><li>如果有多个服务提供者，消费者该如何选择： <ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul></li><li>消费者如何感知服务提供者健康状态 <ul><li>服务提供者会每隔30s向EurekaServer发送心跳请求，报告健康状态</li><li>eureka会更新记录到服务列表信息，心跳不支持会被剔除</li><li>消费者就可以拉去到最新信息</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321180314.png" alt="" loading="lazy"></p><h3 id="_3-2、搭建eureka服务" tabindex="-1"><a class="header-anchor" href="#_3-2、搭建eureka服务" aria-hidden="true">#</a> 3.2、搭建Eureka服务</h3><p><strong>搭建EurekaServer服务步骤如下：</strong></p><p>1、创建项目，引入spring-cloud-starter-netflix-eureka-<strong>server</strong>依赖</p><p>创建<strong>新的服务（model）</strong>，选择maven</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--eureka的服务端依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322130611.png" alt="" loading="lazy"></p><p>2、编写<strong>启动类，添加@EnableEurekaServer</strong>注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>eureka</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaServer</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、添加application.yml文件，编写下面配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10086</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> 
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3、eureka服务注册" tabindex="-1"><a class="header-anchor" href="#_3-3、eureka服务注册" aria-hidden="true">#</a> 3.3、Eureka服务注册</h3><p>将user-service项目引入到EurekaServer步骤如下：</p><p>1、在user-service项目中引入spring-cloud-starter-netflix-eureka-<strong>client</strong>依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--eureka的客户端依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在application.yml文件，编写下面配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> userservice
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，我们可以将user-service多次启动，模拟多实例部署，但为了避免端口冲突，需要修改端口设置</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322133510.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322133349.png" alt="" loading="lazy"></p><h3 id="_3-4、服务发现" tabindex="-1"><a class="header-anchor" href="#_3-4、服务发现" aria-hidden="true">#</a> 3.4、服务发现</h3><p>在OrderService完成服务拉取：<br> 服务拉取是基于服务名称获取服务列表，然后在服务列表做负载均衡</p><p>1、在OrderService的代码，修改访问的url路径，用服务名代替ip，端口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2.1.url路径：</span>
<span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;Http://userservice/user/&quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//服务名为userservice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在order-service项目的启动类OrderApplication中的RestTemplate添加负载均衡注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、ribbon负载均衡" tabindex="-1"><a class="header-anchor" href="#_4、ribbon负载均衡" aria-hidden="true">#</a> 4、Ribbon负载均衡</h2><h3 id="_4-1负载均衡流程" tabindex="-1"><a class="header-anchor" href="#_4-1负载均衡流程" aria-hidden="true">#</a> 4.1负载均衡流程</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210713224517686.png" alt="" loading="lazy"></p><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求（拦截客户端发起的HTTP请求，RestTemplate符合，所以被拦截），获取拦截的地址，对地址做了修改。</p><p>基本流程如下：</p>`,53),h={href:"http://userservice/user/1",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"RibbonLoadBalancerClient会从请求url中获取服务名称，也就是userservice",-1),f=n("li",null,[a("DynamicServerListLoadBalancer根据userservice到eureka"),n("strong",null,"拉取服务"),a("列表")],-1),_=n("li",null,[a("eureka"),n("strong",null,"返回列表"),a("，localhost:8081、localhost:8082")],-1),w=n("li",null,[a("IRule利用"),n("strong",null,"内置负载均衡规则"),a("，从列表中选择一个，例如localhost:8081")],-1),x={href:"http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82",target:"_blank",rel:"noopener noreferrer"},C=t(`<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210713224724673.png" alt="" loading="lazy"></p><h3 id="_4-2、负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-2、负载均衡策略" aria-hidden="true">#</a> 4.2、负载均衡策略</h3><h4 id="_4-2-1-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-2-1-负载均衡策略" aria-hidden="true">#</a> 4.2.1.负载均衡策略</h4><p>Ribbon的负载均衡规则是一个叫做IRule的接口来定义的，每一个子接口都是一种规则</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210713225653000.png" alt="" loading="lazy"></p><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td><strong>简单轮询</strong>服务列表来选择服务器。它是Ribbon<strong>默认</strong>的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<code>&lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit</code>属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><h4 id="_4-2-2修改ribbon负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-2-2修改ribbon负载均衡策略" aria-hidden="true">#</a> 4.2.2修改Ribbon负载均衡策略</h4><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：一般用默认的负载均衡规则，不做修改。</strong></p></blockquote><h3 id="_4-3、饥饿加载" tabindex="-1"><a class="header-anchor" href="#_4-3、饥饿加载" aria-hidden="true">#</a> 4.3、饥饿加载</h3><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
  	<span class="token comment">#开启饥饿加载</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment">#指定对userservice这个服务饥饿加载</span>
    <span class="token key atrule">clients</span><span class="token punctuation">:</span> 
    <span class="token comment">#多个服务</span>
     <span class="token punctuation">-</span> userservice
     <span class="token punctuation">-</span> XXservice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、nacos注册中心" tabindex="-1"><a class="header-anchor" href="#_5、nacos注册中心" aria-hidden="true">#</a> 5、Nacos注册中心</h2>`,19),I={href:"https://nacos.io/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/Netflix/eureka",target:"_blank",rel:"noopener noreferrer"},j=n("h3",{id:"_5-1、安装nacos",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-1、安装nacos","aria-hidden":"true"},"#"),a(" 5.1、安装Nacos")],-1),T=t(`<p>在Windows下安装Nacos，安装路径：D:\\Nacos</p><p>启动Nacos：<strong>startup.cmd -m standalone</strong> （单机启动）</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322145507.png" alt="" loading="lazy"></p><p>通过地址访问Nacos</p><h3 id="_5-2、服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#_5-2、服务注册到nacos" aria-hidden="true">#</a> 5.2、服务注册到Nacos</h3><p>1、在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--Nacos的管理依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：不要忘了注释掉eureka的依赖。</strong></p></blockquote><p>2、配置Nacos地址</p><p>在user-service和order-service的application.yml中添加nacos地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：不要忘了注释掉eureka的依赖。</strong></p></blockquote><p>3、重启</p><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><h3 id="_5-3、nacos集群配置" tabindex="-1"><a class="header-anchor" href="#_5-3、nacos集群配置" aria-hidden="true">#</a> 5.3、Nacos集群配置</h3><h4 id="_5-3-1、服务分级存储模型" tabindex="-1"><a class="header-anchor" href="#_5-3-1、服务分级存储模型" aria-hidden="true">#</a> 5.3.1、服务分级存储模型</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210713232522531.png" alt="" loading="lazy"></p><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:<br> 127.0.0.1:8081、127.0.0.1:8082、127.0.0.1:8083</p><p>假如这些实例分布于全国各地的不同机房，例如：<br> 127.0.0.1:8081，在上海机房<br> 127.0.0.1:8082，在上海机房<br> 127.0.0.1:8083，在杭州机房</p><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型</p><p>微服务互相访问时，应该<strong>尽可能访问同集群实例</strong>，因为本地访问速度更快。当本集群内不可用时，才访问其它集群</p><h4 id="_5-3-2、给user-service配置集群" tabindex="-1"><a class="header-anchor" href="#_5-3-2、给user-service配置集群" aria-hidden="true">#</a> 5.3.2、给user-service配置集群</h4><p>修改application.yml，添加如下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过修改application.yml，重启服务，实现不同集群</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322152537.png" alt="" loading="lazy"></p><h4 id="_5-3-2、同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#_5-3-2、同集群优先的负载均衡" aria-hidden="true">#</a> 5.3.2、同集群优先的负载均衡</h4><p>Nacos中提供了一个<code>NacosRule</code>的实现，可以<strong>优先从同集群中挑选实例</strong>。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改负载均衡规则</p><p>不修改负载均衡规则，依然以轮询的方式访问</p><p>修改order-service的application.yml文件，<strong>修改负载均衡规则</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment">#要做配置的微服务名称</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会优先向同集群挑选实例，<strong>同集群下默认随机访问</strong>，如果同集群挂掉，会发生跨集群访问</p><h3 id="_5-4、权重配置" tabindex="-1"><a class="header-anchor" href="#_5-4、权重配置" aria-hidden="true">#</a> 5.4、权重配置</h3><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们<strong>希望性能好的机器承担更多的用户请求</strong>。<br> 但<strong>默认情况下NacosRule是同集群内随机挑选</strong>，不会考虑机器的性能问题。<br> 因此，<strong>Nacos提供了权重配置</strong>来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，通过<strong>编辑按钮</strong>，即可<strong>修改权重</strong></p><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p><h3 id="_5-5、环境隔离" tabindex="-1"><a class="header-anchor" href="#_5-5、环境隔离" aria-hidden="true">#</a> 5.5、环境隔离</h3><p>Nacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层隔离</p><p>Nacos提供了<strong>namespace来实现环境隔离</strong>功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714000101516.png" alt="image-20210714000101516" loading="lazy"></p><h4 id="_5-5-1、创建namespace" tabindex="-1"><a class="header-anchor" href="#_5-5-1、创建namespace" aria-hidden="true">#</a> 5.5.1、创建namespace</h4><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p>我们可以点击页面新增按钮，添加一个namespace</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322162127.png" alt="" loading="lazy"></p><h4 id="_5-5-2、给微服务配置namespace" tabindex="-1"><a class="header-anchor" href="#_5-5-2、给微服务配置namespace" aria-hidden="true">#</a> 5.5.2、给微服务配置namespace</h4><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 32ef43d7<span class="token punctuation">-</span>b97e<span class="token punctuation">-</span>4941<span class="token punctuation">-</span>94cf<span class="token punctuation">-</span>47890b51d23e <span class="token comment"># 命名空间，填ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错</p><h3 id="_5-6、nacos与eureka的区别" tabindex="-1"><a class="header-anchor" href="#_5-6、nacos与eureka的区别" aria-hidden="true">#</a> 5.6、Nacos与Eureka的区别</h3><p>Nacos的服务实例分为两种l类型：<br> 临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。|<br> 非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p><p>​ 配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置为非临时实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：<br> Nacos注册中心细节分析：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714001728017.png" alt="" loading="lazy"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，<strong>非临时实例采用主动检测模式</strong></li><li>临时实例心跳不正常会被<strong>剔除</strong>，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><h2 id="_6、nacos管理配置" tabindex="-1"><a class="header-anchor" href="#_6、nacos管理配置" aria-hidden="true">#</a> 6、Nacos管理配置</h2><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。所以需要一种统一配置管理方案，可以<strong>集中管理所有实例的配置</strong>。<br> Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p><p><strong>即将配置交给Nacos管理</strong></p><h3 id="_6-1、统一配置管理" tabindex="-1"><a class="header-anchor" href="#_6-1、统一配置管理" aria-hidden="true">#</a> 6.1、统一配置管理</h3><h4 id="_6-1-1、在nacos中新建配置" tabindex="-1"><a class="header-anchor" href="#_6-1-1、在nacos中新建配置" aria-hidden="true">#</a> 6.1.1、在Nacos中新建配置</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714164742924.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714164856664.png" alt="image-20210714164856664" loading="lazy"></p><blockquote><p>注意：项目的核心配置，<strong>需要热更新的配置才有放到nacos管理的必要</strong>。基本不会变更的一些配置还是保存在微服务本地比较好。</p></blockquote><h4 id="_6-1-2、配置的获取" tabindex="-1"><a class="header-anchor" href="#_6-1-2、配置的获取" aria-hidden="true">#</a> 6.1.2、配置的获取</h4><p>微服务要<strong>拉取nacos中管理的配置</strong>，并且<strong>与本地的application.yml配置合并</strong>，才能完成项目启动。</p><p>但<strong>若尚未读取application.yml，服务无法得知nacos地址</strong></p><p>因此<strong>spring</strong>引入了一种<strong>新的配置文件</strong>：<em><strong>bootstrap.yaml</strong></em>文件，会在application.yml之前被读取</p><p><strong>配置获取的步骤如下：</strong><br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/L0iFYNF.png" alt="" loading="lazy"></p><p>1）引入Nacos的配置管理客户端依赖</p><p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--nacos配置管理依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）在userservice中的Source目录添加一个bootstrap.yml文件，这个文件是引导文件，优先级高于application.yml</p><p>配置服务名称，开发环境，文件后缀名→就是Data Id，因此知道是nacos中的哪个文件<br> 配置Nacos地址，就知道去哪读取nacos中的配置文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> userservice <span class="token comment"># 服务名称</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment">#开发环境，这里是dev </span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># Nacos地址</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml <span class="token comment"># 文件后缀名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据<br><code>\${spring.application.name}-\${spring.profiles.active}.\${spring.cloud.nacos.config.file-extension}</code>作为文件id，来读取配置。<br> 本例中，就是去读取<code>userservice-dev.yaml</code>：</p><p>因此，可以删除application.yml中重复的配置：服务名称，Nacos地址等</p><p>3）读取nacos配置</p><p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//用于在运行时动态地更新应用程序中的配置信息</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${pattern.dateformat}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dateformat<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;now&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>dateformat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取配置 </span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2、配置热更新" tabindex="-1"><a class="header-anchor" href="#_6-2、配置热更新" aria-hidden="true">#</a> 6.2、配置热更新</h3><p>在Nacos中配置文件变更后，微服务无需重启就可以感知。不过需要通过下面两种配置实现：</p><h4 id="_6-2-1、方式一" tabindex="-1"><a class="header-anchor" href="#_6-2-1、方式一" aria-hidden="true">#</a> 6.2.1、方式一</h4><p>在@Value注入的变量所在类上添加注解**@RefreshScope**：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//用于在运行时动态地更新应用程序中的配置信息</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-2、方式二" tabindex="-1"><a class="header-anchor" href="#_6-2-2、方式二" aria-hidden="true">#</a> 6.2.2、方式二</h4><p>使用**@ConfigurationProperties**注解</p><p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;pattern&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PatternProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dateformat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在UserController中使用这个类代替@Value：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PatternProperties</span> patternProperties<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;now&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>patternProperties<span class="token punctuation">.</span><span class="token function">getDateformat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3、配置共享" tabindex="-1"><a class="header-anchor" href="#_6-3、配置共享" aria-hidden="true">#</a> 6.3、配置共享</h3><p>微服务启动时，会<strong>从nacos读取多个配置文件</strong>，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>这个文件一定会加载，因此多环境<strong>共享配置</strong>可以<strong>写入这个文件</strong></p><h4 id="_1-添加一个环境共享配置" tabindex="-1"><a class="header-anchor" href="#_1-添加一个环境共享配置" aria-hidden="true">#</a> 1）添加一个环境共享配置</h4><p>在nacos中添加一个userservice.yaml文件：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323205335.png" alt="" loading="lazy"></p><h4 id="_2-在user-service中读取共享配置" tabindex="-1"><a class="header-anchor" href="#_2-在user-service中读取共享配置" aria-hidden="true">#</a> 2）在user-service中读取共享配置</h4><p>在user-service服务中，修改PatternProperties类，读取新添加的属性<br> 在user-service服务中，修改UserController，添加一个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;pattern&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PatternProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dataformat<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> enSharedValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">PatternProperties</span> properties<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;prop&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">PatternProperties</span> <span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> properties<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-运行两个userapplication-使用不同的profile" tabindex="-1"><a class="header-anchor" href="#_3-运行两个userapplication-使用不同的profile" aria-hidden="true">#</a> 3）运行两个UserApplication，使用不同的profile</h4><p>修改UserApplication2这个启动项，改变其profile值：<br><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323205521.png" alt="" loading="lazy"></p><p>这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。</p><p>启动UserApplication和UserApplication2，发现结果的差异<br> 可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</p><h4 id="_4-配置共享的优先级" tabindex="-1"><a class="header-anchor" href="#_4-配置共享的优先级" aria-hidden="true">#</a> 4）配置共享的优先级</h4><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p><p><strong>服务名-profile.yaml &gt; 服务名称.yaml &gt; 本地配置</strong></p><h2 id="_7、nacos集群搭建" tabindex="-1"><a class="header-anchor" href="#_7、nacos集群搭建" aria-hidden="true">#</a> 7、Nacos集群搭建</h2><p>Nacos生产环境下一定要部署为集群状态</p><h3 id="_7-1、集群结构图" tabindex="-1"><a class="header-anchor" href="#_7-1、集群结构图" aria-hidden="true">#</a> 7.1、集群结构图</h3><p>官方给出的Nacos集群图：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323210255.png" alt="" loading="lazy"></p><p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里负载均衡器可以使用nginx。</p><p>我们计划的集群结构：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323210319.png" alt="" loading="lazy"></p><p>三个nacos节点的地址：</p><table><thead><tr><th>节点</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>192.168.137.1</td><td>8845</td></tr><tr><td>nacos2</td><td>192.168.137.1</td><td>8846</td></tr><tr><td>nacos3</td><td>192.168.137.1</td><td>8847</td></tr></tbody></table><h3 id="_7-2、集群搭建" tabindex="-1"><a class="header-anchor" href="#_7-2、集群搭建" aria-hidden="true">#</a> 7.2、集群搭建</h3><p>搭建集群的基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载nacos安装包</li><li>配置nacos</li><li>启动nacos集群</li><li>nginx反向代理</li></ul><h4 id="_7-2-1、初始化数据库" tabindex="-1"><a class="header-anchor" href="#_7-2-1、初始化数据库" aria-hidden="true">#</a> 7.2.1、初始化数据库</h4><p>Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。</p><p>这里以单点的数据库为例来讲解。</p><p>首先新建一个数据库，命名为nacos，而后导入相关的SQL</p><h4 id="_7-2-2、下载nacos" tabindex="-1"><a class="header-anchor" href="#_7-2-2、下载nacos" aria-hidden="true">#</a> 7.2.2、下载Nacos</h4>`,136),F={href:"https://github.com/alibaba/nacos/tags",target:"_blank",rel:"noopener noreferrer"},B=n("br",null,null,-1),q=t(`<h4 id="_7-2-3、配置nacos" tabindex="-1"><a class="header-anchor" href="#_7-2-3、配置nacos" aria-hidden="true">#</a> 7.2.3、配置Nacos</h4><p>进入nacos安装目录下的conf目录，修改配置文件cluster.conf.example，<strong>重命名为cluster.conf</strong></p><p>然后添加内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>127.0.0.1:8845
127.0.0.1.8846
127.0.0.1.8847
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改conf文件下的application.properties文件，添加数据库配置</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323211509.png" alt="" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323211653.png" alt="" loading="lazy"></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span>

<span class="token key attr-name">db.num</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>

<span class="token key attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span>
<span class="token key attr-name">db.user.0</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">db.password.0</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3、启动" tabindex="-1"><a class="header-anchor" href="#_7-3、启动" aria-hidden="true">#</a> 7.3、启动</h3><p>将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3（模糊nacos集群）</p><p>然后分别修改三个文件夹中的application.properties</p><p>nacos1:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8845</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nacos2:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8846</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nacos3:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8847</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后分别启动三个nacos节点：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>startup.cmd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-4、nginx反向代理" tabindex="-1"><a class="header-anchor" href="#_7-4、nginx反向代理" aria-hidden="true">#</a> 7.4、nginx反向代理</h3><p>修改nginx安装目录下的conf/nginx.conf文件，配置如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> nacos-cluster</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8845</span><span class="token punctuation">;</span>
	<span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8846</span><span class="token punctuation">;</span>
	<span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8847</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /nacos</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://nacos-cluster</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),E={href:"http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>代码中application.yml文件配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">80</span> <span class="token comment"># Nacos地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、feign远程调用" tabindex="-1"><a class="header-anchor" href="#_8、feign远程调用" aria-hidden="true">#</a> 8、Feign远程调用</h2><p>目前利用RestTemplate发起远程调用的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;Http://userservice/user/&quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过反序列化，将json对象转化为java对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>存在下面的问题：<br> 代码可读性差，编程体验不统一<br> 参数复杂URL难以维护</p>`,6),N={href:"https://github.com/OpenFeign/feign",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="_8-1、feign替代resttemplate" tabindex="-1"><a class="header-anchor" href="#_8-1、feign替代resttemplate" aria-hidden="true">#</a> 8.1、Feign替代RestTemplate</h3><p>Fegin的使用步骤如下：</p><h4 id="_1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖" aria-hidden="true">#</a> 1）引入依赖</h4><p>在order-service服务的pom文件中引入feign的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-添加注解" tabindex="-1"><a class="header-anchor" href="#_2-添加注解" aria-hidden="true">#</a> 2）添加注解</h4><p>在order-service的启动类添加注解开启Feign的功能：</p><p><strong>@EnableFeginClients</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;cn.itcast.order.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 创建RestTemplate并注入Spring容器
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-编写feign的客户端" tabindex="-1"><a class="header-anchor" href="#_3-编写feign的客户端" aria-hidden="true">#</a> 3）编写Feign的客户端</h4><p>在order-service中新建一个接口，内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>order<span class="token punctuation">.</span>client</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>order<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;userservice&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),U={href:"http://userservice/user/",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：userservice</li><li>请求方式：GET</li><li id="">请求路径：/user/</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p><h4 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5）总结</h4><p>使用Feign的步骤：<br> ① 引入依赖<br> ② 添加@EnableFeignClients注解<br> ③ 编写FeignClient接口<br> ④ 使用FeignClient中定义的方法代替RestTemplate</p><h3 id="_8-2、自定义配置" tabindex="-1"><a class="header-anchor" href="#_8-2、自定义配置" aria-hidden="true">#</a> 8.2、自定义配置</h3><p>Feign可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign.Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign.Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p><p>配置Feign日志有两种方式：</p><h4 id="_8-2-1、配置文件方式" tabindex="-1"><a class="header-anchor" href="#_8-2-1、配置文件方式" aria-hidden="true">#</a> 8.2.1、配置文件方式</h4><p>基于配置文件修改feign的日志级别可以<strong>针对单个服务</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>  
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span> 
      <span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 针对某个微服务的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> FULL <span class="token comment">#  日志级别 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以针对所有服务（全局配置）：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>  
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span> 
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> FULL <span class="token comment">#  日志级别 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而日志的级别分为四种：<br> NONE：不记录任何日志信息，这是默认值。<br> BASIC：仅记录请求的方法，URL以及响应状态码和执行时间<br> HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息<br> FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</p><h4 id="_8-2-2、java代码方式" tabindex="-1"><a class="header-anchor" href="#_8-2-2、java代码方式" aria-hidden="true">#</a> 8.2.2、Java代码方式</h4><p>也可以基于Java代码来修改日志级别，<strong>先声明一个类，然后声明一个Logger.Level的对象</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultFeignConfiguration</span>  <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">;</span> <span class="token comment">// 日志级别为BASIC</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> <span class="token class-name">DefaultFeignConfiguration</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userservice&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">DefaultFeignConfiguration</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//针对userservice服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-3、feign性能优化" tabindex="-1"><a class="header-anchor" href="#_8-3、feign性能优化" aria-hidden="true">#</a> 8.3、Feign性能优化</h3><p>Feign<strong>底层发起http请求</strong>，依赖于其它的框架。其底层客户端实现包括：<br> URLConnection：默认实现，不支持连接池<br> Apache HttpClient ：支持连接池<br> OKHttp：支持连接池</p><p>因此提高Feign的性能主要手段就是：<br> ① 使用<strong>连接池</strong>代替默认的URLConnection<br> ② 日志级别，最好使用basic或none</p><h4 id="用apache的httpclient连接池" tabindex="-1"><a class="header-anchor" href="#用apache的httpclient连接池" aria-hidden="true">#</a> 用Apache的HttpClient连接池</h4><p>1）引入依赖</p><p>在order-service的pom文件中引入Apache的HttpClient依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--httpClient的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）配置连接池</p><p>在order-service的application.yml中添加配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># default全局的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC <span class="token comment"># 日志级别，BASIC就是基本的请求和响应信息</span>
  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启feign对HttpClient的支持</span>
    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment"># 最大的连接数</span>
    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 每个路径的最大连接数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结，Feign的优化：<br> 1.日志级别尽量用basic<br> 2.使用HttpClient或OKHttp代替URLConnection<br> ① 引入feign-httpClient依赖<br> ② 配置文件开启httpClient功能，设置连接池参数</p><h3 id="_8-4、feign最佳实践" tabindex="-1"><a class="header-anchor" href="#_8-4、feign最佳实践" aria-hidden="true">#</a> 8.4、Feign最佳实践</h3><p>Feign的客户端与服务提供者的controller代码非常相似：</p><p>feign客户端：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;userservice&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>controller：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//userservice服务</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以可以简化这种重复的代码</p><h4 id="_8-4-1、继承方式-不推荐" tabindex="-1"><a class="header-anchor" href="#_8-4-1、继承方式-不推荐" aria-hidden="true">#</a> 8.4.1、继承方式（不推荐）</h4><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714190640857.png" alt="" loading="lazy"></p><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p></li></ul><h4 id="_8-4-2、抽取方式" tabindex="-1"><a class="header-anchor" href="#_8-4-2、抽取方式" aria-hidden="true">#</a> 8.4.2、抽取方式</h4><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714214041796.png" alt="" loading="lazy"></p><h4 id="_8-4-3、实现feign最佳实践" tabindex="-1"><a class="header-anchor" href="#_8-4-3、实现feign最佳实践" aria-hidden="true">#</a> 8.4.3、实现Feign最佳实践</h4><h5 id="_1-抽取" tabindex="-1"><a class="header-anchor" href="#_1-抽取" aria-hidden="true">#</a> 1）抽取</h5><p>首先创建一个module，命名为feign-api</p><p>在feign-api中然后引入feign的starter依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230324143244552.png" alt="image-20230324143244552" loading="lazy"></p><h5 id="_2-在order-service中使用feign-api" tabindex="-1"><a class="header-anchor" href="#_2-在order-service中使用feign-api" aria-hidden="true">#</a> 2）在order-service中使用feign-api</h5><p>删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口</p><p>在order-service的pom文件中中引入feign-api的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.itcast.demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p><h5 id="_3-重启测试" tabindex="-1"><a class="header-anchor" href="#_3-重启测试" aria-hidden="true">#</a> 3）重启测试</h5><p>重启后，发现服务报错了：无法注入UserClient对象</p><p>这是因为UserClient现在在cn.itcast.feign.clients包下，<br> 而order-service的@EnableFeignClients注解是在cn.itcast.order包下，<strong>不在同一个包，无法扫描到UserClient</strong></p><h5 id="_4-解决扫描包问题" tabindex="-1"><a class="header-anchor" href="#_4-解决扫描包问题" aria-hidden="true">#</a> 4）解决扫描包问题</h5><p>方式一（批量扫描）：</p><p>指定Feign应该扫描的包：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;cn.itcast.feign.clients&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二（精准定位，推荐）：</p><p><strong>指定需要加载的Client接口：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>clients <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">UserClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_9、gateway服务网关" tabindex="-1"><a class="header-anchor" href="#_9、gateway服务网关" aria-hidden="true">#</a> 9、Gateway服务网关</h2><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><h3 id="_9-1、为什么需要网关" tabindex="-1"><a class="header-anchor" href="#_9-1、为什么需要网关" aria-hidden="true">#</a> 9.1、为什么需要网关</h3><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714210131152.png" alt="" loading="lazy"></p><p><strong>网关功能：</strong></p><ul><li><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p></li><li><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p></li><li><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p></li></ul><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gatewat</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而<strong>SpringCloudGateway</strong>则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><h3 id="_9-2、gateway快速入门" tabindex="-1"><a class="header-anchor" href="#_9-2、gateway快速入门" aria-hidden="true">#</a> 9.2、gateway快速入门</h3><p>搭建网关服务的步骤：</p><h4 id="_1-创建新的module-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-创建新的module-引入依赖" aria-hidden="true">#</a> 1）创建新的module，引入依赖</h4><p>引入SpringCloudGateway的依赖和nacos的服务发现依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--网关依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--nacos服务发现依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-编写启动类" tabindex="-1"><a class="header-anchor" href="#_2-编写启动类" aria-hidden="true">#</a> 2）编写启动类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>gateway</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-编写路由配置及nacos地址" tabindex="-1"><a class="header-anchor" href="#_3-编写路由配置及nacos地址" aria-hidden="true">#</a> 3）编写路由配置及nacos地址</h4><p>创建application.yml文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10010</span> <span class="token comment"># 网关端口</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway <span class="token comment"># 服务名称</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos地址</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment"># 网关路由配置</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service <span class="token comment"># 路由id，自定义，只要唯一即可</span>
          <span class="token comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice <span class="token comment"># 路由的目标地址 lb（loadbalance）就是负载均衡，后面跟服务名称</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span>
            <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span> <span class="token comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址</strong></p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p><h4 id="_4-网关路由的流程图" tabindex="-1"><a class="header-anchor" href="#_4-网关路由的流程图" aria-hidden="true">#</a> 4）网关路由的流程图</h4><p>整个访问的流程如下：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714211742956.png" alt="" loading="lazy"></p><p>总结：</p><p>网关搭建步骤：</p><ol><li><p>创建项目，引入nacos服务发现和gateway依赖</p></li><li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p></li></ol><p>路由配置包括：</p><ol><li><p>路由id：路由的唯一标示</p></li><li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p></li><li><p>路由断言（predicates）：判断路由的规则，</p></li><li><p>路由过滤器（filters）：对请求或响应做处理</p></li></ol><h3 id="_9-3、断言工厂" tabindex="-1"><a class="header-anchor" href="#_9-3、断言工厂" aria-hidden="true">#</a> 9.3、断言工厂</h3><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path=/user/**是按照路径匹配，这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来<br> 处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \\d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td><strong>Path</strong></td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><h3 id="_9-4、路由过滤器gatefilter" tabindex="-1"><a class="header-anchor" href="#_9-4、路由过滤器gatefilter" aria-hidden="true">#</a> 9.4、路由过滤器GateFilter</h3><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714212312871.png" alt="" loading="lazy"></p><p>过滤器的作用：<br> ① 对路由的请求或响应做加工处理，比如添加请求头<br> ② 配置在路由下的过滤器只对当前路由的请求生效</p><p>defaultFilters的作用：<br> ① 对所有路由都生效的过滤器</p><h4 id="_9-4-1、路由过滤器的种类" tabindex="-1"><a class="header-anchor" href="#_9-4-1、路由过滤器的种类" aria-hidden="true">#</a> 9.4.1、路由过滤器的种类</h4><p>Spring提供了31种不同的路由过滤器工厂。例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><h4 id="_9-4-2、请求头过滤器" tabindex="-1"><a class="header-anchor" href="#_9-4-2、请求头过滤器" aria-hidden="true">#</a> 9.4.2、请求头过滤器</h4><p>以AddRequestHeader 为例：</p><blockquote><p>需求：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!</p></blockquote><p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service 
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice 
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span> 
        <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span> 
        <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token comment"># 过滤器</span>
        <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span> Itcast is freaking awesome<span class="token tag">!</span> <span class="token comment"># 添加请求头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前过滤器写在userservice路由下，因此<strong>仅仅对访问userservice的请求有效</strong>。</p><h4 id="_9-4-3、默认过滤器" tabindex="-1"><a class="header-anchor" href="#_9-4-3、默认过滤器" aria-hidden="true">#</a> 9.4.3、默认过滤器</h4><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service 
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice 
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span> 
        <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span>
      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span> <span class="token comment"># 默认过滤项</span>
      <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span> Itcast is freaking awesome<span class="token tag">!</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-5、全局过滤器" tabindex="-1"><a class="header-anchor" href="#_9-5、全局过滤器" aria-hidden="true">#</a> 9.5、全局过滤器</h3><h4 id="_9-5-1-全局过滤器作用" tabindex="-1"><a class="header-anchor" href="#_9-5-1-全局过滤器作用" aria-hidden="true">#</a> 9.5.1.全局过滤器作用</h4><p>全局过滤器是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样</p><p>它与GatewayFilter的区别：<br> GatewayFilter通过配置定义，处理逻辑是固定的。而GlobalFilter的逻辑需要自己写代码实现<br> （即复杂的逻辑可以自定义实现）</p><p>全局过滤器定义方式是<strong>实现GlobalFilter接口</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     *  处理当前请求，有必要的话通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">}</span>将请求交给下一个过滤器处理
     *
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span> 请求上下文，里面可以获取Request、Response等信息
     * <span class="token keyword">@param</span> <span class="token parameter">chain</span> 用来把请求委托给下一个过滤器 
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span></span></span><span class="token punctuation">}</span> 返回标示当前过滤器业务结束
     */</span>
    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在filter中编写自定义逻辑，可以实现下列功能：<br> 登录状态判断、权限校验、请求限流等</p><h4 id="_9-5-2、自定义全局过滤器" tabindex="-1"><a class="header-anchor" href="#_9-5-2、自定义全局过滤器" aria-hidden="true">#</a> 9.5.2、自定义全局过滤器</h4><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：<br> ① 参数中是否有authorization<br> ② authorization参数值是否为admin<br> 如果同时满足则放行，否则拦截</p><p>实现：<br> 在gateway中定义一个过滤器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filters</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GlobalFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//过滤器的顺序，数字越小，优先级越高</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizeFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.获取请求参数</span>
        <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.获取authorization参数</span>
        <span class="token class-name">String</span> auth <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.校验</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 放行</span>
            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.拦截</span>
        <span class="token comment">// 4.1.禁止访问，设置状态码</span>
        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//状态码401，表示未登录</span>
        <span class="token comment">// 4.2.结束处理</span>
        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-5-3、过滤器执行顺序" tabindex="-1"><a class="header-anchor" href="#_9-5-3、过滤器执行顺序" aria-hidden="true">#</a> 9.5.3、过滤器执行顺序</h4><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p><em><strong>请求路由后</strong></em>，会将<strong>当前路由过滤器和DefaultFilter，GLobalFilter</strong>合并到一个<strong>过滤器链</strong>（集合）中，排序后依此执行每个过滤器</p><p><em><strong>排序的规则</strong></em>：</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order<strong>由Spring指定</strong>，默认是<strong>按照声明顺序从1递增</strong>。（路由过滤器和defaultFilter分开计算）</li><li>当过滤器的<strong>order值一样时</strong>，会按照 <strong>defaultFilter &gt; 路由过滤器 &gt; GlobalFilter</strong>的顺序执行。</li></ul><h3 id="_9-6-跨域问题" tabindex="-1"><a class="header-anchor" href="#_9-6-跨域问题" aria-hidden="true">#</a> 9.6.跨域问题</h3><h4 id="_9-6-1-什么是跨域问题" tabindex="-1"><a class="header-anchor" href="#_9-6-1-什么是跨域问题" aria-hidden="true">#</a> 9.6.1.什么是跨域问题</h4><p>跨域：用于限制一个网页或应用程序的访问另一个源（网域）的资源，域名不一致就是跨域，主要包括：</p>`,140),z={href:"http://www.taobao.com",target:"_blank",rel:"noopener noreferrer"},G={href:"http://www.taobao.org",target:"_blank",rel:"noopener noreferrer"},O={href:"http://www.jd.com",target:"_blank",rel:"noopener noreferrer"},H={href:"http://miaosha.jd.com",target:"_blank",rel:"noopener noreferrer"},D=n("li",null,[n("p",null,"域名相同，端口不同：localhost:8080和localhost8081")],-1),M=n("p",null,"跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题",-1),V={href:"https://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"},Z=t(`<h4 id="_9-6-2-解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_9-6-2-解决跨域问题" aria-hidden="true">#</a> 9.6.2.解决跨域问题</h4><p>比如：从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p><p>在gateway服务的application.yml文件中，添加下面的配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span> <span class="token comment"># 全局的跨域处理</span>
        <span class="token key atrule">add-to-simple-url-handler-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 解决options请求被拦截问题</span>
        <span class="token key atrule">corsConfigurations</span><span class="token punctuation">:</span>
          <span class="token key atrule">&#39;[/**]&#39;</span><span class="token punctuation">:</span>
            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token comment"># 允许哪些网站的跨域请求 </span>
              <span class="token punctuation">-</span> <span class="token string">&quot;http://localhost:8090&quot;</span>
            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 允许的跨域ajax的请求方式</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;GET&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;POST&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;DELETE&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;PUT&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;OPTIONS&quot;</span>
            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment"># 允许在请求中携带的头信息</span>
            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否允许携带cookie</span>
            <span class="token key atrule">maxAge</span><span class="token punctuation">:</span> <span class="token number">360000</span> <span class="token comment"># 这次跨域检测的有效期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function W(J,Q){const e=p("ExternalLinkIcon"),o=p("RouterLink");return l(),i("div",null,[k,r(" more "),m,n("p",null,[n("a",v,[a("SpringCloud"),s(e)]),a("是目前国内使用最广泛的微服务框架"),g,a(" SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验")]),b,n("ul",null,[n("li",null,[a("拦截我们的RestTemplate请求"),n("a",h,[a("http://userservice/user/1"),s(e)])]),y,f,_,w,n("li",null,[a("RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到"),n("a",x,[a("http://localhost:8081/user/1，发起真实请求"),s(e)])])]),C,n("p",null,[n("a",I,[a("Nacos"),s(e)]),a("是阿里巴巴的产品，现在是"),n("a",S,[a("SpringCloud"),s(e)]),a("中的一个组件，相比"),n("a",R,[a("Eureka"),s(e)]),a("功能更加丰富，在国内受欢迎程度较高")]),j,n("p",null,[s(o,{to:"/code/java/E:%5CStudy%5CJava%E5%90%8E%E7%AB%AF%5C14%E3%80%81SpringCloud%5C%E5%9F%BA%E7%A1%80%E7%AF%87%5Cday01-SpringCloud01%5C%E8%B5%84%E6%96%99%5CNacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97.html"},{default:u(()=>[a("Nacos安装指南")]),_:1})]),T,n("p",null,[n("a",F,[a("nacos"),s(e)]),B,a(" 本例中使用1.4.1版本")]),q,n("p",null,[a("而后在浏览器访问："),n("a",E,[a("http://localhost/nacos即可。"),s(e)])]),A,n("p",null,[n("a",N,[a("Feign"),s(e)]),a("是一个声明式的http客户端，其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。")]),L,n("p",null,[a("请求路径为"),n("a",U,[a("http://userservice/user/"),s(e)])]),P,n("ul",null,[n("li",null,[n("p",null,[a("域名不同： "),n("a",z,[a("www.taobao.com"),s(e)]),a(" 和 "),n("a",G,[a("www.taobao.org"),s(e)]),a(" 和 "),n("a",O,[a("www.jd.com"),s(e)]),a(" 和 "),n("a",H,[a("miaosha.jd.com"),s(e)])])]),D]),M,n("p",null,[a("解决方案：CORS，可以查看"),n("a",V,[a("https://www.ruanyifeng.com/blog/2016/04/cors.html"),s(e)])]),Z])}const K=c(d,[["render",W],["__file","SpringCloud基础.html.vue"]]);export{K as default};
