const l=JSON.parse('{"key":"v-1f088f37","path":"/life/%E8%80%83%E8%AF%95/%E7%AE%80%E7%AD%94%E9%A2%98.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 结构化程序定义以及优缺点（真题） 采用了 模块分解，功能抽象，自顶向下、分而治之的方法，从而有效地将一个较复杂的程序系统设计 任务分解 成许多易于控制和处理的子 程序，便于开发和维护。它的重点在于把功能进行分解。结构化程序设计是 面向过程 的。 优点： 性能比面向对象高 结构化程序先确定主要系统功能，然后 逐层深入，由简到难，逐渐将一个大致的总体结构具体化，最终全部实现其功能。考虑问题的方式较为合理。 结构化的模块化使问题难度降低，编写程序也 更加简明，可读性高。","head":[["meta",{"property":"og:url","content":"https://T4mako.github.io/life/%E8%80%83%E8%AF%95/%E7%AE%80%E7%AD%94%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"T4mako"}],["meta",{"property":"og:description","content":"1. 结构化程序定义以及优缺点（真题） 采用了 模块分解，功能抽象，自顶向下、分而治之的方法，从而有效地将一个较复杂的程序系统设计 任务分解 成许多易于控制和处理的子 程序，便于开发和维护。它的重点在于把功能进行分解。结构化程序设计是 面向过程 的。 优点： 性能比面向对象高 结构化程序先确定主要系统功能，然后 逐层深入，由简到难，逐渐将一个大致的总体结构具体化，最终全部实现其功能。考虑问题的方式较为合理。 结构化的模块化使问题难度降低，编写程序也 更加简明，可读性高。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"T4mako"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"T4mako\\",\\"url\\":\\"https://github.com/T4mako/T4mako.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 结构化程序定义以及优缺点（真题）","slug":"_1-结构化程序定义以及优缺点-真题","link":"#_1-结构化程序定义以及优缺点-真题","children":[]},{"level":2,"title":"2. 面向对象程序定义以及优缺点","slug":"_2-面向对象程序定义以及优缺点","link":"#_2-面向对象程序定义以及优缺点","children":[]},{"level":2,"title":"3. 数组及链表处理数据的优缺点（真题）","slug":"_3-数组及链表处理数据的优缺点-真题","link":"#_3-数组及链表处理数据的优缺点-真题","children":[]},{"level":2,"title":"4. ArrayList 和 LinkedList 的优缺点","slug":"_4-arraylist-和-linkedlist-的优缺点","link":"#_4-arraylist-和-linkedlist-的优缺点","children":[]},{"level":2,"title":"5. TreeSet 实现排序的方式","slug":"_5-treeset-实现排序的方式","link":"#_5-treeset-实现排序的方式","children":[]},{"level":2,"title":"6. 基本数据类型有哪些","slug":"_6-基本数据类型有哪些","link":"#_6-基本数据类型有哪些","children":[]},{"level":2,"title":"7. public / private 公私有成员变量的区别（真题）","slug":"_7-public-private-公私有成员变量的区别-真题","link":"#_7-public-private-公私有成员变量的区别-真题","children":[]},{"level":2,"title":"8. 面向对象程序设计三个特点，并解释其含义（真题）","slug":"_8-面向对象程序设计三个特点-并解释其含义-真题","link":"#_8-面向对象程序设计三个特点-并解释其含义-真题","children":[]},{"level":2,"title":"9. 抽象类和接口的定义以及区别（真题）","slug":"_9-抽象类和接口的定义以及区别-真题","link":"#_9-抽象类和接口的定义以及区别-真题","children":[]},{"level":2,"title":"10. 重载与重写的区别","slug":"_10-重载与重写的区别","link":"#_10-重载与重写的区别","children":[]},{"level":2,"title":"11. 根据 uml 图解释类的关系，根据类的关系画 uml 类图（真题）","slug":"_11-根据-uml-图解释类的关系-根据类的关系画-uml-类图-真题","link":"#_11-根据-uml-图解释类的关系-根据类的关系画-uml-类图-真题","children":[]},{"level":2,"title":"12. 对象图类之间的关系有哪些，分别描述","slug":"_12-对象图类之间的关系有哪些-分别描述","link":"#_12-对象图类之间的关系有哪些-分别描述","children":[]},{"level":2,"title":"13. 什么是开闭原则，高内聚、低耦合原则，多用组合少用继承原则","slug":"_13-什么是开闭原则-高内聚、低耦合原则-多用组合少用继承原则","link":"#_13-什么是开闭原则-高内聚、低耦合原则-多用组合少用继承原则","children":[]},{"level":2,"title":"14. 线程有多少种状态，请详细列举出来，并说明线程的生命周期","slug":"_14-线程有多少种状态-请详细列举出来-并说明线程的生命周期","link":"#_14-线程有多少种状态-请详细列举出来-并说明线程的生命周期","children":[]},{"level":2,"title":"15. 线程和进程的区别是什么","slug":"_15-线程和进程的区别是什么","link":"#_15-线程和进程的区别是什么","children":[]},{"level":2,"title":"16. 简述对象的序列化与反序列化过程","slug":"_16-简述对象的序列化与反序列化过程","link":"#_16-简述对象的序列化与反序列化过程","children":[]},{"level":2,"title":"17. 什么是设计模式，什么是工厂模式之简单工厂，简述其优缺点（真题）","slug":"_17-什么是设计模式-什么是工厂模式之简单工厂-简述其优缺点-真题","link":"#_17-什么是设计模式-什么是工厂模式之简单工厂-简述其优缺点-真题","children":[]},{"level":2,"title":"18. 什么是工厂方法模式，简述其优缺点","slug":"_18-什么是工厂方法模式-简述其优缺点","link":"#_18-什么是工厂方法模式-简述其优缺点","children":[]},{"level":2,"title":"19. 什么是抽象工厂模式，简述其优缺点","slug":"_19-什么是抽象工厂模式-简述其优缺点","link":"#_19-什么是抽象工厂模式-简述其优缺点","children":[]},{"level":2,"title":"20. 什么是单例模式，实现单例模式的方式有哪些","slug":"_20-什么是单例模式-实现单例模式的方式有哪些","link":"#_20-什么是单例模式-实现单例模式的方式有哪些","children":[]},{"level":2,"title":"21. 什么是原型模式","slug":"_21-什么是原型模式","link":"#_21-什么是原型模式","children":[]},{"level":2,"title":"22. 什么是 Java 虚拟机，有哪三个类加载器，都有什么用（真题）","slug":"_22-什么是-java-虚拟机-有哪三个类加载器-都有什么用-真题","link":"#_22-什么是-java-虚拟机-有哪三个类加载器-都有什么用-真题","children":[]},{"level":2,"title":"23. 什么是反射，及其作用","slug":"_23-什么是反射-及其作用","link":"#_23-什么是反射-及其作用","children":[]},{"level":2,"title":"24. 简述 Java 类加载机制","slug":"_24-简述-java-类加载机制","link":"#_24-简述-java-类加载机制","children":[]},{"level":2,"title":"25. 简述 Jvm 的主要组成部分，都有什么用","slug":"_25-简述-jvm-的主要组成部分-都有什么用","link":"#_25-简述-jvm-的主要组成部分-都有什么用","children":[]},{"level":2,"title":"26. 什么是垃圾回收，有哪些垃圾回收算法","slug":"_26-什么是垃圾回收-有哪些垃圾回收算法","link":"#_26-什么是垃圾回收-有哪些垃圾回收算法","children":[]},{"level":2,"title":"27. 什么是双亲委派机制","slug":"_27-什么是双亲委派机制","link":"#_27-什么是双亲委派机制","children":[]}],"readingTime":{"minutes":17.18,"words":5154},"filePathRelative":"life/考试/简答题.md","excerpt":"<h2> 1. 结构化程序定义以及优缺点（真题）</h2>\\n<p>采用了 <strong>模块分解</strong>，<strong>功能抽象</strong>，<strong>自顶向下</strong>、分而治之的方法，从而有效地将一个较复杂的程序系统设计 <strong>任务分解</strong> 成许多易于控制和处理的子 <strong>程序</strong>，便于开发和维护。它的重点在于把功能进行分解。结构化程序设计是 <strong>面向过程</strong> 的。</p>\\n<p>优点：<br>\\n性能比面向对象高<br>\\n结构化程序先确定主要系统功能，然后 <strong>逐层深入</strong>，<strong>由简到难</strong>，逐渐将一个大致的总体结构具体化，最终全部实现其功能。考虑问题的方式较为合理。<br>\\n结构化的模块化使问题难度降低，编写程序也 <strong>更加简明</strong>，<strong>可读性高</strong>。</p>","autoDesc":true}');export{l as data};
