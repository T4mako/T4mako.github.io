import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as o,b as a,d as s,e as t,f as e}from"./app-b4499e4c.js";const r={},d=e(`<h2 id="二、基本用法" tabindex="-1"><a class="header-anchor" href="#二、基本用法" aria-hidden="true">#</a> 二、基本用法</h2><h3 id="_1、类型声明" tabindex="-1"><a class="header-anchor" href="#_1、类型声明" aria-hidden="true">#</a> 1、类型声明</h3><p>TypeScript 代码最明显的特征，就是为 JavaScript 变量加上了类型声明。</p><p>类型声明的写法，一律为在标识符后面添加“<strong>冒号 + 类型</strong>”。函数参数和返回值，也是这样来声明类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">//声明了它的类型为string</span>
<span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token comment">//num的类型是number。参数列表的圆括号后面，声明了返回值的类型是string</span>
  <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量的值应该与声明的类型一致，如果不一致，TypeScript 就会报错。</p><p>另外，TypeScript 规定，变量只有<strong>赋值后才能使用</strong>，否则就会报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、类型推断" tabindex="-1"><a class="header-anchor" href="#_2、类型推断" aria-hidden="true">#</a> 2、类型推断</h3><p>类型声明并不是必需的，如果没有，TypeScript 会自己 <strong>推断类型</strong>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// TypeScript 推断它的类型为 number。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TypeScript 推断它的类型为<code>number</code>。</p><p>后面，如果变量<code>foo</code>更改为其他类型的值，跟推断的类型不一致，TypeScript 就会报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
foo <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 也可以<strong>推断</strong>函数的<strong>返回值</strong>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// TypeScript 推断返回的是字符串。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>正是因为 TypeScript 的类型推断，所以函数返回值的类型通常是省略不写的。</p><p>这样设计还有一个好处，将以前的 JavaScript 项目改为 TypeScript 项目时，你可以逐步地为老代码添加类型，即使有些代码没有添加，也不会无法运行。</p></div><h3 id="_3、typescript-的编译" tabindex="-1"><a class="header-anchor" href="#_3、typescript-的编译" aria-hidden="true">#</a> 3、TypeScript 的编译</h3><p><strong>JavaScript</strong> 的运行环境（<strong>浏览器</strong> 和 <strong>Node.js</strong>）不认识 <strong>TypeScript</strong> 代码。所以，TypeScript 项目要想运行，必须先转为 JavaScript 代码，这个代码转换的过程就叫做“<strong>编译</strong>”（compile）。</p><p>TypeScript 官方没有做运行环境，只提供编译器。编译时，会将类型声明和类型相关的代码全部删除，只留下能运行的 JavaScript 代码，并且不会改变 JavaScript 的运行结果。</p><p>因此，TypeScript 的类型检查只是编译时的类型检查，而不是运行时的类型检查。一旦代码编译为 JavaScript，运行时就不再检查类型了。</p><h3 id="_4、值与类型" tabindex="-1"><a class="header-anchor" href="#_4、值与类型" aria-hidden="true">#</a> 4、值与类型</h3><p>TypeScript 代码只涉及类型，不涉及值。所有跟“值”相关的处理，都由 JavaScript 完成。</p><p>它们是可以分离的，TypeScript 的编译过程，实际上就是把“类型代码”全部拿掉，只保留“值代码”。</p><h3 id="_5、typescript-playground" tabindex="-1"><a class="header-anchor" href="#_5、typescript-playground" aria-hidden="true">#</a> 5、TypeScript Playground</h3>`,25),l={href:"http://www.typescriptlang.org/play/",target:"_blank",rel:"noopener noreferrer"},u=e(`<p>把 TypeScript 代码贴进文本框，它就会在当前页面自动编译出 JavaScript 代码，还可以在浏览器执行编译产物。如果编译报错，它也会给出详细的报错信息。</p><p>这个页面还具有支持完整的 IDE 支持，可以自动语法提示。此外，它支持把代码片段和编译器设置保存成 URL，分享给他人。</p><h3 id="_6、tsc-编辑器" tabindex="-1"><a class="header-anchor" href="#_6、tsc-编辑器" aria-hidden="true">#</a> 6、tsc 编辑器</h3><p>TypeScript 官方提供的编译器叫做 tsc，可以将 TypeScript 脚本编译成 JavaScript 脚本。本机想要编译 TypeScript 代码，必须安装 tsc。</p><p>根据约定，TypeScript 脚本文件使用<code>.ts</code>后缀名，JavaScript 脚本文件使用<code>.js</code>后缀名。tsc 的作用就是把<code>.ts</code>脚本转变成<code>.js</code>脚本。</p><h4 id="_6-1、安装" tabindex="-1"><a class="header-anchor" href="#_6-1、安装" aria-hidden="true">#</a> 6.1、安装</h4><p>tsc 是一个 npm 模块，使用下面的命令安装（必须先安装 npm）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令是全局安装 tsc，也可以在项目中将 tsc 安装为一个依赖模块。</p><p>安装完成后，检查一下是否安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 或者 tsc --version</span>
$ tsc <span class="token parameter variable">-v</span>
Version <span class="token number">5.1</span>.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令中，<code>-v</code>或<code>--version</code>参数可以输出当前安装的 tsc 版本。</p><h4 id="_6-2、帮助信息" tabindex="-1"><a class="header-anchor" href="#_6-2、帮助信息" aria-hidden="true">#</a> 6.2、帮助信息</h4><p><code>-h</code>或<code>--help</code>参数输出帮助信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，“--help”参数仅显示基本的可用选项。我们可以使用“--all”参数，查看完整的帮助信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc <span class="token parameter variable">--all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-3、编译脚本" tabindex="-1"><a class="header-anchor" href="#_6-3、编译脚本" aria-hidden="true">#</a> 6.3、编译脚本</h4><p>安装 tsc 之后，就可以编译 TypeScript 脚本了。</p><p><code>tsc</code>命令后面，加上 TypeScript 脚本文件，就可以将其编译成 JavaScript 脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc app.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会在当前目录下，生成一个<code>app.js</code>脚本文件，这个脚本就完全是编译后生成的 JavaScript 代码。</p><p><code>tsc</code>命令也可以一次编译多个 TypeScript 脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc file1.ts file2.ts file3.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会在当前目录生成三个 JavaScript 脚本文件<code>file1.js</code>、<code>file2.js</code>、<code>file3.js</code>。</p><p>tsc 有很多参数，可以调整编译行为。</p><p><strong>（1）--outFile</strong></p><p>如果想将多个 TypeScript 脚本编译成一个 JavaScript 文件，使用<code>--outFile</code>参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc file1.ts file2.ts <span class="token parameter variable">--outFile</span> app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将<code>file1.ts</code>和<code>file2.ts</code>两个脚本编译成一个 JavaScript 文件<code>app.js</code>。</p><p><strong>（2）--outDir</strong></p><p>编译结果默认都保存在当前目录，<code>--outDir</code>参数可以指定保存到其他目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc app.ts <span class="token parameter variable">--outDir</span> dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会在<code>dist</code>子目录下生成<code>app.js</code>。</p><p><strong>（3）--target</strong></p><p>为了保证编译结果能在各种 JavaScript 引擎运行，tsc 默认会将 TypeScript 代码编译成很<strong>低版本</strong>的 JavaScript，即3.0版本（以<code>es3</code>表示）。这通常不是我们想要的结果。</p><p>这时可以使用<code>--target</code>参数，指定编译后的 JavaScript 版本。建议使用<code>es2015</code>，或者<strong>更新版本</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc <span class="token parameter variable">--target</span> es2015 app.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-4、编译错误的处理" tabindex="-1"><a class="header-anchor" href="#_6-4、编译错误的处理" aria-hidden="true">#</a> 6.4、编译错误的处理</h4><p>编译过程中，如果没有报错，<code>tsc</code>命令不会有任何显示。所以，如果你没有看到任何提示，就表示编译成功了。</p><p>如果<strong>编译报错</strong>，<code>tsc</code>命令就会显示报错信息，但是这种情况下，<strong>依然会编译生成 JavaScript 脚本</strong>。</p><p>举例来说，下面是一个错误的 TypeScript 脚本<code>app.ts</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.ts</span>
<span class="token keyword">let</span> foo<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
foo <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，变量<code>foo</code>是数值类型，赋值为字符串，<code>tsc</code>命令编译这个脚本就会报错。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>$ tsc app.ts

app.ts:2:1 - error TS2322: Type &#39;string&#39; is not assignable to type &#39;number&#39;.

2 foo = &#39;abc&#39;;
  ~~~

Found 1 error in app.ts:2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>tsc</code>命令输出报错信息，表示变量<code>foo</code>被错误地赋值为字符串。</p><p>这种情况下，编译产物<code>app.js</code>还是会照样生成，下面就是编译后的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app.js</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
foo <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<strong>尽管有错，tsc 依然原样将 TypeScript 编译成 JavaScript 脚本</strong>。</p><p>如果希望一旦报错就停止编译，不生成编译产物，可以使用<code>--noEmitOnError</code>参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc <span class="token parameter variable">--noEmitOnError</span> app.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令在报错后，就不会生成<code>app.js</code>。</p><p>tsc 还有一个<code>--noEmit</code>参数，只检查类型是否正确，不生成 JavaScript 文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc <span class="token parameter variable">--noEmit</span> app.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令只检查是否有编译错误，不会生成<code>app.js</code>。</p><p>tsc 命令的更多参数，详见《tsc 编译器》一章。</p><h4 id="_6-5、tsconfig-json" tabindex="-1"><a class="header-anchor" href="#_6-5、tsconfig-json" aria-hidden="true">#</a> 6.5、tsconfig.json</h4><p>TypeScript 允许将<code>tsc</code>的编译参数，写在配置文件<code>tsconfig.json</code>。只要当前目录有这个文件，<code>tsc</code>就会自动读取，所以运行时可以不写参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc file1.ts file2.ts <span class="token parameter variable">--outFile</span> dist/app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这个命令写成<code>tsconfig.json</code>，就是下面这样。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;file1.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file2.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/app.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个配置文件，编译时直接调用<code>tsc</code>命令就可以了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>tsconfig.json</code>的详细介绍，参见《tsconfig.json 配置文件》一章。</p><h3 id="_7、ts-node-模块" tabindex="-1"><a class="header-anchor" href="#_7、ts-node-模块" aria-hidden="true">#</a> 7、ts-node 模块</h3>`,65),v={href:"https://github.com/TypeStrong/ts-node",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>使用时，可以先全局安装它。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> ts-node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装后，就可以直接运行 TypeScript 脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ts-node script.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令运行了 TypeScript 脚本<code>script.ts</code>，给出运行结果。</p><p>如果不安装 ts-node，也可以通过 npx 调用它来运行 TypeScript 脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx ts-node script.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令中，<code>npx</code>会在线调用 ts-node，从而在不安装的情况下，运行<code>script.ts</code>。</p><p>如果执行 ts-node 命令不带有任何参数，它会提供一个 TypeScript 的命令行 REPL 运行环境，你可以在这个环境中输入 TypeScript 代码，逐行执行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ts-node
<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，单独运行<code>ts-node</code>命令，会给出一个大于号，这就是 TypeScript 的 REPL 运行环境，可以逐行输入代码运行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ts-node
<span class="token operator">&gt;</span> const twice <span class="token operator">=</span> <span class="token punctuation">(</span>x:string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> x + x<span class="token punctuation">;</span>
<span class="token operator">&gt;</span> twice<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;abcabc&#39;</span>
<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，在 TypeScript 命令行 REPL 环境中，先输入一个函数<code>twice</code>，然后调用该函数，就会得到结果。</p><p>要退出这个 REPL 环境，可以按下 Ctrl + d，或者输入<code>.exit</code>。</p><p>如果只是想简单运行 TypeScript 代码看看结果，ts-node 不失为一个便捷的方法。</p>`,15);function b(g,h){const n=i("ExternalLinkIcon");return c(),o("div",null,[d,a("p",null,[s("最简单的 TypeScript 使用方法，就是使用官网的在线编译页面，叫做 "),a("a",l,[s("TypeScript Playground"),t(n)]),s("。")]),u,a("p",null,[a("a",v,[s("ts-node"),t(n)]),s(" 是一个非官方的 npm 模块，可以直接运行 TypeScript 代码。")]),m])}const f=p(r,[["render",b],["__file","2、基本用法.html.vue"]]);export{f as default};
