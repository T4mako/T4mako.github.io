<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://T4mako.github.io/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://T4mako.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>T4mako</title>
    <link>https://T4mako.github.io/</link>
    <description>T4mako</description>
    <language>zh-CN</language>
    <pubDate>Mon, 31 Jul 2023 02:10:30 GMT</pubDate>
    <lastBuildDate>Mon, 31 Jul 2023 02:10:30 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>心得</category>
    <category>vue</category>
    <category>部署</category>
    <category>MarkDown</category>
    <category>java</category>
    <category>算法</category>
    <category>基础</category>
    <category>基础知识</category>
    <item>
      <title>A meeting with experienced IT practitioner</title>
      <link>https://T4mako.github.io/life/%E9%9A%8F%E7%AC%94/%E8%81%8C%E5%9C%BA%E4%BA%A4%E6%B5%81.html</link>
      <guid>https://T4mako.github.io/life/%E9%9A%8F%E7%AC%94/%E8%81%8C%E5%9C%BA%E4%BA%A4%E6%B5%81.html</guid>
      <source url="https://T4mako.github.io/rss.xml">A meeting with experienced IT practitioner</source>
      <description>A meeting with experienced IT practitioner</description>
      <category>心得</category>
      <pubDate>Fri, 28 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> A meeting with experienced IT practitioner</h1>
<!-- more -->
<p>几天前，有幸与某公司IT部老大与其一个手下交谈。<br>
经典社恐开局，并没有交流太多。</p>
<p>人物概述：<br>
该公司为有约1500+人的半导体公司，IT部门老大A与其手下B</p>
<p>以下简述几点</p>
<ul>
<li><strong>绩点</strong><br>
首先询问绩点并阐述绩点是一个基本标杆，<s>个人认为用处不大</s></li>
<li><strong>gpt底座</strong><br>
目前人工智能无疑是最火热的方向，gpt的火热与成功离不开 <strong>底座</strong> 的支持，并推荐我在github寻找相关项目并复现，可以得到很大提升，<s>听着就很难啊</s></li>
<li>分布式对象存储<br>
例如分布式对象存储就是gpt的一个底座，并拿出了与THU博士实习生的聊天记录，从记录中了解到这个方向的人才并不多，顶尖的来来回回就那几个，并登上了外网首页（包括THU博士）。<s>我想回家找妈妈</s></li>
<li><strong>如何避免35岁危机</strong><br>
讨论到互联网寒冬，35危机问题。A表明如何做到越老越不容易失业。就是深度了解某个专门的业务，譬如财务相关，农业相关。不仅有编程能力还要有另外一个不同方向的能力和与之结合的能力。</li>
<li><strong>sap</strong><br>
B是sap与c#方向。毕业院校不是很好，同时也走了不少弯路。摸爬滚打多年也是走上了很高的高度。<s>sap界面太丑了</s></li>
<li><strong>啥都要学</strong><br>
问我学rust了没，推荐我赶紧学。<s>反正啥都要学</s></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>该文章只是简单的总结，对其相关讨论点请秉持理性与尊重。<br>
相信的心就是你的魔法。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>个人介绍</title>
      <link>https://T4mako.github.io/intro.html</link>
      <guid>https://T4mako.github.io/intro.html</guid>
      <source url="https://T4mako.github.io/rss.xml">个人介绍</source>
      <description>个人介绍</description>
      <pubDate>Thu, 27 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 个人介绍</h1>
<!-- more -->
<h2> 我是谁？</h2>
<ul>
<li>T4mako</li>
<li>经典社恐</li>
<li>性别：男</li>
<li>年龄：22</li>
<li>婚姻情况: 未婚</li>
<li>单身: 是</li>
<li>学历：苏州科技大学 CS在读</li>
</ul>
<p>T4mako名字的由来：Tamako来自于<a href="https://www.kyotoanimation.co.jp/" target="_blank" rel="noopener noreferrer">京都动画</a>公司第二部原创动画<a href="http://tamakomarket.com/" target="_blank" rel="noopener noreferrer">《玉子市场》</a>的女主人公北白川たまこ（Kitashirakawa Tamako）。<br>
同时作为一名CSGO玩家，受职业选手启发，有着数字代表字母的‘美德’<code>1-&gt;i/l,3-&gt;e,4-&gt;a···</code>。<s>CSGO？赚钱工具！</s><br>
因此T4mako从宇宙诞生了。</p>
<h2> 兴趣爱好</h2>
<ul>
<li>编程 <s>解决吃饭</s></li>
<li>打游戏 <s>电子阳痿</s></li>
<li>视频设计 <s>Edit for fun</s></li>
<li>看番 <s>婆罗门</s></li>
<li>厨艺 <s>吃饭糊弄学研究方向</s></li>
</ul>
<h2> 社交账号与联系方式</h2>
<p>联系方式：</p>
<ul>
<li>你可以在下方留言</li>
<li>或通过QQ号查找到我：1536954632</li>
</ul>
<p>社交媒体：</p>
<ul>
<li><a href="https://space.bilibili.com/313309138" target="_blank" rel="noopener noreferrer">Bilibili</a> <s>（home）</s></li>
<li><a href="https://github.com/T4mako" target="_blank" rel="noopener noreferrer">GitHub</a> <s>（学习与整活）</s></li>
<li><a href="https://bgm.tv/user/t4mako" target="_blank" rel="noopener noreferrer">Bangumi</a> <s>（速来看番）</s></li>
<li><a href="https://steamcommunity.com/profiles/76561199025694576/" target="_blank" rel="noopener noreferrer">Steam</a> <s>（Van♂游戏）</s></li>
<li><a href="https://music.163.com/#/user/home?id=559686132" target="_blank" rel="noopener noreferrer">网易云</a> <s>（没有音乐会死）</s></li>
<li><a href="https://m.weibo.cn/u/6321875003" target="_blank" rel="noopener noreferrer">微博</a> <s>（理发店）</s></li>
<li><a href="https://www.douyin.com/user/MS4wLjABAAAA32mwXDHtuWrwk5MD48IWbQCxLEzl1K-wBpUKNiH6NdA" target="_blank" rel="noopener noreferrer">抖音</a> <s>（随心发）</s></li>
</ul>
<h2> 日常</h2>
<p>学习、睡觉、吃饭、玩</p>
<h2> 关于博客</h2>
<p>本博客基于<a href="https://theme-hope.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a>主题搭建的<a href="https://vuejs.press/zh/" target="_blank" rel="noopener noreferrer">vuepress</a>博客。<br>
该博客存储我的大部分笔记，并提供搜索、评论服务<s>我真会来搜吗</s></p>
<h2> 请我喝一杯</h2>
<p><s>我看看会不会真有人Vme</s></p>
<table>
<thead>
<tr>
<th style="text-align:center">微信</th>
<th style="text-align:center">支付宝</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2> 博客待完善的内容</h2>
<ul>
<li>文章格式整理</li>
<li>RSS订阅</li>
<li>更多玩法</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>基于vue-theme-hope的博客搭建指南</title>
      <link>https://T4mako.github.io/code/%E5%85%B6%E4%BB%96/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA.html</link>
      <guid>https://T4mako.github.io/code/%E5%85%B6%E4%BB%96/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA.html</guid>
      <source url="https://T4mako.github.io/rss.xml">基于vue-theme-hope的博客搭建指南</source>
      <description>基于vue-theme-hope的博客搭建指南</description>
      <category>vue</category>
      <pubDate>Thu, 27 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 基于vue-theme-hope的博客搭建指南</h1>
<!-- more -->
<p>在构建博客时，推荐参照<a href="https://theme-hope.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">官方文档</a>进行构建，本文知识大致介绍与提出基本概念，帮助大家快速构建博客。<br>
搭建个人博客的好处有很多，包括笔记管理，快速定位搜索，知识点复习，激发创作欲等，每个程序员都应有一个个人博客。<s>什么暴论</s><br>
目前搭建个人博客、资料库的手段很多。例如hexo，wordpress，VuePress，自行搭建······。<br>
<a href="https://v2.vuepress.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">VuePress</a>是Vue 驱动的静态网站生成器，VuePress的核心是以Markdown文件为中心，由 Vue、Vue Router 和 webpack驱动的单页应用，它功能强大并支持诸多插件。<br>
<a href="https://theme-hope.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">VuePress Theme Hope</a>是一个具有强大功能的 vuepress 主题，它基于VuePress2.x并提供了更强大的功能。</p>
<h2> 构建项目</h2>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>在搭建blog之前，你需要准备：</p>
<ul>
<li><a href="https://nodejs.org/zh-cn" target="_blank" rel="noopener noreferrer">Node.js</a> 16+</li>
<li>推荐使用<a href="https://pnpm.io/" target="_blank" rel="noopener noreferrer">pnpm</a> 7+作为包管理工具</li>
</ul>
</div>
<p>初始化项目：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>my-docs</code>代表当前目录下的项目文件夹名称<br>
构建项目时，可以选择<code>简体中文</code>并回车来在后续流程中使用中文进行显示。<br>
在模板初始化成功后选择立即启动开发服务器，你就可以在浏览器地址栏输入 <code>localhost:8080/</code> 访问你的博客。</p>
<h2> 基本概念</h2>
<p>在构建项目后，开发项目前，你需要了解的<strong>基础知识</strong>：</p>
<ol>
<li>VuePress 是以<a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/" target="_blank" rel="noopener noreferrer">Markdown</a> 为中心的。你项目中的每一个 Markdown 文件都是一个单独的页面。</li>
<li>主要配置文件：
<ul>
<li><code>.vuepress/config.ts</code>：<strong>VuePress的配置文件</strong>，用于配置主题，插件，站点等，<a href="https://vuejs.press/zh/reference/config.html" target="_blank" rel="noopener noreferrer">相关配置</a></li>
<li><code>.vuepress/theme.ts</code>：<strong>主题配置</strong>，用于配置主题的功能、布局、外观等，<a href="https://theme-hope.vuejs.press/zh/config/theme/layout.html" target="_blank" rel="noopener noreferrer">相关配置</a></li>
<li><code>narbar.ts</code>：用于配置<strong>导航栏</strong>布局，<a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">相关配置</a></li>
<li><code>sidebat.ts</code>：用于配置<strong>侧边栏</strong>布局，<a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">相关配置</a></li>
</ul>
</li>
<li><code>frontmatter</code>：必须放在.md文件的<strong>开头</strong>，可以配置Markdown文件的相关信息，这些信息用于显示在博客上的标题，图标，时间，分类等，<a href="https://theme-hope.vuejs.press/zh/config/frontmatter/" target="_blank" rel="noopener noreferrer">相关配置</a></li>
<li>博客首页（<code>.vuepress/README.md</code>）：如果你创建的是博客项目，那么你打开博客后的初始页面为首页，你可以对其进行配置，也可以更改首页。<a href="https://theme-hope.vuejs.press/zh/guide/blog/" target="_blank" rel="noopener noreferrer">相关配置</a></li>
<li>个人介绍页（<code>.vuepress/intro.md</code>）</li>
<li>.vuepress/styles：样式配置，用于配置主题样式，添加自己的样式等，<a href="https://theme-hope.vuejs.press/zh/config/style.html" target="_blank" rel="noopener noreferrer">相关配置</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/cookbook/tutorial/content.html#%E9%A1%B5%E9%9D%A2%E7%9A%84%E7%94%9F%E6%88%90" target="_blank" rel="noopener noreferrer">Markdown 文件路由路径</a></li>
</ol>
<p><strong>你可以在vueprress-theme-hope<a href="https://theme-hope.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">官方文档</a>中查询所有的配置与功能</strong></p>
<h2> MarkDown增强</h2>
<p>有了MarkDown增强即可在编写文章时使用更多的语法来实现更丰富的效果。</p>
<ul>
<li><a href="https://v2.vuepress.vuejs.org/zh/guide/markdown.html#%E8%AF%AD%E6%B3%95%E6%89%A9%E5%B1%95" target="_blank" rel="noopener noreferrer">VuePress 本身新增了一些 Markdown 语法</a></li>
<li>vuepress-theme-hope 通过 <a href="https://plugin-md-enhance.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">vuepress-plugin-md-enhance</a> 在 Markdown 中启用了更多的语法与新功能。</li>
</ul>
<h2> 在MarkDown中使用Vue</h2>
<p>在MarkDown文件中可以使用Vue语法和Vue组件<br>
建议在<code>.vuepress/components</code>文件夹下创建组件<br>
通过<code>@vuepress/plugin-register-components</code>插件可以进行组件的注册</p>
<p><a href="https://vuejs.press/zh/reference/plugin/register-components.html" target="_blank" rel="noopener noreferrer">安装插件与配置项</a></p>
<p><a href="https://theme-hope.vuejs.press/zh/cookbook/customize/component.html#%E5%9C%A8-markdown-%E4%B8%AD%E4%BD%BF%E7%94%A8-vue-%E8%AF%AD%E6%B3%95%E4%B8%8E%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener noreferrer">在vuepress-theme-hope中使用</a>：<br>
为了正确导入自己的组件，你需要为它们创建别名，你可以通过 alias 选项实现这一点:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在MarkDown中引入：</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 插件</h2>
<p>vuepress的官方<a href="https://vuejs.press/zh/reference/plugin/" target="_blank" rel="noopener noreferrer">插件</a><br>
vuepress-theme-hope内置的<a href="https://theme-hope.vuejs.press/zh/config/plugins/" target="_blank" rel="noopener noreferrer">插件</a><br>
<a href="https://marketplace.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">插件市场</a>包括更强的搜索，博客，live-2d等功能</p>
<h2> 常见问题</h2>
<p>在构建过程中，难免会发生问题，大部分问题你可以在<a href="https://theme-hope.vuejs.press/zh/faq/" target="_blank" rel="noopener noreferrer">常见问题</a>和<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/issues" target="_blank" rel="noopener noreferrer">GitHub issues</a>上找到</p>
<h2> 项目的部署</h2>
<p><a href="https://t4mako.github.io/code/%E8%BF%90%E7%BB%B4%E4%B8%8E%E9%83%A8%E7%BD%B2/GitHub%20Actions.html" target="_blank" rel="noopener noreferrer">推荐使用 GitHub Actions 部署到 GitHub Pages</a><br>
<a href="https://vuejs.press/zh/guide/deployment.html" target="_blank" rel="noopener noreferrer">其他方式部署</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>GitHub Actions 部署</title>
      <link>https://T4mako.github.io/code/%E8%BF%90%E7%BB%B4%E4%B8%8E%E9%83%A8%E7%BD%B2/GitHub%20Actions.html</link>
      <guid>https://T4mako.github.io/code/%E8%BF%90%E7%BB%B4%E4%B8%8E%E9%83%A8%E7%BD%B2/GitHub%20Actions.html</guid>
      <source url="https://T4mako.github.io/rss.xml">GitHub Actions 部署</source>
      <description>使用 GitHub Actions 部署，以 vuepress-theme-hope Blog 为例</description>
      <category>部署</category>
      <pubDate>Mon, 24 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>使用 GitHub Actions 部署，以 vuepress-theme-hope Blog 为例</p>
<!-- more -->
<p>关于 git  相关使用  <a href="/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Git">GIt基础</a></p>
<p><a href="https://github.com/features/actions" target="_blank" rel="noopener noreferrer">GitHub Actions</a> 是 GitHub 的 <a href="https://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener noreferrer">持续集成服务(CI/CD)</a></p>
<h3> GitHub Actions 术语：</h3>
<ul>
<li><strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 wor	kflow。</li>
<li><strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li>
<li><strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</li>
<li><strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</li>
</ul>
<h3> workflow 文件</h3>
<p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p>
<p>workflow 文件采用 YAML 格式，文件名可以任意取<br>
一个库可以有多个 workflow 文件<br>
GitHub 只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动运行该文件。</p>
<p>workflow 文件配置规则：<a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions" target="_blank" rel="noopener noreferrer">https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions</a></p>
<h3> 部署 vuepress-theme-hope Blog 到 GitHub pages</h3>
<p>当 commit 到 main 分支后，GitHub Actions 就会执行 jobs 下的步骤</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，提交到 main 分支下的内容通过自动构建并将 dist 目录部署到 GitHub Pages 上（注意设置GitHub Pages的依赖分支）</p>
]]></content:encoded>
    </item>
    <item>
      <title>VuePress 中的 Markdown 扩展</title>
      <link>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/vue/vuepress/markdown%E6%89%A9%E5%B1%95.html</link>
      <guid>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/vue/vuepress/markdown%E6%89%A9%E5%B1%95.html</guid>
      <source url="https://T4mako.github.io/rss.xml">VuePress 中的 Markdown 扩展</source>
      <description>VuePress 中的 Markdown 扩展 https://theme-hope.vuejs.press/zh/guide/markdown/intro.html VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展</description>
      <category>MarkDown</category>
      <pubDate>Thu, 20 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> VuePress 中的 Markdown 扩展</h1>
<p><a href="https://theme-hope.vuejs.press/zh/guide/markdown/intro.html" target="_blank" rel="noopener noreferrer">https://theme-hope.vuejs.press/zh/guide/markdown/intro.html</a></p>
<p>VuePress 会使用 <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a> 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 <a href="https://github.com/markdown-it/markdown-it#syntax-extensions" target="_blank" rel="noopener noreferrer">语法扩展</a></p>
<h2> 链接</h2>
<p>VuePress 中的 链接语法 转换：</p>
<p>原始Markdown：</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换为：</p>
<div class="language-vue line-numbers-mode" data-ext="vue"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>内部链接会被转换为 <code>&lt;RouterLink&gt;</code> 以便进行 SPA 导航。</li>
<li>指向 <code>.md</code> 文件的内部链接会被转换为目标页面的 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/page.html#%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener noreferrer">路由路径</a>，并且支持绝对路径和相对路径。</li>
<li>外部链接会被添加 <code>target="_blank" rel="noopener noreferrer"</code> 属性。</li>
</ul>
<h3> 建议</h3>
<p>对于 <strong>内部链接</strong>，尽可能使用 <strong>相对路径</strong> 而不是绝对路径。</p>
<p>在使用绝对路径时，如果你站点的 base 不是 <code>"/"</code>，你需要手动添加 <code>base</code> 或者使用  base helper 。</p>
<h3> 引入目录</h3>
<p>如果你想要把当前页面的目录添加到 Markdown 内容中，你可以使用 <code>[[toc]]</code> 语法。</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 代码块</h2>
<p>代码块在 Node 端处理</p>
<h3> 行高亮</h3>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>行数范围标记的例子:</p>
<ul>
<li>行数范围: <code>{5-8}</code></li>
<li>多个单行: <code>{4,7,9}</code></li>
<li>组合: <code>{4,7-13,16,23-27,40}</code></li>
</ul>
<h3> 行号</h3>
<p>行号默认启用</p>
<p>局部禁用方式：</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> :no-v-pre</h3>
<p>为了避免你的代码块被 Vue 编译<br>
可以在代码块添加 <code>:v-pre</code> / <code>:no-v-pre</code> 标记来覆盖配置项中的设置。</p>
<h3> 导入代码块</h3>
<p>从文件中导入代码块: <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/markdown.html#%E5%AF%BC%E5%85%A5%E4%BB%A3%E7%A0%81%E5%9D%97" target="_blank" rel="noopener noreferrer">https://theme-hope.vuejs.press/zh/cookbook/vuepress/markdown.html#导入代码块</a></p>
<h2> 在 Markdown中使用 Vue</h2>
<ul>
<li>Markdown 中允许使用 HTML。</li>
<li>Vue 模板语法是和 HTML 兼容的。</li>
</ul>
<p>Markdown 中允许直接使用 <a href="https://v3.vuejs.org/guide/template-syntax.html" target="_blank" rel="noopener noreferrer">Vue 模板语法</a></p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不要在 VuePress 的 Markdown 中使用已废弃的 html 标签</p>
<h3> 使用Vue组件</h3>
<p>在MarkDown文件中可以使用Vue语法和Vue组件<br>
建议在<code>.vuepress/components</code>文件夹下创建组件<br>
通过<code>@vuepress/plugin-register-components</code>插件可以进行组件的注册</p>
<p><a href="https://vuejs.press/zh/reference/plugin/register-components.html" target="_blank" rel="noopener noreferrer">安装插件与配置项</a></p>
<p><a href="https://theme-hope.vuejs.press/zh/cookbook/customize/component.html#%E5%9C%A8-markdown-%E4%B8%AD%E4%BD%BF%E7%94%A8-vue-%E8%AF%AD%E6%B3%95%E4%B8%8E%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener noreferrer">在vuepress-theme-hope中使用</a>：<br>
为了正确导入自己的组件，你需要为它们创建别名，你可以通过 alias 选项实现这一点:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在MarkDown中引入：</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>JWT 教程</title>
      <link>https://T4mako.github.io/code/java/JWT.html</link>
      <guid>https://T4mako.github.io/code/java/JWT.html</guid>
      <source url="https://T4mako.github.io/rss.xml">JWT 教程</source>
      <description>JSON Web Token (JWT) 是一个开放标准（rfc7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以 JSON对象 安全地传输信息。此信息可以验证和信任，因为它是数字签名的。JWT 可以使用 HMAC算法 或 使用 RSA 或 ECDSA 的公钥/私钥对进行签名</description>
      <category>java</category>
      <pubDate>Fri, 09 Jun 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>JSON Web Token (<a href="https://jwt.io/introduction/" target="_blank" rel="noopener noreferrer">JWT</a>) 是一个开放标准（rfc7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以 <strong>JSON对象</strong> 安全地传输信息。此信息可以验证和信任，因为它是数字签名的。JWT 可以使用 HMAC算法 或 使用 RSA 或 ECDSA 的公钥/私钥对进行签名</p>
<!-- more -->
<p>JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案</p>
<h3> 1、JWT 作用</h3>
<p>1、<strong>登录授权</strong></p>
<ul>
<li>用户登录，后续每个请求将包括 JWT，从而允许用户访问该令牌允许的路由，服务和资源。|<br>
<strong>单点登录</strong> 是当今广泛使用JWT的一项功能，因为它的开销小且能在不同的域中使用。</li>
</ul>
<p>2、<strong>信息交换</strong></p>
<ul>
<li>JSON Web Token 可以在各方之间安全传输信息<br>
通过对 JWT 进行签名（例如，使用公钥/私钥对），可以确保发件人是他们所说的人。<br>
此外，由于签名是使用标头和有效负载计算的，因此您还可以验证内容是否遭到篡改。</li>
</ul>
<h3> 2、session 与 JWT 对比</h3>
<h4> 传统的Session认证</h4>
<p>认证方式：</p>
<ol>
<li>用户向服务器发送用户名和密码。</li>
<li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</li>
<li>服务器向用户返回一个 session_id，写入用户的 Cookie。</li>
<li>用户 <strong>随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器</strong>。</li>
<li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li>
</ol>
<blockquote>
<p>这种模式的问题在于，扩展性（scaling）不好。<br>
单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，<strong>每台服务器都能够读取 session</strong></p>
<p>http 协议本身是一种 无状态 的协议，我们并不能知道是哪个用户发出的请求</p>
<p>所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在 <strong>服务器存储</strong> 一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20200726103959013.png" alt="image-20200726103959013" loading="lazy"></p>
<p>暴露问题：</p>
<ol>
<li>每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，通常而言 session 都是保存在 <strong>内存</strong> 中，而随着认证用户的增多，服务端的开销会明显增大</li>
<li>用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样在分布式的应用上，相应的限制了 <strong>负载均衡</strong> 器的能力。这也意味着限制了应用的扩展能力。</li>
<li>因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</li>
<li>在前后端分离系统中：<br>
① 通常用户一次请求就要转发多次。如果每次携带 sessionid 到服务器，服务器还要查询用户信息。<br>
② 如果用户很多。这些信息存储在服务器内存中，给 <strong>服务器增加负担</strong>。<br>
③ <strong>CSRF</strong> 攻击：session 是基于cookie 进行用户识别的, cookie 如果被截获，用户就会很容易受到 跨站请求伪造 的攻击。<br>
④ sessionid 就是一个特征值，<strong>表达的信息不够丰富</strong>。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群应用。</li>
</ol>
<blockquote>
<p>一种解决方案是 <strong>session 数据持久化</strong>，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p>
<p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p>
</blockquote>
<h4> JWT认证</h4>
<p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20200726183248298.png" alt="" loading="lazy"></p>
<p><strong>认证流程</strong></p>
<ul>
<li>
<p>前端通过表单将用户名、密码发送到后端。</p>
</li>
<li>
<p>后端核对用户名和密码成功后，将用户的 <strong>id等信息</strong> 作为 <strong>JWT Payload（负载）</strong>，将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。</p>
</li>
<li>
<p>后端将 JWT字符串 作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在 <strong>localStorage</strong> 或 <strong>sessionStorage</strong>上，退出登录时前端删除保存的JWT即可。</p>
</li>
<li>
<p>前端在每次请求时将 JWT 放入 HTTP Header 中的 <strong>Authorization</strong> 位。(解决XSS和XSRF问题)</p>
</li>
<li>
<p>后端验证 JWT 的有效性。例如，检查签名是否正确、Token是否过期、Token的接收方是否是自己等。</p>
</li>
<li>
<p>验证通过后后端使用 JWT 中包含的用户信息进行其他逻辑操作，返回相应结果。</p>
</li>
</ul>
<p><strong>JWT优势</strong></p>
<ul>
<li>
<p>简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快</p>
</li>
<li>
<p>自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库</p>
</li>
<li>
<p>因为 Token 是以 JSON 加密的形式保存在客户端的，所以 JWT 是跨语言的，原则上任何web形式都支持。</p>
</li>
<li>
<p>不需要在服务端保存会话信息，特别适用于分布式微服务。</p>
</li>
</ul>
<h3> 3、JWT 结构</h3>
<p><strong>header.payload.singnature</strong></p>
<ul>
<li>1.标头(Header)</li>
<li>2.有效载荷(Payload)</li>
<li>3.签名(Signature)</li>
</ul>
<h4> Header</h4>
<p>标头通常由两部分组成：<br>
① 令牌的类型（即JWT）<br>
② 所使用的签名算法，例如HMAC SHA256或RSA。<br>
它会使用 Base64 编码组成 JWT 结构的第一部分。</p>
<blockquote>
<p>注：Base64是一种编码，并不是一种加密过程，它可以被翻译回原来的样子。</p>
</blockquote>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Payload</h4>
<p>令牌第二部分是 有效负载，其中包含声明。<br>
声明是有关实体（通常是用户）和其他数据的声明。<br>
同样，它会使用 Base64 编码组成 JWT 结构的第二部分</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注：JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p>
</blockquote>
<h4> Signature</h4>
<ul>
<li>
<p>Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥（<strong>盐</strong>），然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过</p>
<p>Signature = HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload),secret);</p>
</li>
</ul>
<p>签名目的</p>
<ul>
<li>最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。</li>
<li>如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。</li>
<li>如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</li>
</ul>
<p>信息安全问题</p>
<ul>
<li>
<p>Base64是一种编码，是可逆的，那么信息会暴露</p>
</li>
<li>
<p>因此在 JWT 中，所以不要把秘密信息放在这个部分。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20200726181136113.png" alt="image-20200726181136113" loading="lazy"></p>
<h4> 放在一起</h4>
<p><strong>header.payload.singnature</strong></p>
<ul>
<li>输出是三个由点分隔的Base64-URL字符串</li>
<li>可以通过URL, POST 参数或者在 HTTP header 发送，数据量小，传输速度快</li>
<li>自包含(Self-contained)<br>
负载中包含了所有用户所需要的信息，避免了多次查询数据库</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20200726124257203.png" alt="image-20200726124257203" loading="lazy"></p>
<h3> 4、JWT 使用</h3>
<p><a href="https://jwt.io/libraries" target="_blank" rel="noopener noreferrer">JWT官网提供的使用</a></p>
<p><a href="https://github.com/auth0/java-jwt" target="_blank" rel="noopener noreferrer">基于 Java 的使用</a>：</p>
<h4> 1、引入依赖</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、生成token</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、根据令牌和签名解析数据</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、常见异常信息</h4>
<ul>
<li>SignatureVerificationException:				签名不一致异常</li>
<li>TokenExpiredException:    						令牌过期异常</li>
<li>AlgorithmMismatchException:						算法不匹配异常</li>
<li>InvalidClaimException:								失效的payload异常</li>
</ul>
<h3> 6.封装工具类</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.整合springboot</h3>
<h4> Controller 层开发</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 测试类编写</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 Postman 携带 token 测试</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20200805215451442.png" alt="image-20200805215451442" loading="lazy"></p>
<h4> 优化</h4>
<ul>
<li>使用上述方式每次都要传递 token 数据,每个方法都需要 <strong>验证 token 代码冗余</strong></li>
<li>可以使用 <strong>拦截器</strong> 进行优化</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>参考：<br>
<a href="https://www.bilibili.com/video/BV1i54y1m7cP/" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1i54y1m7cP/</a><br>
<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener noreferrer">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20200726103959013.png" type="image/png"/>
    </item>
    <item>
      <title>代码笔记</title>
      <link>https://T4mako.github.io/code/</link>
      <guid>https://T4mako.github.io/code/</guid>
      <source url="https://T4mako.github.io/rss.xml">代码笔记</source>
      <description>基础知识 (/code/基础知识) 前端开发 (/code/前端开发) Java后端 (/code/java) 数据库 (/code/数据库) 运维与部署 (/code/运维与部署) Python (/code/python) Leetcode (/code/Leetcode) 其他 (/code/其他)</description>
      <content:encoded><![CDATA[<h1> </h1>
<!-- more -->
<h3> <a href="/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">基础知识</a></h3>
<h3> <a href="/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91">前端开发</a></h3>
<h3> <a href="/code/java">Java后端</a></h3>
<h3> <a href="/code/%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a></h3>
<h3> <a href="/code/%E8%BF%90%E7%BB%B4%E4%B8%8E%E9%83%A8%E7%BD%B2">运维与部署</a></h3>
<h3> <a href="/code/python">Python</a></h3>
<h3> <a href="/code/Leetcode">Leetcode</a></h3>
<h3> <a href="/code/%E5%85%B6%E4%BB%96">其他</a></h3>
]]></content:encoded>
    </item>
    <item>
      <title>友链</title>
      <link>https://T4mako.github.io/friends/</link>
      <guid>https://T4mako.github.io/friends/</guid>
      <source url="https://T4mako.github.io/rss.xml">友链</source>
      <description>友链</description>
      <content:encoded><![CDATA[<h1> 友链</h1>
]]></content:encoded>
    </item>
    <item>
      <title>IDE 快捷键</title>
      <link>https://T4mako.github.io/code/java/IDEA%E3%80%81Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE.html</link>
      <guid>https://T4mako.github.io/code/java/IDEA%E3%80%81Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE.html</guid>
      <source url="https://T4mako.github.io/rss.xml">IDE 快捷键</source>
      <description># Eclipse 补全代码的声明： alt + /; 快速修复: ctrl + 1 *; 批量导包： ctrl + shift + o; 使用单行注释： ctrl + / ; 使用多行注释： ctrl + shift + /; 取消多行注释： ctrl + shift + \; 复制指定行的代码： ctrl + alt + down 或 ctrl +...</description>
      <category>java</category>
      <content:encoded><![CDATA[<h1> </h1>
<!-- more -->
<h2> Eclipse</h2>
<ul>
<li>补全代码的声明： alt + /</li>
<li>*快速修复: ctrl + 1 **</li>
<li>批量导包： ctrl + shift + o</li>
<li>使用单行注释： ctrl + /</li>
<li>使用多行注释： ctrl + shift + /</li>
<li>取消多行注释： ctrl + shift + \</li>
<li>复制指定行的代码： ctrl + alt + down 或 ctrl + alt + up</li>
<li>删除指定行的代码： ctrl + d</li>
<li>上下移动代码： alt + up 或 alt + down</li>
<li>切换到下一行代码空位： shift + enter</li>
<li>切换到上一行代码空位： ctrl + shift + enter</li>
<li>如何查看源码： ctrl + 选中指定的结构 或 ctrl + shift + t</li>
<li>退回到前一个编辑的页面： alt + left</li>
<li>进入到下一个编辑的页面(针对于上面那条来说的)： alt + right</li>
<li>光标选中指定的类，查看继承树结构： ctrl + t</li>
<li>复制代码： ctrl + c</li>
<li>撤销： ctrl + z</li>
<li>反撤销： ctrl + y</li>
<li>剪切： ctrl + x</li>
<li>粘贴： ctrl + v</li>
<li>保存： ctrl + s</li>
<li>全选： ctrl + a</li>
<li>格式化代码： ctrl + shift + f （整理代码）</li>
<li>选中数行，整体往后移动： tab</li>
<li>选中数行，整体往前移动： shift + tab</li>
<li>在当前类中，显示类结构，并支持搜索指定的方法、属性等： ctrl + o</li>
<li>批量修改指定的变量名、方法名、类名等： alt + shift + r</li>
<li>选中的结构的大小写的切换：变成大写： ctrl + shift + x</li>
<li>选中的结构的大小写的切换：变成小写： ctrl + shift + y</li>
<li>调出生成 getter/setter/构造器等结构： alt + shift + s</li>
<li>显示当前选择资源(工程 or 文件)的属性： alt + enter</li>
<li>快速查找：参照选中的 Word 快速定位到下一个 ： ctrl + k</li>
<li>关闭当前窗口： ctrl + w</li>
<li>关闭所有的窗口： ctrl + shift + w</li>
<li>查看指定的结构使用过的地方： ctrl + alt + g</li>
<li>查找与替换： ctrl + f</li>
<li>最大化当前的 View： ctrl + m</li>
<li>直接定位到当前行的首位： home</li>
<li>直接定位到当前行的末位： end</li>
</ul>
<p>提示显示的设置：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230718154551691.png" alt="image-20230718154551691" loading="lazy"></p>
<h2> IDEA</h2>
<ul>
<li>alt+insert		选择生成构造器，getter、setter方法......</li>
<li>ctrl+F12		快速找方法</li>
<li>alt+enter		快速声明对象名，提供解异常的方式</li>
<li>ctrl+alt+t		将选中的代码用...包围起来</li>
<li>ctrl+p		将光标放置在()中，显示需要的形参</li>
<li>ctrl+alt+shift+s	文件-项目结构</li>
<li>ctrl+shift+方向键	整体移动代码</li>
<li>alt+←/→		查看左右的文件</li>
<li>ctrl+h		选中类，查看类的继承树</li>
<li>ctrl+shift+z	取消撤销</li>
<li>ctrl+shift+t	(右键代码，GO to Test 选择方法单元测试)单元测试</li>
<li>shift+F6		重命名</li>
<li>ctrl+alt+l		快速整理代码</li>
<li>ctrl+shift+'-/+'	折叠或展开选中的代码</li>
<li>ctrl+shift+/	舒服的快速注释</li>
<li>ctrl+o		重写父类、接口的方法</li>
<li>sout</li>
<li>soutv</li>
</ul>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230718154551691.png" type="image/png"/>
    </item>
    <item>
      <title>JDBC 基础</title>
      <link>https://T4mako.github.io/code/java/JDBC.html</link>
      <guid>https://T4mako.github.io/code/java/JDBC.html</guid>
      <source url="https://T4mako.github.io/rss.xml">JDBC 基础</source>
      <description>JDBC核心技术 第1章：JDBC概述 1.1 数据的持久化 持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多通过各种关系数据库来完成。</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> JDBC核心技术</h2>
<hr>
<h3> 第1章：JDBC概述</h3>
<h4> 1.1 数据的持久化</h4>
<ul>
<li>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</li>
</ul>
<!-- more -->
<ul>
<li>
<p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566741430592.png" alt="1566741430592" loading="lazy"></p>
</li>
</ul>
<h4> 1.2 Java中的数据存储技术</h4>
<ul>
<li>
<p>在Java中，数据库存取技术可分为如下几类：</p>
<ul>
<li>
<p><strong>JDBC</strong>直接访问数据库</p>
</li>
<li>
<p>JDO (Java Data Object )技术</p>
</li>
<li>
<p><strong>第三方O/R工具</strong>，如Hibernate, Mybatis 等</p>
</li>
</ul>
</li>
<li>
<p>JDBC是 java 访问数据库的基石，JDO、Hibernate、MyBatis 等只是更好的封装了JDBC。</p>
</li>
</ul>
<h4> 1.3 JDBC介绍</h4>
<ul>
<li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种 <strong>标准</strong> 的方法、方便地访问数据库资源。</li>
<li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li>
<li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li>
<li><strong>简单理解为：JDBC是SUN公司提供的一套API，通过这套API实现具体的数据库操作(获取、关闭连接，CRUD)</strong></li>
<li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555575760234.png" alt="1555575760234" loading="lazy"></p>
<hr>
<ul>
<li>有了JDBC，Java程序访问数据库时是这样的：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555575981203.png" alt="1555575981203" loading="lazy"></p>
<hr>
<ul>
<li>总结如下：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566741692804.png" alt="1566741692804" loading="lazy"></p>
<h4> 1.4 JDBC体系结构</h4>
<ul>
<li>JDBC接口（API）包括两个层次：
<ul>
<li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li>
<li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p>
<p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。																————面向接口编程</strong></p>
</blockquote>
<h4> 1.5 JDBC程序编写步骤</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1565969323908.png" alt="1565969323908" loading="lazy"></p>
<blockquote>
<p>补充：ODBC(Open Database Connectivity，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p>
</blockquote>
<h3> 第2章：获取数据库连接</h3>
<h4> 2.1 、① Driver接口实现类</h4>
<h5> 2.1.1 Driver接口介绍</h5>
<ul>
<li>
<p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p>
</li>
<li>
<p>在程序中不需要直接去访问实现了 Driver 接口的类，而是<em>由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver</em>实现。</p>
<ul>
<li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li>
<li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555576157618.png" alt="1555576157618" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555576170074.png" alt="1555576170074" loading="lazy"></p>
<ul>
<li>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566134718955.png" alt="1566134718955" loading="lazy"></p>
<p>在驱动jar上右键--&gt;Build Path--&gt;Add to Build Path</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566134781682.png" alt="1566134781682" loading="lazy"></p>
<p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566135290460.png" alt="1566135290460" loading="lazy"></p>
<h5> 2.1.2 加载与注册JDBC驱动</h5>
<ul>
<li>
<p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p>
<ul>
<li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li>
</ul>
</li>
<li>
<p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p>
<ul>
<li>
<p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p>
</li>
<li>
<p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类 都包含了 <strong>静态代码块</strong>，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566136831283.png" alt="1566136831283" loading="lazy"></p>
</li>
</ul>
</li>
</ul>
<h4> 2.2 、② URL</h4>
<ul>
<li>
<p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p>
</li>
<li>
<p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。</p>
<ul>
<li><strong>jdbc:子协议:子名称</strong></li>
<li><strong>协议</strong>：JDBC URL中的协议总是jdbc</li>
<li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li>
<li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li>
</ul>
</li>
<li>
<p>举例：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555576477107.png" alt="1555576477107" loading="lazy"></p>
</li>
<li>
<p><strong>几种常用数据库的 JDBC URL</strong></p>
<ul>
<li>
<p>MySQL的连接URL编写方式：</p>
<ul>
<li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li>
<li>jdbc:mysql://localhost:3306/atguigu</li>
<li>jdbc:mysql://localhost:3306/atguigu**?useUnicode=true&amp;characterEncoding=utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li>
<li>jdbc:mysql://localhost:3306/atguigu?user=root&amp;password=123456</li>
</ul>
</li>
<li>
<p>Oracle 9i的连接URL编写方式：</p>
<ul>
<li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li>
<li>jdbc:oracle:thin:@localhost:1521:atguigu</li>
</ul>
</li>
<li>
<p>SQLServer的连接URL编写方式：</p>
<ul>
<li>
<p>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</p>
</li>
<li>
<p>jdbc:sqlserver://localhost:1433:DatabaseName=atguigu</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4> 2.3、 ③ 用户名和密码</h4>
<ul>
<li>user,password可以用“属性名=属性值”方式告诉数据库</li>
<li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li>
</ul>
<h4> 2.4、 数据库连接方式举例</h4>
<h5> 2.4.1 连接方式一</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>说明：上述代码中显式出现了第三方数据库的API</p>
</blockquote>
<h5> 2.4.2 连接方式二</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p>
</blockquote>
<h5> 2.4.3 连接方式三</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p>
</blockquote>
<h5> 2.4.4 连接方式四</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p>
</blockquote>
<h5> 2.4.5 连接方式五(最终版)</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p>
<p><strong>使用配置文件的好处：</strong></p>
<p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>
②如果修改了配置信息，省去重新编译的过程。</p>
</blockquote>
<h3> 第3章：使用PreparedStatement实现CRUD操作</h3>
<h4> 3.1 操作和访问数据库</h4>
<ul>
<li>
<p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p>
</li>
<li>
<p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p>
<ul>
<li>Statement：用于执行 **静态 SQL **语句并返回.它所生成结果的对象。</li>
<li><strong>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</strong></li>
<li>CallableStatement：用于执行 SQL 存储过程</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566573842140.png" alt="1566573842140" loading="lazy"></p>
</li>
</ul>
<h4> 3.2 使用 Statement 操作数据表的弊端</h4>
<ul>
<li>
<p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p>
</li>
<li>
<p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>但是使用 Statement 操作数据表存在弊端：</p>
<ul>
<li><strong>问题一：存在拼串操作，繁琐</strong></li>
<li><strong>问题二：存在SQL注入问题</strong></li>
</ul>
</li>
<li>
<p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user='a' OR 1 = ' AND password = ' OR '1' = '1') ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p>
</li>
<li>
<p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p>
</li>
<li>
<p>代码演示：</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566569819744.png" alt="1566569819744" loading="lazy"></p>
<h4> 3.3 PreparedStatement的使用</h4>
<h5> 3.3.1 PreparedStatement介绍</h5>
<ul>
<li>
<p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p>
</li>
<li>
<p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p>
</li>
<li>
<p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p>
</li>
</ul>
<h5> 3.3.2 PreparedStatement vs Statement</h5>
<ul>
<li>
<p>代码的可读性和可维护性。</p>
</li>
<li>
<p><strong>PreparedStatement 能最大可能提高性能：</strong></p>
<ul>
<li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li>
<li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li>
<li>(语法检查，语义检查，翻译成二进制命令，缓存)</li>
</ul>
</li>
<li>
<p>PreparedStatement 可以防止 SQL 注入</p>
</li>
</ul>
<h5> 3.3.3 Java与SQL对应数据类型转换表</h5>
<table>
<thead>
<tr>
<th>Java类型</th>
<th>SQL类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>BIT</td>
</tr>
<tr>
<td>byte</td>
<td>TINYINT</td>
</tr>
<tr>
<td>short</td>
<td>SMALLINT</td>
</tr>
<tr>
<td>int</td>
<td>INTEGER</td>
</tr>
<tr>
<td>long</td>
<td>BIGINT</td>
</tr>
<tr>
<td>String</td>
<td>CHAR,VARCHAR,LONGVARCHAR</td>
</tr>
<tr>
<td>byte   array</td>
<td>BINARY  ,    VAR BINARY</td>
</tr>
<tr>
<td>java.sql.Date</td>
<td>DATE</td>
</tr>
<tr>
<td>java.sql.Time</td>
<td>TIME</td>
</tr>
<tr>
<td>java.sql.Timestamp</td>
<td>TIMESTAMP</td>
</tr>
</tbody>
</table>
<h5> 3.3.4 使用PreparedStatement实现增、删、改操作</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 3.3.5 使用PreparedStatement实现查询操作</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p>
</blockquote>
<h4> 3.4 ResultSet与ResultSetMetaData</h4>
<h5> 3.4.1 ResultSet</h5>
<ul>
<li>
<p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p>
</li>
<li>
<p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p>
</li>
<li>
<p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p>
</li>
<li>
<p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p>
</li>
<li>
<p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p>
<ul>
<li>例如: getInt(1), getString("name")</li>
<li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li>
</ul>
</li>
<li>
<p>ResultSet 接口的常用方法：</p>
<ul>
<li>
<p>boolean next()</p>
</li>
<li>
<p>getString()</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555580152530.png" alt="1555580152530" loading="lazy"></p>
</li>
</ul>
<h5> 3.4.2 ResultSetMetaData</h5>
<ul>
<li>
<p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p>
</li>
<li>
<p>ResultSetMetaData meta = rs.getMetaData();</p>
<ul>
<li>
<p><strong>getColumnName</strong>(int column)：获取指定列的名称</p>
</li>
<li>
<p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p>
</li>
<li>
<p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。</p>
</li>
<li>
<p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。</p>
</li>
<li>
<p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。</p>
</li>
<li>
<p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。</p>
</li>
<li>
<p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555579494691.png" alt="1555579494691" loading="lazy"></p>
<p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p>
<p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p>
<p><strong>问题2：关于ResultSetMetaData</strong></p>
<ol>
<li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li>
<li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li>
<li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li>
</ol>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555579816884.png" alt="1555579816884" loading="lazy"></p>
<h4> 3.5 资源的释放</h4>
<ul>
<li>释放ResultSet, Statement,Connection。</li>
<li>数据库连接（Connection）是<em>非常稀有的资源</em>，用完后<em>必须马上释放</em>，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li>
<li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li>
</ul>
<h4> 3.6 JDBC API小结</h4>
<ul>
<li>
<p>两种思想</p>
<ul>
<li>
<p>面向接口编程的思想</p>
</li>
<li>
<p>ORM思想(object relational mapping)</p>
<ul>
<li><strong>一个数据表对应一个java类</strong></li>
<li><strong>表中的一条记录对应java类的一个对象</strong></li>
<li><strong>表中的一个字段对应java类的一个属性</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>sql是需要结合列名和表的属性名来写。注意起别名。</p>
</blockquote>
</li>
<li>
<p>两种技术</p>
<ul>
<li>JDBC结果集的元数据：ResultSetMetaData
<ul>
<li>获取列数：getColumnCount()</li>
<li>获取列的别名：getColumnLabel()</li>
</ul>
</li>
<li>通过反射，创建指定类的对象，获取指定的属性并赋值</li>
</ul>
</li>
</ul>
<hr>
<h3> 章节练习</h3>
<p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555580275036.png" alt="1555580275036" loading="lazy"></p>
<p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555580735377.png" alt="1555580735377" loading="lazy"></p>
<p>向数据表中添加如下数据：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555580763636.png" alt="1555580763636" loading="lazy"></p>
<p><strong>代码实现1：插入一个新的student 信息</strong></p>
<p>请输入考生的详细信息</p>
<p>Type:<br>
IDCard:<br>
ExamCard:<br>
StudentName:<br>
Location:<br>
Grade:</p>
<p>信息录入成功!</p>
<p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555580937490.png" alt="1555580937490" loading="lazy"></p>
<p><strong>代码实现3：完成学生信息的删除功能</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555580965019.png" alt="1555580965019" loading="lazy"></p>
<hr>
<h3> 第4章 操作BLOB类型字段</h3>
<h4> 4.1 MySQL BLOB类型</h4>
<ul>
<li>
<p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p>
</li>
<li>
<p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p>
</li>
<li>
<p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555581069798.png" alt="1555581069798" loading="lazy"></p>
<ul>
<li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li>
<li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li>
<li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li>
</ul>
<h4> 4.2 向数据表中插入大数据类型</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.3 修改数据表中的Blob类型字段</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.4 从数据表中读取大数据类型</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第5章 批量插入</h3>
<h4> 5.1 批量执行SQL语句</h4>
<p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p>
<p>JDBC的批量处理语句包括下面三个方法：</p>
<ul>
<li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li>
<li><strong>executeBatch()：执行批量处理语句；</strong></li>
<li><strong>clearBatch():清空缓存的数据</strong></li>
</ul>
<p>通常我们会遇到两种批量执行SQL语句的情况：</p>
<ul>
<li>多条SQL语句的批量处理；</li>
<li>一个SQL语句的批量传参；</li>
</ul>
<h4> 5.2 高效的批量插入</h4>
<p>举例：向数据表中插入20000条数据</p>
<ul>
<li>数据库中提供一个goods表。创建如下：</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 5.2.1 实现层次一：使用Statement</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 5.2.2 实现层次二：使用PreparedStatement</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 5.2.3 实现层次三</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 5.2.4 实现层次四</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第6章： 数据库事务</h3>
<h4> 6.1 数据库事务介绍</h4>
<ul>
<li>
<p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p>
</li>
<li>
<p><strong>事务处理（事务操作）：<strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都</strong>被提交(commit)</strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务**回滚(rollback)**到最初状态。</p>
</li>
<li>
<p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。</p>
</li>
</ul>
<h4> 6.2 JDBC事务处理</h4>
<ul>
<li>
<p>数据一旦提交，就不可回滚。</p>
</li>
<li>
<p>数据什么时候意味着提交？</p>
<ul>
<li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li>
<li>**关闭数据库连接，数据就会自动的提交。**如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li>
</ul>
</li>
<li>
<p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p>
<ul>
<li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li>
<li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li>
<li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li>
</ul>
<blockquote>
<p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p>
</blockquote>
</li>
</ul>
<p>【案例：用户AA向用户BB转账100】</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，对数据库操作的方法为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6.3 事务的ACID属性</h4>
<ol>
<li>
<p><strong>原子性（Atomicity）</strong><br>
原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p>
</li>
<li>
<p><strong>一致性（Consistency）</strong><br>
事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p>
</li>
<li>
<p><strong>隔离性（Isolation）</strong><br>
事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p>
</li>
<li>
<p><strong>持久性（Durability）</strong><br>
持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p>
</li>
</ol>
<h5> 6.3.1 数据库的并发问题</h5>
<ul>
<li>
<p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p>
<ul>
<li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li>
<li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li>
<li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li>
</ul>
</li>
<li>
<p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p>
</li>
<li>
<p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p>
</li>
</ul>
<h5> 6.3.2 四种隔离级别</h5>
<ul>
<li>
<p>数据库提供的4种事务隔离级别：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555586275271.png" alt="1555586275271" loading="lazy"></p>
</li>
<li>
<p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p>
</li>
<li>
<p>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></p>
</li>
</ul>
<h5> 6.3.3 在MySql中设置隔离级别</h5>
<ul>
<li>
<p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p>
</li>
<li>
<p>查看当前的隔离级别:</p>
<div class="language-mysql line-numbers-mode" data-ext="mysql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
<li>
<p>设置当前 mySQL 连接的隔离级别:</p>
<div class="language-mysql line-numbers-mode" data-ext="mysql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
<li>
<p>设置数据库系统的全局的隔离级别:</p>
<div class="language-mysql line-numbers-mode" data-ext="mysql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
<li>
<p>补充操作：</p>
<ul>
<li>
<p>创建mysql数据库用户：</p>
<div class="language-mysql line-numbers-mode" data-ext="mysql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
<li>
<p>授予权限</p>
<div class="language-mysql line-numbers-mode" data-ext="mysql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
</li>
</ul>
<h3> 第7章：DAO及相关实现类</h3>
<ul>
<li><strong>DAO：Data Access Object访问数据信息的类和接口</strong>，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li>
<li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li>
<li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566726681515.png" alt="1566726681515" loading="lazy"></p>
<ul>
<li>层次结构：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566745811244.png" alt="1566745811244" loading="lazy"></p>
<h4> 【BaseDAO.java】</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 【BookDAO.java】</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 【UserDAO.java】</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 【BookDaoImpl.java】</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 【UserDaoImpl.java】</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 【Book.java】</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 【Page.java】</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 【User.java】</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第8章：数据库连接池</h3>
<h4> 8.1 JDBC数据库连接池的必要性</h4>
<ul>
<li>
<p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：</p>
<ul>
<li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li>
<li><strong>进行sql操作</strong></li>
<li><strong>断开数据库连接</strong></li>
</ul>
</li>
<li>
<p>这种模式开发，存在的问题:</p>
<ul>
<li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。**数据库的连接资源并没有得到很好的重复利用。**若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li>
<li>**对于每一次数据库连接，使用完后都得断开。**否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li>
<li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。</li>
</ul>
</li>
</ul>
<h4> 8.2 数据库连接池技术</h4>
<ul>
<li>
<p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p>
</li>
<li>
<p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p>
</li>
<li>
<p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p>
</li>
<li>
<p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555593464033.png" alt="1555593464033" loading="lazy"></p>
<ul>
<li><strong>工作原理：</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555593598606.png" alt="1555593598606" loading="lazy"></p>
<ul>
<li>
<p><strong>数据库连接池技术的优点</strong></p>
<p><strong>1. 资源重用</strong></p>
<p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p>
<p><strong>2. 更快的系统反应速度</strong></p>
<p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p>
<p><strong>3. 新的资源分配手段</strong></p>
<p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p>
<p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p>
<p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p>
</li>
</ul>
<h4> 8.3 多种开源的数据库连接池</h4>
<ul>
<li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：
<ul>
<li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li>
<li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，**速度相对较慢，稳定性还可以。**hibernate官方推荐使用</li>
<li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li>
<li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li>
<li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li>
</ul>
</li>
<li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li>
<li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li>
<li>特别注意：
<ul>
<li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li>
<li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li>
</ul>
</li>
</ul>
<h5> 8.3.1 C3P0数据库连接池</h5>
<ul>
<li>获取连接方式一</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>获取连接方式二</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，src下的配置文件为：【c3p0-config.xml】</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 8.3.2 DBCP数据库连接池</h5>
<ul>
<li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：
<ul>
<li>Commons-dbcp.jar：连接池的实现</li>
<li>Commons-pool.jar：连接池实现的依赖库</li>
</ul>
</li>
<li>**Tomcat 的连接池正是采用该连接池来实现的。**该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li>
<li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li>
<li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li>
<li>配置属性说明</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>initialSize</td>
<td>0</td>
<td>连接池启动时创建的初始化连接数量</td>
</tr>
<tr>
<td>maxActive</td>
<td>8</td>
<td>连接池中可同时连接的最大的连接数</td>
</tr>
<tr>
<td>maxIdle</td>
<td>8</td>
<td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td>
</tr>
<tr>
<td>minIdle</td>
<td>0</td>
<td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td>
</tr>
<tr>
<td>maxWait</td>
<td>无限制</td>
<td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>false</td>
<td>开启池的Statement是否prepared</td>
</tr>
<tr>
<td>maxOpenPreparedStatements</td>
<td>无限制</td>
<td>开启池的prepared 后的同时最大连接数</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td></td>
<td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td>
</tr>
<tr>
<td>removeAbandonedTimeout</td>
<td>300</td>
<td>超过时间限制，回收没有用(废弃)的连接</td>
</tr>
<tr>
<td>removeAbandoned</td>
<td>false</td>
<td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td>
</tr>
</tbody>
</table>
<ul>
<li>获取连接方式一：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>获取连接方式二：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，src下的配置文件为：【dbcp.properties】</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 8.3.3 Druid（德鲁伊）数据库连接池</h5>
<p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，src下的配置文件为：【druid.properties】</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>详细配置参数：</li>
</ul>
<table>
<thead>
<tr>
<th><strong>配置</strong></th>
<th><strong>缺省</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td></td>
<td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td>
</tr>
<tr>
<td>url</td>
<td></td>
<td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td>
</tr>
<tr>
<td>username</td>
<td></td>
<td>连接数据库的用户名</td>
</tr>
<tr>
<td>password</td>
<td></td>
<td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/druid/wiki/使用ConfigFilter</a></td>
</tr>
<tr>
<td>driverClassName</td>
<td></td>
<td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td>
</tr>
<tr>
<td>initialSize</td>
<td>0</td>
<td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td>
</tr>
<tr>
<td>maxActive</td>
<td>8</td>
<td>最大连接池数量</td>
</tr>
<tr>
<td>maxIdle</td>
<td>8</td>
<td>已经不再使用，配置了也没效果</td>
</tr>
<tr>
<td>minIdle</td>
<td></td>
<td>最小连接池数量</td>
</tr>
<tr>
<td>maxWait</td>
<td></td>
<td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>false</td>
<td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td>
</tr>
<tr>
<td>maxOpenPreparedStatements</td>
<td>-1</td>
<td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td>
</tr>
<tr>
<td>validationQuery</td>
<td></td>
<td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td>
</tr>
<tr>
<td>testOnBorrow</td>
<td>true</td>
<td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>false</td>
<td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>false</td>
<td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td></td>
<td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td>
</tr>
<tr>
<td>numTestsPerEvictionRun</td>
<td></td>
<td>不再使用，一个DruidDataSource只支持一个EvictionRun</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td></td>
<td></td>
</tr>
<tr>
<td>connectionInitSqls</td>
<td></td>
<td>物理连接初始化的时候执行的sql</td>
</tr>
<tr>
<td>exceptionSorter</td>
<td></td>
<td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td>
</tr>
<tr>
<td>filters</td>
<td></td>
<td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td>
</tr>
<tr>
<td>proxyFilters</td>
<td></td>
<td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td>
</tr>
</tbody>
</table>
<h3> 第9章：Apache-DBUtils实现CRUD操作</h3>
<h4> 9.1 Apache-DBUtils简介</h4>
<ul>
<li>
<p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p>
</li>
<li>
<p>API介绍：</p>
<ul>
<li>org.apache.commons.dbutils.QueryRunner</li>
<li>org.apache.commons.dbutils.ResultSetHandler</li>
<li>工具类：org.apache.commons.dbutils.DbUtils</li>
</ul>
</li>
<li>
<p>API包说明：</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555595163263.png" alt="1555595163263" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/1555595198644.png" alt="1555595198644" loading="lazy"></p>
<h4> 9.2 主要API的使用</h4>
<h5> 9.2.1 DbUtils</h5>
<ul>
<li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：
<ul>
<li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li>
<li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li>
<li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li>
<li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。</li>
<li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li>
<li>public static void rollbackAndClose(Connection conn)throws SQLException</li>
<li>rollbackAndCloseQuietly(Connection)</li>
<li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li>
</ul>
</li>
</ul>
<h5> 9.2.2 QueryRunner类</h5>
<ul>
<li>
<p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p>
</li>
<li>
<p>QueryRunner类提供了两个构造器：</p>
<ul>
<li>默认的构造器</li>
<li>需要一个 javax.sql.DataSource 来作参数的构造器</li>
</ul>
</li>
<li>
<p>QueryRunner类的主要方法：</p>
<ul>
<li><strong>更新</strong>
<ul>
<li>public int update(Connection conn, String sql, Object... params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li>
<li>......</li>
</ul>
</li>
<li><strong>插入</strong>
<ul>
<li><code>public &lt;T&gt; T insert(Connection conn,String sql,ResultSetHandler&lt;T&gt; rsh, Object... params) throws SQLException</code>：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li>
<li>....</li>
</ul>
</li>
<li><strong>批处理</strong>
<ul>
<li><code>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException</code>： INSERT, UPDATE, or DELETE语句</li>
<li><code>public &lt;T&gt; T insertBatch(Connection conn,String sql,ResultSetHandler&lt;T&gt;</code> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li>
<li>.....</li>
</ul>
</li>
<li><strong>查询</strong>
<ul>
<li><code>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object... params) throws SQLException</code>：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li>
<li>......</li>
</ul>
</li>
</ul>
</li>
<li>
<p>测试</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 9.2.3 ResultSetHandler接口及实现类</h5>
<ul>
<li>
<p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p>
</li>
<li>
<p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p>
</li>
<li>
<p>接口的主要实现类：</p>
<ul>
<li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li>
<li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li>
<li>**BeanHandler：**将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li>
<li>**BeanListHandler：**将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li>
<li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li>
<li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li>
<li>**MapHandler：**将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li>
<li>**MapListHandler：**将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li>
<li>**ScalarHandler：**查询单个值对象</li>
</ul>
</li>
<li>
<p>测试</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> JDBC总结</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/1566741430592.png" type="image/png"/>
    </item>
    <item>
      <title>Java Web 基础</title>
      <link>https://T4mako.github.io/code/java/JavaWeb%E5%9F%BA%E7%A1%80.html</link>
      <guid>https://T4mako.github.io/code/java/JavaWeb%E5%9F%BA%E7%A1%80.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Java Web 基础</source>
      <description>一、配置文件 1、XML配置文件 1、名词解释 XML是eXtensible Markup Language的缩写，翻译过来就是可扩展标记语言。XML和HTML一样都是标记语言，也就是说它们的基本语法都是标签。</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> 一、配置文件</h2>
<h3> 1、XML配置文件</h3>
<h4> 1、名词解释</h4>
<p>XML是e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage的缩写，翻译过来就是<strong>可扩展标记语言</strong>。<strong>XML和HTML一样都是标记语言</strong>，也就是说它们的基本语法都是<strong>标签</strong>。</p>
<!-- more -->
<p><strong>可扩展</strong>意思是XML允许<strong>自定义格式</strong></p>
<p>在XML基本语法规范的基础上，第三方应用程序、框架通过设计**『XML约束』<strong>的方式</strong>『强制规定』**配置文件中可以写什么和怎么写</p>
<h4> 2、XML基本语法</h4>
<p>XML的基本语法和HTML的基本语法如出一辙，XML基本语法+HTML约束=HTML语法。在逻辑上HTML是XML的子集。</p>
<p>①根标签<br>
根标签有且只能有一个</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②单双标签<br>
双标签：开始标签和结束标签必须成对出现。<br>
单标签：单标签在标签内关闭。</p>
<p>③属性<br>
属性必须有值<br>
属性值必须加引号，单双都行</p>
<h4> 3、XML约束</h4>
<p>我们主要就是根据XML约束中的规定来编写XML配置文件。而XML约束主要包括<strong>DTD和Schema</strong>两种。如果XML配置文件使用的是DTD，那么对我们几乎没有影响。如果是Schema约束，需要我们稍微参与一点点。</p>
<p>详情见https://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter05/verse01.html#_2%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6</p>
<h3> 2、属性文件</h3>
<p>以<strong>properties作为扩展名</strong>的文件<br>
由<strong>键值对</strong>组成<br>
键和值之间的符号是<strong>等号</strong><br>
每一行都必须顶格写，前面<strong>不能有空格之类的其他符号</strong></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、其他形式</h3>
<p>①YAML语言的配置文件：在SpringBoot中使用。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②JSON格式的配置文件：一般是前端使用。</p>
<h2> 二、Tomcat</h2>
<h3> 1、Tomcat扮演的角色</h3>
<p><strong>① 对外：Web服务器</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220914194924351.png" alt="image-20220914194924351" loading="lazy"></p>
<p><strong>② 对内：Servlet容器</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220914195004706.png" alt="image-20220914195004706" loading="lazy"></p>
<h3> 2、部署</h3>
<p><mark>Tomcat本身是一个Java程序</mark>，所以当前系统中必须正确配置了JAVA_HOME <strong>环境变量</strong>。<br>
将Tomcat压缩包解压到一个<strong>非中文无空格</strong>的目录下。<br>
Tomcat的目录结构：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220914204033528.png" alt="image-20220914204033528" loading="lazy"></p>
<p>启动Tomcat：运行Tomcat解压后根目录下\bin\startup.bat即可</p>
<h3> 3、在IDEA中关联Tomcat</h3>
<p>https://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter05/verse03.html</p>
<h3> 4、动态Web工程目录结构介绍</h3>
<table>
<thead>
<tr>
<th>目录或文件名</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>src目录</td>
<td>存放Java源文件</td>
</tr>
<tr>
<td>web目录</td>
<td>存放Web开发相关资源</td>
</tr>
<tr>
<td>web/WEB-INF目录</td>
<td>存放web.xml文件、classes目录、lib目录</td>
</tr>
<tr>
<td>web/WEB-INF/web.xml文件</td>
<td>别名：部署描述符，deployment descriptor 作用：Web工程的核心配置文件</td>
</tr>
<tr>
<td>web/WEB-INF/classes目录</td>
<td>存放编译得到的*.class字节码文件</td>
</tr>
<tr>
<td>web/WEB-INF/lib目录</td>
<td>存放第三方jar包</td>
</tr>
</tbody>
</table>
<p><mark>新建web项目并在Tomcat中部署，访问</mark></p>
<p><strong>context root 相当于 application context</strong>（Tomcat中application context Server中的url）</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/03.第一次使用Servlet.png" alt="03.第一次使用Servlet" loading="lazy"></p>
<p><mark>action为add，向服务器的add组件发请求，add对应AddServler这个类</mark>，将request这个对象传给服务器</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>request设置相应字符集</mark></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开网页URL设置可以直接设置为组件（Tomcat Server OpenBrowser URL）</p>
<h2> 三、HTTP协议</h2>
<p>HTTP：<strong>H</strong>yper <strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol超文本传输协议。HTTP最大的作用就是<strong>确定了请求和响应数据的格式</strong>。<br>
<strong>浏览器发送给服务器的数据：请求报文</strong><br>
<strong>服务器返回给浏览器的数据：响应报文。</strong></p>
<p>1） Http 称之为 超文本传输协议<br>
2） Http 是 无状态 的<br>
3） Http 请求响应包含两个部分：<mark>请求和响应</mark></p>

<h3> 1、请求报文</h3>
<p><mark>请求报文的三部分：请求行、请求消息头、请求体</mark></p>
<p><strong>浏览器→服务器</strong></p>
<h4> 1、请求行</h4>
<p>作用：展示当前请求的最基本信息</p>
<div class="language-http line-numbers-mode" data-ext="http"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请求方式<br>
访问地址<br>
HTTP协议的版本</p>
<h4> 2、请求消息头</h4>
<p>作用：通过具体的参数<strong>对本次请求进行详细的说明</strong><br>
格式：键值对，键和值之间使用冒号隔开</p>
<p>相对比较重要的请求消息头：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Host</td>
<td>服务器的主机地址</td>
</tr>
<tr>
<td>Accept</td>
<td>声明当前请求能够接受的『媒体类型』</td>
</tr>
<tr>
<td>Referer</td>
<td>当前请求来源页面的地址</td>
</tr>
<tr>
<td>Content-Length</td>
<td>请求体内容的长度</td>
</tr>
<tr>
<td>Content-Type</td>
<td>请求体的内容类型，这一项的具体值是媒体类型中的某一种</td>
</tr>
<tr>
<td>Cookie</td>
<td><strong>浏览器访问服务器时携带的Cookie数据</strong></td>
</tr>
</tbody>
</table>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917150026204.png" alt="image-20220917150026204" loading="lazy"></p>
<h4> 3、请求体</h4>
<p>作用：作为请求的主体，发送数据给服务器。具体来说其实就是<strong>POST请求方式下的请求参数</strong>。</p>
<p>[1]form data<br>
含义：当前请求体是一个<strong>表单提交的请求参数</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917150418728.png" alt="image-20220917150418728" loading="lazy"></p>
<p>[2]Request Payload<br>
含义：<strong>整个请求体</strong>以某种<strong>特定格式</strong>来组织数据，例如JSON格式。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917150459419.png" alt="image-20220917150459419" loading="lazy"></p>
<h3> 2、请求方式</h3>
<h4> ①HTTP协议已定义的请求方式</h4>
<p>HTTP1.1中共定义了八种请求方式：</p>
<p><strong>GET</strong>：<em>从服务器端获取</em>数据<br>
<strong>POST</strong>：将数据保存到服务器端<br>
<strong>PUT</strong>：命令服务器对数据执行更新<br>
<strong>DELETE</strong>：命令服务器删除数据*<br>
HEAD<br>
CONNECT<br>
OPTIONS<br>
TRACE</p>
<h4> ②GET请求</h4>
<p>特征1：<strong>没有请求体</strong><br>
特征2：<strong>请求参数</strong>附着在<strong>URL地址后面</strong><br>
特征3：请求参数在浏览器地址栏<strong>能够直接被看到</strong>，存在安全隐患<br>
特征4：在URL地址后面携带请求参数，<strong>数据容量非常有限</strong>。如果数据量大，那么超出容量的数据会丢失<br>
特征5：从报文角度分析，<strong>请求参数是在请求行中携带的</strong>，因为访问地址在请求行</p>
<h4> ③POST请求</h4>
<p>特征1：<strong>有请求体</strong><br>
特征2：<strong>请求参数放在请求体中</strong><br>
特征3：请求体发送<strong>数据的空间没有限制</strong><br>
特征4：可以<strong>发送各种不同类型</strong>的数据<br>
特征5：从报文角度分析，<strong>请求参数是在请求体中</strong>携带的<br>
特征6：由于<strong>请求参数是放在请求体</strong>中，所以<strong>浏览器地址栏看不到</strong></p>
<h3> 3、响应报文</h3>
<p><mark>响应报文的三部分：响应状态行、响应消息头、响应体</mark></p>
<p><strong>服务器→浏览器</strong></p>
<h4> ①响应状态行</h4>
<div class="language-http line-numbers-mode" data-ext="http"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>HTTP协议版本<br>
<strong>响应状态码</strong><br>
响应状态的说明文字</p>
<h4> ②响应消息头</h4>
<p>响应体的说明书。<br>
<strong>服务器端对浏览器端设置数据</strong>，例如：服务器端返回Cookie信息。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content-Type</td>
<td>响应体的内容类型</td>
</tr>
<tr>
<td>Content-Length</td>
<td>响应体的内容长度</td>
</tr>
<tr>
<td>Set-Cookie</td>
<td><strong>服务器返回新的Cookie信息给浏览器</strong></td>
</tr>
<tr>
<td>location</td>
<td>在<strong>重定向</strong>的情况下，告诉<strong>浏览器访问下一个资源的地址</strong></td>
</tr>
</tbody>
</table>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917151743113.png" alt="image-20220917151743113" loading="lazy"></p>
<h4> ③响应体</h4>
<p>服务器返回的数据主体，有可能是各种数据类型。</p>
<p>HTML页面、图片、视频以下载形式返回的文件<br>
CSS文件、JavaScript文件</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917151835657.png" alt="image-20220917151835657" loading="lazy"></p>
<h4> ④响应状态码</h4>
<p>作用：以编码的形式告诉浏览器当前请求处理的结果</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>服务器成功处理了当前请求，成功返回响应</td>
</tr>
<tr>
<td>302</td>
<td>重定向</td>
</tr>
<tr>
<td>400</td>
<td>[SpringMVC特定环境]请求参数问题</td>
</tr>
<tr>
<td>403</td>
<td>没有权限</td>
</tr>
<tr>
<td><strong>404</strong></td>
<td><strong>找不到目标资源</strong></td>
</tr>
<tr>
<td><strong>405</strong></td>
<td>**请求方式和服务器端对应的处理方式不一致 **（请求为get而处理为post）</td>
</tr>
<tr>
<td>406</td>
<td>[SpringMVC特定环境]请求扩展名和实际返回的响应体类型不一致</td>
</tr>
<tr>
<td><strong>50X</strong></td>
<td><strong>服务器端内部错误，通常都是服务器端抛异常了</strong></td>
</tr>
</tbody>
</table>
<p><strong>404产生的具体原因：</strong><br>
访问地址写错了，确实是没有这个资源<br>
访问了WEB-INF目录下的资源<br>
Web应用启动的时候，控制台已经抛出异常，导致整个Web应用不可用，访问任何资源都是404<br>
服务器端缓存</p>
<h3> 4、会话</h3>
<p>1、http是 <strong>无状态</strong> 的<br>
无状态：服务器无法判断两次请求是否是同一个客户端还是不同客户端<br>
通过 <strong>会话跟踪技术</strong> 解决无状态的问题</p>
<p>2、会话跟踪技术：<br>
<strong>客户端第一次发请求给服务器，服务器获取session</strong>，<strong>获取不到，则创建新的</strong>，然后响应给客户端<br>
下一次客户端给服务器发请求时，会把sessionID带给服务器服务器判断这次和上次请求是否是同一个客户端，从而区分开客户端<br>
常用API：<br>
<strong>request.getSession() -&gt; 获取当前的会话，没有则创建一个新的会话<br>
request.getSession(true)-&gt; 效果和不带参数相同<br>
request.getSession(false) -&gt; 获取当前会话，没有则返回null，不会创建新的<br>
session.getId() -&gt; 获取sessionId<br>
session.isNew() -&gt; 判断当前session是否是新的<br>
session.getMaxInactiveInterval() -&gt; session的非激活间隔时长，默认1800秒 （session持续时间）<br>
session.setMaxInactiveInterval()<br>
session.invalidate() -&gt; 强制让会话立即失效</strong></p>
<p>3、session保存作用域<br>
sessioin保存作用域是和具体的某一个session对应的 <strong>（一次会话范围内有效 （<em>一个客户端一个session</em>））</strong><br>
常用的API：<br>
<strong>void session.setAttribute(k,v)  往session保存作用域中保存数据<br>
Object session.getAttribute(k)  往session保存作用域中获取数据<br>
void removeAttribute(k)</strong></p>
<h3> 5、服务器内部转发以及客户端重定向</h3>
<p>1） <strong>服务器内部转发 : request.getRequestDispatcher("...").forward(request,response);</strong></p>

<p>2）<strong>客户端重定向：response.sendRedirect("....");</strong></p>
<ul>
<li>两次请求响应的过程。客户端肯定知道请求URL有变化<br>
<strong>地址栏有变化</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/04.服务器内部转发.png" alt="04.服务器内部转发" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/05.客户端重定向.png" alt="05.客户端重定向" loading="lazy"></p>
<h2> 四、Servlet</h2>
<h3> 1、Servlet概述</h3>
<p><strong>Servlet=Server+applet</strong><br>
<em>Server：服务器、applet：小程序</em><br>
<strong>Servlet含义是服务器端的小程序</strong>*</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917152349188.png" alt="image-20220917152349188" loading="lazy"></p>
<p>在整个Web应用中，Servlet主要负责 <strong>处理请求、协调调度功能</strong>。我们可以把Servlet称为Web应用中的 <strong>控制器</strong></p>
<h3> 2、Servlet  HelloWorld</h3>
<p>在页面上点击超链接，由Servlet处理这个请求，并返回一个响应字符串：Hello,I am Servlet</p>
<p>①第一步：创建动态 Web module<br>
②第二步：创建超链接</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>③第三步：创建HelloServlet的Java类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④第四步：配置HelloServlet<br>
配置文件位置：WEB-INF/web.xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917153143610.png" alt="image-20220917153143610" style="zoom:200%;">
<p><strong>虚拟路径</strong>：Servlet并<strong>不是</strong>文件系统中<strong>实际存在</strong>的<strong>目录或文件</strong>，所以为了方便浏览器访问，我们创建了<strong>虚拟</strong>出来的路径来访问它。</p>
<h4> Web工程中的资源：</h4>
<p>静态资源：HTML，CSS，JS，图片<br>
动态资源：Servlet</p>
<p>访问资源的地址：<br>
静态资源：/Web应用名称/静态资源本身的路径<br>
动态资源：/Web应用名称/虚拟路径</p>
<h4> 总体逻辑结构：</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917153538804.png" alt="image-20220917153538804" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917153638692.png" alt="image-20220917153638692" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917153645060.png" alt="image-20220917153645060" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917153654438.png" alt="image-20220917153654438" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917153702954.png" alt="image-20220917153702954" loading="lazy"></p>
<h3> 3、Servlet生命周期</h3>
<p>生命周期：从出生到死亡的过程就，对应Servlet的三个方法：<mark>init(),service(),destroy()</mark></p>
<p>默认情况下：Servlet在<strong>第一次接收到请求</strong>的时候才<strong>创建对象</strong>(调用<strong>构造器</strong>，实例化)，然后初始化（init方法）、然后服务（service方法）<br>
当容器关闭时，其中的所有servlet实例被销毁，调用销毁方法</p>
<p>创建对象后，所有的URL地址匹配的请求都由这同一个对象来处理<br>
Tomcat中，每一个请求会被分配一个线程来处理，所以可以说：Servlet是<strong>单实例，多线程</strong>方式运行的。<br>
既然Servlet是多线程方式运行，所以有线程安全方面的可能性，所以<strong>不能在处理请求的方法中修改公共属性</strong>。</p>
<p>在web.xml中修改Servlet配置，使得在Web应用启动的时候创建Servlet对象</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、Servlet容器</h3>
<p>①容器<br>
在开发使用的各种技术中，经常会有<strong>很多对象会放在容器</strong>中。</p>
<p>②容器提供的功能<br>
容器会管理内部对象的整个生命周期。<strong>对象在容器中才能够正常的工作，得到来自容器的全方位的支持</strong>。</p>
<p>创建对象<br>
初始化<br>
工作<br>
清理</p>
<p>③容器本身也是对象<br>
特点1：往往是非常大的对象<br>
特点2：通常的单例的</p>
<p>④典型Servlet容器产品举例<br>
Tomcat、jetty、jboss、Weblogic、WebSphere、glassfish</p>
<h4> </h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>时机</th>
<th>次数</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建对象</td>
<td>默认情况：接收到第一次请求 修改启动顺序后：Web应用启动过程中</td>
<td>一次</td>
</tr>
<tr>
<td>初始化操作</td>
<td>创建对象之后</td>
<td>一次</td>
</tr>
<tr>
<td>处理请求</td>
<td>接收到请求</td>
<td>多次</td>
</tr>
<tr>
<td>销毁操作</td>
<td>Web应用卸载之前</td>
<td>一次</td>
</tr>
</tbody>
</table>
<h3> 5、ServletConfig和ServletContext</h3>
<h4> 1、ServletConfig接口</h4>
<p>接口方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>getServletName()</td>
<td>获取定义的Servlet名称</td>
</tr>
<tr>
<td><strong>getServletContext()</strong></td>
<td>获取ServletContext对象</td>
</tr>
<tr>
<td>getInitParameter()</td>
<td>获取配置Servlet时设置的『初始化参数』，根据名字获取值</td>
</tr>
<tr>
<td>getInitParameterNames()</td>
<td>获取所有初始化参数名组成的Enumeration对象</td>
</tr>
</tbody>
</table>
<p>使用举例：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Servlet标准和JDBC标准对比：</p>
<table>
<thead>
<tr>
<th>Servlet标准</th>
<th>JDBC标准</th>
</tr>
</thead>
<tbody>
<tr>
<td>javax.servlet包下的一系列接口</td>
<td>javax.sql包下的一系列接口</td>
</tr>
<tr>
<td>Servlet容器厂商提供的具体实现类</td>
<td>数据库厂商提供的实现类（数据库驱动）</td>
</tr>
</tbody>
</table>
<h4> 2、ServletContext接口</h4>
<p>功能：<br>
获取 <strong>某个资源的真实路径</strong>：getRealPath()<br>
<strong>获取</strong> 整个Web应用级别的 <strong>初始化参数</strong>：getInitParameter()<br>
作为Web应用范围的域对象<br>
<strong>存入数据：setAttribute()</strong><br>
<strong>取出数据：getAttribute()</strong></p>
<p>使用举例：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、Servlet继承关系</h3>
<p>1、继承关系：<br>
javax.servlet.Servlet接口<br>
javax.servlet.GenericServlet抽象类<br>
javax.servlet.http.HttpServlet抽象子类</p>
<p>2、相关方法：<br>
<strong>javax.servlet.Servlet接口：</strong><br>
void init(config)	初始化方法<br>
void service(request,response)	服务方法<br>
void destory()	销毁方法</p>
<p><strong>对于service方法：</strong><br>
①在javax.servlet.GenericServlet抽象类中，void service(request,response)仍然是抽象的<br>
在java.servlet.HttpServlet抽象子类：void service(request,response)不是抽象的<br>
②<strong>当有请求过来时，service方法会自动响应</strong>（其实是tomcat容器调用的）<br>
③servlet方法所做的事：<br>
<strong>获取的请求方式</strong><br>
<strong>根据请求方式的不同，调用不同的doXXX方法</strong><br>
在HttpServlet中这些doXXX方法默认都是405实现风格-&gt;要子类实现对应方法，否则报405错误<br>
④因此，我们在新建Servlet时，我们才会去考虑请求方法，从而决定重写哪个do方法</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917160608144.png" alt="image-20220917160608144" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917160624439.png" alt="image-20220917160624439" loading="lazy"></p>
<h3> 7、动态web工程内编写路径</h3>
<p>整个系统要根据功能拆分成许许多多<strong>独立</strong>的<strong>资源</strong><br>
资源之间既要完成自身的功能又要和其他资源<strong>配合</strong><br>
写路径就是为了<strong>从一个资源跳转到下一个资源</strong></p>
<p><strong>工程目录</strong>：我们<strong>写代码的地方</strong>，但是在服务器上运行的不是这个。<br>
<strong>部署目录</strong>：经过Java源文件<strong>编译</strong>和<strong>目录重组</strong>后，IDEA就替我们准备好了可以在服务器上运行的部署目录。<br>
部署目录经过了目录重组，所以目录结构不一样<br>
用户通过浏览器访问服务器，而服务器上运行的是部署目录，<strong>所以写路径的时候参考部署目录而不是工程目录。</strong><br>
<strong>对应关系</strong>：<strong>工程目录下的web目录对应部署目录的根目录</strong>，同时部署目录的根目录也是路径中的<strong>Web应用根目录</strong>。</p>
<h4> <strong>①具体文件：</strong></h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917161721361.png" alt="image-20220917161721361" loading="lazy"></p>
<h4> ②<strong>Servlert路径</strong></h4>
<p>访问Servlet的路径是我们在web.xml中配置的，大家可能注意到了，url-pattern里面的路径我们也是<strong>斜杠开头</strong>的，但是这个开头的斜杠代表<strong>Web应用根目录</strong>。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917161801727.png" alt="image-20220917161801727" loading="lazy"></p>
<h4> 准则：</h4>
<p>一个路径由谁来解析(浏览器、服务器)，其实就是这个路径是谁来用。</p>
<table>
<thead>
<tr>
<th>路径类型</th>
<th>解析方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>由浏览器解析的路径</td>
<td>开头斜杠代表服务器根目录</td>
</tr>
<tr>
<td>由服务器解析的路径</td>
<td>开头斜杠代表Web应用根目录</td>
</tr>
</tbody>
</table>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917161926471.png" alt="image-20220917161926471" loading="lazy"></p>
<ul>
<li>浏览器解析的路径举例：
<ul>
<li>所有HTML标签中的路径</li>
<li>重定向过程中指定的路径</li>
</ul>
</li>
<li>服务器解析的路径举例：
<ul>
<li>所有web.xml中配置的路径</li>
<li>请求转发过程中指定的路径</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917162121772.png" alt="image-20220917162121772" loading="lazy"></p>
<h4> 动态获取上下文路径：</h4>
<p><strong>上下文路径（context path）=/Web应用名称</strong></p>
<p>由于项目部署的时候，上下文路径是可以变化的，所以写死有可能发生错误。此时我们通过<strong>request对象动态获取上下文路径</strong>就不用担心这个问题了。调用下面这个方法，每一次获取的都是当前环境下实际的上下文路径的值。</p>
<p><strong>request.getContextPath()</strong></p>
<h3> 8、请求转发和重定向</h3>
<h4> 1、服务器内部转发</h4>
<p>在请求的处理过程中，Servlet完成了自己的任务，需要把请求<strong>转交给下一个资源</strong>继续处理。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>代码</th>
<th>类比</th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td>小货车</td>
</tr>
<tr>
<td>getRequestDispatcher("转发地址")</td>
<td>告诉司机要去哪</td>
</tr>
<tr>
<td>forward(request, response)</td>
<td>出发</td>
</tr>
</tbody>
</table>
<p>由于转发操作的核心部分是<strong>在服务器端完成</strong>的，所以<strong>浏览器感知不到</strong>，整个过程中<strong>浏览器只发送一次请求</strong>。</p>
<h4> 2、浏览器重定向</h4>
<p>在请求的处理过程中，Servlet完成了自己的任务，然后以一个<strong>响应</strong>的方式告诉浏览器：“要完成这个任务还需要你另外<strong>再访问下一个资源</strong>”。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于重定向操作的核心部分是<strong>在浏览器端完成</strong>的，所以整个过程中浏览器<strong>共发送两次请求</strong>。</p>
<table>
<thead>
<tr>
<th>转发</th>
<th>重定向</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>一次请求</strong></td>
<td><strong>两次请求</strong></td>
</tr>
<tr>
<td>浏览器<strong>地址栏显示</strong>的是<strong>第一个</strong>资源的地址</td>
<td>浏览器<strong>地址栏显示</strong>的是<strong>第二个</strong>资源的地址</td>
</tr>
<tr>
<td>全程使用的是<strong>同一个request对象</strong></td>
<td>全程使用的是<strong>不同的request对象</strong></td>
</tr>
<tr>
<td>在<strong>服务器端完成</strong></td>
<td>在<strong>浏览器端完成</strong></td>
</tr>
<tr>
<td>目标资源地址由服务器解析</td>
<td>目标资源地址由浏览器解析</td>
</tr>
<tr>
<td>目标资源可以在WEB-INF目录下</td>
<td>目标资源不能在WEB-INF目录下</td>
</tr>
<tr>
<td>目标资源仅限于本应用内部</td>
<td>目标资源可以是外部资源</td>
</tr>
</tbody>
</table>
<p>使用场景：<br>
能用转发的先用转发，如果转发不行，再使用重定向。</p>
<p>需要通过同一个request对象把数据携带到目标资源：只能用转发<br>
如果希望前往下一个资源之后，浏览器刷新访问的是第二个资源：只能用重定向</p>
<h3> 9、获取请求参数</h3>
<p>浏览器在给服务器发送请求的同时，携带的参数数据。<br>
请求参数的基本形式：<br>
URL地址后面附着的请求参数<br>
表单<br>
Ajax请求</p>
<p>总体上来说，服务器端将请求参数封装为<strong>Map&lt;String, String[]&gt;</strong>。<br>
<strong>键：请求参数的名字</strong><br>
<strong>值：请求参数的值组成的数组</strong></p>
<h4> 获取请求参数的方法(request.)</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>返回值类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>request.getParameterMap()</td>
<td><code>Map&lt;String, String[]&gt;</code></td>
</tr>
<tr>
<td>request.getParameter("请求参数的名字")</td>
<td>String</td>
</tr>
<tr>
<td>request.getParameterValues("请求参数的名字")</td>
<td>String []</td>
</tr>
<tr>
<td>request.getParameterNames()</td>
<td><code>Enumeration&lt;String&gt;</code></td>
</tr>
</tbody>
</table>
<h3> 10、请求响应设置字符集</h3>
<h4> 1、请求</h4>
<h4> 1、GET</h4>
<p>设置方式</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917164406033.png" alt="image-20220917164406033" loading="lazy"></p>
<h4> 2、Post</h4>
<p>设置方式<br>
注：设置字符集必须在获取请求参数之前</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、响应</h4>
<p>1、设置方式一：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、设置方式二：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>response.getWriter()不能出现在设置字符集操作的前面（两种方式都不行）</p>
<h2> 五、Thymeleaf</h2>
<p>1） 添加thymeleaf的jar包<br>
2） <mark>新建一个Servlet类<strong>ViewBaseServlet</strong></mark><br>
3） 在web.xml文件中添加配置</p>

<p>4） <mark>使得<strong>我们的Servlet继承ViewBaseServlet</strong></mark><br>
<strong>VIewBaseServlet继承了HttpServlet<br>
我们创建的Servlet继承了ViewServlet</strong></p>
<p>5） 根据逻辑视图名称 得到 物理视图名称<br>
//此处的视图名称是 index<br>
//那么thymeleaf会将这个 逻辑视图名称 对应到 物理视图 名称上去<br>
//逻辑视图名称 ：   index<br>
//物理视图名称 ： <strong>view-prefix + 逻辑视图名称 + view-suffix</strong><br>
//所以真实的视图名称是：      /       index       .html<br>
super.processTemplate("index",request,response);<br>
6） 使用thymeleaf的标签<br>
th:if   ,  th:unless   , th:each   ,   th:text</p>
<h3> ViewBaseServlet</h3>
<p>有关ViewBaseServlet</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1、Thymeleaf简介</h3>
<p>Thymeleaf、JSP、Freemarker、Velocity等等，它们有一个共同的名字：<strong>服务器端模板技术</strong></p>
<p><strong>thymeleaf帮助我们做视图渲染</strong><br>
<strong>渲染：在html页面上加载java内存中的数据</strong></p>
<p>Thymeleaf的优势：<br>
SpringBoot官方推荐使用的视图模板技术，和SpringBoot完美整合。<br>
不经过服务器运算仍然可以直接查看原始值，对前端工程师更友好。</p>
<p>物理视图和逻辑视图<br>
①物理视图<br>
在Servlet中，将请求转发到一个HTML页面文件时，使用的完整的转发路径就是<strong>物理视图</strong>。</p>
<p>如果我们把所有的HTML页面都放在某个统一的目录下，那么转发地址就会呈现出明显的规律：<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917185459523.png" alt="image-20220917185459523" loading="lazy"></p>
<p>所以，路径开头的部分我们称之为<strong>视图前缀</strong>，路径结尾的部分我们称之为<strong>视图后缀</strong>。</p>
<p>②逻辑视图<br>
物理视图=视图前缀+逻辑视图+视图后缀<br>
上面的例子中：</p>
<table>
<thead>
<tr>
<th>视图前缀</th>
<th>逻辑视图</th>
<th>视图后缀</th>
<th>物理视图</th>
</tr>
</thead>
<tbody>
<tr>
<td>/pages/user/</td>
<td>login</td>
<td>.html</td>
<td>/pages/user/login.html</td>
</tr>
<tr>
<td>/pages/user/</td>
<td>login_success</td>
<td>.html</td>
<td>/pages/user/login_success.html</td>
</tr>
</tbody>
</table>
<h3> 2、在服务器端引入Thymeleaf环境</h3>
<p>https://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter08/verse03.html</p>
<h3> 3、基本语法：th名称空间</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917190228445.png" alt="image-20220917190228445" loading="lazy"></p>
<h3> 4、基本语法：表达式语法</h3>
<h4> 1、修改标签文本值</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5> ①th:text作用</h5>
<p>不经过服务器解析，直接用浏览器打开HTML文件，看到的是标签体原始值<br>
<strong>经过服务器解析</strong>，Thymeleaf引擎根<strong>据th:text属性指定</strong>的标签体新值去<strong>替换</strong>标签体原始值</p>
<h5> ②字面量</h5>
<p>字面量是一个经常会遇到的概念，我们可以对照变量来理解它的含义<br>
<strong>变量</strong>：变量名字符串本身不是它的值，<strong>它指向的才是它的值</strong><br>
<strong>字面量</strong>：它就是字面上的含义，我们<strong>从字面上看到的直接就是它的值</strong><br>
现在我们在th:text属性中使用的就是<strong>字面量</strong>，它<strong>不指代任何其他值</strong></p>
<h4> 2、修改指定属性值</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>语法：任何HTML标签原有的属性，<strong>前面加上『th:』就都可以通过Thymeleaf来设定新值。</strong></p>
<h4> <mark>3、解析URL地址</mark></h4>
<h5> ①基本语法</h5>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过解析后得到：/view/aaa/bbb/ccc</p>
<p>所以==@{}==的作用是<strong>在字符串前附加『上下文路径』</strong></p>
<p>这个语法的好处是：实际开发过程中，项目在不同环境部署时，Web应用的名字有可能发生变化。所以上下文路径不能写死。而通过@{}动态获取上下文路径后，不管怎么变都不怕啦！</p>
<h5> ②首页使用URL地址解析</h5>
<p>如果我们直接访问index.html本身，那么<strong>index.html是不需要通过Servlet</strong>，<strong>当然也不经过模板引擎</strong>，所以<strong>index.html上的Thymeleaf的任何表达式都不会被解析</strong>。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917191612545.png" alt="image-20220917191612545" loading="lazy"></p>
<p>解决办法：通过Servlet访问index.html，这样就可以让模板引擎渲染页面了：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917191730539.png" alt="image-20220917191730539" loading="lazy"></p>
<h5> ③<mark>给URL地址后面附加请求参数</mark></h5>
<p><strong>一个变量对应一个value值</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220923195523837.png" alt="image-20220923195523837" loading="lazy"></p>
<h4> 4、直接执行表达式</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220917191950294.png" alt="image-20220917191950294" loading="lazy"></p>
<h3> 5、基本语法：访问域对象（保存作用域）</h3>
<h4> 1、域对象</h4>
<h5> ①请求域：HttpServletRequest对象内部给我们提供的存储空间（requese 一次会话范围有效）</h5>
<h5> ②会话域（session 一次会话范围有效）</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220923154339888.png" alt="image-20220923154339888" loading="lazy"></p>
<h5> ③应用域（application 一次应用程序范围有效）</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220923154427454.png" alt="image-20220923154427454" loading="lazy"></p>
<h4> 2、在servlet中将数据存入域</h4>
<h5> ①操作请求域</h5>
<p><strong>Servlet中：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>thymeleaf中：</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5> ②操作会话域</h5>
<p><strong>Servlet中代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>thymeleaf中：</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5> ③操作应用域</h5>
<p><strong>Servlet中代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Thymeleaf表达式：</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 6、获取请求参数</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220923161405776.png" alt="image-20220923161405776" loading="lazy"></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7、内置对象</h3>
<p>所谓内置对象其实就是在表达式中<strong>可以直接使用</strong>的对象</p>
<p><strong>基本内置对象：</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220923162427773.png" alt="image-20220923162427773" loading="lazy"></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本思路：<br>
如果不清楚这个对象有哪些方法可以使用，那么就<strong>通过getClass().getName()获取全类名</strong>，再<strong>回到Java环境查看这个对象有哪些方法</strong><br>
内置对象的<strong>方法可以直接调用</strong><br>
<strong>调用方法</strong>时<strong>需要传参</strong>的也可以<strong>直接传入参数</strong></p>
<p><strong>公共内置对象：</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220923162455736.png" alt="image-20220923162455736" loading="lazy"></p>
<p>Servlet中将List集合数据存入请求域：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>页面代码：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8、${ }中的表达式本质是OGNL</h3>
<p>OGNL：Object-Graph Navigation Language对象-图 导航语言</p>
<h3> 9、OGNL语法</h3>
<h4> ①起点</h4>
<p>在Thymeleaf环境下，${}中的表达式可以从下列元素开始：</p>
<p>访问属性域的起点:<br>
请求域属性名<br>
session<br>
application<br>
param<br>
内置对象<br>
#request<br>
#session<br>
#lists<br>
#strings</p>
<h4> ②属性访问语法</h4>
<p>访问对象属性：使用getXxx()、setXxx()方法定义的属性<br>
对象.属性名<br>
访问List集合或数组<br>
集合或数组[下标]<br>
访问Map集合<br>
Map集合.key<br>
Map集合['key']</p>
<h3> 10、分支与迭代</h3>
<h4> 1、分支</h4>
<p><strong>①if和unless</strong><br>
让标记了th:if、th:unless的标签根据条件决定是否显示。</p>
<p>示例的实体类：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例的Servlet代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例的HTML代码：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②switch</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、迭代</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220923164310877.png" alt="image-20220923164310877" loading="lazy"></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11、包含其他模板文件</h3>
<p>https://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter08/verse11.html</p>
<h2> CRUD练习</h2>
<p>https://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter08/verse12.html</p>
<h2> Fruit项目优化</h2>
<ol>
<li>一个请求对应一个Servlet，这样存在的问题是servlet太多了</li>
<li>把一些列的请求都对应一个Servlet, IndexServlet/AddServlet/EditServlet/DelServlet/UpdateServlet -&gt; 合并成FruitServlet<br>
通过一个operate的值来决定调用FruitServlet中的哪一个方法<br>
使用的是switch-case</li>
<li>在上一个版本中，Servlet中充斥着大量的switch-case，试想一下，随着我们的项目的业务规模扩大，那么会有很多的Servlet，也就意味着会有很多的switch-case，这是一种代码冗余<br>
因此，我们在servlet中使用了反射技术，我们规定operate的值和方法名一致，那么接收到operate的值是什么就表明我们需要调用对应的方法进行响应，如果找不到对应的方法，则抛异常</li>
<li>在上一个版本中我们使用了反射技术，但是其实还是存在一定的问题：每一个servlet中都有类似的反射技术的代码。因此继续抽取，设计了中央控制器类：<code>DispatcherServlet</code><br>
<code> DispatcherServlet</code>这个类的工作分为两大部分：</li>
<li>根据url定位到能够处理这个请求的controller组件：
<ul>
<li>从url中提取servletPath : /fruit.do -&gt; fruit</li>
<li>根据fruit找到对应的组件:FruitController ， 这个对应的依据我们存储在applicationContext.xml中<br>
<code>&lt;bean id="fruit" class="com.atguigu.fruit.controllers.FruitController/&gt;</code><br>
通过DOM技术我们去解析XML文件，在中央控制器中形成一个beanMap容器，用来存放所有的Controller组件</li>
<li>根据获取到的operate的值定位到我们FruitController中需要调用的方法</li>
</ul>
</li>
<li>调用Controller组件中的方法：
<ul>
<li>获取参数<br>
获取即将要调用的方法的参数签名信息: Parameter[] parameters = method.getParameters();<br>
通过parameter.getName()获取参数的名称；<br>
准备了Object[] parameterValues 这个数组用来存放对应参数的参数值<br>
另外，我们需要考虑参数的类型问题，需要做类型转化的工作。通过parameter.getType()获取参数的类型</li>
<li>执行方法<br>
Object returnObj = method.invoke(controllerBean , parameterValues);</li>
<li>视图处理</li>
</ul>
</li>
</ol>
<h2> 六、MVC</h2>
<h3> 1、servlet初始化回顾</h3>
<p>Servlet生命周期：实例化、初始化、服务、销毁</p>
<p>Servlet中的初始化方法有两个：init() , init(config)<br>
其中带参数的方法代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想要在Servlet<strong>初始化时做一些准备工作，那么我们可以重写init方法</strong><br>
我们可以通过如下步骤去获取初始化设置的数据</p>
<p><strong>获取config对象：ServletConfig config = getServletConfig();<br>
获取初始化参数值： config.getInitParameter(key);</strong></p>
<p>在web.xml文件中配置Servlet</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过注解的方式进行配置：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、学习Servlet中的ServletContext和&lt;context-param&gt;</h3>
<ol>
<li>获取ServletContext，有很多方法<br>
在初始化方法中： ServletContxt servletContext = getServletContext();<br>
在服务方法中也可以通过request对象获取，也可以通过session获取：<br>
request.getServletContext(); session.getServletContext()</li>
<li>获取初始化值：<br>
servletContext.getInitParameter();</li>
</ol>
<p>通过ServletContext获取配置的上下文参数</p>
<h3> 3业务层</h3>
<p>Model1和Model2<br>
<strong>MVC : Model（模型）、View（视图）、Controller（控制器）</strong><br>
视图层：用于做<strong>数据展示</strong>以及和<strong>用户交互的</strong>一个<strong>界面</strong><br>
控制层：能够<strong>接受客户端的请求</strong>，<strong>具体的业务功能还是需要借助于模型组件来完成</strong><br>
模型层：模型分为很多种：有比较简单的pojo/vo(value object)，有业务模型组件，有数据访问层组件<br>
pojo/vo : 值对象<br>
DAO ： 数据访问对象<br>
BO ： 业务对象</p>
<p>模型有很多种类：数据访问模型（DAO）；业务逻辑模型（BO）；值对象模型（POJO）；数据传输对象（DTO）</p>
<p><strong>DAO中的方法</strong>都是<strong>单精度</strong>方法或称<strong>细粒度</strong>方法。一个方法只考虑一个操作，比如添加，那就是insert操作、查询那就是select操作....(<strong>只是一种操作</strong>)<br>
<strong>BO</strong>中的方法属于<strong>业务方法</strong>，也实际的业务是<strong>比较复杂</strong>的，因此业务方法的<strong>粒度是比较粗</strong>的<br>
注册这个功能属于业务功能，也就是说注册这个方法属于业务方法。<br>
那么这个<strong>业务方法中包含了多个DAO方法</strong>。</p>
<h2> 七、IOC（控制反转）</h2>
<p><strong>IOC - 控制反转 / DI - 依赖注入</strong></p>
<p><strong>控制反转：</strong><br>
之前在Servlet中，我们创建service对象 ， FruitService fruitService = new FruitServiceImpl();<br>
这句话如果出现在servlet中的<strong>某个方法内部</strong>，那么这个fruitService的作用域（生命周期）应该就是<strong>这个方法级别</strong>；<br>
如果这句话出现在servlet的<strong>类中</strong>，也就是说fruitService是一个<strong>成员变量</strong>，那么这个fruitService的作用域（生命周期）应该就是这个<strong>servlet实例级别</strong></p>
<p>​	之后我们在<strong>applicationContext.xml中定义了这个fruitService</strong>。然后<strong>通过解析XML</strong>，<strong>产生fruitService实例</strong>，<strong>存放在beanMap中</strong>，这个<strong>beanMap在一个BeanFactory中 **<br>
​	因此，我们</strong>转移（改变）了之前的service实例、dao实例等等他们的生命周期**。控制权从程序员转移到<strong>BeanFactory(IOC容器)</strong>。这个现象我们称之为<strong>控制反转</strong></p>
<p><strong>依赖注入：</strong><br>
之前我们在控制层出现代码：FruitService fruitService = new FruitServiceImpl()；<br>
那么，控制层和service层存在耦合。<br>
之后，我们将代码修改成FruitService fruitService = null ;<br>
然后，在配置文件中配置:</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 配置监听器要读取的文件，目的是加载IOC容器的配置文件</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>根据bean获取所有元素节点，添加到map中，对于每个节点的子节点，通过反射添加它们中的依赖</strong></p>
<h2> 八、过滤器Filter</h2>
<h3> 1、过滤器的三要素：</h3>
<p>①拦截：<br>
过滤器之所以能够对请求进行预处理，关键是对请求进行拦截，把请求拦截下来才能够做后续的操作。而且对于一个具体的过滤器，它<strong>必须明确它要拦截的请求</strong>，而不是所有请求都拦截。</p>
<p>②过滤：<br>
根据业务功能实际的需求，看看在把请求拦截到之后，需要<strong>做什么检查或什么操作，写对应的代码即可</strong>。</p>
<p>③放行：<br>
过滤器完成自己的任务或者是检测到当前请求符合过滤规则，那么可以将请求放行。所谓放行，就是<strong>让请求继续去访问它原本要访问的资源</strong>。</p>
<h3> 2、操作步骤</h3>
<ol>
<li>
<p>Filter也属于Servlet规范</p>
</li>
<li>
<p>Filter开发步骤：新建类<strong>实现javax.servlet.Filter接口</strong>，然后实现其中的三个方法：init、doFilter、destroy<br>
配置Filter，可以用注解@WebFilter，<code>也可以使用xml文件 &lt;filter&gt; &lt;filter-mapping&gt;</code></p>
<p><strong>在doFilter()方法中执行过滤</strong></p>
<p>如果<strong>满足过滤条件</strong>使用<strong>chain.doFilter(request, response);放行</strong></p>
<p>如果<strong>不满足过滤条件转发或重定向请求</strong></p>
</li>
<li>
<p>Filter在配置时，和servlet一样，也可以配置通配符，例如 @WebFilter("*.do")表示<strong>拦截所有以.do结尾的请求</strong></p>
</li>
<li>
<p>过滤器链<br>
1）如果采取的是<strong>注解的方式进行配置</strong>，那么过滤器链的拦截顺序是<strong>按照全类名的先后顺序</strong>排序的<br>
2）如果采取的是<strong>xml的方式</strong>进行配置，那么按照<strong>配置的先后顺序</strong>进行排序</p>
</li>
<li>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ol>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/01.Filter.png" alt="01.Filter" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/02.CharacterEncodingFilter.png" alt="02.CharacterEncodingFilter" loading="lazy"></p>
<h3> 3、过滤器生命周期</h3>
<p>和Servlet生命周期类比，Filter生命周期的关键区别是：<strong>在Web应用启动时创建对象</strong></p>
<table>
<thead>
<tr>
<th>生命周期阶段</th>
<th>执行时机</th>
<th>执行次数</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建对象</td>
<td>Web应用启动时</td>
<td>一次</td>
</tr>
<tr>
<td>初始化</td>
<td>创建对象后</td>
<td>一次</td>
</tr>
<tr>
<td>拦截请求</td>
<td>接收到匹配的请求</td>
<td>多次</td>
</tr>
<tr>
<td>销毁</td>
<td>Web应用卸载前</td>
<td>一次</td>
</tr>
</tbody>
</table>
<h2> 九、事务管理</h2>
<ol>
<li>
<p>涉及到的组件：</p>
<ul>
<li>OpenSessionInViewFilter</li>
<li>TransactionManager</li>
<li>ThreadLocal</li>
<li>ConnUtil</li>
<li>BaseDAO</li>
</ul>
</li>
<li>
<p>ThreadLocal</p>
<p>get() , set(obj)方法（对于同一个线程中）</p>
<p>ThreadLocal称之为本地线程 。 我们可以<strong>通过set方法在当前线程上存储数据、通过get方法在当前线程上获取数据</strong></p>
<p>set方法源码分析：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>get方法源码分析：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ol>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/05.编程式事务管理03.png" alt="05.编程式事务管理03" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/06.ThreadLocal.png" alt="06.ThreadLocal" loading="lazy"></p>
<h2> 十、监听器</h2>
<h3> 1、观察者模式</h3>
<ul>
<li>观察者：监控『被观察者』的行为，一旦发现『被观察者』触发了事件，就会调用事先准备好的方法执行操作。</li>
<li>被观察者：『被观察者』一旦触发了被监控的事件，就会被『观察者』发现。</li>
</ul>
<h3> 2、监听器简介</h3>
<p>1、<strong>Servlet监听器</strong>：Servlet规范中定义的一种特殊类，它用于监听Web应用程序中的<strong>ServletContext，HttpSession 和HttpServletRequest等域对象的创建与销毁事件</strong>，以及监听这些<strong>域对象中的属性发生修改的事件</strong></p>
<p>2、监听器分类</p>
<ul>
<li>域对象监听器</li>
<li>域对象的属性域监听器</li>
<li>Session域中数据的监听器</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221003161917547.png" alt="image-20221003161917547" loading="lazy"></p>
<h3> 3、监听器列表</h3>
<h4> ①ServletContextListener</h4>
<p>作用：监听<strong>ServletContext对象</strong>的创建与销毁</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>contextInitialized(ServletContextEvent sce)</td>
<td>ServletContext创建时调用</td>
</tr>
<tr>
<td>contextDestroyed(ServletContextEvent sce)</td>
<td>ServletContext销毁时调用</td>
</tr>
</tbody>
</table>
<p>ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。</p>
<h4> ②HttpSessionListener</h4>
<p>作用：监听<strong>HttpSession对象</strong>的创建与销毁</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>sessionCreated(HttpSessionEvent hse)</td>
<td>HttpSession对象创建时调用</td>
</tr>
<tr>
<td>sessionDestroyed(HttpSessionEvent hse)</td>
<td>HttpSession对象销毁时调用</td>
</tr>
</tbody>
</table>
<p>HttpSessionEvent对象代表从HttpSession对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpSession对象。</p>
<h4> ③ServletRequestListener</h4>
<p>作用：监听<strong>ServletRequest对象</strong>的创建与销毁</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>requestInitialized(ServletRequestEvent sre)</td>
<td>ServletRequest对象创建时调用</td>
</tr>
<tr>
<td>requestDestroyed(ServletRequestEvent sre)</td>
<td>ServletRequest对象销毁时调用</td>
</tr>
</tbody>
</table>
<p>ServletRequestEvent对象代表从HttpServletRequest对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpServletRequest对象。另外还有一个方法可以获取到当前Web应用的ServletContext对象。</p>
<h4> ④ServletContextAttributeListener</h4>
<p>作用：监听<strong>ServletContext中属性</strong>的创建、修改和销毁</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>attributeAdded(ServletContextAttributeEvent scab)</td>
<td>向ServletContext中添加属性时调用</td>
</tr>
<tr>
<td>attributeRemoved(ServletContextAttributeEvent scab)</td>
<td>从ServletContext中移除属性时调用</td>
</tr>
<tr>
<td>attributeReplaced(ServletContextAttributeEvent scab)</td>
<td>当ServletContext中的属性被修改时调用</td>
</tr>
</tbody>
</table>
<p>ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>getName()</td>
<td>获取<strong>修改或添加的属性名</strong></td>
</tr>
<tr>
<td>getValue()</td>
<td>获取<strong>被修改或添加的属性值</strong></td>
</tr>
<tr>
<td>getServletContext()</td>
<td>获取<strong>ServletContext对象</strong></td>
</tr>
</tbody>
</table>
<h4> ⑤HttpSessionAttributeListener</h4>
<p>作用：监听<strong>HttpSession中属性</strong>的创建、修改和销毁</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>attributeAdded(HttpSessionBindingEvent se)</td>
<td>向HttpSession中<strong>添加属性时</strong>调用</td>
</tr>
<tr>
<td>attributeRemoved(HttpSessionBindingEvent se)</td>
<td>从HttpSession中<strong>移除属性时</strong>调用</td>
</tr>
<tr>
<td>attributeReplaced(HttpSessionBindingEvent se)</td>
<td>当HttpSession中的<strong>属性被修改时</strong>调用</td>
</tr>
</tbody>
</table>
<p><strong>HttpSessionBindingEvent对象</strong>代表属性变化事件，它包含的方法如下：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>getName()</td>
<td>获取修改或添加的属性名</td>
</tr>
<tr>
<td>getValue()</td>
<td>获取被修改或添加的属性值</td>
</tr>
<tr>
<td>getSession()</td>
<td>获取触发事件的HttpSession对象</td>
</tr>
</tbody>
</table>
<h4> ⑥ServletRequestAttributeListener</h4>
<p>作用：监听<strong>ServletRequest中属性</strong>的创建、修改和销毁</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>attributeAdded(ServletRequestAttributeEvent srae)</td>
<td>向ServletRequest中添加属性时调用</td>
</tr>
<tr>
<td>attributeRemoved(ServletRequestAttributeEvent srae)</td>
<td>从ServletRequest中移除属性时调用</td>
</tr>
<tr>
<td>attributeReplaced(ServletRequestAttributeEvent srae)</td>
<td>当ServletRequest中的属性被修改时调用</td>
</tr>
</tbody>
</table>
<p>ServletRequestAttributeEvent对象代表属性变化事件，它包含的方法如下：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>getName()</td>
<td>获取修改或添加的属性名</td>
</tr>
<tr>
<td>getValue()</td>
<td>获取被修改或添加的属性值</td>
</tr>
<tr>
<td>getServletRequest ()</td>
<td>获取触发事件的ServletRequest对象</td>
</tr>
</tbody>
</table>
<h4> ⑦HttpSessionBindingListener</h4>
<p>作用：监听某个对象在Session域中的创建与移除</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>valueBound(HttpSessionBindingEvent event)</td>
<td>该类的实例被放到Session域中时调用</td>
</tr>
<tr>
<td>valueUnbound(HttpSessionBindingEvent event)</td>
<td>该类的实例从Session中移除时调用</td>
</tr>
</tbody>
</table>
<p>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>getName()</td>
<td>获取当前事件涉及的属性名</td>
</tr>
<tr>
<td>getValue()</td>
<td>获取当前事件涉及的属性值</td>
</tr>
<tr>
<td>getSession()</td>
<td>获取触发事件的HttpSession对象</td>
</tr>
</tbody>
</table>
<h4> ⑧HttpSessionActivationListener</h4>
<p>作用：监听某个对象在Session中的序列化与反序列化。</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>sessionWillPassivate(HttpSessionEvent se)</td>
<td>该类实例和Session一起钝化到硬盘时调用</td>
</tr>
<tr>
<td>sessionDidActivate(HttpSessionEvent se)</td>
<td>该类实例和Session一起活化到内存时调用</td>
</tr>
</tbody>
</table>
<p>HttpSessionEvent对象代表事件对象，通过getSession()方法获取事件涉及的HttpSession对象。</p>
<h3> 4、监听器的使用</h3>
<h4> ①创建监听器类</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②注册监听器</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 目前我们进行javaweb项目开发的“套路”是这样的：</h2>
<ol>
<li>
<p>拷贝 myssm包</p>
</li>
<li>
<p>新建配置文件applicationContext.xml或者可以不叫这个名字，在web.xml中指定文件名</p>
</li>
<li>
<p>在web.xml文件中配置：</p>
<ol>
<li>配置前缀和后缀，这样thymeleaf引擎就可以根据我们返回的字符串进行拼接，再跳转</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>配置监听器要读取的参数，目的是加载IOC容器的配置文件（也就是applicationContext.xml）</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>开发具体的业务模块：<br>
1） 一个具体的业务模块纵向上由几个部分组成：</p>
<ul>
<li>html页面</li>
<li>POJO类</li>
<li>DAO接口和实现类</li>
<li>Service接口和实现类</li>
<li>Controller 控制器组件<br>
2） 如果html页面有thymeleaf表达式，一定不能够直接访问，必须要经过PageController<br>
3） 在applicationContext.xml中配置 DAO、Service、Controller，以及三者之间的依赖关系<br>
4） DAO实现类中 ， 继承BaseDAO，然后实现具体的接口, 需要注意，BaseDAO后面的泛型不能写错。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>5） Service是业务控制类，这一层我们只需要记住一点：<br>
- 业务逻辑我们都封装在service这一层，不要分散在Controller层。也不要出现在DAO层（我们需要保证DAO方法的单精度特性）<br>
- 当某一个业务功能需要使用其他模块的业务功能时，尽量的调用别人的service，而不是深入到其他模块的DAO细节<br>
6） Controller类的编写规则<br>
① 在applicationContext.xml中配置Controller<br>
&lt;bean id="user" class="com.atguigu.qqzone.controllers.UserController&gt;<br>
那么，用户在前端发请求时，对应的servletpath就是   /user.do   , 其中的“user”就是对应此处的bean的id值<br>
② 在Controller中设计的方法名需要和operate的值一致<br>
public String login(String loginId , String pwd , HttpSession session){<br>
return "index";<br>
}<br>
因此，我们的登录验证的表单如下：<br>
</p><form th:action="@{/user.do}" method="post"><br>
</form></li>
</ol>
<h2> 十一、其他知识</h2>
<h3> 1、cookie</h3>
<p>cookie时客户端保存的一些数据，比如sessioinID<br>
给服务器发请求时，服务器会产生cookie，响应时将cookie带给客户端，客户端将cookie文件保存在本地电脑下</p>
<ol>
<li>
<p>创建Cookie对象</p>
</li>
<li>
<p>在客户端保存Cookie</p>
</li>
<li>
<p>设置Cookie的有效时长</p>
<p>cookie.setMaxAge(60)  ， 设置cookie的有效时长是60秒<br>
cookie.setDomain(pattern);<br>
cookie.setPath(uri);</p>
</li>
<li>
<p>Cookie的应用：<br>
4-1: 记住用户名和密码十天 setMaxAge(60 * 60 * 24 * 10)<br>
4-2: 十天免登录</p>
</li>
</ol>
<p>创建cookie并返回：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器端读取cookie信息</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cookie的时效性</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、Kaptcha</h3>
<p>1、验证码的作用：防止机器发送大量请求<br>
2、Kaptcha的使用：<br>
添加jar包<br>
在web.xml文件中注册KaptchaServlet，并设置验证码图片的相关属性<br>
在html页面上编写一个img标签，然后设置src等于KaptchaServlet对应的url-pattern<br>
3、kaptcha验证码图片的各个属性在常量接口：Constants中<br>
4、KaptchaServlet在生成验证码图片时，会同时将验证码信息保存到session中<br>
因此，我们在注册请求时，首先将用户文本框中输入的验证码值和session中保存的值进行比较，相等，则进行注册</p>
<h2> 十二、JavaWeb总结</h2>
<p>java实体类的不同名称</p>
<ul>
<li>POJO：Plain old Java Object，传统的普通的Java对象</li>
<li>entity：实体类</li>
<li>bean或Java bean</li>
<li>domain：领域模型</li>
</ul>
<p>DAO：dao中的方法都是单精度的</p>
<p>Servce：一个业务方法，它对应多个单精度方法，将其封装到service方法中</p>
<p>Controller：主要分为三个部分， 参数获取，服务，资源转发，将部分代码抽取到中央控制器中</p>
<p>IOC容器：层与层之间有耦合，降低耦合，依赖注入，管理对象的生命周期（对bean的组装，添加依赖关系）</p>
<p>filter：设置编码，开启事务，对事务的try-catch</p>
<p>listener：监听上下文启动，在上下文启动的时候去创建IOC容器,然后将其保存到application作用域，后面中央控制器再从application作用域中去获取IOC容器</p>
<p>threadLocal的引入</p>
<p>DispatcherServlet:中央控制器</p>
<h3> MVC各个层的设计</h3>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220914194924351.png" type="image/png"/>
    </item>
    <item>
      <title>Maven 基础</title>
      <link>https://T4mako.github.io/code/java/Maven%E5%9F%BA%E7%A1%80.html</link>
      <guid>https://T4mako.github.io/code/java/Maven%E5%9F%BA%E7%A1%80.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Maven 基础</source>
      <description>1、Maven概述 1、为什么要学习Maven？ 1、Maven 作为依赖管理工具 ①jar 包的规模 随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> 1、Maven概述</h2>
<h3> 1、为什么要学习Maven？</h3>
<h4> 1、Maven 作为依赖管理工具</h4>
<h5> ①jar 包的规模</h5>
<p>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。</p>
<!-- more -->
<p>比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：Nacos 服务注册发现、Web 框架环境、图模板技术 Thymeleaf<br>
最终却导入了 106 个 jar 包</p>
<p>而如果使用 Maven 来引入这些 jar 包只需要配置三个『<strong>依赖</strong>』：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ②jar 包的来源</h5>
<p>使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范</p>
<h5> ③jar 包之间的依赖关系</h5>
<p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。</p>
<p>而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助。</p>
<p><strong>而使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量</strong>。</p>
<h4> 2、Maven 作为构建管理工具</h4>
<h5> ①你没有注意过的构建</h5>
<p>你可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的。</p>
<h5> ②脱离 IDE 环境仍需构建</h5>
<h4> 结论</h4>
<ul>
<li><strong>管理规模庞大的 jar 包，需要专门工具。</strong></li>
<li><strong>脱离 IDE 环境执行构建操作，需要专门工具。</strong></li>
</ul>
<h3> 2、什么是 Maven？</h3>
<p>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供<strong>构建</strong>和<strong>依赖</strong>管理支持的工具。</p>
<h4> 1、构建</h4>
<p>Java 项目开发过程中，构建指的是使用**『原材料生产产品』**的过程。<br>
原材料：Java 源代码、基于 HTML 的 Thymeleaf 文件、图片、配置文件等<br>
产品：一个可以在服务器上运行的项目</p>
<p><strong>构建过程</strong>包含的<strong>主要的环节</strong>：<br>
清理：删除上一次构建的结果，为下一次构建做好准备<br>
编译：Java 源程序编译成 *.class 字节码文件<br>
测试：运行提前准备好的测试程序<br>
报告：针对刚才测试的结果生成一个全面的信息<br>
打包：<br>
Java工程：jar包<br>
Web工程：war包<br>
安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库<br>
部署：<br>
部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上<br>
部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</p>
<h4> 2、依赖</h4>
<p>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。</p>
<p>例如：<br>
junit-4.12 依赖 hamcrest-core-1.3<br>
thymeleaf-3.0.12.RELEASE 依赖 ognl-3.1.26<br>
ognl-3.1.26 依赖 javassist-3.20.0-GA<br>
thymeleaf-3.0.12.RELEASE 依赖 attoparser-2.0.5.RELEASE<br>
thymeleaf-3.0.12.RELEASE 依赖 unbescape-1.1.6.RELEASE<br>
thymeleaf-3.0.12.RELEASE 依赖 slf4j-api-1.7.26</p>
<p>依赖管理中要解决的具体问题：</p>
<ul>
<li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li>
<li>jar 包之间的依赖：通过依赖的传递性自动完成</li>
<li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li>
</ul>
<h4> 3、Maven 的工作机制（关键作战地图）</h4>
<p>核心程序：官网下载的Maven解压<br>
Maven仓库：conf/settings.xml中修改的地址为仓库地址</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219164435561.png" alt="image-20221219164435561" loading="lazy"></p>
<h2> 2、Maven 核心程序解压和配置</h2>
<h3> 1、Maven核心程序解压与配置</h3>
<h4> 1、Maven 官网地址</h4>
<p>首页：<br>
<a href="https://maven.apache.org/" target="_blank" rel="noopener noreferrer">https://maven.apache.org/</a></p>
<p>下载页面：<br>
<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener noreferrer">https://maven.apache.org/download.cgi</a></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219170219783.png" alt="image-20221219170311882" loading="lazy"></p>
<h4> 2、解压Maven核心程序</h4>
<p>解压到<strong>非中文、没有空格</strong>的目录，在解压目录中，我们需要着重关注 Maven 的核心配置文件：<strong>conf/settings.xml</strong></p>
<h4> 3、指定本地仓库</h4>
<p>本地仓库默认值：用户home目录/.m2/repository。由于本地仓库的默认位置是在用户的家目录下，而家目录往往是在 C 盘，也就是系统盘。将来 Maven 仓库中jar 包越来越多，仓库体积越来越大，可能会拖慢 C 盘运行速度，影响系统性能。所以建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地仓库这个目录，我们手动创建一个空的目录即可。<br>
<strong>记住</strong>：一定要把 localRepository 标签<strong>从注释中拿出来</strong>。<br>
<strong>注意</strong>：本地仓库本身也需要使用一个<strong>非中文、没有空格</strong>的目录。</p>
<h4> 4、配置阿里云提供的镜像仓库</h4>
<p>Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，<strong>访问国内网站</strong>，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：</p>
<h6> ①将原有的例子配置注释掉</h6>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> ②加入我们的配置</h6>
<p>将下面 mirror 标签整体复制到 settings.xml 文件的 mirrors 标签的内部。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、配置 Maven 工程的基础 JDK 版本</h4>
<p>如果按照默认配置运行，Java 工程使用的默认 JDK 版本是 1.5，而我们熟悉和常用的是 JDK 1.8 版本。修改配置的方式是：将 profile 标签整个复制到 settings.xml 文件的 profiles 标签内。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、配置环境变量</h3>
<h4> 1、检查 JAVA_HOME 配置是否正确</h4>
<h4> 2、配置 MAVEN_HOME、PATH</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219175732833.png" alt="image-20221219175732833" loading="lazy"><br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219175744782.png" alt="image-20221219175744782" loading="lazy"></p>
<h4> 3、验证</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221219175812570.png" alt="image-20221219175812570" loading="lazy"></p>
<h2> 3、使用 Maven：命令行环境</h2>
<h3> 1、根据坐标创建 Maven 工程</h3>
<h4> 1、向量说明</h4>
<p>在数学中，使用 x、y、z 三个**『向量』<strong>作为空间的坐标系，可以在</strong>『空间』<strong>中唯一的定位到一个</strong>『点』**。</p>
<p><strong>在Maven中</strong>，使用三个**『向量』<strong>在</strong>『Maven的仓库』<strong>中</strong>唯一<strong>的定位到一个</strong>『jar』**包。</p>
<ul>
<li>​	<strong>groupId</strong>：公司或组织的 id</li>
<li>​	<strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li>
<li>​	<strong>version</strong>：版本号</li>
</ul>
<h4> 2、三个向量的取值方式</h4>
<p><strong>groupId</strong>：公司或组织域名的倒序，通常也会加上项目名称s<br>
例如：com.atguigu.maven<br>
<strong>artifactId</strong>：模块的名称，将来作为 Maven 工程的工程名<br>
<strong>version</strong>：模块的版本号，根据自己的需要设定<br>
例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本<br>
例如：RELEASE 表示正式版本</p>
<p>举例：<br>
groupId：com.atguigu.maven<br>
artifactId：pro01-atguigu-maven<br>
version：1.0-SNAPSHOT</p>
<h4> 3、坐标和仓库中 jar 包的存储路径之间的对应关系</h4>
<p>坐标：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：<br>
<strong>Maven本地仓库根目录</strong>\javax\servlet\servlet-api\2.5\servlet-api-2.5.jar<br>
要学会根据坐标到本地仓库中找到对应的 jar 包</p>
<h4> 4、实验操作</h4>
<h5> ①创建目录作为后面操作的工作空间</h5>
<p>例如：D:\maven-workspace\space201026</p>
<p>此时我们已经有了<strong>三个目录</strong>，分别是：<br>
<strong>Maven 核心程序：中军大帐<br>
Maven 本地仓库：兵营<br>
本地工作空间：战场</strong></p>
<h5> ②在工作空间目录下打开命令行窗口</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220102348639.png" alt="image-20221220102348639" loading="lazy"></p>
<h5> ③使用命令生成Maven工程</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220102412287.png" alt="image-20221220102412287" loading="lazy"></p>
<p>下面是运行提示操作：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220102451513.png" alt="image-20221220102451513" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220104454725.png" alt="image-20221220104454725" loading="lazy"></p>
<h5> ④调整</h5>
<p>Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。<br>
自动生成的 App.java 和 AppTest.java 可以删除。<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220104639499.png" alt="image-20221220104639499" loading="lazy"></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ⑤自动生成的 pom.xml 解读</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、Maven核心概念：POM</h4>
<h5> ①含义</h5>
<p>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，**项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现。</p>
<h5> ②模型化思想</h5>
<p>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据。</p>
<h5> ③对应的配置文件</h5>
<p>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</p>
<h4> 6、Maven核心概念：约定的目录结构</h4>
<h5> ①各个目录的作用</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221220110722929.png" alt="image-20221220110722929" loading="lazy"></p>
<h5> ②约定目录结构的意义</h5>
<p>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</p>
<h5> ③约定大于配置</h5>
<p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p>
<p>目前开发领域的技术发展趋势就是：<strong>约定大于配置，配置大于编码</strong>。</p>
<h3> 2、在 Maven 工程中编写代码</h3>
<h4> 1、主体程序</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223135339243.png" alt="image-20221223135339243" loading="lazy"></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、测试程序</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223140441200.png" alt="image-20221223140441200" loading="lazy"></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、执行 Maven 的构建命令</h3>
<h4> 1、要求</h4>
<p>运行 Maven 中和构建操作相关的命令时，<strong>必须进入到 pom.xml 所在的目录</strong>。如果没有在 pom.xml 所在的目录运行 Maven 的构建命令，那么会看到下面的错误信息：</p>
<p>The goal you specified requires a project to execute but there is no POM in this directory</p>
<p>（<strong>mvn -v</strong> 命令和构建操作无关，只要正确配置了 PATH，在任何目录下执行都可以。而构建相关的命令要在 pom.xml 所在目录下运行——操作哪个工程，就进入这个工程的 pom.xml 目录。）</p>
<h4> 2、清理操作</h4>
<p><strong>mvn clean</strong><br>
效果：删除 target 目录</p>
<h4> 3、编译操作</h4>
<p>主程序编译：<strong>mvn compile</strong><br>
测试程序编译：<strong>mvn test-compile</strong><br>
主体程序编译结果存放的目录：target/classes<br>
测试程序编译结果存放的目录：target/test-classes</p>
<h4> 4、测试操作</h4>
<p><strong>mvn test</strong><br>
测试的报告存放的目录：target/surefire-reports</p>
<h4> 5、打包操作</h4>
<p><strong>mvn package</strong><br>
打包的结果——jar 包，存放的目录：target</p>
<h4> 6、安装操作</h4>
<p>安装的效果是将本地构建过程中生成的 jar 包存入 Maven 本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的。</p>
<p><strong>mvn install</strong></p>
<p>坐标信息如下：可以在项目中的pom.xml中查看到</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、创建 Maven 版的 Web 工程</h3>
<h4> 1、说明</h4>
<p>使用 mvn archetype:generate 命令生成 Web 工程时，需要使用一个专门的 archetype。这个专门生成 Web 工程骨架的 archetype 可以参照官网看到它的用法：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223142819791.png" alt="image-20221223142819791" loading="lazy"></p>
<h4> 2、操作</h4>
<p>注意：如果在上一个工程的目录下执行 mvn archetype:generate 命令，那么 Maven 会报错：不能在一个非 pom 的工程下再创建其他工程。<br>
所以不要再刚才创建的工程里再创建新的工程，<strong>请回到工作空间根目录</strong>来操作。</p>
<p>然后运行生成工程的命令：<br>
<strong>mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223143929570.png" alt="image-20221223143929570" loading="lazy"></p>
<h4> 3、生成的pom.xml</h4>
<p>确认打包的方式是war包形式</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 4、生成的Web工程的目录结构</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223145233465.png" alt="image-20221223145233465" loading="lazy"></p>
<h4> 5、创建 Servlet</h4>
<h5> ①在 main 目录下创建 java 目录</h5>
<h5> ②在 java 目录下创建 Servlet 类所在的包的目录</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223145558932.png" alt="image-20221223145558932" loading="lazy"></p>
<h5> ③在包下创建 Servlet 类</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ④在 web.xml 中注册 Servlet</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6、在 index.jsp 页面编写超链接</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7、编译</h4>
<p>此时直接执行 <strong>mvn compile</strong> 命令出错：</p>
<p>说明：我们的 Web 工程用到了 HttpServlet 这个类，而 HttpServlet 这个类属于 servlet-api.jar 这个 jar 包。此时我们说，<strong>Web 工程需要依赖 servlet-api.jar</strong> 包。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221223150029811.png" alt="image-20221223150029811" loading="lazy"></p>
<h4> 8、配置对 servlet-api.jar 包的依赖</h4>
<p>对于不知道详细信息的依赖可以到**<a href="https://mvnrepository.com/**%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E3%80%82%E4%BD%BF%E7%94%A8%E5%85%B3%E9%94%AE%E8%AF%8D%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%88%97%E8%A1%A8%E4%B8%AD%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82" target="_blank" rel="noopener noreferrer">https://mvnrepository.com/**网站查询。使用关键词搜索，然后在搜索结果列表中选择适合的使用。</a></p>
<p>比如，我们找到的 servlet-api 的依赖信息：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以把上面的信息加入 pom.xml。重新执行 mvn compile 命令。</p>
<h4> 9、将 Web 工程打包为 war 包</h4>
<p>运行 <strong>mvn package</strong> 命令，生成 war 包的位置如下图所示：</p>
<h4> 10、将 war 包部署到 Tomcat 上运行</h4>
<p>将 war 包复制到 Tomcat/webapps 目录下<br>
启动 Tomcat<br>
通过浏览器尝试访问：<a href="http://localhost:8080/pro02-maven-web/index.jsp" target="_blank" rel="noopener noreferrer">http://localhost:8080/pro02-maven-web/index.jsp</a></p>
<h3> 5、让 Web 工程依赖 Java 工程</h3>
<h4> 1、观念</h4>
<p>明确一个意识：从来只有 Web 工程依赖 Java 工程，没有反过来 Java 工程依赖 Web 工程。<br>
本质上来说，Web 工程依赖的 Java 工程其实就是 <strong>Web 工程里导入的 jar 包</strong>。最终 <strong>Java 工程会变成 jar 包，放在 Web 工程的 WEB-INF/lib 目录下</strong>。</p>
<h4> 2、操作</h4>
<p>在 pro02-maven-web 工程的 pom.xml 中，找到 dependencies 标签，在 dependencies 标签中做如下配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、在 Web 工程中，编写测试代码</h4>
<h5> ①补充创建目录</h5>
<p>pro02-maven-web**\src\test\java\com\atguigu\maven**</p>
<h5> ②确认 Web 工程依赖了 junit</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ③创建测试类</h5>
<p>把 Java 工程的 CalculatorTest.java 类复制到 pro02-maven-web**\src\test\java\com\atguigu\maven** 目录下</p>
<h4> 4、执行Maven命令</h4>
<h5> ①测试命令</h5>
<p><strong>mvn test</strong><br>
说明：测试操作中会提前自动执行编译操作，测试成功就说明编译也是成功的</p>
<h5> ②打包命令</h5>
<p><strong>mvn package</strong><br>
通过查看 war 包内的结构，我们看到被 Web 工程依赖的 Java 工程确实是会变成 Web 工程的 WEB-INF/lib 目录下的 jar 包。</p>
<h5> ③查看当前 Web 工程所依赖的 jar 包的列表</h5>
<p><strong>mvn dependency:list</strong></p>
<p>说明：javax.servlet:javax.servlet-api:jar:3.1.0:provided 格式显示的是一个 jar 包的坐标信息。<br>
格式是：<strong>groupId:artifactId:打包方式:version:依赖的范围</strong></p>
<p>这样的格式虽然和我们 XML 配置文件中坐标的格式不同，但是本质上还是坐标信息，大家需要能够认识这样的格式，将来从 Maven 命令的日志或错误信息中看到这样格式的信息，就<strong>能够识别出来这是坐标</strong>。进而<strong>根据坐标到Maven 仓库找到对应的jar包</strong>，用这样的方式解决我们遇到的报错的情况。</p>
<h5> ④以树形结构查看当前 Web 工程的依赖信息</h5>
<p><strong>mvn dependency:tree</strong></p>
<p>我们在 pom.xml 中并没有依赖 hamcrest-core，但是它却被加入了我们依赖的列表。原因是：junit 依赖了hamcrest-core，然后基于依赖的传递性，hamcrest-core 被传递到我们的工程了。</p>
<h3> 6、测试依赖的范围</h3>
<h4> 1、依赖范围</h4>
<p>标签的位置：<strong>dependencies/dependency/scope</strong><br>
标签的可选值：<strong>compile</strong>、<strong>test</strong>、<strong>provided</strong>、system、runtime、<strong>import</strong></p>
<h4> ①compile 和 test 对比</h4>
<table>
<thead>
<tr>
<th></th>
<th>main目录（空间）</th>
<th>test目录（空间）</th>
<th>开发过程（时间）</th>
<th>部署到服务器（时间）</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile</td>
<td>有效</td>
<td>有效</td>
<td>有效</td>
<td>有效</td>
</tr>
<tr>
<td>test</td>
<td>无效</td>
<td>有效</td>
<td>有效</td>
<td>无效</td>
</tr>
</tbody>
</table>
<h4> ②compile 和 provided 对比</h4>
<table>
<thead>
<tr>
<th></th>
<th>main目录（空间）</th>
<th>test目录（空间）</th>
<th>开发过程（时间）</th>
<th>部署到服务器（时间）</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile</td>
<td>有效</td>
<td>有效</td>
<td>有效</td>
<td>有效</td>
</tr>
<tr>
<td>provided</td>
<td>有效</td>
<td>有效</td>
<td>有效</td>
<td>无效</td>
</tr>
</tbody>
</table>
<h4> ③结论</h4>
<p><strong>compile</strong>：通常使用的第三方框架的 jar 包这样在项目实际运行时真正要用到的 jar 包都是以 compile 范围进行依赖的。比如 SSM 框架所需jar包。<br>
<strong>test</strong>：测试过程中使用的 jar 包，以 test 范围依赖进来。比如 junit。<br>
<strong>provided</strong>：在开发过程中需要用到的“服务器上的 jar 包”通常以 provided 范围依赖进来。比如 servlet-api、jsp-api。而这个范围的 jar 包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类 jar 包产生冲突，同时减轻服务器的负担。说白了就是：“<strong>服务器上已经有了，你就别带啦！</strong>”</p>
<h3> 7、测试依赖的传递性</h3>
<h4> 1、依赖的传递性</h4>
<h5> ①概念</h5>
<p>A 依赖 B，B 依赖 C，那么在 A 没有配置对 C 的依赖的情况下，A 里面能不能直接使用 C？</p>
<h5> ②传递的原则</h5>
<p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。</p>
<ul>
<li><strong>B 依赖 C 时使用 compile 范围：可以传递</strong></li>
<li><strong>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</strong></li>
</ul>
<h4> 2、使用 compile 范围依赖 spring-core</h4>
<p>测试方式：让 pro01-maven-java 工程依赖 spring-core<br>
具体操作：编辑 pro01-maven-java 工程根目录下 pom.xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 mvn dependency:tree 命令查看效果：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224141350567.png" alt="image-20221224141350567" loading="lazy"></p>
<p>还可以在 Web 工程中，使用 mvn dependency:tree 命令查看效果（需要重新将 pro01-maven-java 安装到仓库）：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224141403153.png" alt="image-20221224141403153" loading="lazy"></p>
<h4> 3、验证 test 和 provided 范围不能传递</h4>
<p>从上面的例子已经能够看到，pro01-maven-java 依赖了 junit，但是在 pro02-maven-web 工程中查看依赖树的时候并没有看到 junit。<br>
要验证 provided 范围不能传递，可以在 pro01-maven-java 工程中加入 servlet-api 的依赖。</p>
<h3> 8、测试依赖的排除</h3>
<h4> 1、概念</h4>
<p>当 A 依赖 B，B 依赖 C 而且 C 可以传递到 A 的时候，A 不想要 C，需要在 A 里面把 C 排除掉。而往往这种情况都是为了避免 jar 包之间的冲突。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224142134353.png" alt="image-20221224142134353" loading="lazy"></p>
<p>所以配置依赖的排除其实就是阻止某些 jar 包的传递。因为这样的 jar 包传递过来会和其他 jar 包冲突。</p>
<h4> 2、配置方式</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、测试</h4>
<p>测试的方式：在 pro02-maven-web 工程中配置对 commons-logging 的排除<br>
运行 mvn dependency:tree 命令查看效果，发现在 spring-core 下面就没有 commons-logging 了。<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224150708267.png" alt="image-20221224150708267" loading="lazy"></p>
<h3> 9、继承</h3>
<h4> 1、概念</h4>
<p>Maven工程之间，A 工程继承 B 工程<br>
B 工程：父工程<br>
A 工程：子工程<br>
本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置。</p>
<h4> 2、作用</h4>
<p>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</p>
<p>它的背景是：</p>
<ul>
<li>对一个比较大型的项目进行了模块拆分。</li>
<li>一个 project 下面，创建了很多个 module。</li>
<li><strong>每一个 module 都需要配置自己的依赖信息</strong>。</li>
</ul>
<p>它背后的需求是：</p>
<ul>
<li>在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。</li>
<li>使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以<strong>整个项目中使用的框架版本需要统一</strong>。</li>
<li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。</li>
</ul>
<p>通过在父工程中为整个项目维护依赖信息的组合既<strong>保证了整个项目使用规范、准确的 jar 包</strong>；又能够将<strong>以往的经验沉淀</strong>下来，节约时间和精力。</p>
<h4> 3、举例</h4>
<p>在一个工程中依赖多个 Spring 的 jar 包</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224151906558.png" alt="image-20221224151906558" loading="lazy"></p>
<p>使用 Spring 时要求所有 Spring 自己的 jar 包版本必须一致。为了能够对这些 jar 包的版本进行统一管理，我们使用继承这个机制，将所有版本信息统一在父工程中进行管理。</p>
<h4> 4、操作</h4>
<h5> ①创建父工程</h5>
<p>创建的过程和前面创建 pro01-maven-java 一样。<br>
工程名称：pro03-maven-parent<br>
工程创建好之后，要修改它的打包方式：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程。</strong></p>
<h5> ②创建模块工程</h5>
<p>模块工程类似于 IDEA 中的 module，所以需要<strong>进入 pro03-maven-parent 工程的根目录</strong>，然后运行 mvn archetype:generate 命令来创建模块工程。</p>
<p>假设，我们创建三个模块工程：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224155634597.png" alt="image-20221224155634597" loading="lazy"></p>
<h5> ③查看被添加新内容的父工程 pom.xml</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ④解读子工程的pom.xml</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ⑤在父工程中配置依赖的统一管理</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ⑥子工程中引用那些被父工程管理的依赖</h5>
<p>关键点：省略版本号</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ⑦在父工程中升级依赖信息的版本</h5>
<p><strong>一处修改，处处生效</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在子工程中运行mvn dependency:list:<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224160911927.png" alt="image-20221224160911927" loading="lazy"></p>
<h5> ⑧在父工程中声明自定义属性</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要的地方使用${}的形式来引用自定义的属性名：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>真正实现“一处修改，处处生效”。</strong></p>
<h4> 5、实际意义</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224160950881.png" alt="image-20221224160950881" loading="lazy"></p>
<p>编写一套符合要求、开发各种功能都能正常工作的依赖组合并不容易。如果公司里已经有人总结了成熟的组合方案，那么再开发新项目时，如果不使用原有的积累，而是重新摸索，会浪费大量的时间。为了提高效率，我们可以使用工程继承的机制，让成熟的依赖组合方案能够保留下来。</p>
<p>如上图所示，公司级的父工程中管理的就是成熟的依赖组合方案，各个新项目、子系统各取所需即可。</p>
<h3> 10、聚合</h3>
<h4> 1、聚合本身的含义</h4>
<p>部分组成整体动画片《战神金刚》中的经典台词：“我来组成头部！我来组成手臂！”就是聚合关系最生动的体现。</p>
<h4> 2、Maven 中的聚合</h4>
<p>使用一个“总工程”将各个“模块工程”汇集起来，作为一个整体对应完整的项目。</p>
<ul>
<li>项目：整体</li>
<li>模块：部分</li>
</ul>
<h4> 3、好处</h4>
<ul>
<li>
<p>一键执行 Maven 命令：很多构建命令都可以在“总工程”中一键执行。</p>
<p>以 mvn install 命令为例：Maven 要求有父工程时先安装父工程；有依赖的工程时，先安装被依赖的工程。我们自己考虑这些规则会很麻烦。但是工程聚合之后，在总工程执行 mvn install 可以一键完成安装，而且会自动按照正确的顺序执行。</p>
</li>
<li>
<p>配置聚合之后，各个模块工程会在总工程中展示一个列表，让项目中的各个模块一目了然。</p>
</li>
</ul>
<h4> 4、聚合的配置</h4>
<p>在总工程中配置 modules 即可：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、依赖循环问题</h4>
<p>如果 A 工程依赖 B 工程，B 工程依赖 C 工程，C 工程又反过来依赖 A 工程，那么在执行构建操作时会报下面的错误</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221224165432357.png" alt="image-20221224165432357" loading="lazy"></p>
<p>这个错误的含义是：循环引用。</p>
<h2> 4、使用Maven：IDEA环境</h2>
<h3> 1、创建父工程</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225133658424.png" alt="image-20221225133658424" loading="lazy"></p>
<p>更改坐标位置</p>
<h3> 2、配置自己的Maven</h3>
<p><strong>每次创建 Project 后都需要设置 Maven 家目录位置</strong>，否则 IDEA 将使用内置的 Maven 核心程序（不稳定）并使用默认的本地仓库位置。这样一来，我们在命令行操作过程中已下载好的 jar 包就白下载了，默认的本地仓库通常在 C 盘，还影响系统运行。</p>
<p>配置之后，IDEA 会根据我们在这里指定的 Maven 家目录自动识别到我们在 settings.xml 配置文件中指定的本地仓库。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225133749426.png" alt="image-20221225133805324" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225133848797.png" alt="image-20221225133848797" loading="lazy"></p>
<h3> 3 、建Java模块工程</h3>
<p>选中项目，如上所述新建mavne模块</p>
<h3> 4、创建Web模块工程</h3>
<h4> 1、创建模块</h4>
<p>按照前面的同样操作创建模块，<strong>此时</strong>这个模块其实还是一个<strong>Java模块</strong>。</p>
<h4> 2、修改打包方式</h4>
<p>Web 模块将来打包当然应该是 <strong>war</strong> 包。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 3、Web 设定</h4>
<p>首先打开项目结构菜单<br>
然后到 Facets 下查看 IDEA 是否已经帮我们自动生成了 Web 设定。没有就刷新一下右侧Maven</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225144820574.png" alt="image-20221225144820574" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225144830175.png" alt="image-20221225144830175" loading="lazy"></p>
<h4> 4、借助IDEA生成web.xml</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145439907.png" alt="image-20221225145439907" loading="lazy"></p>
<h3> 5、其他操作</h3>
<h4> 1、在IDEA中执行Maven命令</h4>
<h5> ①直接执行</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225140022531.png" alt="image-20221225140022531" loading="lazy"></p>
<h5> ②手动输入</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225140043534.png" alt="image-20221225140043534" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225140057743.png" alt="image-20221225140057743" loading="lazy"></p>
<p>如果有需要，还可以给命令后面附加参数：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225140111847.png" alt="image-20221225140111847" loading="lazy"></p>
<h4> 2、在IDEA中查看某个模块的依赖信息</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145515526.png" alt="image-20221225145515526" loading="lazy"></p>
<h4> 3、工程导入</h4>
<p>Maven工程除了自己创建的，还有很多情况是别人创建的。而为了参与开发或者是参考学习，我们都需要导入到 IDEA 中。下面我们分几种不同情况来说明：</p>
<h5> ①来自版本控制系统</h5>
<p>目前我们通常使用的都是 Git（本地库） + 码云（远程库）的版本控制系统，结合 IDEA 的相关操作方式请点<a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro008-Git/lecture/chapter05/verse03.html" target="_blank" rel="noopener noreferrer"><strong>这里</strong> (opens new window)</a>查看<strong>克隆远程库</strong>部分。</p>
<h5> ②来自工程目录</h5>
<p>直接使用 IDEA 打开工程目录即可。下面咱们举个例子：</p>
<h6> [1]工程压缩包</h6>
<p>假设别人发给我们一个 Maven 工程的 zip 压缩包：maven-rest-demo.zip。从码云或GitHub上也可以以 ZIP 压缩格式对项目代码打包下载。</p>
<h6> [2]解压</h6>
<p>如果你的所有 IDEA 工程有一个专门的目录来存放，而不是散落各处，那么首先我们就把 ZIP 包解压到这个指定目录中</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145758877.png" alt="image-20221225145758877" loading="lazy"></p>
<h6> [3]打开</h6>
<p>只要我们确认在解压目录下可以直接看到 pom.xml，那就能证明这个解压目录就是我们的工程目录。那么接下来让 IDEA 打开这个目录就可以了。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145843999.png" alt="image-20221225145843999" loading="lazy"></p>
<h6> [4]设置 Maven 核心程序位置</h6>
<p>打开一个新的 Maven 工程，和新创建一个 Maven 工程是一样的，此时 IDEA 的 settings 配置中关于 Maven 仍然是默认值：<br>
所以我们还是需要像新建 Maven 工程那样，指定一下 Maven 核心程序位置：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225145915064.png" alt="image-20221225145915064" loading="lazy"></p>
<h4> 4、模块导入</h4>
<h5> 1、导入 Java 类型模块</h5>
<p>复制我们想要导入的模块目录，粘贴到我们自己工程目录下</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151023482.png" alt="image-20221225151023482" loading="lazy"></p>
<p>在 IDEA 中执行导入</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151044681.png" alt="image-20221225151044681" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151055554.png" alt="image-20221225151055554" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151309080.png" alt="image-20221225151309080" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151316718.png" alt="image-20221225151316718" loading="lazy"></p>
<p>修改 pom.xml<br>
刚刚导入的 module 的父工程坐标还是以前的，需要改成我们自己的 project。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151337073.png" alt="image-20221225151337073" loading="lazy"></p>
<h5> 2、导入 Web 类型模块</h5>
<p>其它操作和上面演示的都一样，只是多一步：删除多余的、不正确的 web.xml 设置。如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225151411493.png" alt="image-20221225151411493" loading="lazy"></p>
<h2> 5、其他核心概念</h2>
<h3> 1、生命周期</h3>
<h4> ①作用</h4>
<p>为了让构建过程自动化完成，Maven 设定了三个生命周期，生命周期中的每一个环节对应构建过程中的一个操作。</p>
<h4> ②三个生命周期</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221225152742410.png" alt="image-20221225152742410" loading="lazy"></p>
<h4> ③特点</h4>
<ul>
<li>前面三个生命周期彼此是独立的。</li>
<li>在任何一个生命周期内部，执行任何一个具体环节的操作，都是<strong>从本周期最初的位置开始执行，直到指定的地方</strong>。（本节记住这句话就行了，其他的都不需要记）</li>
</ul>
<p>Maven 之所以这么设计其实就是为了提高构建过程的自动化程度：让使用者只关心最终要干的即可，过程中的各个环节是自动执行的。</p>
<h3> 2、插件和目标</h3>
<h4> ①插件</h4>
<p>Maven 的核心程序仅仅负责宏观调度，不做具体工作。<strong>具体工作都是由 Maven 插件完成的</strong>。例如：编译就是由 maven-compiler-plugin-3.1.jar 插件来执行的。</p>
<h4> ②目标</h4>
<p>一个插件可以对应多个目标，而每一个目标都和生命周期中的某一个环节对应。</p>
<p>Default 生命周期中有 compile 和 test-compile 两个和编译相关的环节，这两个环节对应 compile 和 test-compile 两个目标，而这两个目标都是由 maven-compiler-plugin-3.1.jar 插件来执行的。</p>
<h3> 3、仓库</h3>
<ul>
<li>本地仓库：在当前电脑上，为电脑上所有 Maven 工程服务</li>
<li>远程仓库：需要联网
<ul>
<li>局域网：我们自己搭建的 Maven 私服，例如使用 Nexus 技术。</li>
<li>Internet
<ul>
<li>中央仓库</li>
<li>镜像仓库：内容和中央仓库保持一致，但是能够分担中央仓库的负载，同时让用户能够就近访问提高下载速度，例如：Nexus aliyun</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>建议：不要中央仓库和阿里云镜像混用，否则 jar 包来源不纯，彼此冲突。</p>
<p>专门搜索 Maven 依赖信息的网站：<a href="https://mvnrepository.com/" target="_blank" rel="noopener noreferrer">https://mvnrepository.com/</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Mybatis 基础</title>
      <link>https://T4mako.github.io/code/java/MyBatis.html</link>
      <guid>https://T4mako.github.io/code/java/MyBatis.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Mybatis 基础</source>
      <description>1、MyBatis简介 MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> 1、MyBatis简介</h2>
<p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。</p>
<!-- more -->
<h3> 1.1MyBatis特性</h3>
<p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架<br>
2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集<br>
3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old JavaObjects，普通的Java对象）映射成数据库中的记录<br>
4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p>
<h3> 1.2、MyBatis下载</h3>
<p>MyBatis下载地址：<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener noreferrer">https://github.com/mybatis/mybatis-3</a></p>
<h3> 1.3、和其它持久化层技术对比</h3>
<p>JDBC<br>
SQL 夹杂在Java代码中耦合度高，导致<strong>硬编码内伤</strong>（要修改java中的代码）<br>
维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见<br>
代码冗长，开发效率低</p>
<p>Hibernate 和 JPA<br>
操作简便，开发效率高<br>
程序中的长难复杂 SQL 需要绕过框架<br>
内部自动生产的 SQL，不容易做特殊优化<br>
基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。<br>
反射操作太多，导致数据库性能下降</p>
<p>MyBatis<br>
轻量级，性能出色<br>
SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据<br>
开发效率稍逊于HIbernate，但是完全能够接受</p>
<h2> 2、搭建MyBatis</h2>
<h3> 2.1、开发环境</h3>
<p>IDE：idea2022.1.3<br>
构建工具：maven 3.8.6<br>
MySQL版本：MySQL 8<br>
MyBatis版本：MyBatis 3.5.11</p>
<h3> 2.2、创建maven工程</h3>
<h4> ①新建项目，更改settings</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221226160430380.png" alt="image-20221226160430380" loading="lazy"></p>
<h4> ②新建模块</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221226160638023.png" alt="image-20221226160638023" loading="lazy"></p>
<h4> ③修改打包方式</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221226160928407.png" alt="image-20221226160928407" loading="lazy"></p>
<h4> ④引入依赖</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若代码报红，右上角的m点击下载</p>
<h3> 2.3、创建MyBatis的核心配置文件</h3>
<p>习惯上命名为<strong>mybatis-config.xml</strong>，这个文件名仅仅只是建议，并非强制要求。将来<strong>整合Spring之后，这个配置文件可以省略</strong>，所以大家操作时可以直接复制、粘贴。<br>
核心配置文件主要用于<strong>配置连接数据库的环境以及MyBatis的全局配置信息</strong><br>
核心配置文件存放的位置是<strong>src/main/resources</strong>目录下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.4、创建mapper接口</h3>
<p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类。  Mybatis可以帮你实现</p>
<p>例如：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.5、创建MyBatis的映射文件</h3>
<p>相关概念：<strong>ORM</strong>（Object Relationship Mapping）对象关系映射<br>
<strong>对象：Java的实体类对象<br>
关系：关系型数据库<br>
映射：二者之间的对应关系</strong></p>
<table>
<thead>
<tr>
<th>Java概念</th>
<th>数据库概念</th>
</tr>
</thead>
<tbody>
<tr>
<td>类</td>
<td>表</td>
</tr>
<tr>
<td>属性</td>
<td>字段/列</td>
</tr>
<tr>
<td>对象</td>
<td>记录/行</td>
</tr>
</tbody>
</table>
<p>1、映射文件的命名规则：<br>
表所对应的实体类的类名+Mapper.xml<br>
例如：<strong>表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</strong><br>
因此<strong>一个映射文件对应一个实体类</strong>，对应一张表的操作<br>
MyBatis<strong>映射文件用于编写SQL</strong>，访问以及操作表中的数据<br>
MyBatis映射文件存放的位置是<strong>src/main/resources/mappers</strong>目录下<br>
2、 MyBatis中可以<strong>面向接口操作数据</strong>，要保证两个一致：<br>
<mark><strong>mapper接口</strong>的全类名和<strong>映射文件</strong>的<strong>命名空间（namespace）保持一致</strong><br>
<strong>mapper接口</strong>中<strong>方法的方法名</strong>和映射文件中编写<strong>SQL的标签的id</strong>属性保持一致</mark></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>在核心配置文件中引入映射</mark></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.6、通过junit测试功能</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SqlSession</strong>：代表<strong>Java程序和数据库之间的会话</strong>。（HttpSession是Java程序和浏览器之间的会话）<br>
SqlSessionFactory：是“生产”SqlSession的“工厂”。<br>
工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p>
<h3> 2.7、加入log4j日志功能</h3>
<h4> ①加入依赖</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②加入log4j的配置文件</h4>
<p>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志的级别：<br>
<strong>FATAL(致命) &gt; ERROR(错误) &gt; WARN(警告) &gt; INFO(信息) &gt; DEBUG(调试)<br>
从左到右打印的内容越来越详细</strong></p>
<h2> 3、核心配置文件详解</h2>
<p>核心配置文件中的标签必须按照固定的顺序：<br>
properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> tips：创建文件模板</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221228145920237.png" alt="image-20221228145920237" loading="lazy"></p>
<p>创建模板名为mybatis-config和mybatis-mapper的模板，下次创建核心配置文件时只需要通过模板创建</p>
<h2> 4、MyBatis的增删改查</h2>
<p>4.1、新增</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.2、删除</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.3、修改</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.4、查询一个实体类对象</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.5、查询list集合</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意<br>
1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系<br>
resultType：自动映射，用于属性名和表中字段名一致的情况<br>
resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</p>
<h2> 5、MyBatis获取参数值的两种方式</h2>
<p>MyBatis<strong>获取参数值</strong>的两种方式：<code>${}</code>和<code>#{}</code> ，此时可以通过<code>#{}</code>和<code>${}</code>以任意的内容获取参数值<br>
<code>${}</code> 的本质就是<code>字符串拼接</code>，<code>#{}</code>的本质就是<code>占位符赋值</code><br>
<code>${}</code>使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，<strong>需要手动加单引号</strong><br>
但是<code>#{}</code>使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，**可以自动添加单引号  **</p>
<h3> 5.1、单个字面量类型的参数</h3>
<p>若mapper接口中的方法参数为单个的字面量类型<br>
此时可以使用<code>${}</code>和<code>#{}</code>以任意的名称获取参数的值，注意<code>${}</code>需要手动加单引号</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.2、多个字面量类型的参数</h3>
<p>若mapper接口中的方法<strong>参数为多个</strong>时，此时MyBatis会自动将这些参数存<strong>放在一个map集合中</strong>，有两种方式存储：<br>
<strong>以arg0,arg1...为键，以参数为值；<br>
以param1,param2...为键，以参数为值；</strong><br>
因此只需要通过<code>${}</code>和<code>#{}</code>访问map集合的键就可以获取相对应的值，注意<code>${}</code>需要手动加单引号</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.3、map集合类型的参数</h3>
<p>若mapper接口中的方法需要的参数为多个时，此时可以<strong>手动创建map集合</strong>，将这些数据放在map中<br>
只需要通过<code>${}</code>和<code>#{}</code>访问map集合的键就可以获取相对应的值，注意<code>${}</code>需要手动加单引号</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.4、实体类类型的参数</h3>
<p>若mapper接口中的方法参数为<strong>实体类对象</strong>时<br>
此时可以使用<code>${}</code>和<code>#{}</code>，通过访问实体类对象中的<strong>属性名获取属性值</strong>，注意${}需要手动加单引号</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.5、使用@Param标识参数</h3>
<p>可以通过@Param注解标识mapper接口中的方法参数。此时，会将这些参数放在map集合中，有两种情况<br>
以**@Param注解的value属性名为键**，以参数为值；<br>
以param1,param2...为键，以参数为值；<br>
只需要通过<code>${}</code>和<code>#{}</code>访问map集合的键就可以获取相对应的值，<br>
注意<code>${}</code>需要手动加单引`号</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、MyBatis的各种查询功能</h2>
<h3> 6.1、查询一个实体类对象</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.2、查询一个list集合</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常TooManyResultsException；<br>
但是若查询的数据只有一条，可以使用实体类或集合作为返回值；</p>
<h3> 6.3、查询单个数据</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.4、查询一条数据为map集合</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.5、查询多条数据为map集合</h3>
<p>若查询的数据有多条时，并且要将每条数据转换为map集合<br>
此时有两种解决方案：</p>
<h4> ①方式一</h4>
<p>将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将<strong>这些map放在一个list集合中</strong>获取</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②方式二</h4>
<p>将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过**@MapKey注解设置map集合的键**，值是每条数据所对应的map集合</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、特殊SQL的执行</h2>
<h3> 7.1、模糊查询</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.2、批量删除</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.3、动态设置表名</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.4、添加功能获取自增的主键</h3>
<p>场景模拟：<br>
t_clazz(clazz_id,clazz_name)<br>
t_student(student_id,student_name,clazz_id)<br>
1、添加班级信息<br>
2、获取新添加的班级的id<br>
3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</p>
<p><strong>useGeneratedKeys:表示当前添加功能使用自增的主键<br>
keyProperty:将添加的数据的自增主键为实体类类型的参数属性赋值</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、自定义映射resultMap</h2>
<p>对于<strong>数据库中的字段名与java中实体类属性名不一致</strong>的情况的解决方法：<br>
①在mapper中的sql语句起别名</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②在mybatis的核心配置文件mybatis-config.xml中设置下划线命名到驼峰命名的自动转换</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③使用resultMap处理字段名和属性名不一致的情况</p>
<h3> 8.1、resultMap处理字段和属性的映射关系</h3>
<p><strong>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</strong></p>
<p>相关标签：</p>
<p>主标签：<br>
<strong>resultMap</strong>:设置自定义的映射关系<br>
<strong>id</strong>：唯一标识<br>
<strong>type</strong>：处理映射关系到的实体类的类型<br>
内部常用标签：<br>
<strong>id</strong>：处理主键和实体类中实现的元素关系<br>
<strong>result</strong>：处理普通字段和实体类中属性的映射关系<br>
<strong>column</strong>:设置映射关系中的字段名，必须是sql查询出的某个字段<br>
<strong>property</strong>:设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8.2、多对一映射处理</h3>
<h4> 8.2.1、级联方式处理映射关系</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8.2.2、使用association处理映射关系</h4>
<p>association:处理多对一的映射关系（处理实体类类型的属性）<br>
<strong>property：设置需要处理映射关系的属性的属性名<br>
javaType：设置要处理的属性的类型</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8.2.3、分步查询</h4>
<p>property：设置需要处理映射关系的属性的属性名<br>
select：设置下一步分步查询的唯一标识<br>
colum：将查询出的某个字段作为下一步分步查询的sql条件</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分步查询的优点：可以实现**延迟加载 **<br>
但是必须在核心配置文件中设置全局配置信息：<br>
lazyLoadingEnabled：全局延迟加载。当开启时，<strong>所有关联对象都会延迟加载</strong><br>
aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。否则，<strong>每个属性会按需加载此时就可以实现按需加载，获取的数据是什么</strong><mark>(false)</mark>，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载， **fetchType="lazy(延迟加载)|eager(立即加载)"  **</p>
<p><strong>mytais-config:</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mapper接口：</p>
<p><strong>fetchType：在开启了延迟加载的环境中，通过该属性设置当前的分步查询是否使用延迟加载<br>
属性值：eager（立即加载）、lazy（延迟加载）</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8.3、一对多映射处理</h3>
<p>处理一对多的映射关系：<br>
1、collection<br>
2、分步查询</p>
<h4> 8.3.1、collection</h4>
<p>collection:处理一对多的映射关系（处理集合类型的属性）<br>
ofType:设置集合类型的属性中存储读数据的类型</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8.3.2、分步查询</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9、动态SQL</h2>
<p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决 拼接SQL语句字符串时的痛点问题。</p>
<h3> 9.1、if  、where、trim</h3>
<p>动态SQL：<br>
1、if：通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到sql中）<br>
2、where：若where标签中有条件成立，会自动生成where关键字。会自动将内容中<strong>前面多余的and去掉，但后面的and无法去掉</strong>。若where标签中没有条件成立，那就不生成where关键字<br>
3、trim：<br>
属性： prefix、suffix：在标签中内容前面或后面添加指定内容<br>
prefixOverrides、suffixOverrides：在标签中内容前面或后面去掉指定内容</p>
<p>方法一：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法三：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.2、choose、when、otherwise</h3>
<p>choose、when、 otherwise相当于if...else if..else<br>
when至少设置一个，otherwise至多设置一个<br>
只要有一个条件成立，下面的条件就都不判断了</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.3、foreach</h3>
<p>foreach：<br>
collection：设置要循环的数组或集合（一般通过java代码中的@Param()注解获取）<br>
item：用一个字符串表示数组或集合中的每一个数据<br>
separator：设置每次循环的数据之间的分隔符<br>
open：循环的所有内容以什么开始<br>
close：循环的所有内容以什么结束</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.4、SQL片段</h3>
<p>sql片段：可以记录一段sql，在需要用的地方<strong>使用include标签进行引用</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 10、MyBatis缓存</h2>
<h3> 10.1、MyBatis的一级缓存</h3>
<p><strong>一级缓存是默认开启的</strong></p>
<p>MyBatis的一级缓存是SqlSession级别的，即通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p>
<p>使一级缓存失效的四种情况：<br>
1、不同的SqlSession对应不同的一级缓存<br>
2、同一个SqlSession但是查询条件不同<br>
3、同一个SqlSession两次查询期间执行了任何一次增删改操作<br>
4、同一个SqlSession两次查询期间手动清空了缓存</p>
<h3> 10.2、MyBatis的二级缓存</h3>
<p>二级缓存是<strong>SqlSessionFactory级别</strong>，通过<strong>同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存</strong>；此后若再次执行相同的查询语句，结果就会从缓存中获取</p>
<p>二级缓存开启的条件：<br>
1、在核心配置文件中，设置全局配置属性cacheEnabled="true"，默认为true，不需要设置<br>
2、在<strong>映射文件中设置标签&lt;cache/&gt;</strong><br>
3、二级缓存必须在<strong>SqlSession关闭或提交之后有效</strong><br>
4、查询的数据所转换的实体类类型<strong>必须实现序列化的接口</strong><br>
使二级缓存失效的情况：<br>
两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
<h3> 10.3、二级缓存的相关配置</h3>
<p>在mapper配置文件中添加的cache标签可以设置一些属性：</p>
<p>①eviction属性：<br>
<strong>缓存回收策略，默认的是 LRU。</strong><br>
LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。<br>
FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。<br>
SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。<br>
WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p>
<p>②flushInterval属性：<br>
刷新间隔，单位毫秒默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p>
<p>③size属性：<br>
引用数目，正整数代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p>
<p>④readOnly属性：只读， true/false<br>
true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。<br>
false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</p>
<h3> 10.4、MyBatis缓存查询的顺序</h3>
<p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。<br>
如果二级缓存没有命中，再查询一级缓存<br>
如果一级缓存也没有命中，则查询数据库<br>
SqlSession关闭之后，一级缓存中的数据会写入二级缓存</p>
<h3> 10.5、整合第三方缓存EHCache</h3>
<p><strong>第三方缓存针对二级缓存</strong></p>
<h4> 10.5.1、添加依赖</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 10.5.2、各jar包功能</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230103154950209.png" alt="image-20230103154950209" loading="lazy"></p>
<h4> 10.5.3、创建EHCache的配置文件ehcache.xml</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 10.5.4、设置二级缓存的类型</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 10.5.5、加入logback日志</h4>
<p>存在SLF4J时，作为简易日志的log4j将失效，此时我们<strong>需要借助SLF4J的具体实现logback来打印日志</strong>。 创建logback的配置文件**logback.xml  **</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 10.5.6、EHCache配置文件说明</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230103155446316.png" alt="image-20230103155446316" loading="lazy"></p>
<h2> 11、MyBatis的逆向工程</h2>
<p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。 Hibernate是支持正向工程的。</p>
<p>逆向工程：<strong>先创建数据库表</strong>，由框架负责根据数据库表，<strong>反向生成</strong>如下资源：<br>
**Java实体类、Mapper接口、Mapper映射文件 **</p>
<h3> 11.1、创建逆向工程的步骤</h3>
<h4> ①添加依赖和插件</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②创建MyBatis的核心配置文件</h4>
<h4> ③创建逆向工程的配置文件</h4>
<p>**文件名必须是：generatorConfig.xml  **</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ④执行MBG插件的generate目标</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230103165027389.png" alt="image-20230103165027388" loading="lazy"></p>
<h3> 11.2、QBC查询</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 12、分页插件</h2>
<p>分页思想：<br>
limit index,pageSize<br>
pageSize：每页显示的条数  、pageNum：当前页的页码<br>
index：当前页的起始索引，index=(pageNum-1)*pageSize<br>
count：总记录数  、 totalPage：总页数<br>
totalPage = count / pageSize;<br>
<code>if(count % pageSize != 0){totalPage += 1;}</code></p>
<p>pageSize=4，pageNum=1，index=0 limit 0,4<br>
pageSize=4，pageNum=3，index=8 limit 8,4<br>
pageSize=4，pageNum=6，index=20 limit 8,4</p>
<p>效果：首页 上一页 2 3 4 5 6 下一页 末页</p>
<h3> 12.1、分页插件的使用步骤</h3>
<h4> ①添加依赖</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②配置分页插件</h4>
<p>在MyBatis的核心配置文件中配置插件</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12.2、分页插件的使用</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、查询功能之前使用**PageHelper.startPage(int pageNum, int pageSize)开启分页功能 **<br>
pageNum：当前页的页码<br>
pageSize：每页显示的条数</p>
<p>2、在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据<br>
list：分页之后的数据<br>
navigatePages：导航分页的页码数</p>
<p>3、分页相关数据<br>
pageNum：当前页的页码<br>
pageSize：每页显示的条数<br>
size：当前页显示的真实条数<br>
total：总记录数<br>
pages：总页数<br>
prePage：上一页的页码<br>
nextPage：下一页的页码<br>
isFirstPage/isLastPage：是否为第一页/最后一页<br>
hasPreviousPage/hasNextPage：是否存在上一页/下一页<br>
navigatePages：导航分页的页码数<br>
navigatepageNums：导航分页的页码，[1,2,3,4,5]</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221226160430380.png" type="image/png"/>
    </item>
    <item>
      <title>MybatisPlus 基础</title>
      <link>https://T4mako.github.io/code/java/MybatisPlus.html</link>
      <guid>https://T4mako.github.io/code/java/MybatisPlus.html</guid>
      <source url="https://T4mako.github.io/rss.xml">MybatisPlus 基础</source>
      <description>1、MybatisPlus简介 MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> 1、MybatisPlus简介</h2>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<!-- more -->
<p>特性：<br>
无侵入、损耗小<br>
强大的 CRUD 操作：<strong>内置通用 Mapper、通用 Service</strong>，仅仅通过少量配置即可实现单表大部分CRUD 操作，更有强大的条件构造器，满足各类使用需求<br>
<strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错<br>
<strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题<br>
支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作<br>
支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）<br>
内置代码生成器：采用代码或者 Maven 插件可<strong>快速生成 Mapper 、 Model 、 Service 、Controller 层代码</strong>，支持模板引擎，更有超多自定义配置等您来使用<br>
<strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询<br>
分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库<br>
内置性能分析插件：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询<br>
内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</p>
<p>支持数据库：<br>
MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，<br>
ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb<br>
达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据<br>
库，瀚高数据库</p>
<p>框架结构：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230227202859252.png" alt="image-20230227202859252" loading="lazy"></p>
<p>代码文档地址：<br>
<em><strong>官方地址: <a href="http://mp.baomidou.com" target="_blank" rel="noopener noreferrer">http://mp.baomidou.com</a></strong></em><br>
代码发布地址:<br>
Github: <a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener noreferrer">https://github.com/baomidou/mybatis-plus</a><br>
Gitee: <a href="https://gitee.com/baomidou/mybatis-plus" target="_blank" rel="noopener noreferrer">https://gitee.com/baomidou/mybatis-plus</a><br>
文档发布地址: <a href="https://baomidou.com/pages/24112f" target="_blank" rel="noopener noreferrer">https://baomidou.com/pages/24112f</a></p>
<h2> 2、入门案例</h2>
<h3> 1、创建、配置springboot工程</h3>
<p>加入依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置数据源：</p>
<div class="language-YAML line-numbers-mode" data-ext="YAML"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、创建实体类</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>@Data</strong></em>注解：导入lombok依赖，在实体类上添加@Data注解，直接生成对应的get，set，有参，无参，equals，hashcode方法</p>
<h3> 3、创建mapper</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>BaseMapper是MyBatis-Plus提供的模板mapper，其中**包含了基本的CRUD方法，泛型为操作的实体类型 **</p>
<h3> 4、测试</h3>
<p>创建测试类<br>
<strong>Wrapper</strong>：条件构造器，当查询时有条件可以创建Wrapper对象，如果没有就设置null为参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加日志：<br>
在application.yml中配置日志输出</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、基本CRUD</h2>
<h3> 1、BaseDAO</h3>
<p>mapper接口继承了BaseDAO，查看BaseDAO的源码（下载源码）<br>
MyBatis-Plus中的基本CRUD在内置的BaseMapper中都已得到了实现，我们可以直接使用</p>
<h3> 2、插入</h3>
<p>mapper.insert(对象)</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、删除</h3>
<p>mapper.deleteById(id)	根据id删除<br>
mapper.deleteByMap(map)	根据map中对应的条件删除<br>
mapper.deleteBatchIds(list)	根据list中所有的id删除</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、更新</h3>
<p>mapper.updateById(对象)	根据对象的id更新数据，null值不做修改</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、查找</h3>
<p>mapper.selectById(id)	根据id查询用户信息<br>
mapper.selectBatchIds(list)	根据list中的值查询用户信息<br>
mapper.selectByMap(map)	根据map中的条件查询用户信息<br>
mapper.selectList(null)	根据wrapper查询用户信息，如果为null表示所有的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义功能：<br>
在mapper接口中新建抽象方法，在resources文件夹下新建mapper文件夹，创建映射文件XXXMapper.xml，编写sql语句</p>
<h3> 6、通用Service</h3>
<p>MyBatis-Plus中有一个接口<strong>IService</strong>和其实现类<strong>ServiceImpl</strong>，封装了常见的业务层逻辑。详情查看源码IService和ServiceImpl</p>
<p>通用 Service CRUD 封装<strong>IService</strong>接口，进一步封装 CRUD 采用 <strong>get 查询单行</strong> <strong>remove 删<br>
除</strong> <strong>list 查询集合</strong> <strong>page 分页</strong> 前缀命名方式<strong>区分 Mapper 层避免混淆</strong>（方法名与mapper调用的方法名不同）<br>
泛型 T 为任意实体对象<br>
建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承Mybatis-Plus 提供的基类</p>
<p>举例：<br>
创建<strong>UserService接口继承IService</strong>接口，IServie泛型填写对应<strong>实体类</strong><br>
编写UserService接口的实现类<strong>UserServiceImpl继承ServiceImpl实现UserService接口</strong><br>
ServiceImpl泛型编写<strong>mapper和对应的实体类</strong><br>
由于ServiceImpl实现了IService接口，因此UserServiceImpl不需要实现IService的方法<br>
在UserServiceImol上添加**@Service注解**</p>
<p>代码示例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、常用注解</h2>
<h3> 1、@TableName</h3>
<p>由此得出结论，MyBatis-Plus在<strong>确定操作的表</strong>时，由<strong>BaseMapper的泛型决定</strong>，即实体类型决定，且**默认操作的表名和实体类型的类名一致 **</p>
<p>如果实体类类名与表名不一致，可以在<strong>实体类</strong>上标注**@TableName("")**注解，标识实体类对应的表</p>
<p>如果所有表名都含有相同的前缀，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、@TableId</h3>
<p>MyBatis-Plus在实现CRUD时，会<strong>默认将id作为主键列</strong>，并在插入数据时，默认基于雪花算法的策略生成id</p>
<p>如果表的主键字段名不为id，crud会出现错误</p>
<p>因此可以在<strong>实体类中uid属性上</strong>通过**@TableId将其标识为主键**，即可成功执行SQL语句</p>
<h4> @TableId的value属性</h4>
<p>若实体类中<strong>主键</strong>对应的属性为<strong>id</strong>，而<strong>表中</strong>表示主键的字段为<strong>uid</strong>，此时若只在<strong>属性id上添加注解@TableId</strong>，则抛出异常Unknown column 'id' in 'field list'，即MyBatis-Plus仍然会将id作为表的主键操作，而表中<strong>表示主键的是字段uid</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @TableId的type属性</h4>
<p>type属性用来定义主键策略</p>
<p>常用的主键策略：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>IdType.ASSIGN_ID（默 认）</td>
<td>基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td>
</tr>
<tr>
<td>IdType.AUTO</td>
<td>使用数据库的自增策略，注意，该类型请确保数据库设置了id自增， 否则无效</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置全局主键策略：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>雪花算法：</strong></p>
<p>背景：需要选择合适的方案去应对数据规模的增长，以应对逐渐增长的访问压力和数据量。数据库的扩展方式主要包括：<strong>业务分库、主从复制，数据库分表</strong>。</p>
<p>数据库分表：<br>
将不同业务数据分散存储到不同的数据库服务器，能够支撑百万甚至千万用户规模的业务，但如果业务继续发展，同一业务的单表数据也会达到单台数据库服务器的处理瓶颈。例如，淘宝的几亿用户数据，如果全部存放在一台数据库服务器的一张表中，肯定是无法满足性能要求的，此时就需要对单表数据进行拆分。</p>
<p>单表数据拆分有两种方式：垂直分表和水平分表。</p>
<p><strong>垂直分表</strong>：垂直分表适合将表中某些不常用且占了大量空间的列拆分出去。</p>
<p><strong>水平分表</strong>：水平分表适合表行数特别大的表，有的公司要求单表行数超过 5000 万就必须进行分表，这个数字可以作为参考，但并不是绝对标准，关键还是要看表的访问性能。对于一些比较复杂的表，可能超过 1000万就要分表了；而对于一些简单的表，即使存储数据超过 1 亿行，也可以不分表。但不管怎样，当看到表的数据量达到千万级别时，作为架构师就要警觉起来，因为这很可能是架构的性能瓶颈或者隐患。<br>
水平分表相比垂直分表，会引入更多的复杂性，例如要求全局唯一的数据id该如何处理  ：</p>
<p>①主键自增<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230228201035.png" alt="" loading="lazy"></p>
<p>②取模<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230228201101.png" alt="" loading="lazy"></p>
<p>③雪花算法<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230228201144.png" alt="" loading="lazy"></p>
<p>雪花算法是由Twitter公布的分布式主键生成算法，它能够保证不同表的主键的不重复性，以及相同表的主键的有序性。</p>
<p>1、核心思想：<br>
长度共64bit（一个long型）。<br>
首先是一个符号位，1bit标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0。41bit时间截(毫秒级)，存储的是时间截的差值（当前时间截 - 开始时间截)，结果约等于69.73年。<br>
10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID，可以部署在1024个节点）。<br>
12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID）。</p>
<p>2、优点：整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞，并且效率较高。</p>
<h3> 3、@TableField</h3>
<p>**MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格  **，所以无需手动开启驼峰转换</p>
<p>若实体类中的属性和表中的字段不同且也不是下划线、驼峰风格，此时需要在实体类属性上使用**@TableField("")**设置属性所对应的字段名</p>
<p>例如实体类属性name，表中字段username :</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、@TableLogic</h3>
<p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据<br>
逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录<br>
使用场景：可以进行数据恢复</p>
<h4> 实现逻辑删除:</h4>
<p>①数据库中创建逻辑删除状态列，设置默认值为0<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230228203636.png" alt="" loading="lazy"></p>
<p>②实体类中添加逻辑删除属性<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230228203654.png" alt="" loading="lazy"></p>
<p>③测试<br>
测试删除功能，真正执行的是修改<br>
UPDATE t_user SET is_deleted=1 WHERE id=? AND is_deleted=0<br>
测试查询功能，被逻辑删除的数据默认不会被查询<br>
SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0</p>
<h2> 5、条件构造器和常用接口</h2>
<h3> 1、Wrapper介绍</h3>
<p><strong>wrapper可以链式添加规则</strong></p>
<p>Wrapper ： 条件构造抽象类，最顶端父类<br>
AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<br>
<em><strong>QueryWrapper ： 查询条件封装</strong></em><br>
<strong>UpdateWrapper ： Update 条件封装</strong><br>
AbstractLambdaWrapper ： 使用Lambda 语法<br>
LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper<br>
LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230301143137.png" alt="" loading="lazy"></p>
<p>创建新的Wrapper对象，泛型为对应的实体类，给Wrapper添加条件，通过自动注入的mapper对象调用方法，执行wrapper条件</p>
<h3> 2、QueryWrapper</h3>
<p><strong>创建测试类，注入userMapper</strong></p>
<h4> ①组装查询条件：</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②组装排序条件</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ③组装删除条件</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ④条件的优先级</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ⑤组装select字句</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ⑥实现子查询</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、UpdateWrapper</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、组装条件</h3>
<p>在真正开发的过程中，<strong>组装条件是常见的功能</strong>，而这些条件数据来<strong>源于用户输入</strong>，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择<strong>则需要组装该条件</strong>，若没有选择则一定不能组装，以免影响SQL执行的结果</p>
<p>思路一：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路二：</p>
<p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、LambdaQueryWrapper</h3>
<p><strong>使用实体类的方法引用，避免写错实体类的字段名</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、LambdaUpdateWrapper</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、插件</h2>
<h3> 1、分页插件</h3>
<p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p>
<h4> 1、添加配置类</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、测试</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>page对象可以获取当前页码，是否有上一页，下一页，总页数等数据</strong></p>
<h3> 2、xml自定义分页</h3>
<h4> 1、UserMapper中定义接口方法</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、UserMapper.xml中编写SQL</h4>
<p>可以再yaml文件中配置类型别名，在maper中编写resultType无需从com开始编写：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、乐观锁</h3>
<h4> 1、乐观锁实现流程 ：</h4>
<p>​	数据库中添加<strong>version字段</strong><br>
​	取出记录时，获取当前version<br>
​	更新时，version + 1，如果where语句中的version版本不对，则更新失败</p>
<h4> 2、Mybatis-Plus实现乐观锁</h4>
<p>①修改实体类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加mapper</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>②添加乐观锁插件配置</p>
<p>在mybatisPlus配置文件中添加乐观锁配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试修改冲突</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、通用枚举</h2>
<p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p>
<p>数据库表添加字段sex</p>
<p>①创建通用枚举类型：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置扫描通用枚举（可以省略）</p>
<p>②测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、代码生成器</h2>
<p><strong>比逆向工程更加强大，自动生成controller，entitu，mapper，service</strong></p>
<h3> 1、引入依赖</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、快速生成</h3>
<p>举例：</p>
<p>将生成的controller，entitu，mapper，service，mapper文件与java类放到指定的目录下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9、多数据源</h2>
<p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p>
<p>场景说明：<br>
我们创建两个库，分别为：mybatis_plus（以前的库不动）与mybatis_plus_1（新建），将mybatis_plus库的product表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p>
<p>创建新的数据库和新的工程</p>
<h3> 1、引入依赖</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、配置多数据源</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、创建用户service</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、创建商品service</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、都能顺利获取对象，则测试成功<br>
2、如果我们实现读写分离，将写操作方法加上主库数据源，读操作方法加上从库数据源，自动切<br>
换，是不是就能实现读写分离？</p>
<h2> 10、MyBatisX插件</h2>
<p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率<br>
但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件<br>
MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。</p>
<p>MyBatisX插件用法：<a href="https://baomidou.com/pages/ba5b24/" target="_blank" rel="noopener noreferrer">https://baomidou.com/pages/ba5b24/</a></p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230227202859252.png" type="image/png"/>
    </item>
    <item>
      <title>RabbitMQ 基础</title>
      <link>https://T4mako.github.io/code/java/RabbitMQ.html</link>
      <guid>https://T4mako.github.io/code/java/RabbitMQ.html</guid>
      <source url="https://T4mako.github.io/rss.xml">RabbitMQ 基础</source>
      <description>RabbitMQ 1.初识MQ 1.1、同步和异步通讯 微服务间通讯有同步和异步两种方式： 同步通讯：就像打电话，需要实时响应。 异步通讯：就像发邮件，不需要马上回复。</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> RabbitMQ</h2>
<h2> 1.初识MQ</h2>
<h3> 1.1、同步和异步通讯</h3>
<p>微服务间通讯有同步和异步两种方式：<br>
<strong>同步通讯</strong>：就像打电话，需要实时响应。<br>
<strong>异步通讯</strong>：就像发邮件，不需要马上回复。</p>
<!-- more -->
<p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p>
<h4> 1.1.1、同步通讯</h4>
<p>同步调用的优点：<br>
时效性较强，可以立即得到结果</p>
<p>同步调用的问题：<br>
耦合度高<br>
性能和吞吐能力下降<br>
有额外的资源消耗<br>
有级联失败问题</p>
<h4> 1.1.2、异步通讯</h4>
<p>异步调用常见实现就是<strong>时间驱动模式</strong></p>
<p>异步调用则可以避免上述问题</p>
<p>在事件模式中，支付服务是<strong>事件发布者</strong>（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。<br>
订单服务和物流服务是<strong>事件订阅者</strong>（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210422095356088.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230327150410.png" alt="" loading="lazy"></p>
<p>解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个<strong>中间人（Broker）</strong>。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p>
<p>好处：</p>
<ul>
<li>
<p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p>
</li>
<li>
<p>故障隔离：服务没有直接调用，不存在级联失败问题</p>
</li>
<li>
<p>调用间没有阻塞，不会造成无效的资源占用</p>
</li>
<li>
<p>耦合度极低，每个服务都可以灵活插拔，可替换</p>
</li>
<li>
<p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>架构复杂了，业务没有明显的流程线，不好管理</li>
<li>需要依赖于Broker的可靠、安全、性能</li>
</ul>
<h3> 1.2、技术对比</h3>
<p><strong>MQ</strong>，中文是<strong>消息队列（MessageQueue）</strong>，字面来看就是<strong>存放消息的队列</strong>。也就是<strong>事件驱动架构中的Broker</strong>。</p>
<p>比较常见的MQ实现：<br>
ActiveMQ、RabbitMQ、RocketMQ、Kafka</p>
<p>几种常见MQ的对比：</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>RabbitMQ</strong></th>
<th><strong>ActiveMQ</strong></th>
<th><strong>RocketMQ</strong></th>
<th><strong>Kafka</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>公司/社区</td>
<td>Rabbit</td>
<td>Apache</td>
<td>阿里</td>
<td>Apache</td>
</tr>
<tr>
<td>开发语言</td>
<td>Erlang</td>
<td>Java</td>
<td>Java</td>
<td>Scala&amp;Java</td>
</tr>
<tr>
<td>协议支持</td>
<td>AMQP，XMPP，SMTP，STOMP</td>
<td>OpenWire,STOMP，REST,XMPP,AMQP</td>
<td>自定义协议</td>
<td>自定义协议</td>
</tr>
<tr>
<td>可用性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>单机吞吐量</td>
<td>一般</td>
<td>差</td>
<td>高</td>
<td>非常高</td>
</tr>
<tr>
<td>消息延迟</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>毫秒级</td>
<td>毫秒以内</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>一般</td>
</tr>
</tbody>
</table>
<h2> 2、RabbitMQ入门</h2>
<h3> 2.1、安装RabbitMQ</h3>
<h4> 2.1.1、单机部署</h4>
<p>在Centos7虚拟机中使用Docker来安装。</p>
<h5> 1）下载镜像</h5>
<p>方式一：在线拉取</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：从本地加载</p>
<p>在课前资料已经提供了镜像包，上传到虚拟机（/tmp）后，使用命令加载镜像即可</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5> 2）安装MQ</h5>
<p>运行MQ容器：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器输入http://192.168.80.130:15672进行访问图形界面</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230327170357.png" alt="" loading="lazy"></p>
<p>RabbitMQ中的几个概念：<br>
channel：操作MQ的工具<br>
exchenge：路由消息到队列<br>
queue：缓存消息<br>
virtual host：虚拟主机，对queue、exchange等资源的逻辑分组（不同的路径代表不同用户）</p>
<p>MQ的基本结构：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230327170223.png" alt="" loading="lazy"></p>
<h4> 2.1.2、集群部署</h4>
<h5> 1）集群分类</h5>
<p>在RabbitMQ的官方文档中，讲述了两种集群的配置方式：</p>
<ul>
<li>普通模式：普通模式集群不进行数据同步，每个MQ都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有2个MQ：mq1，和mq2，如果你的消息在mq1，而你连接到了mq2，那么mq2会去mq1拉取消息，然后返回给你。如果mq1宕机，消息就会丢失。</li>
<li>镜像模式：与普通模式不同，队列会在各个mq的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li>
</ul>
<h5> 2）设置网络</h5>
<p>首先，我们需要让3台MQ互相知道对方的存在。</p>
<p>分别在3台机器中，设置 /etc/hosts文件，添加如下内容：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在每台机器上测试，是否可以ping通对方</p>
<h3> 2.2、RabbitMQ消息模型</h3>
<p><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener noreferrer">RabbitMQ</a>官方提供了5个不同的Demo示例，对应了不同的用法：</p>
<p>没有交换机：<br>
基本消息队列（BasicQueue）<br>
工作消息队列（WorkQueue）</p>
<p>发布订阅（Publish、Subscribe），又根据交换机类型不同分为三种（有交换机）：<br>
Fanout Exchange：广播<br>
Direct Exchange：路由<br>
Topic Exchange：主题</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230327172104202.png" alt="image-20230327172104202" loading="lazy"></p>
<h3> 2.3、HelloWorld案例</h3>
<p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：<br>
publisher：消息发布者，将消息发送到queue<br>
queue：消息队列，负责接受并缓存消息<br>
consumer：订阅列表，处理队列中的消息</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230327172429.png" alt="" loading="lazy"></p>
<p>导入Demo工程：<br>
将资料中的mq-demo导入idea，导入后的结构如下：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230327192106.png" alt="" loading="lazy"></p>
<p>包括三部分：<br>
mq-demo：父工程，管理项目依赖<br>
publisher：消息的发送者<br>
consumer：消息的消费者</p>
<p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：<br>
publisher：消息发布者，将消息发送到队列queue<br>
queue：消息队列，负责接受并缓存消息<br>
consumer：订阅队列，处理队列中的消息</p>
<h3> 2.4、publisher实现</h3>
<p>代码思路：建立连接、创建Channel、声明队列、发送消息、关闭连接和channel</p>
<p>代码实现：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.5、consumer实现</h3>
<p>代码思路：建立连接、创建Channel、声明队列、订阅消息</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.6、总结</h3>
<p>基本消息队列的消息发送流程：</p>
<ol>
<li>
<p>建立connection</p>
</li>
<li>
<p>创建channel</p>
</li>
<li>
<p>利用channel声明队列</p>
</li>
<li>
<p>利用channel向队列发送消息</p>
</li>
</ol>
<p>基本消息队列的消息接收流程：</p>
<ol>
<li>
<p>建立connection</p>
</li>
<li>
<p>创建channel</p>
</li>
<li>
<p>利用channel声明队列</p>
</li>
<li>
<p>定义consumer的消费行为handleDelivery()</p>
</li>
<li>
<p>利用channel将消费者与队列绑定</p>
</li>
</ol>
<h2> 3、SpringAMQP</h2>
<p>AMQP（Advanced Message Queuing Protocol）高级消息队列协议，是用于在应用程序之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求。</p>
<p><a href="https://spring.io/projects/spring-amqp" target="_blank" rel="noopener noreferrer">SpringAMQP</a>是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p>
<p>SpringAMQP提供了三个功能：</p>
<ul>
<li>自动声明队列、交换机及其绑定关系</li>
<li>基于注解的监听器模式，异步接收消息</li>
<li>封装了RabbitTemplate工具，用于发送消息</li>
</ul>
<h3> 3.1、Basic Queue</h3>
<p>利用SpringAMQP实现HelloWorld中的基本消息队列功能</p>
<p>流程如下：<br>
1、在父工程中引入spring-amqp的依赖<br>
2、在publisher服务中利用RabbitTemplate发送消息到simple.queue这个队列<br>
3、在consumer服务中编写消费逻辑，绑定simple.queue这个队列</p>
<h4> 3.1.1、引入依赖</h4>
<p>在父工程mq-demo中引入依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.1.2、消息发送</h4>
<p>首先配置MQ地址，在<strong>publisher</strong>服务的<strong>application.yml</strong>中添加配置：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.1.2、消息接收</h4>
<p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener类，代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.2、Work Queue</h3>
<p><strong>Work queues</strong>，也被称为（Task queues），<strong>任务模型</strong>。单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230328143733.png" alt="" loading="lazy"></p>
<p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。<br>
此时就可以使用work 模型，<strong>多个消费者共同处理消息</strong>处理，<strong>速度</strong>就能大大<strong>提高</strong>了。</p>
<h4> 3.2.1、消息发送</h4>
<p>循环发送，模拟大量消息堆积<br>
在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.2.2、消息接收</h4>
<p>模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.2.4、能者多劳</h4>
<p>启动ConsumerApplication后，可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。<br>
也就是说消息是平均分配给每个消费者，并<strong>没有考虑到消费者的处理能力</strong>。这样显然是有问题的。</p>
<p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 总结</h4>
<p>Work模型的使用：<br>
<strong>多个消费者绑定到一个队列</strong>，同一条消息只会被一个消费者处理<br>
通过<strong>设置prefetch</strong>来控制消费者预取的消息数量</p>
<h3> 3.3、发布/订阅</h3>
<p>发布订阅模式与之前案例的区别：允许将一个消息发送给多个消费者。实现方式加入了exchange（交换机）</p>
<p>发布订阅的模型如图：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230328182402.png" alt="" loading="lazy"></p>
<p>常见的exchange包括：<br>
Fanout 广播： 将消息交给所有绑定到交换机的队列<br>
Direct 定向： 把消息交给符合指定routing key 的队列<br>
Topic 通配符： 把消息交给符合routing pattern（路由模式） 的队列</p>
<p><strong>不同类型的交换机，路由方式不同</strong></p>
<blockquote>
<p><strong>注意：exchange负责消息路由，而部署存储，路由失败则消息失败</strong></p>
</blockquote>
<h3> 3.4、Fanout Exchange</h3>
<p>Fanout Exchange会将接收到的消息<strong>路由到每一个跟其绑定的queue</strong></p>
<p>利用SpringAMQP演示FanoutExchange的使用：<br>
实现思路如下：<br>
1、consumer服务中，利用代码声明队列，并将队列与交换机绑定<br>
2、consumer服务中，编写两个消费者方法，分析监听fanout.queue1和fanout.queue2两个队列<br>
3、在publisher中编写测试方法，向itcast.fanout发送消息</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230328183449340.png" alt="image-20230328183449340" loading="lazy"></p>
<h4> 3.4.1、声明队列和交换机</h4>
<p>在consumer服务声明Exchange、Queue、Binding</p>
<p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230328183548.png" alt="" loading="lazy"></p>
<p>在consumer服务中创建一个类，添加@configuration注解，并声明FanoutExchange、Queue和绑定关系队形Binding</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.4.2、消息发送</h4>
<p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.4.3、消息接收</h4>
<p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.4.4、总结</h4>
<p>交换机的作用：<br>
接收publisher发送的消息<br>
将消息按照规则路由到与之绑定的队列<br>
不能缓存消息，路由失败，消息丢失<br>
FanoutExchange的会将消息路由到每个绑定的队列</p>
<p>声明队列、交换机、绑定关系的Bean是什么？<br>
Queue<br>
FanoutExchange<br>
Binding</p>
<h3> 3.5、Direct Exchange</h3>
<p>Direct Exchange会将接收到的消息根据规则<strong>路由到指定的Queue</strong>，因此称为路由模式（routes）</p>
<p>每一个Queue都与Exchange设置一个BindingKey<br>
发布者发送消息时，指定消息的RoutingKey<br>
Exchange将消息路由到BIndkey与消息RoutingKey一致的队列</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230328194337.png" alt="" loading="lazy"></p>
<p>案例：</p>
<ol>
<li>利用@RabbitListener声明Exchange、Queue、RoutingKey</li>
<li>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</li>
<li>在publisher中编写测试方法，向itcast. direct发送消息</li>
</ol>
<p>实现思路如下：<br>
1、利用@RabbitListener声明Exchange、Queue、RoutingKey<br>
2、在consumer服务中，编写两个测试方法，向itcast.direct发送消息<br>
3、在publisher中编写测试方法，向itcast.direct发送消息</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230328194553.png" alt="" loading="lazy"></p>
<h4> 3.5.1、基于注解声明队列和交换机</h4>
<p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了<strong>基于注解方式声明</strong>。</p>
<p>在consumer的SpringRabbitListener中<strong>添加两个消费者</strong>，<strong>同时</strong>基于注解来<strong>声明队列和交换机</strong>：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.5.2、消息发送</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.6、Topic Exchange</h3>
<p>Topic Exchange与DirectExchange类似，区别在于<strong>routingKey</strong>必须是<strong>多个单词列表</strong>，并且以  <strong>.</strong>   分割，例如： <code>item.insert</code></p>
<p>Queue与Exchange指定BindingKey时可以使用<strong>通配符</strong>：<br>
#：代指0个或多个单词<br>
*：代指一个单词</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230328200530.png" alt="" loading="lazy"></p>
<p>案例需求：</p>
<p>实现思路如下：<br>
1、利用@RabbitListener声明Exchange、Queue、RoutingKey<br>
2、在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2<br>
3、在publisher中编写测试方法，向itcast. topic发送消息</p>
<h4> 3.6.2、消息发送</h4>
<p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.6.3、消息接收</h4>
<p>在consumer服务的SpringRabbitListener中添加方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.7、消息转换器</h3>
<p>Spring会把<strong>发送的消息序列化为字节</strong>发送给MQ，<strong>接收</strong>消息的时候，还会<strong>把字节反序列化为Java对象</strong>。</p>
<p>默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p>
<ul>
<li><strong>数据体积过大</strong></li>
<li><strong>有安全漏洞</strong></li>
<li><strong>可读性差</strong></li>
</ul>
<h4> 3.7.1、测试默认转换器</h4>
<p>修改消息发送的代码，发送一个Map对象：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息后查看控制台：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230328201619.png" alt="" loading="lazy"></p>
<h4> 3.7.2、配置JSON转换器</h4>
<p>DK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此<strong>可以使用JSON方式来做序列化和反序列化</strong>。</p>
<p>在publisher和consumer两个服务中都引入依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置消息转换器：</strong><br>
在<strong>启动类</strong>中添加一个Bean即可：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210422095356088.png" type="image/png"/>
    </item>
    <item>
      <title>SpringBoot 基础</title>
      <link>https://T4mako.github.io/code/java/SpringBoot.html</link>
      <guid>https://T4mako.github.io/code/java/SpringBoot.html</guid>
      <source url="https://T4mako.github.io/rss.xml">SpringBoot 基础</source>
      <description>1、Spring与SpringBoot Spring的生态：web开发、数据访问、安全控制、分布式、消息服务、移动开发、批处理、...... Spring5重大升级：响应式编程、响应式编程</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> 1、Spring与SpringBoot</h2>
<p>Spring的生态：web开发、数据访问、安全控制、分布式、消息服务、移动开发、批处理、......<br>
Spring5重大升级：响应式编程、响应式编程</p>
<!-- more -->
<p>SpringBoot优点：创建独立Spring应用、内嵌web服务器、自动starter依赖，简化构建配置、自动配置Spring以及第三方功能、提供生产级别的监控、健康检查及外部化配置、无代码生成、无需编写XML<br>
SpringBoot缺点：称版本帝，迭代快，需要时刻关注变化、封装太深，内部原理复杂，不容易精通</p>
<p>时代背景：<br>
<strong>微服务：</strong><br>
微服务是一种架构风格<br>
一个应用拆分为一组小型服务<br>
每个服务运行在自己的进程内，也就是可独立部署和升级<br>
服务之间使用轻量级HTTP交互<br>
服务围绕业务功能拆分<br>
可以由全自动部署机制独立部署<br>
去中心化，服务自治。服务可以使用不同的语言、不同的存储技术<br>
**分布式	**<br>
<strong>云原生</strong></p>
<p><strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/documentation.html#documentation" target="_blank" rel="noopener noreferrer">springboot的官方文档</a></strong></p>
<h2> 2、SpringBoot2入门</h2>
<h3> 1、创建maven工程引入依赖</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、创建主程序</h3>
<div class="language-JAVA line-numbers-mode" data-ext="JAVA"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、编写业务</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、测试</h3>
<p><strong>直接运行main方法</strong></p>
<h3> 5、简化配置</h3>
<p>在 resources 中创建 <strong>application.properties</strong></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 6、简化部署</h3>
<p>如果添加插件启动时报错，可以尝试在<code>&lt;plugin&gt;</code>标签内部添加设置版本号的version标签，版本号要与Spring版本号一致</p>
<p>在pom.xml中添加：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把项目打成 <strong>jar 包</strong>，直接在目标服务器执行即可。</p>
<p>注意点：<br>
有的时候cmd命令启动不了springboot项目，可能是因为在属性中开启了【快速编辑模式】，取消方法：右击cmd控制台的窗口上方标题区域打开【选项】取消勾选【快去编辑模式】</p>
<h2> 3、了解自动配置原理</h2>
<h3> 1、SpringBoot特点</h3>
<h4> 1、依赖管理</h4>
<h5> ① 父项目做依赖管理</h5>
<p><strong>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以修改默认版本号</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ②starter场景启动器</h5>
<p>1、<strong>spring-boot-starter-*</strong> ： *就某种场景（<strong>官方starter</strong>）<br>
2、只要引入 <strong>starter</strong>，这个场景的所有常规需要的 <strong>依赖</strong> 都 <strong>自动引入</strong><br>
3、SpringBoot所有支持的场景<br>
<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a><br>
4、见到的 <strong>*-spring-boot-starter</strong>： <strong>第三方starter</strong>为我们提供的简化开发的场景启动器。<br>
5、所有 <strong>场景启动器</strong> <strong>最底层的依赖</strong>:</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：无需关注版本号，自动版本仲裁:<br>
1、引入依赖默认都可以不写版本<br>
2、引入非版本仲裁的jar，要写版本号。</p>
<h4> 2、自动配置</h4>
<h5> 1、自动配好Tomcat</h5>
<p>​	引入Tomcat依赖<br>
​	配置Tomcat</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、自动配好SpringMVC</h5>
<p>​	引入 SpringMVC 全套组件<br>
​	自动配好 SpringMVC 常用组件（功能）</p>
<h5> 3、自动配好Web常见功能，如：字符编码问题</h5>
<p>​	SpringBoot 帮我们配置好了所有 web 开发的常见场景<br>
​		<em>字符过滤器</em> 等</p>
<h5> 4、默认的包扫描</h5>
<p>**主程序所在包 **及其下面的所有 <strong>子包</strong> 里面的组件都会被默认扫描进来<br>
<strong>无需以前的包扫描配置</strong></p>
<p><em>想要改变扫描路径</em>，在 MainApplication上添加<br>
<strong>@SpringBootApplication(scanBasePackages="com.t4mako")</strong> 或者 <strong>@ComponentScan指定扫描路径</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 5、各种配置拥有默认值</h5>
<p>默认配置最终都是映射到某个类上，（MultipartProperties类）<br>
配置文件的值（<strong>application.properties</strong>）最终会 <strong>绑定每个类上</strong>，这个类会在容器中创建对象</p>
<h5> 6、按需加载所有自动配置项</h5>
<p>非常多的 starter<br>
<strong>引入了哪些场景</strong> 这个场景的 <strong>自动配置才会被开启</strong><br>
SpringBoot 的 <strong>所有自动配置功能</strong> 都在 <strong>spring-boot-autoconfigur包</strong> 里面（不一定都生效）</p>
<h3> 2、容器功能(关键注解-重要)</h3>
<p><mark>spring boot 项目默认会扫描主类同级的包</mark></p>
<h4> 1、组件相关</h4>
<h5> 1、@Configuration</h5>
<p><strong>@Configuration <strong>==告诉SpringBoot这是一个</strong>配置类 == 配置文件（创建bean）</strong>==<br>
<strong>在类上添加 Configration 类似于 Spring 中的 beans.xml</strong><br>
<strong>标注了@Configuration 注解的类本身也是一个组件</strong></p>
<p>参数 proxyBeanMethods：<br>
<strong>true(默认)：单实例<br>
false：（类、方法）被调用时返回是新创建的</strong></p>
<p>在类<strong>方法</strong>中添加**@Bean**注解：<br>
<mark>Id = 方法名，容器中的实例 = 返回的值</mark></p>
<p><strong>Full(true)模式</strong> 与 <strong>Lite(false)模式</strong>：<br>
**配置类 **组件之间 <strong>无依赖关系</strong>（没有相互调用）用Lite模式加速容器启动过程，减少判断 <strong>false</strong><br>
**配置类 **组件之间 <strong>有依赖关系</strong>，方法会被调用得到之前单实例组件 <strong>true</strong></p>
<p><code>Full模式获取组件时，会先检查容器中是否有该组件，Lite模式不会检查容器，直接创建一个新的组件返回</code></p>
<p><em>Full(proxyBeanMethods = true)（保证每个</em>*@Bean方法<strong>被调用多少次返回的组件都是</strong>单实例<strong>的）<br>
Lite(proxyBeanMethods = false)（每个</strong>@Bean方法<strong>被调用多少次返回的组件都是</strong>新创建**的）*</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、@Bean、@Component、@Controller、@Service、@Repository（持久层注解）</h5>
<p>@Repository 注解可以将这个数据访问对象标记为 Spring 应用程序上下文中的 bean，从而使得我们可以在其他组件中使用该 bean。</p>
<p>常规组件</p>
<h5> 3、@ComponentScan、@Import</h5>
<p><strong>@Import</strong>：标注在有组件注解的类上（Configuration，Controller...）</p>
<p><strong>用于导入指定类型的组件并自动创建（放到容器中）</strong><br>
<strong>默认id = 全类名</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 4、@Conditional</h5>
<p>条件装配：<strong>满足</strong> Conditional指定的 <strong>条件</strong> 时才进行组件（bean）注入</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120113626334.png" alt="" loading="lazy"></p>
<p>该注解可以标注在类上或方法上（类/方法是否生效）</p>
<p>例子：<br>
<strong>@ConditionalOnBean</strong>(name = "tom")  容器中 <strong>有</strong> tom组件才生效<br>
<strong>@ConditionalOnMissingBean</strong>(name = "tom") 容器中 <strong>没有</strong> tom组件才生效</p>
<h4> 2、原生配置文件引入@ImportResource</h4>
<p><mark>在随意一个配置类(@Configuration)上编写</mark></p>
<p><em>在随意一个配置类(@Configuration)上编写</em><br>
<strong>@ImportResource注解可以帮助</strong><br>
<strong>导入编写的beans.xml的文件导入配置文件中的bean</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、配置绑定 (两种方法)</h4>
<p>使用 Java 读取到 properties 文件中的内容，并且把它封装到 JavaBean 中，以供随时使用</p>
<p>只有在容器中的组件，才会拥有SpringBoot提供的强大功能</p>
<h5> 1、@ConfigurationProperties</h5>
<p>使用：<br>
该注解标注 <strong>在有组件注解的类</strong>上 （只有在 <strong>容器中的组件</strong> 才能有springboot的强大功能）<br>
<strong>@ConfigurationProperties(prefix = "")<br>
表示在Application.properties中的前缀</strong><br>
将有这些前缀的属性的属性值赋值，并生成一个 bean 保存到容器中</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、@EnableConfigurationProperties + @ConfigurationProperties</h5>
<p>适用于需要将第三方的没有标注 @Component 的类引入到 IOC 中</p>
<p>使用：<br>
在配置类上写 <strong>@EnableConfigurationProperties(Car.class)</strong>，作用：<br>
开启Car <strong>类的属性配置绑定功能</strong><br>
把Car这个组件自动注入到容器中</p>
<p><strong>此时Car类中就不用写@component注解了</strong><br>
（再通过@ConfigurationProperties配置属性）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、自动配置原理入门（给容器中自动注入组件）</h3>
<h4> 3.1、引导加载自动配置类</h4>
<p><strong>@SpringBootApplication=</strong><br>
<strong>@SpringBootConfiguration + @EnableAutoConfiguration + @ComponentScan("com.t4mako.boot")</strong></p>
<p>1、<em>@SpringBootConfiguration：</em><br>
相当于*@Configuration*。代表当前是一个配置类</p>
<p>2、<em>@ComponentScan</em>：<br>
指定扫描哪些，Spring注解</p>
<p>3、<em><strong>@EnableAutoConfiguration：</strong></em></p>
<p><strong>@EnableAutoConfiguration = @AutoConfigurationPackage + @Import</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>① @AutoConfigurationPackage：</strong></p>
<p>自动配置包、指定了默认的包规则<br>
即 <strong>将MainApplication 所在包下所有组件导入进来</strong></p>
<p><em>点入@AutoConfigurationPackage：</em></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AutoConfigurationPackages.Registrar.class</strong>：<br>
利用Registrar给容器中导入一系列组件<br>
将指定的一个包下的所有组件导入进来，即<strong>MainApplication 所在包下</strong>。</p>
<p><strong>② @Import(AutoConfigurationImportSelector.class)</strong></p>
<p><em>AutoConfigurationImportSelector.class：</em><br>
1、利用getAutoConfigurationEntry(annotationMetadata)方法：给容器中批量导入一些组件<br>
2、调用<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code>：获取到所有需要导入到容器中的配置类<br>
3、利用工厂加载 <code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader);</code>得到所有的组件<br>
4、从META-INF/spring.factories位置来加载一个文件。<br>
默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件：<br>
spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories</p>
<p>文件里面写死了spring-boot一启动就要给容器中加载的所有配置类（127个，往后的版本有更改）</p>
<h4> 3.2、按需开启自动配置项</h4>
<p>虽然我们127个场景的所有自动配置<strong>启动的时候默认全部加载</strong><br>
xxxxAutoConfiguration按照<strong>条件装配</strong>规则（@Conditional），最终会<strong>按需配置</strong>。</p>
<h4> 3.3、修改默认配置</h4>
<p>给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：<br>
SpringBoot先<strong>加载所有的自动配置类</strong>xxxxxAutoConfiguration<br>
每个自动配置类<strong>按照条件生效（不是全部）</strong>，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定<br>
（对应注解*@EnableConfigurationProperties*）<br>
生效的 <strong>配置类</strong>就会<strong>给容器中装配很多组件</strong><br>
只要<strong>容器中有这些组件</strong>，相当于这些<strong>功能就有了</strong><br>
定制化配置：<br>
用户自己**@Bean替换底层组件**<br>
用户去看这个组件是获取的<strong>配置文件什么值就去修改</strong>。</p>
<p><strong>xxxxxAutoConfiguration ---&gt; 组件  ---&gt;</strong> <strong>xxxxProperties里面拿值  ----&gt; application.properties（修改）</strong></p>
<h4> 3.4最佳实践</h4>
<p>1、引入场景依赖：<br>
<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></p>
<p>2、查看自动配置了哪些（选做）<br>
自己分析，引入场景对应的自动配置一般都生效了<br>
<strong>配置文件中debug=true</strong>开启<strong>自动配置报告</strong>。Negative（不生效）\ Positive（生效）</p>
<p>3、是否需要修改<br>
参照文档修改配置项<br>
<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a><br>
自己分析，xxxxProperties绑定了配置文件的哪些。<br>
自定义或加入替换组件<br>
@Bean、@Component...<br>
自定义器<br>
<strong>XXXXXCustomizer</strong>；</p>
<h3> 4、开发小技巧</h3>
<h4> 1、Lombok</h4>
<p><strong>简化JavaBean开发</strong></p>
<p>1、引入依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、搜索安装 lombak 插件</p>
<p>3、编写 JavaBean</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、dev-tools</h4>
<p>加入依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目或者页面修改以后：<strong>Ctrl+F9 （重启）即可</strong></p>
<h4> 3、Spring Initailizr（项目初始化向导）</h4>
<p>创建新项目</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120164052376.png" alt="image-20230120164235192" loading="lazy"></p>
<p>选择需要的功能模块，boot版本等</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120164418965.png" alt="image-20230120164418965" loading="lazy"></p>
<p>自动引入依赖</p>
<p>自动创建项目结构：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120164443965.png" alt="image-20230120164443965" loading="lazy"></p>
<p>自动编写好主配置类：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120164502332.png" alt="image-20230120164502332" loading="lazy"></p>
<h2> 4、配置文件</h2>
<h3> 1、文件类型</h3>
<h4> 1、propertie</h4>
<p>同以前的 properties 用法</p>
<h4> 2、yaml</h4>
<h5> yaml简介：</h5>
<p>YAML 是 "YAML Ain't Markup Language"（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是："Yet Another Markup Language"（仍是一种标记语言）。</p>
<p><strong>非常适合用来做以数据为中心的配置文件</strong></p>
<h5> 基本语法：</h5>
<ul>
<li>key: value；kv之间有空格</li>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进不允许使用tab，只允许空格（idea开发可以用）</li>
<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>
<li>'#'表示注释</li>
<li>字符串无需加引号，如果要加，''与""表示字符串内容 会被 转义/不转义</li>
</ul>
<h5> 数据类型：</h5>
<p>字面量：单个的、不可再分的值。date、boolean、string、number、null</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对象：键值对的集合。map、hash、set、object</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组：一组按次序排列的值。array、list、queue</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 示例：</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何在其他类中使用yaml配置文件的值：<br>
在配置类中添加 <strong>@PropertySource</strong>注解指定要读取的配置文件路径。<br>
Spring Boot 的组件中使用 <strong>@Value</strong>注解来读取这些属性值</p>
<h3> 2、配置提示（常用）</h3>
<p>自定义的类和配置文件绑定一般没有提示。<br>
若要有提示，可以增加下面配置：</p>
<p>pom.xml 增加：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、Web开发</h2>
<h3> 1、静态资源/欢迎页/图标</h3>
<h4> 1、静态资源</h4>
<h5> 1、静态资源访问</h5>
<p>静态资源放在类路径下：<br>
<strong>/static</strong> (或 <code>/public</code> 或 <code>/resources</code> 或 <code>/META-INF/resources</code></p>
<p>访问方式 ：<br>
当前项目根路径/ + 静态资源名</p>
<p>原理：<br>
静态映射/**（拦截所有请求）<br>
请求进来， <strong>先去找Controller看能不能处理</strong>。不能处理的所有请求又都交给 <strong>静态资源处理器</strong>。静态资源也找不到则响应404页面</p>
<p>改变默认的静态资源路径的方式：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、静态资源访问前缀</h5>
<p>默认是无前缀的</p>
<p>修改带上前缀/res：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让拦截能区分出静态资源和动态资源，所以一般在静态资源前面加个前缀，拦截器在看到指定前缀时就放行，从而达到动态静态分开的目的</p>
<p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p>
<h5> 3、webjar</h5>
<p>自动映射 /<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js" target="_blank" rel="noopener noreferrer">webjars</a>/**</p>
<p>引入依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js" target="_blank" rel="noopener noreferrer">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p>
<h4> 2、欢迎页</h4>
<p><em><strong>创建欢迎页的两种方式：</strong></em></p>
<p><em><strong>1、静态资源路径下的index.html</strong></em><br>
可以配置静态资源路径<br>
但是不可以配置静态资源的<strong>访问前缀</strong>，否则导致index.html不能被默认访问</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2、编写controller能处理 /index 请求</strong></em></p>
<h4> 3、自定义Favicon</h4>
<p>favicon.ico 文件放在 <strong>静态资源目录下即可</strong>。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、静态资源配置原理</h4>
<p>SpringBoot 启动默认加载  xxxAutoConfiguration 类（自动配置类）<br>
<code>SpringMVC 功能的自动配置类 WebMvcAutoConfiguration 就生效了</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给容器中的配置：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定配置文件：<br>
<strong>WebMvcProperties</strong>==<em>spring.mvc</em><br>
<strong>ResourceProperties</strong>==<em>spring.resources</em></p>
<p><em><strong>扩展：如果配置类只有一个有参构造器：</strong></em><br>
<em><strong>有参构造器所有的值都会从容器中确定</strong></em></p>
<p>ResourceProperties resourceProperties；获取和 <code>spring.resources</code> 绑定的所有的值的对象<br>
WebMvcProperties mvcProperties 获取和 <code>spring.mvc</code> 绑定的所有的值的对象<br>
ListableBeanFactory beanFactory Spring的 <code>beanFactory</code><br>
HttpMessageConverters 找到所有的 <code>HttpMessageConverters</code><br>
ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。<br>
DispatcherServletPath<br>
ServletRegistrationBean   给应用注册 Servlet、Filter....</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 1、资源处理的默认规则</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、欢迎页的处理规则</h5>
<p>**HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。	**</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 3、favicon</h5>
<h3> 2、请求参数处理</h3>
<h4> 1、put、delete  请求映射</h4>
<h5> 1、开启 rest</h5>
<p>springBoot 中 需要 <strong>手动开启</strong></p>
<p><strong>开启页面表单的Rest功能</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>@xxxMapping<br>
Rest风格支持<br>
对用户的操作： /user*    GET-获取用户    DELETE-删除用户     PUT-修改用户     POST-保存用户</p>
<p>核心Filter：<strong>HiddenHttpMethodFilter</strong>（开启put，delete请求）<br>
（过滤器的一个作用）</p>
<p>前端发送put，delete请求的方式：<strong><code>表单 method=post，隐藏域 **\_**method=put</code></strong></p>
</blockquote>
<blockquote>
<p>Rest 原理：<br>
表单提交会带上 _method=PUT/DELETE<br>
请求被 <strong>HiddenHttpMethodFilter</strong> 拦截<br>
判断 <strong>请求</strong> 是否正常且  <strong>为POST</strong><br>
获取到 <strong>_method的值</strong> 并转为大写，判断是否为PUT、DELETE、PATCH<br>
包装模式 <strong>requesWrapper</strong> 与原生Request类类似，<strong>重写了getMethod方法，返回的是传入的值</strong><br>
过滤器链放行的时候用 wrapper。以后的方法调用getMethod是调用requesWrapper的。</p>
<p>注：<br>
使用客户端工具如 PostMan 直接发送Put、delete等方式请求，无需 Filter，直接为PUT/DELETE</p>
</blockquote>
<blockquote>
<p>扩展：更改 _method 这个名字：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h5> 2、请求映射原理（从请求到方法）</h5>
<p>DispatcherServlet 的继承树：<br>
<code>HttpServlet→FramworkServlet（重写doGet、doPost、调用doService）→DispatcherServlet（实现doService、调用doDispatch）</code></p>
<p>SpringMVC 功能分析都从 org.springframework.web.servlet.<strong>DispatcherServlet</strong> 类的 <strong>doDispatch()</strong> 方法开始</p>
<p>① <strong>通过请求地址找到对应的 Controller</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>② <strong>HandlerMapping：处理器映射</strong></p>
<p>所有的请求映射都在 HandlerMapping 中（请求→哪个handler处理器处理）</p>
<p>HandlerMapping一共有5个，依此寻找：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230122222555787.png" alt="image-20230122222555787" loading="lazy"></p>
<blockquote>
<p><strong>RequestMappingHandlerMapping</strong>：<br>
保存了所有 @RequestMapping 和 handler 的映射规则。（springboot启动后自动扫描保存）</p>
<p>所有的请求映射都在 HandlerMapping 中，寻找案例：<br>
SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html<br>
SpringBoot自动配置了默认 的 RequestMappingHandlerMapping<br>
请求进来，挨个尝试所有的HandlerMapping看是否有请求信息<br>
如果有就找到这个请求对应的handler<br>
如果没有就是下一个HandlerMapping</p>
<p>也可以自己给容器中放 HandlerMapping。自定义 HandlerMapping</p>
</blockquote>
<h4> 2、获取请求参数</h4>
<h5> 1、关键注解获取</h5>
<p><strong>@PathVariable（路径变量）<br>
@RequestParam（请求参数）</strong><br>
<strong>@RequestHeader（获取请求头）</strong><br>
<strong>@RequestBody（获取请求体 [post]）</strong><br>
<strong>@CookieValue（获取 cookiee 值）</strong><br>
<strong>@RequestAttribute（获取 Request 域属性）</strong><br>
<strong>@ModelAttribute</strong><br>
<strong>@MatrixVariable（矩阵变量）</strong></p>
<ol>
<li>
<p><strong>@RequestParam</strong></p>
<p>http请求的参数 =&gt; Controller 方法的 参数 上 （单个值，或封装成 List）</p>
<p>@RequestParam 注解的 <strong>三个属性</strong>：<br>
① <strong>value</strong>：设置和形参绑定 <strong>请求参数的名字</strong><br>
② <strong>required</strong>：设置是否必须传输value所对应的请求参数<br>
默认值为 true，请求参数必须传输，否则页面报错（400错误）<br>
若设置为 false，请求参数不必须传输，若不传输，则形参值为null	<br>
③ <strong>defaultValue</strong>：设置当没有传输 value 所对应的请求参数时，为<strong>形参设置默认值</strong>，此时和required属性值无关</p>
<blockquote>
<p>使用 @RequestParam 注解：如果请求参数的名称和控制器方法的参数名称不一致，或者我们需要使用@RequestParam注解的一些特性（如设置默认值或者必传属性等），那么必须使用@RequestParam注解来获取请求参数的值。</p>
</blockquote>
</li>
<li>
<p><strong>@PathVariable</strong></p>
<p>在 @RequestMapping 的 value 属性路径中，使用 <strong>{xxx}</strong> 的方式表示 <strong>路径中的数据</strong><br>
通过**@PathVariable注解**，将占位符所标识的值和控制器方法的形参进行绑定</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><strong>@RequestBody</strong></p>
<p>将 HTTP <strong>请求体</strong> 中的 <strong>JSON</strong> 或 XML =&gt; <strong>Java 对象</strong>。</p>
<p>案例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>@MatrixVariable（矩阵变量）（略）</p>
</li>
</ol>
<p>获取请求参数案例：</p>
<div class="language-java+ line-numbers-mode" data-ext="java+"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、Servlet API 获取</h5>
<p>参数中可以放 ServletAPI：</p>
<blockquote>
<p>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</p>
</blockquote>
<p><strong>ServletRequestMethodArgumentResolver 类解析以上的部分参数</strong></p>
<h5> 3、复杂参数</h5>
<blockquote>
<p>Map、Model（map、model里面的数据会被放在 request的请求域  request.setAttribute）<br>
Errors/BindingResult、RedirectAttributes（重定向携带数据）、ServletResponse（response）、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p>
</blockquote>
<p>对 map&lt;String,Object&gt; map,<br>
Model model,<br>
HttpServletRequest request<br>
操作都是给 request 域中放数据，即 <strong>request.getAttribute();</strong></p>
<p>Map、Model类型的参数，返回的 都是 <strong>map</strong><br>
返回 mavContainer.getModel（）；---&gt; BindingAwareModelMap 是Model</p>
<h5> 4、自定义对象参数</h5>
<p>可以 <strong>自动类型转换</strong> 与格式化，可以 <strong>级联封装</strong>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、参数处理原理</h4>
<p>HandlerMapping 中找到能处理请求的 <strong>Handler</strong><br>
为当前 Handler 找一个适配器 <strong>HandlerAdapter</strong><br>
适配器执行目标方法并确定方法参数的每一个值</p>
<h5> 1、HandlerAdapter（适配器）</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230123174924675.png" alt="image-20230123174924675" loading="lazy"></p>
<p>0 - 支持方法上标注@RequestMapping<br>
1 - 支持函数式编程的</p>
<h5> 2、执行目标方法</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230123175018355.png" alt="image-20230123175018355" loading="lazy"></p>
<h5> 3、参数解析器-HandlerMethodArgumentResolver</h5>
<p><strong>确定将要执行的目标方法的每一个参数的值是什么</strong><br>
SpringMVC目标方法能写多少种参数类型。取决于参数解析器</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230123175246221.png" alt="image-20230123175246221" loading="lazy"></p>
<p>判断当前解析器是否（support方法）支持解析这种参数，支持就调用 resolveArgument</p>
<h5> 4、返回值处理器</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230123175457405.png" alt="image-20230123175457405" loading="lazy"></p>
<h5> 5、如何确定目标方法每一个参数的值</h5>
<p>1、挨个判断所有参数解析器那个支持解析这个参数<br>
2、解析这个参数的值<br>
调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可<br>
3、自定义类型参数 封装POJO<br>
ServletModelAttributeMethodProcessor  这个参数处理器支持<br>
WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中<br>
GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型（JavaBean -- Integer）</p>
<p><strong>byte -- &gt; file</strong></p>
<h5> 6、目标方法执行完成</h5>
<p>所有的数据都放在 <strong>ModelAndViewContainer</strong>；包含要去的页面地址View。还包含Model数据。</p>
<h5> 7、处理派发结果</h5>
<p><strong>processDispatchResult</strong>(processedRequest, response, mappedHandler, mv, dispatchException);<br>
renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</p>
<h3> 3、数据响应(JSON)与内容协商</h3>
<p>数据响应：<br>
① 响应页面<br>
② 响应数据（json，xml，xls，图片，音视频，自定义协议内容）</p>
<h4> 1、响应JSON</h4>
<h5> 1、jackson.jar+@ResponseBody</h5>
<p>通过 <strong>jackson.jar</strong> (自动导入) + <strong>@ResponseBody</strong> 注解可以给前端自动返回 json 数据；</p>
<p>@RequestBody 指示控制器方法参数应该 从 HTTP请求体中获取，并将其反序列化为方法参数的类型。<br>
@RequestBody 注解将 HTTP请求体 中的 JSON或XML 转换为 Java对象。</p>
<blockquote>
<p>HttpMessageConverter（内容协商）是Spring框架中的一种机制，用于将请求和响应消息转换为特定的格式，例如JSON或XML。当您使用@RequestBody注解时，Spring Boot将尝试从请求体中获取数据，并 <strong>使用适当的HttpMessageConverter</strong> 将其转换为控制器方法参数的类型。<br>
默认情况下，Spring Boot使用Jackson库将JSON请求体映射到Java对象中。<strong>Jackson使用Java反射机制，查找Java类中的setter方法</strong>，并使用它们将JSON字段映射到Java对象中。</p>
</blockquote>
<blockquote>
<p><code>原理： 1、有返回值解析器 2、返回值解析器原理： 	1、返回值处理器先判断是否支持这种类型返回值 （supportsReturnType()方法，返回Boolean类型） 	2、如果支持，返回值处理器调用 handleReturnValue() 进行处理 	3、RequestResponseBodyMethodProcessor() 可以处理返回值标了@ResponseBody 注解的方法 		1、利用 MessageConverters 进行处理 将数据写为json 			①内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型，且有优先级） 			②服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据 			③SpringMVC会挨个遍历所有容器底层的 HttpMessageConverter ，看谁能处理 				得到MappingJackson2HttpMessageConverter可以将对象写为json 				利用MappingJackson2HttpMessageConverter将对象转为json再写出去。</code></p>
</blockquote>
<h5> 2、SpringMVC 支持的返回值</h5>
<blockquote>
<p>ModelAndView、Model、View<br>
ResponseEntity 、ResponseBodyEmitter、StreamingResponseBody、HttpEntity、HttpHeaders、Callable、DeferredResult、ListenableFuture、CompletionStage、WebAsyncTask<br>
有 @ModelAttribute 且为对象类型的<br>
@ResponseBody 注解 ---&gt; RequestResponseBodyMethodProcessor；</p>
</blockquote>
<h5> 3、HTTPMessageConverter（消息转换器）原理</h5>
<p>HttpMessageConverter: 看是否支持将 此 Class 类型的对象，转为MediaType类型的数据。<br>
例子：Person 对象转为 JSON。或者 JSON转为Person</p>
<p>默认的MessageConverter：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230125154948610.png" alt="image-20230125154948610" loading="lazy"></p>
<p>0 - 只支持Byte类型的<br>
1 - String<br>
2 - String<br>
3 - Resource<br>
4 - ResourceRegion<br>
5 - DOMSource.class \ SAXSource.class \ StAXSource.class \StreamSource.class \Source.class<br>
6 - MultiValueMap<br>
7 - true<br>
8 - true<br>
9 - 支持注解方式xml处理的。</p>
<p>最终 MappingJackson2HttpMessageConverter  把对象转为JSON（利用底层的jackson的objectMapper转换的）</p>
<h4> 2、内容协商</h4>
<p><strong>根据客户端接收能力不同，返回不同媒体类型的数据。</strong><br>
（若客户端无法解析服务端返回的内容，即媒体类型未匹配，那么响应406）</p>
<h5> 1、引入xml依赖</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、postman分别测试返回json和xml</h5>
<p>postman：模拟用户发起的各类HTTP请求</p>
<p>只需要改变请求头中Accept字段。Accept字段是Http协议中规定的，告诉服务器本客户端可以接收的数据类型。<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230125161757892.png" alt="image-20230125161757892" loading="lazy"></p>
<h5> 3、开启浏览器参数方式内容协商功能</h5>
<p>为了方便内容协商，开启基于请求参数的内容协商功能。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式：</p>
<p>发送请求时，带上format参数：<br>
<a href="http://localhost:8080/test/person?format=json" target="_blank" rel="noopener noreferrer">http://localhost:8080/test/person?format=json</a><br>
<a href="http://localhost:8080/test/person?format=xml" target="_blank" rel="noopener noreferrer">http://localhost:8080/test/person?format=xml</a></p>
<p>确定客户端接收什么样的内容类型：<br>
1、Parameter策略优先确定是要返回json数据（获取请求头中的format的值）<br>
2、最终进行内容协商返回给客户端json即可。</p>
<h5> 4、内容协商原理</h5>
<p>1、判断当前响应头中是否已经有确定的媒体类型。MediaType<br>
2、<strong>获取</strong>客户端（PostMan、浏览器）<strong>支持接收的内容类型</strong>。（获取客户端Accept请求头字段）【application/xml】<br>
contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略<br>
HeaderContentNegotiationStrategy  确定客户端可以接收的内容类型<br>
3、遍历循环所有当前系统的 <strong>MessageConverter</strong>，看谁支持操作这个对象（Person）<br>
4、找到支持操作Person的converter，把converter支持的媒体类型统计出来。<br>
5、客户端需要【application/xml】。服务端能力【10种、json、xml】<br>
6、进行内容协商的最佳匹配媒体类型<br>
7、用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。</p>
<h5> 5、自定义 MessageConverter</h5>
<p>实现多协议数据兼容。json、xml、x-guigu</p>
<p>0、@ResponseBody 响应数据出去 调用 <strong>RequestResponseBodyMethodProcessor</strong> 处理<br>
1、Processor 处理方法返回值。通过 <strong>MessageConverter</strong> 处理<br>
2、所有 <strong>MessageConverter</strong> 合起来可以支持各种媒体类型数据的操作（读、写）<br>
3、内容协商找到最终的 <strong>messageConverter</strong>；</p>
<p>SpringMVC的什么功能。一个入口给容器中添加一个  WebMvcConfigurer</p>
<h3> 4、视图解析与模板引擎（不看）</h3>
<p>视图解析：<strong>SpringBoot默认不支持JSP，需要引入第三方模板引擎技术实现页面渲染。</strong>（SpringBoot工程的打包结果是一个jar包，是压缩包，JSP不支持在压缩包中被编译运行，所以SpringBoot默认不支持JSP。）</p>
<h4> 1、视图解析原理流程</h4>
<p>1、目标方法处理的过程中，所有数据都会被放在 ModelAndViewContainer 里面。包括数据和视图地址<br>
2、方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在 ModelAndViewContainer<br>
3、任何目标方法执行完成以后都会返回 ModelAndView（数据和视图地址）。<br>
4、processDispatchResult  处理派发结果（页面该如何响应）</p>
<h4> 2、模板引擎Thymeleaf</h4>
<h5> 1、thymeleaf简介</h5>
<p>现代化、服务端Java模板引擎</p>
<h5> 2、基本语法</h5>
<h6> 1、表达式</h6>
<table>
<thead>
<tr>
<th>表达式名字</th>
<th>语法</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>变量取值</td>
<td>**${...} **</td>
<td>获取请求域、session域、对象等值</td>
</tr>
<tr>
<td>选择变量</td>
<td css-module=".">*</td>
<td>获取上下文对象值</td>
</tr>
<tr>
<td>消息</td>
<td css-module=".">#</td>
<td>获取国际化等值</td>
</tr>
<tr>
<td>链接</td>
<td><strong>@{...}</strong></td>
<td>加了前后缀，自动拼接，生成链接</td>
</tr>
<tr>
<td>片段表达式</td>
<td css-module=".">~</td>
<td>jsp:include 作用，引入公共页面片段</td>
</tr>
</tbody>
</table>
<h6> 2、字面量</h6>
<p>文本值: 'one text' , 'Another one!'<br>
数字: 0 , 34 , 3.0 , 12.3<br>
布尔值: true , false<br>
空值: null<br>
变量： one，two  <strong>变量不能有空格</strong></p>
<h6> 3、文本操作</h6>
<p>字符串拼接: <strong>+</strong><br>
变量替换: <strong>|The name is ${name}|</strong></p>
<h6> 4、数学运算</h6>
<p>运算符: + , - , * , / , %</p>
<h6> 5、布尔运算</h6>
<p>运算符:  and , or<br>
一元运算: ! , not</p>
<h6> 6、比较运算</h6>
<p>比较: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )等式: == , != ( eq , ne )</p>
<h6> 7、条件运算</h6>
<p>If-then: <strong>(if) ? (then)</strong></p>
<p>If-then-else: <strong>(if) ? (then) : (else)</strong></p>
<p>Default: (value) <strong>?: (defaultvalue)</strong></p>
<h6> 8、特殊操作</h6>
<p>无操作： _</p>
<h5> 3、设置属性值-th:attr</h5>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5> 4、循环</h5>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 5、条件运算</h5>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、thymeleaf使用</h4>
<h5> 1、引入Starter</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、自动配置好了thymeleaf</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230126124513640.png" alt="image-20230126124513640" loading="lazy"></p>
<p>自动配好的策略</p>
<p>1、所有thymeleaf的配置值都在 ThymeleafProperties<br>
2、配置好了 SpringTemplateEngine<br>
3、配好了 ThymeleafViewResolver 视图解析器<br>
4、我们只需要直接开发页面</p>
<p>ThymeleafProperties类中：视图前后缀</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、构建后台管理系统</h4>
<h5> 1、项目创建</h5>
<p>添加模块：thymeleaf、web-starter、devtools、lombok</p>
<h5> 2、静态资源处理</h5>
<p>自动配置好，我们只需要把所有静态资源放到 static 文件夹下</p>
<h5> 3、路径构建</h5>
<p>th:action="@{/login}"</p>
<h5> 4、模板抽取</h5>
<p>th:insert/replace/include</p>
<h5> 5、页面跳转</h5>
<p>登入成功后创建user放入session中，通过session中的user对象判断是否要重新登录</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 6、数据渲染</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、Interceptor 拦截器</h3>
<p>拦截器底层需要 <strong>Interceptor接口</strong><br>
接口中的三个方法：<br>
<strong><code>preHandle</code></strong>	目标方法执行之前<br>
<strong><code>postHandle</code></strong> 	目标方法执行之后<br>
<strong><code>afterCompletion</code></strong>	页面渲染</p>
<p>拦截器的作用：做登录检查</p>
<p><strong>配置拦截器要拦截哪些请求，把这些配置放在容器中（@Configuration）</strong><br>
实现 WebMvcConfigure 的 addInterceptors() 方法：<br>
<em>配置所有请求都别拦截，排除拦截登录页，静态页面</em></p>
<h4> 1、拦截器的使用</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、配置拦截器（url）</h4>
<p><strong>实现WebMvcConfigure的addInterceptors()方法</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、拦截器执行顺序、原理</h4>
<p>1、根据当前请求，找到 HandlerExecutionChain（可以处理请求的handler以及handler的所有拦截器）<br>
2、先 <strong>顺序执行</strong> 所有拦截器的 <strong>preHandle</strong>方法<br>
1、如果当前拦截器 prehandler返回为 <strong>true</strong>。则执行下一个拦截器的 preHandle 方法<br>
2、如果当前拦截器返回为 <strong>false</strong> 。<strong>倒序</strong> 执行经过的拦截器的 <strong>afterCompletion</strong> 方法；<br>
3、如果任何一个 <strong>拦截器返回false</strong>。直接跳出 <strong>不执行目标方法</strong><br>
4、所有拦截器 <strong>都返回True</strong>。<strong>执行目标方法</strong><br>
5、倒序执行所有拦截器的 postHandle 方法<br>
6、前面的步骤有任何异常都会直接 <strong>倒序</strong> 触发 afterCompletion<br>
7、页面成功渲染完成以后，也会 倒序 触发 afterCompletion</p>
<h3> 6、文件上传</h3>
<p>接收文件步骤：</p>
<p>① 注解：<strong>@RequestPart</strong>：表示一个文件<br>
② 接收的参数类：<strong>MultipartFile</strong> multipartFile<br>
③ 设置文件保存位置：<strong>multipartFile.transferTo()</strong>：</p>
<h4> 1、表单页面</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、文件上传代码</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、修改上传文件大小限制</h4>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、文件上传自动配置原理</h4>
<p>文件上传自动配置类-MultipartAutoConfiguration-MultipartProperties<br>
自动配置好了 StandardServletMultipartResolver   【文件上传解析器】<br>
原理步骤：<br>
请求进来使用文件上传解析器判断（isMultipart()）并封装（resolveMultipart，返回MultipartHttpServletRequest()）文件上传请求<br>
参数解析器来解析请求中的文件内容封装成MultipartFile<br>
将request中文件信息封装为一个Map，实现文件流的拷贝</p>
<h3> 7、异常处理</h3>
<h4> 1、默认规则</h4>
<p>默认情况下，Spring Boot 提供 <strong>/error</strong> 处理所有错误的映射<br>
对于机器客户端，它将生成 JSON 响应，其中包含错误，HTTP状态和异常消息的详细信息。<br>
对于浏览器客户端，响应一个 whitelabel 错误视图，以HTML格式呈现相同的数据</p>
<p>要对其进行 <strong>自定义</strong>，<strong>添加 View 解析为 error</strong><br>
error/下的4xx，5xx页面会被自动解析:</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230128171114694.png" alt="image-20230128171114694" loading="lazy"></p>
<h4> 2、定制错误处理逻辑</h4>
<p>自定义错误页:<br>
有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230128173840949.png" alt="image-20230128173840949" loading="lazy"></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@ControllerAdvice是一个Spring框架中的注解，用于定义全局控制器异常处理器。当控制器方法抛出未被处理的异常时，Spring将查找带有@ControllerAdvice注解的类来处理该异常。该类中的方法可以使用@ExceptionHandler注解来处理特定类型的异常。</p>
<p>@ExceptionHandler是一个Spring框架中的注解，用于处理控制器方法中的异常。在控制器方法上添加@ExceptionHandler注解，可以指定要处理的异常类型。当控制器方法抛出该异常时，Spring将调用带有@ExceptionHandler注解的方法来处理该异常。</p>
<p>@ExceptionHandler注解可以被用于单个方法或全局控制器。在单个方法中使用时，它只会应用于该方法中的异常处理。如果在全局控制器中使用，则它将应用于整个控制器中的所有方法。</p>
<p>使用@ExceptionHandler注解可以简化异常处理逻辑，使代码更易于维护和测试。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义异常解析器，实现 HandlerExceptionResolver 处理异常；可以作为默认的全局异常处理规则</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、异常处理自动配置原理</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230128173905589.png" alt="image-20230128173905589" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230128173913355.png" alt="image-20230128173913355" loading="lazy"></p>
<h4> 4、异常处理步骤流程</h4>
<p>1、执行目标方法，目标方法运行期间<strong>有任何异常都会被catch</strong>、而且标志当前<strong>请求结束</strong>；并且用 <strong>dispatchException</strong><br>
2、进入视图解析流程<br>
3、处理handler发生的异常，处理完成返回ModelAndView；<br>
遍历所有的 handlerExceptionResolvers(处理器异常解析器)，看谁能处理当前异常<br>
DefaultErrorAttributes先来处理异常。把异常信息保存到rrequest域，并且返回null<br>
默认没有任何人能处理异常，所以异常会被抛出<br>
如果没有任何人能处理最终底层就会发送 /error 请求。会被底层的BasicErrorController处理<br>
解析错误视图；遍历所有的ErrorViewResolver  看谁能解析。<br>
默认的 DefaultErrorViewResolver ,作用是把响应状态码作为错误页的地址，error/500.html<br>
模板引擎最终响应这个页面 error/500.html</p>
<h3> 8、Web原生组件注入（Servlet、Filter、Listener）</h3>
<p>有两种方式：</p>
<h4> 1、使用Servlet API</h4>
<p>核心注解：<br>
@ServletComponentScan(basePackage = "")：指定原生Servlet组件（写在application上）<br>
@WebServlet(urlPatterns = "“)  写在原生servlet上<br>
@WebFilter(urlPatterns = "") 写在原生Servlet上<br>
@WebListener 写在原生Listener上</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展：DispatchServlet 如何注册进来<br>
容器中自动配置了  DispatcherServlet  属性绑定到 WebMvcProperties；对应的配置文件配置项是 <strong>spring.mvc。</strong><br>
通过ServletRegistrationBean&lt;DispatcherServlet&gt; 把 DispatcherServlet  配置进来。<br>
默认映射的是 / 路径。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129152417865.png" alt="image-20230129152417865" loading="lazy"></p>
<p>Tomcat-Servlet；<br>
多个Servlet都能处理到同一层路径，精确优选原则<br>
A： /my/<br>
B： /my/1</p>
<h4> 2、使用RegistrationBean</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9、嵌入式Servlet容器</h3>
<h4> 1、切换嵌入式Servlet容器</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129153355545.png" alt="image-20230129153355545" loading="lazy"></p>
<h4> 2、定制Servlet容器</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129153440517.png" alt="image-20230129153440517" loading="lazy"></p>
<h3> 10、定制化原理</h3>
<h4> 1、定制化的常见方式</h4>
<p><strong>①修改配置文件</strong><br>
<strong>②xxxxxCustomizer</strong><br>
<strong>③编写自定义的配置类   xxxConfiguration；+ @Bean替换、增加容器中默认组件；视图解析器</strong><br>
<strong>④Web应用 编写一个配置类实现 WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129153616598.png" alt="image-20230129153616598" loading="lazy"></p>
<h4> 2、原理分析套路</h4>
<p><strong>场景starter</strong> <strong>- xxxxAutoConfiguration - 导入xxx组件 - 绑定xxxProperties --</strong> <strong>绑定配置文件项</strong></p>
<h2> 6、数据访问</h2>
<h3> 1、SQL</h3>
<h4> 1、数据源的自动配置</h4>
<h5> 1、导入JDBC场景</h5>
<p>① 导入JDBC starter：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>starter帮忙导入的内容：数据源(连接池)、jdbc、事务....</strong><br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230129162828197.png" alt="image-20230129162828197" loading="lazy"></p>
<p><strong>没有导入驱动的原因：官方不知道我们接下要操作什么数据库。</strong><br>
② <strong>因此要导入mysql驱动的依赖:</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>springboot做了版本仲裁，默认版本：8.0.22<br>
修改版本的方式：<br>
①通过依赖修改版本号（maven的就近依赖原则）<br>
②重新声明版本（maven的就近依赖原则）</p>
<h5> 2、分析自动配置</h5>
<h6> 1、自动配置的类</h6>
<p>DataSourceAutoConfiguration类：<strong>数据源</strong> 的自动配置<br>
修改数据源相关配置：修改 <strong>spring.datasource</strong><br>
数据库连接池池的配置，自己容器中没有 DataSource 才自动配置<br>
底层配置好的连接池是：HikariDataSource</p>
<p>DataSourceTransactionManagerAutoConfiguration类： <strong>事务</strong> 管理器的自动配置</p>
<p>JdbcTemplateAutoConfiguration类： <strong>JdbcTemplate</strong> 的自动配置，可以来对数据库进行 <strong>crud</strong><br>
可以修改这个配置项 @ConfigurationProperties(prefix = <strong>"spring.jdbc"</strong>) 来修改JdbcTemplat<br>
容器中已经 <strong>有了JdbcTemplate</strong>这个组件（可以<strong>自动注入</strong>）</p>
<p>JndiDataSourceAutoConfiguration类： jndi的自动配置</p>
<p>XADataSourceAutoConfiguration乐扣： 分布式事务相关的</p>
<h5> 3、数据源配置</h5>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 4、测试</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、使用Druid数据源</h4>
<p>整合第三方技术的两种方式：<br>
① <strong>自定义数据源：</strong><br>
原生JDBC数据源配置的 DataSourceAutoConfiguration 类在没有 DataSource 对象的时候自动创建<br>
所以只需要自己配置 <strong>Configuration 类的 DataSource 对象</strong>，返回其他数据源到IOC中即可</p>
<p>​	② <strong>找starter</strong></p>
<h5> 1、方式一：自定义方式</h5>
<p>导入druid依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> 1、创建数据源</h6>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、方式二：官方starter方式</h5>
<h6> 1、引入druid-starter</h6>
<p>druid-starter引入的内容：druid数据源，slf4j，springboot自动配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>druid注入数据源：<br>
在 springboot 官方注入数据源之前注入一个数据源，官方的就不生效了</strong></p>
<h6> 2、分析自动配置</h6>
<p>扩展配置项：<strong>spring.datasource.druid</strong></p>
<p>DruidSpringAopConfiguration.class,：  监控 SpringBean 的<br>
配置项：<strong>spring.datasource.druid.aop-patterns</strong></p>
<p>DruidStatViewServletConfiguration.class： 监控页的配置：<br>
配置项：<strong>spring.datasource.druid.stat-view-servlet	默认开启</strong></p>
<p>DruidWebStatFilterConfiguration.class, web监控配置<br>
配置项：<strong>spring.datasource.druid.web-stat-filter；默认开启</strong></p>
<p>DruidFilterConfiguration.class})：所有Druid自己filter的配置</p>
<h6> 3、配置示例</h6>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、整合MyBatis</h4>
<p><strong>引入starter：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mybatis 引入的内容：mybatis，JDBCstarter，mybatis自动配置</p>
<h5> 1、配置模式</h5>
<p>全局配置文件<br>
SqlSessionFactory: 自动配置好了<br>
SqlSession：自动配置了 SqlSessionTemplate 组合了SqlSession<br>
@Import(AutoConfiguredMapperScannerRegistrar.class）：找到所有标注了@Mapper注解的接口<br>
Mapper： 只要我们写的操作MyBatis的接口标注了 <strong>@Mapper</strong> 就会被自动扫描进来</p>
<p>① 传统配置方式：</p>
<p>核心配置文件：mybatis-config.xml</p>
<p>yaml中：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mapper接口→绑定mapper.xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② <strong>通过yaml配置</strong></p>
<p>配置 private Configuration configuration; mybatis.configuration下面的所有，就是相当于改 mybatis 全局配置文件中的值</p>
<p><em><strong>无需创建mybatis-config.xml</strong></em></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结，配置方式：<br>
导入 mybatis 官方 starter<br>
编写 mapper 接口。<strong>标注@Mapper注解</strong><br>
编写 sql 映射文件并绑定 mapper 接口<br>
在 <strong>application.yaml中指定Mapper配置文件的位置</strong>，以及指定全局配置文件的信息 （建议：<strong>配置在mybatis.configuration标签项下</strong>）</p>
<h5> 2、注解模式</h5>
<p>mapper映射文件可以省略</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 3、混合模式</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 4、总结</h5>
<p>最佳实战：<br>
引入 mybatis-starter<br>
<strong>配置 application.yam l中，指定 mapper-location 位置即可</strong><br>
编写 <strong>Mapper接口</strong> 并标注 <strong>@Mapper</strong> 注解<br>
简单方法直接注解方式<br>
复杂方法编写mapper.xml进行绑定映射<br>
<strong>配置类</strong> 上写 <strong>@MapperScan</strong>("com.t4mako.admin.mapper") 简化，其他的接口就可以 <strong>不用标注@Mapper注解</strong></p>
<h4> 4、整合 MyBatis-Plus</h4>
<h5> 1、引入starter</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>starter引入内容：mybatis-plus、jdbc-starter</strong></p>
<p>只需要我们的 **Mapper 继承 BaseMapper **就可以拥有crud能力，并且批量扫描进来</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定：<strong><a href="http://mybatis-plus.xxx" target="_blank" rel="noopener noreferrer">mybatis-plus.xxx</a></strong> 就是对 mybatis-plus 的定制</p>
<p><strong>SqlSessionFactory 自动配置</strong> 好，底层是容器中的数据源</p>
<p><strong>mapperLocations 自动配置</strong> 好：<br>
默认值：<strong><code>classpath\*:/mapper/\**/\*.xml</code></strong><br>
任意包的类路径下的<strong>所有mapper文件夹</strong>下任意路径下的<strong>所有xml</strong>都是sql映射文件。  建议<strong>sql映射文件，放在类路径mapper</strong>下</p>
<p>容器中也<strong>自动配置好了 SqlSessionTemplate</strong><br>
@Mapper 标注的接口也会被自动扫描<br>
建议<strong>直接 @MapperScan("com.t4mako.admin.mapper") 批量扫描</strong>就行</p>
<p><strong>@TableField(exist = false)：<br>
mybatis-plus的注解，标注在bean类的属性上，表示该属性在表中不存在</strong></p>
<h5> 2、CRUD功能</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、NoSQL</h3>
<h4> 1、Redis自动配置</h4>
<p>引入starter</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动配置：<br>
自动配置类：RedisAutoConfiguration 。RedisProperties 属性类 --&gt; <strong>spring.redis.xxx是对redis的配置</strong><br>
连接工厂是准备好的。LettuceConnectionConfiguration、JedisConnectionConfiguration<br>
自动注入了RedisTemplate&lt;Object, Object&gt; ： xxxTemplate；<br>
自动注入了StringRedisTemplate；k：v都是String<br>
key：value<br>
底层只要我们使用 StringRedisTemplate、RedisTemplate就可以操作redis</p>
<h4> 2、RedisTemplate 与 Lettuce</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、切换至jedis</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、单元测试</h2>
<h3> 1、JUnit5 的变化</h3>
<p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong><br>
作为最新版本的JUnit框架，JUnit5与之前版本的Junit框架有很大的不同。由三个不同子项目的几个不同模块组成：<br>
JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p>
<p>JUnit Platform: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。<br>
JUnit Jupiter: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部 包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。<br>
JUnit Vintage: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</p>
<p>注意：<br>
SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</p>
<p><strong>引入单元测试依赖</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现在单元测试的使用方式：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot整合Junit以后：<br>
编写测试方法：@Test标注（注意需要使用junit5版本的注解）<br>
Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</p>
<h3> 2、JUnit5常用注解</h3>
<p>JUnit5的注解与JUnit4的注解有所变化<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations" target="_blank" rel="noopener noreferrer">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p>
<ul>
<li>**@Test 😗*表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li>
<li>**@ParameterizedTest 😗*表示方法是参数化测试，下方会有详细介绍</li>
<li>**@RepeatedTest 😗*表示方法可重复执行，下方会有详细介绍</li>
<li><strong>@DisplayName :<strong>为测试</strong>类</strong>或者测试<strong>方法</strong>设置<strong>展示名称</strong></li>
<li>**@BeforeEach 😗*表示在每个单元测试之前执行</li>
<li>**@AfterEach 😗*表示在每个单元测试之后执行</li>
<li>**@BeforeAll 😗*表示在所有单元测试之前执行</li>
<li>**@AfterAll 😗*表示在所有单元测试之后执行</li>
<li>**@Tag 😗*表示单元测试类别，类似于JUnit4中的@Categories</li>
<li>**@Disabled 😗*表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li>
<li>**@Timeout 😗*表示测试方法运行如果超过了指定时间将会返回错误</li>
<li>**@ExtendWith 😗*为测试类或测试方法提供扩展类引用</li>
</ul>
<p>示例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、断言（assertions）</h3>
<p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法。<br>
断言检查业务逻辑返回的数据是否合理。<br>
<strong>所有的测试运行结束以后，会有一个详细的测试报告；</strong></p>
<p>断言分类：<br>
简单断言、数组断言、组合断言、异常断言、超时断言、快速失败</p>
<p><strong>断言：前面的断言失败，后面的断言都不会执行</strong></p>
<h4> 1、简单断言</h4>
<p>用来对单个值进行简单的验证。如：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>assertEquals</td>
<td>判断两个对象或两个原始类型是否相等</td>
</tr>
<tr>
<td>assertNotEquals</td>
<td>判断两个对象或两个原始类型是否不相等</td>
</tr>
<tr>
<td>assertSame</td>
<td>判断两个对象引用是否指向同一个对象</td>
</tr>
<tr>
<td>assertNotSame</td>
<td>判断两个对象引用是否指向不同的对象</td>
</tr>
<tr>
<td>assertTrue</td>
<td>判断给定的布尔值是否为 true</td>
</tr>
<tr>
<td>assertFalse</td>
<td>判断给定的布尔值是否为 false</td>
</tr>
<tr>
<td>assertNull</td>
<td>判断给定的对象引用是否为 null</td>
</tr>
<tr>
<td>assertNotNull</td>
<td>判断给定的对象引用是否不为 null</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、数组断言</h4>
<p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、组合断言</h4>
<p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、异常断言</h4>
<p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule<strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式</strong>Assertions.assertThrows()** ,配合函数式编程就可以进行使用。</p>
<p>异常断言：一般断定业务逻辑一定出现异常</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、超时断言</h4>
<p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6、快速失败</h4>
<p>通过 fail 方法直接使得测试失败</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、前置条件（assumptions）</h3>
<p>JUnit 5 中的前置条件（assumptions【假设】）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得<strong>测试执行终止</strong>。<br>
assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p>
<h3> 5、嵌套测试</h3>
<p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p>
<p>嵌套测试情况下，<strong>外层的Test不能驱动内层的Before(After)Each/All之类的方法</strong>提前/之后运行<br>
<strong>内层的Test可以驱动外层的Before(After)Each/All之类的方法</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、参数化测试</h3>
<p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。<br>
利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p>
<p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持<strong>八大基础类以及String类型,Class类型</strong><br>
<strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参<br>
<strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参<br>
<strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参<br>
<strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p>
<p>CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7、迁移指南</h3>
<p>使用junit5测试，在进行迁移的时候需要注意如下的变化：<br>
注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。<br>
把@Before 和@After 替换成@BeforeEach 和@AfterEach。<br>
把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。<br>
把@Ignore 替换成@Disabled。<br>
把@Category 替换成@Tag。<br>
把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。</p>
<h2> 8、指标监控</h2>
<h3> 1、SpringBoot Actuator</h3>
<h4> 1、简介</h4>
<p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p>
<p>引入场景：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、1.x与2.x的不同</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230131173627517.png" alt="image-20230131173627517" loading="lazy"></p>
<h4> 3、如何使用</h4>
<p>引入场景<br>
访问 <strong><a href="http://localhost:8080/actuator/%5C*%5C" target="_blank" rel="noopener noreferrer">http://localhost:8080/actuator/\*\</a></strong>*</p>
<p>暴露所有监控信息为HTTP:</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、可视化</h4>
<p><a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener noreferrer">https://github.com/codecentric/spring-boot-admin</a></p>
<h3> 2、Actuator Endpoint</h3>
<h4> 1、最常使用的端点</h4>
<table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>auditevents</code></td>
<td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td>
</tr>
<tr>
<td><code>beans</code></td>
<td>显示应用程序中所有Spring Bean的完整列表。</td>
</tr>
<tr>
<td><code>caches</code></td>
<td>暴露可用的缓存。</td>
</tr>
<tr>
<td><code>conditions</code></td>
<td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td>
</tr>
<tr>
<td><code>configprops</code></td>
<td>显示所有<code>@ConfigurationProperties</code>。</td>
</tr>
<tr>
<td><code>env</code></td>
<td>暴露Spring的属性<code>ConfigurableEnvironment</code></td>
</tr>
<tr>
<td><code>flyway</code></td>
<td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td>
</tr>
<tr>
<td><code>health</code></td>
<td>显示应用程序运行状况信息。</td>
</tr>
<tr>
<td><code>httptrace</code></td>
<td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td>
</tr>
<tr>
<td><code>info</code></td>
<td>显示应用程序信息。</td>
</tr>
<tr>
<td><code>integrationgraph</code></td>
<td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td>
</tr>
<tr>
<td><code>loggers</code></td>
<td>显示和修改应用程序中日志的配置。</td>
</tr>
<tr>
<td><code>liquibase</code></td>
<td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td>
</tr>
<tr>
<td><code>metrics</code></td>
<td>显示当前应用程序的“指标”信息。</td>
</tr>
<tr>
<td><code>mappings</code></td>
<td>显示所有<code>@RequestMapping</code>路径列表。</td>
</tr>
<tr>
<td><code>scheduledtasks</code></td>
<td>显示应用程序中的计划任务。</td>
</tr>
<tr>
<td><code>sessions</code></td>
<td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td>
</tr>
<tr>
<td><code>shutdown</code></td>
<td>使应用程序正常关闭。默认禁用。</td>
</tr>
<tr>
<td><code>startup</code></td>
<td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td>
</tr>
<tr>
<td><code>threaddump</code></td>
<td>执行线程转储。</td>
</tr>
</tbody>
</table>
<p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>heapdump</code></td>
<td>返回<code>hprof</code>堆转储文件。</td>
</tr>
<tr>
<td><code>jolokia</code></td>
<td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td>
</tr>
<tr>
<td><code>logfile</code></td>
<td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td>
</tr>
<tr>
<td><code>prometheus</code></td>
<td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td>
</tr>
</tbody>
</table>
<p>最常用的Endpoint（端点）<br>
<strong>Health：监控状况</strong><br>
<strong>Metrics：运行时指标</strong><br>
<strong>Loggers：日志记录</strong></p>
<h4> 2、Health Endpoint</h4>
<p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p>
<p>重要的几点：<br>
health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告<br>
很多的健康检查默认已经自动配置好了，比如：数据库、redis等<br>
可以很容易的添加自定义的健康检查机制</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、Metrics Endpoint</h4>
<p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到；</p>
<ul>
<li>通过Metrics对接多种监控系统</li>
<li>简化核心Metrics开发</li>
<li>添加自定义Metrics或者扩展已有Metrics</li>
</ul>
<h4> 4、管理Endpoints</h4>
<h6> 1、开启与禁用Endpoints</h6>
<p>默认所有的Endpoint除shutdown都是开启的。<br>
需要开启或者禁用某个Endpoint。配置模式为  management.endpoint.&lt;endpointName&gt;.enabled = true<br>
或者禁用所有的Endpoint然后手动开启指定的Endpoint</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、暴露Endpoints</h5>
<p>支持的暴露方式</p>
<ul>
<li>HTTP：默认只暴露<strong>health</strong>和<strong>info</strong> Endpoint</li>
<li><strong>JMX</strong>：默认暴露所有Endpoint</li>
<li>除health和info，剩下的Endpoint都应该进行保护访问。如果引入SpringSecurity，则会默认配置安全访问规则</li>
</ul>
<h5> 3、定制 Endpoint</h5>
<h6> 1、定制 Health 信息</h6>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> 2、定制Metrics信息</h6>
<p>增加定制Metrics</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> 3、定制Endpoint</h6>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9、原理解析</h2>
<h3> 1、Profile功能</h3>
<p>为了方便多环境适配，springboot简化了profile功能。（在不同的生产环境下切换不同的配置文件）</p>
<h4> 1、application-profile功能</h4>
<p>默认配置文件  application.yaml；任何时候都会加载<br>
指定环境配置文件  application-{参数}.yaml<br>
激活指定环境：<br>
配置文件激活<br>
命令行激活：java -jar xxx.jar --<strong>spring.profiles.active=prod  --person.name=haha</strong><br>
修改配置文件的任意值，命令行优先<br>
默认配置与环境配置同时生效<br>
同名配置项，profile配置优先</p>
<h4> 2、@Profile条件装配功能</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、profile分组</h4>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、外部化配置</h3>
<h4> 1、外部配置源</h4>
<p>常用：<strong>Java属性文件</strong>、<strong>YAML文件</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong>；</p>
<h4> 2、配置文件查找位置</h4>
<p>(1) classpath 根路径</p>
<p>(2) classpath 根路径下config目录</p>
<p>(3) jar包当前目录</p>
<p>(4) jar包当前目录的config目录</p>
<p>(5) /config子目录的直接子目录</p>
<h4> 3、配置文件加载顺序：</h4>
<ol>
<li>当前jar包内部的application.properties和application.yml</li>
<li>当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</li>
<li>引用的外部jar包的application.properties和application.yml</li>
<li>引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</li>
</ol>
<h4> 4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</h4>
<h3> 3、自定义starter</h3>
<h4> 1、starter启动原理</h4>
<p>starter-pom（pom的场景启动器）引入 <strong>autoconfigurer</strong> 包<br>
autoconfigure包中配置使用 META-INF/spring.factories 中 EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类</p>
<p>starter→autoconfigure→spring-boot-starter</p>
<p>编写自动配置类 xxxAutoConfiguration -&gt; xxxxProperties</p>
<p>引入starter --- xxxAutoConfiguration --- 容器中放入组件 ---- 绑定xxxProperties ---- 配置项</p>
<h4> 2、自定义starter</h4>
<p>atguigu-hello-spring-boot-starter（启动器）<br>
atguigu-hello-spring-boot-starter-autoconfigure（自动配置包）</p>
<h3> 4、SpringBoot原理</h3>
<p>Spring原理、SpringMVC原理、自动配置原理、SpringBoot原理</p>
<h4> 1、SpringBoot启动过程</h4>
<p>分两大步：</p>
<p><strong>①创建 SpringApplication</strong><br>
保存一些信息<br>
判断当前应用的类型（通过 ClassUtils 类：原生servlet 还是 响应式编程）<br>
获取所有初始化启动引导器 bootstrappers（去spring.factories文件中找）<br>
找 ApplicationContextInitializer（去spring.factories找）<br>
找 ApplicationListener  ；应用监听器（去spring.factories找）</p>
<p><strong>②运行SpringApplication</strong><br>
StopWahtch：监听整个应用程序启动停止的监听器<br>
记录应用启动时间<br>
创建引导上下文（Context环境）<br>
获取到所有之前的 bootstrappers 挨个执行 intitialize() 来完成对引导启动器上下文环境设置<br>
让当前应用进入headless模式（简言之就是自力更生模式）<br>
获取所有 RunListener保存到SpringApplicationRunListene（运行监听器）（为了方便所有Listener进行事件感知）<br>
遍历 SpringApplicationRunListener 调用 starting 方法（项目正在 starting）<br>
保存命令行参数；ApplicationArguments<br>
准备环境 prepareEnvironment（）<br>
返回或者创建基础环境信息对象<br>
<strong>创建IOC容器</strong>（createApplicationContext（））	<br>
根据项目类型（Servlet）创建容器<br>
遍历所有的 ApplicationContextInitializer 。调用 initialize.。来对ioc容器进行初始化扩展功能<br>
遍历所有的 listener 调用 contextPrepared。EventPublishRunListenr；通知所有的监听器contextPrepared<br>
刷新IOC容器。refreshContext<br>
创建容器中的所有组件（Spring注解）<br>
所有监听 器 调用 listeners.started(context); 通知所有的监听器 started<br>
调用所有runners；callRunners()<br>
获取容器中的 ApplicationRunner<br>
获取容器中的  CommandLineRunner<br>
如果以上有异常，调用Listener 的 failed</p>
<h4> 2、Application Events and Listeners</h4>
<p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners</a></p>
<h4> 3、ApplicationRunner 与 CommandLineRunner</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230201174654270.png" alt="image-20230201174654270" loading="lazy"></p>
<h2> 10、常见问题</h2>
<p>1、过滤器与拦截器的区别是什么</p>
<p>过滤器(Filter)和拦截器(Interceptor)都是在Web应用程序中用于拦截请求和响应的机制，但它们之间有以下几个区别：</p>
<ol>
<li>触发时间：过滤器在请求被分发给目标资源之前拦截请求，而拦截器在请求被分发给目标处理器(例如Controller)之前或之后拦截请求。</li>
<li>应用范围：过滤器可以在Web应用程序中的任何地方使用，而拦截器只能在Spring MVC应用程序中使用。</li>
<li>执行顺序：过滤器的执行顺序是根据它们在Web.xml中的声明顺序执行的，而拦截器的执行顺序是根据它们在Spring配置文件中的声明顺序执行的。</li>
<li>功能不同：过滤器是用于过滤请求和响应，例如修改请求参数，添加HTTP头等等。而拦截器用于在请求处理前或后执行某些操作，例如权限检查，日志记录等等。</li>
<li>对于返回结果的处理：过滤器可以直接处理请求和响应的内容，而拦截器只能拦截请求和响应的处理流程，无法直接处理内容。</li>
</ol>
<p>综上所述，虽然过滤器和拦截器都是用于拦截请求和响应的机制，但它们的触发时间、应用范围、执行顺序、功能和对于返回结果的处理等方面都存在差异。在实际开发中，开发人员应该根据具体的需求来选择合适的机制。</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230120113626334.png" type="image/png"/>
    </item>
    <item>
      <title>SpringCloud 基础</title>
      <link>https://T4mako.github.io/code/java/SpringCloud%E5%9F%BA%E7%A1%80.html</link>
      <guid>https://T4mako.github.io/code/java/SpringCloud%E5%9F%BA%E7%A1%80.html</guid>
      <source url="https://T4mako.github.io/rss.xml">SpringCloud 基础</source>
      <description>1、微服务介绍 单体架构：将业务的所有能集中在一个项目中开发，打成一个包部署 优点：架构简单，部署成本低 缺点：耦合度高 分布式架构：根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。 优点：降低服务耦合、有利于服务升级拓展 缺点：架构复杂，难度大</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> 1、微服务介绍</h2>
<p><strong>单体架构</strong>：将业务的所有能集中在一个项目中开发，打成一个包部署<br>
优点：架构简单，部署成本低<br>
缺点：耦合度高</p>
<p><strong>分布式架构</strong>：根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。<br>
优点：降低服务耦合、有利于服务升级拓展<br>
缺点：架构复杂，难度大</p>
  <!-- more -->
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321132615.png" alt="" loading="lazy"></p>
<p>分布式架构要考虑的问题：<br>
服务拆分粒度如何？服务集群地址如何维护？服务之间如何实现远程调用？服务健康状态如何感知？</p>
<p><strong>微服务</strong>：微服务是一种经过<strong>良好架构设计的分布式架构方案</strong>，微服务架构特征：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321134134.png" alt="" loading="lazy"></p>
<p>微服务技术对比：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321134826.png" alt="" loading="lazy"></p>
<p>企业需求：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321134909.png" alt="" loading="lazy"></p>
<h2> 2、服务拆分及远程调用</h2>
<h3> 2.1、SpringCloud介绍</h3>
<p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">SpringCloud</a>是目前国内使用最广泛的微服务框架<br>
SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验</p>
<p>SpringCloud与SpringBoot的版本兼容关系如下：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321135409.png" alt="" loading="lazy"></p>
<p>本次学习的版本是Hoxton.SR10，因此对应的SpringBOot版本：2.3.x版本。</p>
<h3> 2.2、服务拆分及远程调用</h3>
<p>服务拆分注意事项：<br>
1、不同微服务，不要重复开发相同业务<br>
2、微服务数据独立，不要访问其他微服务的数据库<br>
3、微服务可以将自己的业务暴露为接口，供其他微服务调用</p>
<p>以课前资料中的微服务cloud-demo为例：</p>
<p>将项目解压到idea工作空间，通过idea打开工程文件：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321141027.png" alt="" loading="lazy"></p>
<h4> 2.2.1、功能需求</h4>
<p>运行项目，根据订单id查询订单的同时，返回的用户为null</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321145505.png" alt="" loading="lazy"></p>
<p>需求：根据订单id查询订单的同时，把订单所属的用户信息一起返回，<strong>即从一个服务到另一个服务的远程调用</strong></p>
<p><strong>远程调用</strong>方式解析：<strong>在Java代码中发起Http请求</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321145718.png" alt="" loading="lazy"></p>
<h4> 2.2.2、远程调用，注册RestTemplate</h4>
<p><em><strong>RestTemplate</strong></em>：Spring提供的<strong>发送Http请求的工具</strong>，封装了HTTP请求的细节，可以快速地向其他Web服务发送GET、POST、PUT、DELETE等请求</p>
<p>在order-service的OrderApplication中<strong>注册RestTemplate</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>service中使用RestTemplate</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个概念：<br>
<strong>服务提供者</strong>：一次业务中，被其他微服务调用的服务（提供接口给其他微服务）<br>
<strong>服务消费者</strong>：一次业务中，调用其他微服务的服务（调用其他微服务提供的接口）<br>
若服务A调用服务B，服务B调用服务C，则它<strong>既是提供者，又是消费者</strong></p>
<h2> 3、Eureka注册中心</h2>
<h3> 3.1、Eureka的作用</h3>
<ul>
<li>消费者该如何获取服务提供者具体信息：
<ul>
<li>服务提供者启动时向eureka注册自己的信息</li>
<li>eureka保存这些信息</li>
<li>消费者根据服务名称向eureka拉去提供者信息</li>
</ul>
</li>
<li>如果有多个服务提供者，消费者该如何选择：
<ul>
<li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li>
</ul>
</li>
<li>消费者如何感知服务提供者健康状态
<ul>
<li>服务提供者会每隔30s向EurekaServer发送心跳请求，报告健康状态</li>
<li>eureka会更新记录到服务列表信息，心跳不支持会被剔除</li>
<li>消费者就可以拉去到最新信息</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321180314.png" alt="" loading="lazy"></p>
<h3> 3.2、搭建Eureka服务</h3>
<p><strong>搭建EurekaServer服务步骤如下：</strong></p>
<p>1、创建项目，引入spring-cloud-starter-netflix-eureka-<strong>server</strong>依赖</p>
<p>创建<strong>新的服务（model）</strong>，选择maven</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322130611.png" alt="" loading="lazy"></p>
<p>2、编写<strong>启动类，添加@EnableEurekaServer</strong>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、添加application.yml文件，编写下面配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.3、Eureka服务注册</h3>
<p>将user-service项目引入到EurekaServer步骤如下：</p>
<p>1、在user-service项目中引入spring-cloud-starter-netflix-eureka-<strong>client</strong>依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在application.yml文件，编写下面配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，我们可以将user-service多次启动，模拟多实例部署，但为了避免端口冲突，需要修改端口设置</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322133510.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322133349.png" alt="" loading="lazy"></p>
<h3> 3.4、服务发现</h3>
<p>在OrderService完成服务拉取：<br>
服务拉取是基于服务名称获取服务列表，然后在服务列表做负载均衡</p>
<p>1、在OrderService的代码，修改访问的url路径，用服务名代替ip，端口：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在order-service项目的启动类OrderApplication中的RestTemplate添加负载均衡注解：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、Ribbon负载均衡</h2>
<h3> 4.1负载均衡流程</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210713224517686.png" alt="" loading="lazy"></p>
<p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求（拦截客户端发起的HTTP请求，RestTemplate符合，所以被拦截），获取拦截的地址，对地址做了修改。</p>
<p>基本流程如下：</p>
<ul>
<li>拦截我们的RestTemplate请求<a href="http://userservice/user/1" target="_blank" rel="noopener noreferrer">http://userservice/user/1</a></li>
<li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是userservice</li>
<li>DynamicServerListLoadBalancer根据userservice到eureka<strong>拉取服务</strong>列表</li>
<li>eureka<strong>返回列表</strong>，localhost:8081、localhost:8082</li>
<li>IRule利用<strong>内置负载均衡规则</strong>，从列表中选择一个，例如localhost:8081</li>
<li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82" target="_blank" rel="noopener noreferrer">http://localhost:8081/user/1，发起真实请求</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210713224724673.png" alt="" loading="lazy"></p>
<h3> 4.2、负载均衡策略</h3>
<h4> 4.2.1.负载均衡策略</h4>
<p>Ribbon的负载均衡规则是一个叫做IRule的接口来定义的，每一个子接口都是一种规则</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210713225653000.png" alt="" loading="lazy"></p>
<p>不同规则的含义如下：</p>
<table>
<thead>
<tr>
<th><strong>内置负载均衡规则类</strong></th>
<th><strong>规则描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>RoundRobinRule</td>
<td><strong>简单轮询</strong>服务列表来选择服务器。它是Ribbon<strong>默认</strong>的负载均衡规则。</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<code>&lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit</code>属性进行配置。</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>
</tr>
<tr>
<td><strong>ZoneAvoidanceRule</strong></td>
<td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个可用的服务器。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>重试机制的选择逻辑</td>
</tr>
</tbody>
</table>
<h4> 4.2.2修改Ribbon负载均衡策略</h4>
<p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p>
<ol>
<li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li>
</ol>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong>注意：一般用默认的负载均衡规则，不做修改。</strong></p>
</blockquote>
<h3> 4.3、饥饿加载</h3>
<p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p>
<p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、Nacos注册中心</h2>
<p><a href="https://nacos.io/" target="_blank" rel="noopener noreferrer">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">SpringCloud</a>中的一个组件，相比<a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener noreferrer">Eureka</a>功能更加丰富，在国内受欢迎程度较高</p>
<h3> 5.1、安装Nacos</h3>
<p><a href="/code/java/E:%5CStudy%5CJava%E5%90%8E%E7%AB%AF%5C14%E3%80%81SpringCloud%5C%E5%9F%BA%E7%A1%80%E7%AF%87%5Cday01-SpringCloud01%5C%E8%B5%84%E6%96%99%5CNacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97.html" target="blank">Nacos安装指南</a></p>
<p>在Windows下安装Nacos，安装路径：D:\Nacos</p>
<p>启动Nacos：<strong>startup.cmd -m standalone</strong> （单机启动）</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322145507.png" alt="" loading="lazy"></p>
<p>通过地址访问Nacos</p>
<h3> 5.2、服务注册到Nacos</h3>
<p>1、在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong>注意：不要忘了注释掉eureka的依赖。</strong></p>
</blockquote>
<p>2、配置Nacos地址</p>
<p>在user-service和order-service的application.yml中添加nacos地址：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong>注意：不要忘了注释掉eureka的依赖。</strong></p>
</blockquote>
<p>3、重启</p>
<p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p>
<h3> 5.3、Nacos集群配置</h3>
<h4> 5.3.1、服务分级存储模型</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210713232522531.png" alt="" loading="lazy"></p>
<p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:<br>
127.0.0.1:8081、127.0.0.1:8082、127.0.0.1:8083</p>
<p>假如这些实例分布于全国各地的不同机房，例如：<br>
127.0.0.1:8081，在上海机房<br>
127.0.0.1:8082，在上海机房<br>
127.0.0.1:8083，在杭州机房</p>
<p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p>
<p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型</p>
<p>微服务互相访问时，应该<strong>尽可能访问同集群实例</strong>，因为本地访问速度更快。当本集群内不可用时，才访问其它集群</p>
<h4> 5.3.2、给user-service配置集群</h4>
<p>修改application.yml，添加如下内容：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过修改application.yml，重启服务，实现不同集群</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322152537.png" alt="" loading="lazy"></p>
<h4> 5.3.2、同集群优先的负载均衡</h4>
<p>Nacos中提供了一个<code>NacosRule</code>的实现，可以<strong>优先从同集群中挑选实例</strong>。</p>
<p>1）给order-service配置集群信息</p>
<p>修改order-service的application.yml文件，添加集群配置：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改负载均衡规则</p>
<p>不修改负载均衡规则，依然以轮询的方式访问</p>
<p>修改order-service的application.yml文件，<strong>修改负载均衡规则</strong>：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会优先向同集群挑选实例，<strong>同集群下默认随机访问</strong>，如果同集群挂掉，会发生跨集群访问</p>
<h3> 5.4、权重配置</h3>
<p>实际部署中会出现这样的场景：</p>
<p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们<strong>希望性能好的机器承担更多的用户请求</strong>。<br>
但<strong>默认情况下NacosRule是同集群内随机挑选</strong>，不会考虑机器的性能问题。<br>
因此，<strong>Nacos提供了权重配置</strong>来控制访问频率，权重越大则访问频率越高。</p>
<p>在nacos控制台，通过<strong>编辑按钮</strong>，即可<strong>修改权重</strong></p>
<p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p>
<h3> 5.5、环境隔离</h3>
<p>Nacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层隔离</p>
<p>Nacos提供了<strong>namespace来实现环境隔离</strong>功能。</p>
<ul>
<li>nacos中可以有多个namespace</li>
<li>namespace下可以有group、service等</li>
<li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714000101516.png" alt="image-20210714000101516" loading="lazy"></p>
<h4> 5.5.1、创建namespace</h4>
<p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p>
<p>我们可以点击页面新增按钮，添加一个namespace</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230322162127.png" alt="" loading="lazy"></p>
<h4> 5.5.2、给微服务配置namespace</h4>
<p>给微服务配置namespace只能通过修改配置来实现。</p>
<p>例如，修改order-service的application.yml文件：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错</p>
<h3> 5.6、Nacos与Eureka的区别</h3>
<p>Nacos的服务实例分为两种l类型：<br>
临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。|<br>
非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p>
<p>​	配置一个服务实例为永久实例：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：<br>
Nacos注册中心细节分析：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714001728017.png" alt="" loading="lazy"></p>
<ul>
<li>
<p>Nacos与eureka的共同点</p>
<ul>
<li>都支持服务注册和服务拉取</li>
<li>都支持服务提供者心跳方式做健康检测</li>
</ul>
</li>
<li>
<p>Nacos与Eureka的区别</p>
<ul>
<li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，<strong>非临时实例采用主动检测模式</strong></li>
<li>临时实例心跳不正常会被<strong>剔除</strong>，非临时实例则不会被剔除</li>
<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>
<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li>
</ul>
</li>
</ul>
<h2> 6、Nacos管理配置</h2>
<p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。所以需要一种统一配置管理方案，可以<strong>集中管理所有实例的配置</strong>。<br>
Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p>
<p><strong>即将配置交给Nacos管理</strong></p>
<h3> 6.1、统一配置管理</h3>
<h4> 6.1.1、在Nacos中新建配置</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714164742924.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714164856664.png" alt="image-20210714164856664" loading="lazy"></p>
<blockquote>
<p>注意：项目的核心配置，<strong>需要热更新的配置才有放到nacos管理的必要</strong>。基本不会变更的一些配置还是保存在微服务本地比较好。</p>
</blockquote>
<h4> 6.1.2、配置的获取</h4>
<p>微服务要<strong>拉取nacos中管理的配置</strong>，并且<strong>与本地的application.yml配置合并</strong>，才能完成项目启动。</p>
<p>但<strong>若尚未读取application.yml，服务无法得知nacos地址</strong></p>
<p>因此<strong>spring</strong>引入了一种<strong>新的配置文件</strong>：<em><strong>bootstrap.yaml</strong></em>文件，会在application.yml之前被读取</p>
<p><strong>配置获取的步骤如下：</strong><br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/L0iFYNF.png" alt="" loading="lazy"></p>
<p>1）引入Nacos的配置管理客户端依赖</p>
<p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）在userservice中的Source目录添加一个bootstrap.yml文件，这个文件是引导文件，优先级高于application.yml</p>
<p>配置服务名称，开发环境，文件后缀名→就是Data Id，因此知道是nacos中的哪个文件<br>
配置Nacos地址，就知道去哪读取nacos中的配置文件</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据<br>
<code>${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}</code>作为文件id，来读取配置。<br>
本例中，就是去读取<code>userservice-dev.yaml</code>：</p>
<p>因此，可以删除application.yml中重复的配置：服务名称，Nacos地址等</p>
<p>3）读取nacos配置</p>
<p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.2、配置热更新</h3>
<p>在Nacos中配置文件变更后，微服务无需重启就可以感知。不过需要通过下面两种配置实现：</p>
<h4> 6.2.1、方式一</h4>
<p>在@Value注入的变量所在类上添加注解**@RefreshScope**：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6.2.2、方式二</h4>
<p>使用**@ConfigurationProperties**注解</p>
<p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在UserController中使用这个类代替@Value：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.3、配置共享</h3>
<p>微服务启动时，会<strong>从nacos读取多个配置文件</strong>，例如：</p>
<ul>
<li>
<p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p>
</li>
<li>
<p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p>
</li>
</ul>
<p>而<code>[spring.application.name].yaml</code>这个文件一定会加载，因此多环境<strong>共享配置</strong>可以<strong>写入这个文件</strong></p>
<h4> 1）添加一个环境共享配置</h4>
<p>在nacos中添加一个userservice.yaml文件：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323205335.png" alt="" loading="lazy"></p>
<h4> 2）在user-service中读取共享配置</h4>
<p>在user-service服务中，修改PatternProperties类，读取新添加的属性<br>
在user-service服务中，修改UserController，添加一个方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3）运行两个UserApplication，使用不同的profile</h4>
<p>修改UserApplication2这个启动项，改变其profile值：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323205521.png" alt="" loading="lazy"></p>
<p>这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。</p>
<p>启动UserApplication和UserApplication2，发现结果的差异<br>
可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</p>
<h4> 4）配置共享的优先级</h4>
<p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p>
<p><strong>服务名-profile.yaml &gt; 服务名称.yaml &gt; 本地配置</strong></p>
<h2> 7、Nacos集群搭建</h2>
<p>Nacos生产环境下一定要部署为集群状态</p>
<h3> 7.1、集群结构图</h3>
<p>官方给出的Nacos集群图：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323210255.png" alt="" loading="lazy"></p>
<p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里负载均衡器可以使用nginx。</p>
<p>我们计划的集群结构：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323210319.png" alt="" loading="lazy"></p>
<p>三个nacos节点的地址：</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>ip</th>
<th>port</th>
</tr>
</thead>
<tbody>
<tr>
<td>nacos1</td>
<td>192.168.137.1</td>
<td>8845</td>
</tr>
<tr>
<td>nacos2</td>
<td>192.168.137.1</td>
<td>8846</td>
</tr>
<tr>
<td>nacos3</td>
<td>192.168.137.1</td>
<td>8847</td>
</tr>
</tbody>
</table>
<h3> 7.2、集群搭建</h3>
<p>搭建集群的基本步骤：</p>
<ul>
<li>搭建数据库，初始化数据库表结构</li>
<li>下载nacos安装包</li>
<li>配置nacos</li>
<li>启动nacos集群</li>
<li>nginx反向代理</li>
</ul>
<h4> 7.2.1、初始化数据库</h4>
<p>Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。</p>
<p>这里以单点的数据库为例来讲解。</p>
<p>首先新建一个数据库，命名为nacos，而后导入相关的SQL</p>
<h4> 7.2.2、下载Nacos</h4>
<p><a href="https://github.com/alibaba/nacos/tags" target="_blank" rel="noopener noreferrer">nacos</a><br>
本例中使用1.4.1版本</p>
<h4> 7.2.3、配置Nacos</h4>
<p>进入nacos安装目录下的conf目录，修改配置文件cluster.conf.example，<strong>重命名为cluster.conf</strong></p>
<p>然后添加内容：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改conf文件下的application.properties文件，添加数据库配置</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323211509.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230323211653.png" alt="" loading="lazy"></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.3、启动</h3>
<p>将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3（模糊nacos集群）</p>
<p>然后分别修改三个文件夹中的application.properties</p>
<p>nacos1:</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nacos2:</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nacos3:</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后分别启动三个nacos节点：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 7.4、nginx反向代理</h3>
<p>修改nginx安装目录下的conf/nginx.conf文件，配置如下：</p>
<div class="language-nginx line-numbers-mode" data-ext="nginx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而后在浏览器访问：<a href="http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82" target="_blank" rel="noopener noreferrer">http://localhost/nacos即可。</a></p>
<p>代码中application.yml文件配置如下：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、Feign远程调用</h2>
<p>目前利用RestTemplate发起远程调用的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>存在下面的问题：<br>
代码可读性差，编程体验不统一<br>
参数复杂URL难以维护</p>
<p><a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener noreferrer">Feign</a>是一个声明式的http客户端，其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</p>
<h3> 8.1、Feign替代RestTemplate</h3>
<p>Fegin的使用步骤如下：</p>
<h4> 1）引入依赖</h4>
<p>在order-service服务的pom文件中引入feign的依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2）添加注解</h4>
<p>在order-service的启动类添加注解开启Feign的功能：</p>
<p><strong>@EnableFeginClients</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3）编写Feign的客户端</h4>
<p>在order-service中新建一个接口，内容如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求路径为<a href="http://userservice/user/" target="_blank" rel="noopener noreferrer">http://userservice/user/</a></p>
<p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p>
<ul>
<li>服务名称：userservice</li>
<li>请求方式：GET</li>
<li id="">请求路径：/user/</li>
<li>请求参数：Long id</li>
<li>返回值类型：User</li>
</ul>
<p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p>
<h4> 5）总结</h4>
<p>使用Feign的步骤：<br>
① 引入依赖<br>
② 添加@EnableFeignClients注解<br>
③ 编写FeignClient接口<br>
④ 使用FeignClient中定义的方法代替RestTemplate</p>
<h3> 8.2、自定义配置</h3>
<p>Feign可以支持很多的自定义配置，如下表所示：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>feign.Logger.Level</strong></td>
<td>修改日志级别</td>
<td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td>
</tr>
<tr>
<td>feign.codec.Decoder</td>
<td>响应结果的解析器</td>
<td>http远程调用的结果做解析，例如解析json字符串为java对象</td>
</tr>
<tr>
<td>feign.codec.Encoder</td>
<td>请求参数编码</td>
<td>将请求参数编码，便于通过http请求发送</td>
</tr>
<tr>
<td>feign.Contract</td>
<td>支持的注解格式</td>
<td>默认是SpringMVC的注解</td>
</tr>
<tr>
<td>feign.Retryer</td>
<td>失败重试机制</td>
<td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td>
</tr>
</tbody>
</table>
<p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p>
<p>配置Feign日志有两种方式：</p>
<h4> 8.2.1、配置文件方式</h4>
<p>基于配置文件修改feign的日志级别可以<strong>针对单个服务</strong>：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以针对所有服务（全局配置）：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而日志的级别分为四种：<br>
NONE：不记录任何日志信息，这是默认值。<br>
BASIC：仅记录请求的方法，URL以及响应状态码和执行时间<br>
HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息<br>
FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</p>
<h4> 8.2.2、Java代码方式</h4>
<p>也可以基于Java代码来修改日志级别，<strong>先声明一个类，然后声明一个Logger.Level的对象</strong>：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 8.3、Feign性能优化</h3>
<p>Feign<strong>底层发起http请求</strong>，依赖于其它的框架。其底层客户端实现包括：<br>
URLConnection：默认实现，不支持连接池<br>
Apache HttpClient ：支持连接池<br>
OKHttp：支持连接池</p>
<p>因此提高Feign的性能主要手段就是：<br>
① 使用<strong>连接池</strong>代替默认的URLConnection<br>
② 日志级别，最好使用basic或none</p>
<h4> 用Apache的HttpClient连接池</h4>
<p>1）引入依赖</p>
<p>在order-service的pom文件中引入Apache的HttpClient依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）配置连接池</p>
<p>在order-service的application.yml中添加配置：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结，Feign的优化：<br>
1.日志级别尽量用basic<br>
2.使用HttpClient或OKHttp代替URLConnection<br>
①  引入feign-httpClient依赖<br>
②  配置文件开启httpClient功能，设置连接池参数</p>
<h3> 8.4、Feign最佳实践</h3>
<p>Feign的客户端与服务提供者的controller代码非常相似：</p>
<p>feign客户端：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>controller：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以可以简化这种重复的代码</p>
<h4> 8.4.1、继承方式（不推荐）</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714190640857.png" alt="" loading="lazy"></p>
<p>缺点：</p>
<ul>
<li>
<p>服务提供方、服务消费方紧耦合</p>
</li>
<li>
<p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p>
</li>
</ul>
<h4> 8.4.2、抽取方式</h4>
<p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p>
<p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714214041796.png" alt="" loading="lazy"></p>
<h4> 8.4.3、实现Feign最佳实践</h4>
<h5> 1）抽取</h5>
<p>首先创建一个module，命名为feign-api</p>
<p>在feign-api中然后引入feign的starter依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230324143244552.png" alt="image-20230324143244552" loading="lazy"></p>
<h5> 2）在order-service中使用feign-api</h5>
<p>删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口</p>
<p>在order-service的pom文件中中引入feign-api的依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p>
<h5> 3）重启测试</h5>
<p>重启后，发现服务报错了：无法注入UserClient对象</p>
<p>这是因为UserClient现在在cn.itcast.feign.clients包下，<br>
而order-service的@EnableFeignClients注解是在cn.itcast.order包下，<strong>不在同一个包，无法扫描到UserClient</strong></p>
<h5> 4）解决扫描包问题</h5>
<p>方式一（批量扫描）：</p>
<p>指定Feign应该扫描的包：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二（精准定位，推荐）：</p>
<p><strong>指定需要加载的Client接口：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 9、Gateway服务网关</h2>
<p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>
<h3> 9.1、为什么需要网关</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714210131152.png" alt="" loading="lazy"></p>
<p><strong>网关功能：</strong></p>
<ul>
<li>
<p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p>
</li>
<li>
<p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p>
</li>
<li>
<p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p>
</li>
</ul>
<p>在SpringCloud中网关的实现包括两种：</p>
<ul>
<li>gatewat</li>
<li>zuul</li>
</ul>
<p>Zuul是基于Servlet的实现，属于阻塞式编程。而<strong>SpringCloudGateway</strong>则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p>
<h3> 9.2、gateway快速入门</h3>
<p>搭建网关服务的步骤：</p>
<h4> 1）创建新的module，引入依赖</h4>
<p>引入SpringCloudGateway的依赖和nacos的服务发现依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2）编写启动类</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3）编写路由配置及nacos地址</h4>
<p>创建application.yml文件，内容如下：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址</strong></p>
<p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p>
<h4> 4）网关路由的流程图</h4>
<p>整个访问的流程如下：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714211742956.png" alt="" loading="lazy"></p>
<p>总结：</p>
<p>网关搭建步骤：</p>
<ol>
<li>
<p>创建项目，引入nacos服务发现和gateway依赖</p>
</li>
<li>
<p>配置application.yml，包括服务基本信息、nacos地址、路由</p>
</li>
</ol>
<p>路由配置包括：</p>
<ol>
<li>
<p>路由id：路由的唯一标示</p>
</li>
<li>
<p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p>
</li>
<li>
<p>路由断言（predicates）：判断路由的规则，</p>
</li>
<li>
<p>路由过滤器（filters）：对请求或响应做处理</p>
</li>
</ol>
<h3> 9.3、断言工厂</h3>
<p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p>
<p>例如Path=/user/**是按照路径匹配，这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来<br>
处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>After</td>
<td>是某个时间点后的请求</td>
<td>-  After=2037-01-20T17:42:47.789-07:00[America/Denver]</td>
</tr>
<tr>
<td>Before</td>
<td>是某个时间点之前的请求</td>
<td>-  Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td>
</tr>
<tr>
<td>Between</td>
<td>是某两个时间点之前的请求</td>
<td>-  Between=2037-01-20T17:42:47.789-07:00[America/Denver],  2037-01-21T17:42:47.789-07:00[America/Denver]</td>
</tr>
<tr>
<td>Cookie</td>
<td>请求必须包含某些cookie</td>
<td>- Cookie=chocolate, ch.p</td>
</tr>
<tr>
<td>Header</td>
<td>请求必须包含某些header</td>
<td>- Header=X-Request-Id, \d+</td>
</tr>
<tr>
<td>Host</td>
<td>请求必须是访问某个host（域名）</td>
<td>-  Host=<strong>.somehost.org,</strong>.anotherhost.org</td>
</tr>
<tr>
<td>Method</td>
<td>请求方式必须是指定方式</td>
<td>- Method=GET,POST</td>
</tr>
<tr>
<td><strong>Path</strong></td>
<td>请求路径必须符合指定规则</td>
<td>- Path=/red/{segment},/blue/**</td>
</tr>
<tr>
<td>Query</td>
<td>请求参数必须包含指定参数</td>
<td>- Query=name, Jack或者-  Query=name</td>
</tr>
<tr>
<td>RemoteAddr</td>
<td>请求者的ip必须是指定范围</td>
<td>- RemoteAddr=192.168.1.1/24</td>
</tr>
<tr>
<td>Weight</td>
<td>权重处理</td>
<td></td>
</tr>
</tbody>
</table>
<h3> 9.4、路由过滤器GateFilter</h3>
<p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210714212312871.png" alt="" loading="lazy"></p>
<p>过滤器的作用：<br>
① 对路由的请求或响应做加工处理，比如添加请求头<br>
② 配置在路由下的过滤器只对当前路由的请求生效</p>
<p>defaultFilters的作用：<br>
① 对所有路由都生效的过滤器</p>
<h4> 9.4.1、路由过滤器的种类</h4>
<p>Spring提供了31种不同的路由过滤器工厂。例如：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>AddRequestHeader</td>
<td>给当前请求添加一个请求头</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td>移除请求中的一个请求头</td>
</tr>
<tr>
<td>AddResponseHeader</td>
<td>给响应结果中添加一个响应头</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td>从响应结果中移除有一个响应头</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td>限制请求的流量</td>
</tr>
</tbody>
</table>
<h4> 9.4.2、请求头过滤器</h4>
<p>以AddRequestHeader 为例：</p>
<blockquote>
<p>需求：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!</p>
</blockquote>
<p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前过滤器写在userservice路由下，因此<strong>仅仅对访问userservice的请求有效</strong>。</p>
<h4> 9.4.3、默认过滤器</h4>
<p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.5、全局过滤器</h3>
<h4> 9.5.1.全局过滤器作用</h4>
<p>全局过滤器是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样</p>
<p>它与GatewayFilter的区别：<br>
GatewayFilter通过配置定义，处理逻辑是固定的。而GlobalFilter的逻辑需要自己写代码实现<br>
（即复杂的逻辑可以自定义实现）</p>
<p>全局过滤器定义方式是<strong>实现GlobalFilter接口</strong>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在filter中编写自定义逻辑，可以实现下列功能：<br>
登录状态判断、权限校验、请求限流等</p>
<h4> 9.5.2、自定义全局过滤器</h4>
<p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：<br>
① 参数中是否有authorization<br>
② authorization参数值是否为admin<br>
如果同时满足则放行，否则拦截</p>
<p>实现：<br>
在gateway中定义一个过滤器：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 9.5.3、过滤器执行顺序</h4>
<p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p>
<p><em><strong>请求路由后</strong></em>，会将<strong>当前路由过滤器和DefaultFilter，GLobalFilter</strong>合并到一个<strong>过滤器链</strong>（集合）中，排序后依此执行每个过滤器</p>
<p><em><strong>排序的规则</strong></em>：</p>
<ul>
<li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li>
<li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li>
<li>路由过滤器和defaultFilter的order<strong>由Spring指定</strong>，默认是<strong>按照声明顺序从1递增</strong>。（路由过滤器和defaultFilter分开计算）</li>
<li>当过滤器的<strong>order值一样时</strong>，会按照 <strong>defaultFilter &gt; 路由过滤器 &gt; GlobalFilter</strong>的顺序执行。</li>
</ul>
<h3> 9.6.跨域问题</h3>
<h4> 9.6.1.什么是跨域问题</h4>
<p>跨域：用于限制一个网页或应用程序的访问另一个源（网域）的资源，域名不一致就是跨域，主要包括：</p>
<ul>
<li>
<p>域名不同： <a href="http://www.taobao.com" target="_blank" rel="noopener noreferrer">www.taobao.com</a> 和 <a href="http://www.taobao.org" target="_blank" rel="noopener noreferrer">www.taobao.org</a> 和 <a href="http://www.jd.com" target="_blank" rel="noopener noreferrer">www.jd.com</a> 和 <a href="http://miaosha.jd.com" target="_blank" rel="noopener noreferrer">miaosha.jd.com</a></p>
</li>
<li>
<p>域名相同，端口不同：localhost:8080和localhost8081</p>
</li>
</ul>
<p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p>
<p>解决方案：CORS，可以查看<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener noreferrer">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<h4> 9.6.2.解决跨域问题</h4>
<p>比如：从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p>
<p>在gateway服务的application.yml文件中，添加下面的配置：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230321132615.png" type="image/png"/>
    </item>
    <item>
      <title>SpringMVC 基础</title>
      <link>https://T4mako.github.io/code/java/SpringMVC.html</link>
      <guid>https://T4mako.github.io/code/java/SpringMVC.html</guid>
      <source url="https://T4mako.github.io/rss.xml">SpringMVC 基础</source>
      <description>1、SpringMVC简介 1、什么是MVC MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> 1、SpringMVC简介</h2>
<h3> 1、什么是MVC</h3>
<p>MVC是一种软件架构的<strong>思想</strong>，将软件按照<strong>模型、视图、控制器</strong>来划分</p>
<!-- more -->
<p>M：<strong>Model</strong>，模型层，指工程中的JavaBean，作用是处理数据<br>
JavaBean分为两类：<br>
一类称为<strong>实体类Bean</strong>：专门存储业务数据的，如 <strong>Student、User</strong> 等<br>
一类称为<strong>业务处理 Bean</strong>：指 <strong>Service 或 Dao 对象</strong>，专门用于处理业务逻辑和数据访问。</p>
<p>V：<strong>View</strong>，视图层，指工程中的<strong>html或jsp等页面</strong>，作用是与用户进行交互，展示数据</p>
<p>C：<strong>Controller</strong>，控制层，指<strong>工程中的servlet</strong>，作用是<strong>接收请求和响应浏览器</strong></p>
<p>MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器<br>
<strong>用户→View→Controller→Model→Controller→View→浏览器</strong></p>
<h3> 2、什么是SpringMVC</h3>
<p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的首选方案<br>
注：三层架构分为<strong>表述层（或表示层）</strong>、<strong>业务逻辑层（业务层）</strong>、<strong>数据访问层（持久层）</strong><br>
<strong>表述层表示前台页面和后台servlet</strong></p>
<h3> 3、SpringMVC的特点</h3>
<p>Spring 家族原生产品，与 IOC 容器等基础设施无缝对接<br>
基于原生的Servlet，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理<br>
表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案<br>
代码清新简洁，大幅度提升开发效率<br>
内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可<br>
性能卓著，尤其适合现代大型、超大型互联网项目要求</p>
<h2> 2、入门案例</h2>
<h3> 1、创建maven工程</h3>
<p>①添加web模块</p>
<p>注意创建web.xml文件目录需要修改为如下图：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230222202004184.png" alt="image-20230222202004184" loading="lazy"></p>
<p>②打包方式：war</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③引入依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、配置web.xml</h3>
<p><strong>注册SpringMVC的前端控制器DispatcherServlet</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、创建请求控制器</h3>
<p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是<strong>具体的请求有不同的处理过程</strong>，因此需要创建处理具体请求的类，即<strong>请求控制器</strong><br>
请求控制器中每一个处理请求的方法成为控制器方法<br>
因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IOC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、创建SpringMVC的配置文件</h3>
<p>SpringMVC的配置文件<strong>默认</strong>的位置和名称：<br>
位置：WEB-INF下<br>
名称：&lt;servlet-name&gt;-servlet.xml（web.xml文件下），所以当前配置下的配置文件名为SpringMVC-servlet.xml</p>
<p><strong>但配置文件一般都要放在resources下，因此在web.xml文件中添加&lt;init-param&gt;，配置springmvc的配置文件</strong><br>
<strong>所以，springmvc的配置文件一般放在resources下的springmvc.xml中</strong></p>
<p><strong>目标（物理视图）：/WEB-INF/templates/index.html<br>
视图前缀：/WEB-INF/templates/<br>
视图后缀：.html<br>
逻辑视图：index</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、配置Tomcat</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230222202824265.png" alt="image-20230222202824265" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230109150922942.png" alt="image-20230109150922942" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230109151044511.png" alt="image-20230109151044511" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230109151102714.png" alt="image-20230109151102714" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230109151143776.png" alt="image-20230109151143776" loading="lazy"></p>
<p><strong>不同的上下文对应Web服务器（单个Tomcat）中不同的工程</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230109151316851.png" alt="image-20230109151316851" loading="lazy"></p>
<p>**热部署 **</p>
<h3> 6、测试HelloWorld</h3>
<h4> ①实现对首页的访问</h4>
<p>在请求控制器中创建处理请求的方法</p>
<p>@RequestMapping注解：处理请求和控制器方法之间的映射关系<br>
@RequestMapping注解的<strong>value属性</strong>可以<strong>通过请求地址匹配请求</strong>，<strong>/表示的当前工程的上下文路径</strong>，匹配成功则执行对应的方法<br>
return的String字符串为对应的<strong>逻辑视图名称</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②通过超链接跳转到指定页面</h4>
<p>在主页index.html中设置超链接</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在请求控制器中创建处理请求的方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7、总结</h3>
<p><strong>浏览器发送请求</strong>，若请求地址<strong>符合前端控制器的url-pattern</strong>，该请求就会被前端控制器<strong>DispatcherServlet处理</strong>。前端控制器会<strong>读取SpringMVC的核心配置文件</strong>，通过<strong>扫描组件找到控制器</strong>，将请求地址和控制器中**@RequestMapping注解的value属性值进行匹配**，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h3> 8、web.xml的改进</h3>
<p>设置SpringMVC核心配置文件的位置和名称<br>
将DispatcherServlet的初始化时间提前到服务器启动时</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、@RequestMapping注解</h2>
<h3> 1、@RequestMapping注解的功能</h3>
<p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。<br>
SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h3> 2、@RequestMapping注解的位置</h3>
<p>@RequestMapping<strong>标识一个类</strong>：设置映射请求的<strong>请求路径的初始信息</strong><br>
@RequestMapping<strong>标识一个方法</strong>：设置映射请求请求<strong>路径的具体信息</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、@RequestMapping注解的value属性</h3>
<p>作用：通过请求的请求路径匹配请求<br>
<strong>value属性是数组类型</strong>，即当前浏览器发送请求的请求路径匹配<strong>value属性中的任何一个值</strong>，则当前请求就会被注解所表示的方法<strong>进行处理</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、@RequestMapping注解的method属性</h3>
<p>作用：通过请求的<strong>请求方式匹配请求</strong><br>
method属性是RequestMethod类型的<strong>数组</strong>，即当前浏览器所发送的请路径匹配method属性中的任何一种请求方式<br>
若<strong>浏览器发送请求</strong>的请求路径和@RequestMapping的value值匹配，但<strong>请求方式和method值不匹配，报405错误</strong><br>
默认值为都支持</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在@RequestMapping的基础上，结合请求方式的一些派生注解：<br>
@GetMapping，@PostMapping，@DeleteMapping，@PutMapping</p>
<h3> 5、@RequestMapping注解的params属性（了解）</h3>
<p>作用：通过请求的请求参数匹配请求，即浏览器发送的请求的请求参数必须满足params属性的设置<br>
params可以使用四种表达式：<br>
"param"：要求请求映射所匹配的请求必须携带param请求参数<br>
"!param"：要求请求映射所匹配的请求必须不能携带param请求参数<br>
"param=value"：要求请求映射所匹配的请求必须携带param请求参数且param=value<br>
"param!=value"：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400</p>
<h3> 6、@RequestMapping注解的headers属性（了解）</h3>
<p>作用：通过请求的请求头匹配请求，即浏览器发送的请求头信息必须满足headers属性的设置<br>
"header"：要求请求映射所匹配的请求必须携带header请求头信息<br>
"!header"：要求请求映射所匹配的请求必须不能携带header请求头信息<br>
"header=value"：要求请求映射所匹配的请求必须携带header请求头信息且header=value<br>
"header!=value"：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到<br>
（注：请求头和响应头不区分大小写）</p>
<h3> 7、SpringMVC支持ant风格的路径</h3>
<p>SpringMVC支持ant风格的路径<br>
在@requestMapping注解的value属性值中设置一些特殊字符：</p>
<p>*<em>？：表示任意的单个字符，不包括?本身<br>
<em>：表示任意的0个或多个字符，不包括?和/<br>
**：表示任意层数的任意目录，**只能写在双斜线中，中间，左右不能有其他字符</em></em><br>
注意：在使用**时，只能使用/**/xxx的方式</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8、SpringMVC支持路径中的占位符（重点）</h3>
<p>传统方式：/deleteUser?id=1  通过？传参数<br>
rest方式：/user/delete/1   通过/传参数</p>
<p>需要在@RequestMapping注解的value属性所设置的路径中，使用**{xxx}<strong>的方式表示路径中的数据<br>
再通过</strong>@PathVariable注解**，将占位符所标识的值和控制器方法的形参进行绑定</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、SpringMVC获取请求参数</h2>
<h3> 1、通过ServletAPI获取</h3>
<p>只需要在控制器方法的新参位置设置HttpServletRequest类型的形参<br>
就可以在控制器方法中使用request对象获取请求参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、通过控制器方法的形参获取请求参数</h3>
<p>只需要在控制器方法的形参位置，设置一个形参，形参的名字和请求参数的名字一致即可</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、@RequestParam  将请求参数和控制器形参绑定</h3>
<p>@RequestParam注解的三个属性：value、required，defaultValue</p>
<p>value：设置和形参绑定请求参数的名字<br>
required：设置是否必须传输value所对应的请求参数<br>
默认值为true，表示value所对应的请求参数必须传输，否则页面报错（400错误）<br>
若设置为false，表示value所对应的请求参数不是必须传输，若为传输，则形参值为null	<br>
defaultValue：设置当没有传输value所对应的请求参数时，为形参设置的默认值，此时和required属性值无关</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、@RequestHeader</h3>
<p>将请求头信息和控制器方法的形参绑定</p>
<h3> 5、@CookieValue</h3>
<p>将cookie数据和控制器方法的形参绑定</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、通过实体类类型的形参获取请求参数</h3>
<p>需要在控制器方法的形参位置设置实体类类型的形参</p>
<p>要保证实体类中的属性的属性名和请求参数的名字一致</p>
<p>可以通过实体类类型的形参获取请求参数</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7、解决获取请求参数的乱码问题</h3>
<p>在web.xml中配置Spring的编码过滤器CharacterEncodingFilter</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注：SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</strong></p>
<h2> 5、域对象共享数据</h2>
<h3> 1、使用ServletAPI向request域对象共享数据</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、使用ModelAndView向request域对象共享数据</h3>
<p>ModelAndView包含Model和View的功能：<br>
Model：向请求域中共享数据<br>
View：设置逻辑视图实现页面跳</p>
<p>通过ModelAndView向请求域共享数据：<br>
使用ModelAndView时，可以使用其<strong>Model功能向请求域共享数据</strong><br>
使用<strong>View功能设置逻辑视图</strong>，但是控制器方法<strong>一定要将ModelAndView作为方法的返回值</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、使用Model，ModelMap，Map向request域对象共享数据</h3>
<p>Model，ModelMap和Map的关系：<br>
在底层中，这些类型的形参最终都是通过BindingAwareModelMap创建<br>
Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、向session域共享数据</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、向application域共享数据</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、SpringMVC的视图</h2>
<p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户<br>
SpringMVC视图的种类很多，默认有转发视图和重定向视图<br>
当工程引入jstl的依赖，转发视图会自动转换为JstlView<br>
若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<h3> 1、ThymeleafView</h3>
<p>当控制器方法中所设置的视图名称<strong>没有任何前缀</strong>时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析（ThymeleafView），视图名称拼接视图前缀和视图</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、转发视图</h3>
<p>SpringMVC中默认的转发视图是InternalResourceView</p>
<p>当控制器方法中所设置的视图名称以"forward:"为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀"forward:"去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、重定向视图</h3>
<p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以"redirect:"为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀"redirect:"去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、视图控制器view-controller</h3>
<p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用viewcontroller标签进行表示</p>
<p>SpringMVC.xml中添加：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、RESTful</h2>
<h3> 1、RESTful简介</h3>
<p>REST：Representational State Transfer，表现层资源状态转移。</p>
<p>①资源<br>
将服务器看作是由很多离散的资源组成，即一切皆资源。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<p>②资源的表述<br>
资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<p>③状态转移<br>
状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h3> 2、RESTful的实现</h3>
<p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：<br>
<strong>GET 用来获取资源<br>
POST 用来新建资源<br>
PUT 用来更新资源<br>
DELETE用来删除资源</strong></p>
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询操作</td>
<td>getUserById?id=1</td>
<td>user/1--&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user--&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id=1</td>
<td>user/1--&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user--&gt;put请求方式</td>
</tr>
</tbody>
</table>
<h3> 3、HiddenHttpMethodFilter</h3>
<p>浏览器目前只能发送get和post请求<br>
若要发送put和delete请求，需要<strong>在web.xml中配置一个过滤器HiddenMethodFilter</strong><br>
配置了过滤器之后，发送的请求要<strong>满足两个条件</strong>，才能将请求方式转换为put或delete<br>
<strong>1、当前请求的请求方式必须为post<br>
2、当前请求参数必须传输请求参数_method,_method的值才是最终的请求方式</strong></p>
<p><strong>web.xml：</strong><br>
<strong>注：其他过滤器一定要放在Spring的编码过滤器的后面</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>index.html:</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Controller:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、RESTful案例</h2>
<h3> 1、准备工作</h3>
<p>①创建pojo实体类<br>
②准备dao模拟数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、功能清单</h3>
<table>
<thead>
<tr>
<th>功能</th>
<th>URL 地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>访问首页√</td>
<td>/</td>
<td>GET</td>
</tr>
<tr>
<td>查询全部数据√</td>
<td>/employee</td>
<td>GET</td>
</tr>
<tr>
<td>删除√</td>
<td>/employee/2</td>
<td>DELETE</td>
</tr>
<tr>
<td>跳转到添加数据页面√</td>
<td>/toAdd</td>
<td>GET</td>
</tr>
<tr>
<td>执行保存√</td>
<td>/employee</td>
<td>POST</td>
</tr>
<tr>
<td>跳转到更新数据页面√</td>
<td>/employee/2</td>
<td>GET</td>
</tr>
<tr>
<td>执行更新√</td>
<td>/employee</td>
<td>PUT</td>
</tr>
</tbody>
</table>
<h3> 3、具体功能：访问首页</h3>
<h4> ①配置web.xml</h4>
<p>浏览器向服务器请求访问css样式等静态资源<br>
tomcat的xml配置的DefaultServlet的url-pattern是/<br>
当前工程的web.xml配置的前端控制器DispatcherServlet的url-pattern也是/<br>
因为tomcat中的xml有继承性，当前工程为子，tomcat为父，因此处理请求时会全给DispatcherServlet处理，而它不能处理静态资源等，只能处理有请求的request，所以要在当前工程的web.xml添加配置</p>
<p><strong>web.xml:</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②创建页面</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、具体功能：查询所有员工数据</h3>
<h4> ①控制器方法</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②创建employee_list.html</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、其他功能添加</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9、SpringMVC处理ajax请求</h2>
<h3> 1、@RequestBody</h3>
<p>@RequestBody可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值<br>
<strong>@RequestBody注解将HTTP <em>请求体</em> 中的 <em>JSON或XML等数据</em> 转换为 <em>Java对象</em> 。</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：<br>
requestBody:username=admin&amp;password=123456</p>
<h3> 2、@RequestBody获取json格式的请求参数</h3>
<p>1、@RequestBody：将请求体中的内容和控制器方法的形参惊醒绑定<br>
2、使用@RequestBody注解将json格式的请求参数转换为java对象</p>
<p>在使用了axios发送ajax请求之后，浏览器发送到服务器的请求参数有两种格式：<br>
1、name=value&amp;name=value...，此时的请求参数可以通过request.getParameter()获取，对应SpringMVC中，可以直接通过控制器方法的形参获取此类请求参数<br>
2、{key:value,key:value,...}，此时<strong>无法通过request.getParameter()获取</strong>，之前我们使用操作json的相关jar包gson或jackson处理此类请求参数，可以将其转换为指定的实体类对象或map集合。在SpringMVC中，<strong>直接使用@RequestBody注解</strong>标识控制器方法的形参即可将此类请求参数转换为java对象</p>
<p><strong>使用@RequestBody获取json格式的请求参数的条件</strong>：</p>
<p>1、导入jackson的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、在控制器方法的形参位置，设置<strong>json格式的请求参数要转换成的java类型</strong>（实体类或map）的参数，并使用@RequestBody注解标识</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用@RequestBody注解将json格式的数据转换为map集合</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、@ResponseBody</h3>
<p>@ResponseBody用于标识一个控制器方法，可以将该方法的**返回值直接作为响应报文的响应体响应到浏览器  **</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、@ResponseBody响应浏览器json数据</h3>
<p>1、@RequestBody：将请求体中的内容和控制器方法的形参进行绑定<br>
2、使用@requestBody注解将json格式的请求参数转换为java对象</p>
<p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为json字符串。在SpringMVC中，我们可以直接**使用@ResponseBody注解实现此功能  **</p>
<p>**@ResponseBody响应浏览器json数据的条件：  **</p>
<p>1、导入jackson的依赖  (同上一个)<br>
2、SpringMVC的配置文件中设置开启mvc的注解驱动<br>
3、<strong>使用@ResponseBody注解标识控制器方法</strong>，在方法中，将需要转换为json字符串并响应到浏览器的<strong>java对象作为控制器方法的返回值</strong>，此时SpringMVC就可以将此对象直接转换为json字符串并响应到浏览器</p>
<p>常用的Java对象转换为json结果：<br>
实体类--&gt;json对象<br>
map--&gt;json对象<br>
list--&gt;json数组</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、@RestController注解</h3>
<p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解<br>
<strong>@RestController = @Controller+@ResponseBody</strong></p>
<h2> 10、文件上传和下载</h2>
<h3> 1、文件下载</h3>
<p>ResponseEntity:可以作为控制器方法的返回值，表示响应到浏览器的响应报文<br>
ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文使用ResponseEntity实现下载文件的功能</p>
<p>文件下载的模板：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、文件上传</h3>
<p>文件上传要求form表单的请求方式<strong>必须为post</strong>，并且添加**属性enctype="multipart/form-data"**SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p>
<p>上传步骤：<br>
①添加依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②在SpringMVC的配置文件中添加配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>③控制器方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 11、拦截器</h2>
<h3> 1、拦截器的配置</h3>
<p>SpringMVC中的拦截器用于拦截控制器方法的执行<br>
SpringMVC中的拦截器需要实现HandlerInterceptor<br>
SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、拦截器的三个抽象方法</h3>
<p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法<br>
postHandle：控制器方法执行之后执行postHandle()<br>
afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</p>
<h3> 3、多个拦截器的执行顺序</h3>
<p>多个拦截器的执行顺序和在SpringMVC配置文件中配置的顺序有关<br>
preHandle()按照配置的顺序执行，而postHandle()和afterCompletion()按照配置的反序执行</p>
<p>若拦截器中有某个拦截器的preHandle()返回了false<br>
拦截器的preHandel()返回false和它之前的拦截器的preHandle()都会执行<br>
所有的postHandle()都不执行<br>
拦截器的preHandle()返回false之前的拦截器的afterCompletion()会执行</p>
<h2> 12、异常处理器</h2>
<h3> 1、基于配置的异常处理</h3>
<p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver<br>
HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver<br>
SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、基于注解的异常处理</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 13、注解配置SpringMVC</h2>
<p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p>
<h3> 1、WebInit类，代替web.xml</h3>
<p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器（Tomcat）。 Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、SpringConfig类，代替spring的配置文件</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、WebConfig类，代替SpringMVC的配置文件：</h3>
<p>功能：扫描组件，视图解析器，默认的servlet，mvc注解驱动，视图控制器、文件上传解析器、拦截器、异常解析器</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 14、SpringMVC执行流程</h2>
<h3> 14.1、SpringMVC常用组件</h3>
<p>DispatcherServlet：前端控制器，不需要工程师开发，由框架提供<br>
作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<p>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供<br>
作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<p>Handler：处理器，需要工程师开发<br>
作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<p>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供<br>
作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<p>ViewResolver：视图解析器，不需要工程师开发，由框架提供<br>
作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<p>View：视图<br>
作用：将模型数据通过页面展示给用户</p>
<h3> 14.2、DispatcherServlet初始化过程</h3>
<p>DispatcherServlet <strong>本质上是一个 Servlet</strong>，所以天然的遵循 Servlet 的生命周期。所以宏观上是 <strong>Servlet生命周期来进行调度</strong>。</p>
<p>①初始化WebApplicationContext<br>
所在类：org.springframework.web.servlet.FrameworkServlet</p>
<p>②创建WebApplicationContext<br>
所在类：org.springframework.web.servlet.FrameworkServlet</p>
<p>③DispatcherServlet初始化策略<br>
FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件<br>
所在类：org.springframework.web.servlet.DispatcherServlet</p>
<h3> 14.3、DispatcherServlet调用组件处理请求</h3>
<p>①processRequest()<br>
FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)<br>
所在类：org.springframework.web.servlet.FrameworkServlet</p>
<p>②doService()<br>
所在类：org.springframework.web.servlet.DispatcherServlet</p>
<p>③doDispatch()<br>
所在类：org.springframework.web.servlet.DispatcherServlet</p>
<h3> 14.4、SpringMVC的执行流程</h3>
<p>1、用户向服务器发送请求，请求<strong>被SpringMVC 前端控制器 DispatcherServlet捕获</strong>。</p>
<p>2、DispatcherServlet<strong>对请求URL</strong>进行<strong>解析</strong>，得到请求<strong>资源标识符（URI）</strong>，<strong>判断请求URI对应的映射</strong>：</p>
<p>如果不存在：<br>
再判断是否配置了mvc:default-servlet-handler|<br>
如果没配置，则控制台报映射查找不到，客户端展示404错误<br>
如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<p>如果存在则执行下面的流程</p>
<p>3、根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p>
<p>4、DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p>
<p>5、如果成功获得HandlerAdapter，此时将开始执行<strong>拦截器的preHandler</strong>(…)方法【正向】</p>
<p>6、提取Request中的模型数据，填充Handler入参，开始<strong>执行Handler（Controller 控制器)方法</strong>，处理请求。<br>
在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：<br>
HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息<br>
数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>
数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等<br>
数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<p>7、Handler执行完成后，向DispatcherServlet<strong>返回一个ModelAndView对象</strong>。</p>
<p>8、此时将开始执行<strong>拦截器的postHandle(...)方法</strong>【逆向】。</p>
<p>9、根据返回的ModelAndView（此时会判断是否存在异常：如果<strong>存在异常</strong>，则执行<strong>HandlerExceptionResolver进行异常处理</strong>）选择一个适合的ViewResolver进行<strong>视图解析</strong>，根据Model和View，来渲染视图。</p>
<p>10、<strong>渲染视图完毕</strong>执行<strong>拦截器的afterCompletion(…)方法</strong>【逆向】</p>
<p>11、将**渲染结果返回给客户端 **</p>
<h2> 15、SSM整合</h2>
<h3> 1、ContextLoaderListener</h3>
<p><strong>SpringMVC的IOC</strong>容器在<strong>DispatcherServlet初始化</strong>的时候创建，而配置文件中加入load-on-startup标签将<strong>DispatcherServlet初始化提前到服务器启动时创建servlet时创建</strong>，所以SpringMVC的IOC容器在服务器启动时就会创建。但SpringMVC的IOC容器中要注入Service等对象，而它由Spring的IOC创建，所以<strong>Spring的IOC要比SpringMVC的IOC创建要提前</strong>。在服务器启动时，会<strong>先创建监听器，过滤器，Servlet</strong>。所以<strong>将读取Spring配置文件，创建Spring的IOC放在监听器的初始方法中</strong>。</p>
<p><strong>web.xml新增：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>spring.xml</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、准备工作</h3>
<h4> ①创建Maven Module</h4>
<h4> ②导入依赖</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③创建表</p>
<h3> 3、配置web.xml</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、配置springmvc.xml</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、搭建MyBatis环境</h3>
<h4> ①创建属性文件jdbc.properties</h4>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②创建MyBatis的核心配置文件mybatis-config.xml</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ③创建Mapper接口和映射文件</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ④创建日志文件log4j.xml</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、创建Spring的配置文件并配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7、测试功能</h3>
<h4> ①创建组件</h4>
<p>实体类Employee  （略）</p>
<p>控制层组件EmployeeController</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建接口EmployeeService</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建实现类EmployeeServiceImpl</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ②创建页面</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ③访问测试分页功能</h4>
<p><a href="http://localhost:8080/ssm/employee/page/2" target="_blank" rel="noopener noreferrer">http://localhost:8080/ssm/employee/page/2</a></p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230222202004184.png" type="image/png"/>
    </item>
    <item>
      <title>Spring 基础</title>
      <link>https://T4mako.github.io/code/java/Spring%E5%9F%BA%E7%A1%80.html</link>
      <guid>https://T4mako.github.io/code/java/Spring%E5%9F%BA%E7%A1%80.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Spring 基础</source>
      <description>1、Sprin5框架概述 1、 Spring 是轻量级的开源的 JavaEE 框架 2、 Spring 可以解决企业应用开发的复杂性 3、 Spring 有两个核心部分： IOC 和 Aop （1） IOC：控制反转，把创建对象过程交给 Spring 进行管理</description>
      <category>java</category>
      <content:encoded><![CDATA[<h2> 1、Sprin5框架概述</h2>
<p>1、 Spring 是<strong>轻量级</strong>的<strong>开源</strong>的 JavaEE 框架<br>
2、 Spring 可以解决企业应用开发的复杂性<br>
3、 Spring 有两个核心部分： IOC 和 Aop<br>
<strong>（1） IOC：控制反转，把创建对象过程交给 Spring 进行管理</strong></p>
<!-- more -->
<p><strong>（2）Aop：面向切面，不修改源代码进行功能增强</strong><br>
4、 Spring 特点<br>
（1）<strong>方便解耦，简化开发</strong><br>
（2） <strong>Aop 编程支持</strong><br>
（3）<strong>方便程序测试</strong><br>
（4）<strong>方便和其他框架进行整合</strong><br>
（5）<strong>方便进行事务操作</strong><br>
（6）<strong>降低 API 开发难度</strong><br>
5、现在课程中，选取 Spring 版本 5.x</p>
<h2> 2、Spring的下载与使用</h2>
<p>Spring下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener noreferrer">https://repo.spring.io/release/org/springframework/spring/</a></p>
<h3> 1、简单使用</h3>
<h4> 1、新建项目</h4>
<h4> 2、导入相关jar包</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221107194510137.png" alt="image-20221107194510137" loading="lazy"></p>
<h4> 3、创建普通类，在这个类创建普通方法</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、创建 Spring 配置文件，在配置文件配置创建的对象</h4>
<p><strong>Spring 配置文件使用 xml 格式</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221107195317174.png" alt="image-20221107195317174" loading="lazy"></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、进行测试代码编写</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、IOC（概念和原理）</h2>
<h3> 1、什么是 IOC</h3>
<p>（1）控制反转，把<strong>对象创建</strong>和<strong>对象之间的调用过程</strong>，<strong>交给 Spring 进行管理 **<br>
（2）使用 IOC <strong>目的</strong>：为了</strong>耦合度降低 **<br>
（3）做入门案例就是 IOC 实现</p>
<h3> 2、IOC底层原理</h3>
<p>xml 解析、工厂模式、反射</p>
<p>IOC过程：<br>
第一步：xml配置文件，配置创建的对象</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二步：有service类和dao类，创建工厂类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、IOC（ BeanFactory 接口）</h3>
<p>1、 IOC 思想基于 IOC 容器完成， **IOC 容器底层就是对象工厂 **<br>
2、 Spring 提供 IOC 容器实现两种方式：（两个接口）<br>
（1） <strong>BeanFactory</strong>： IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用 * **加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象 **<br>
（2） <strong>ApplicationContext</strong>： <mark>BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人 员进行使用 * 加载配置文件时候就会把在配置文件对象进行创建</mark><br>
3、 ApplicationContext 接口有两个主要的实现类<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221108134930944.png" alt="image-20221108134930944" loading="lazy"></p>
<p>通常用<strong>ClassPathXmlApplication</strong>，通过**类路径（当前文件夹）**访问xml文件，而FileSystemXmlAppliaction通过文件系统访问，不常用。</p>
<h2> 4、IOC操作Bean管理（基于xml文件）</h2>
<h3> 1、什么是bean管理</h3>
<p>Bean 管理指的是两个操作<br>
（1） Spring 创建对象<br>
（2） Spirng 注入属性</p>
<h3> 2、Bean管理操作有两种实现方式</h3>
<p>（1）基于 xml 配置文件方式实现<br>
（2）基于注解方式实现</p>
<h3> 3、基于xml配置文件方式实现</h3>
<h4> 1、基于xml方式创建对象</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221109115835509.png" alt="image-20221109115835509" loading="lazy"></p>
<p>（1）在spring配置文件中使用bean标签，标签里添加对应的属性，可以实现对象的创建<br>
（2）在bean标签有横队属性，介绍常用的属性<br>
id 属性：唯一标识<br>
class 属性：类全路径（包类路径）<br>
（3）创建对象时候，默认也是执行无参数构造方法完成对象创建</p>
<h4> 2、基于xml方式注入属性</h4>
<p><strong>DI：依赖注入，就是注入属性</strong></p>
<h5> 1、第一种注入方式：使用set方式进行注入</h5>
<p>（1）创建类，定义属性和对应的 set 方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在 spring 配置文件配置对象创建，配置属性注入</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、第二种注入方式：使用有参构造进行注入</h5>
<p>（1）创建类，定义属性，创建对应有参数的构造方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在spring配置文件中进行配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、p名称空间注入（了解）</h4>
<p>（1）使用p名称空间，可以简化基于xml配置方式</p>
<p>第一步：添加p名称空间咋配置文件中</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221109140816544.png" alt="image-20221109140816544" loading="lazy"></p>
<p>第二步：进行属性注入，在 bean 标签里面进行操作</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、xml 注入其他类型属性</h3>
<h4> 1、字面量</h4>
<p>（1） null 值</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）属性值包含特殊符号</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、注入属性-外部 bean</h3>
<p>（1）创建两个类service类和dao类<br>
（2）在service里调用dao的方法<br>
（3）在Spring配置文件中进行配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、注入属性-内部bean和级联赋值</h3>
<p>（1）一对多关系：<br>
部门和员工 一个部门有多个员工，一个员工属于一个部门 部门是一，员工是多<br>
（2）在实体类之间表示一对多关系，<strong>员工表示所属部门，使用对象类型属性进行表示</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）在 spring 配置文件中进行配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7、注入属性-级联赋值</h3>
<p>第一种写法：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种写法：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8、xml注入集合属性</h3>
<h4> 1、注入数组，List集合，Map集合类型属性</h4>
<p>（1）创建类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在spring配置文件进行配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、在集合里面设置对象类型值</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、把集合注入部分提取出来</h4>
<p>（1）在spring配置文件中引入名称空间 util</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）使用util标签完成lsit集合注入提取</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9、FactoryBean</h3>
<p>1、 Spring 有两种类型 bean，一种 <strong>普通 bean</strong>，另外一种 <strong>工厂 bean</strong>（FactoryBean）<br>
普通 bean：在配置文件中定义 bean 类型就是返回类型<br>
工厂bean：在配置文件定义bean类型可以和返回类型不一样</p>
<p>2、工厂bean的使用<br>
第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean<br>
第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10、bean作用域</h3>
<p>1、在Spring里，设置创建bean实例是单实例还是多实例（同一个对象还是每次都创建新的对象）</p>
<p>2、在Spring里，默认情况下，bean是单实例对象</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221112103808752.png" alt="image-20221112103808752" loading="lazy"></p>
<p>3、如何设置单实例还是多实例</p>
<p>（1）在 spring 配置文件 bean 标签里面有属性（<strong>scope</strong>）用于设置单实例还是多实例<br>
（2） scope 属性值 第一个值 默认值，<strong>singleton</strong>，表示是单实例对象 第二个值 <strong>prototype</strong>，表示是多实例对象</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221112104043739.png" alt="image-20221112104043739" loading="lazy"></p>
<p>（3） singleton 和 prototype 区别<br>
1、singleton 单实例， prototype 多实例<br>
2、  设置 scope 值是 <strong>singleton</strong> 时候，<strong>加载 spring 配置文件时候就会创建单实例对象</strong><br>
设置 scope 值是 <strong>prototype</strong> 时候，不是在加载 spring 配置文件时候创建对象，在 <strong>调用 getBean 方法时候创建多实例对象</strong></p>
<h3> 11、bean生命周期</h3>
<p>1、生命周期：从对象创建到对象销毁的过程</p>
<p>2、 bean 生命周期<br>
（1）通过构造器<strong>创建bean 实例</strong>（无参数构造）<br>
（2）为 bean 的<strong>属性设置</strong>值和对其他 bean 引用（调用 set 方法）<br>
（3）调用<strong>bean的初始化</strong>的方法（需要进行配置初始化的方法）<br>
（4） bean 可以使用了（对象获取到了）<br>
（5）当<strong>容器关闭</strong>时候，调用<strong>bean的销毁</strong>的方法（需要进行配置销毁的方法）</p>
<p>3、演示bean生命周期</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、bean的后置处理器</p>
<p><strong>添加后置处理器后</strong>，bean的生命周期为7步</p>
<p>（1）通过构造器<strong>创建bean 实例</strong>（无参数构造）<br>
（2）为 bean 的<strong>属性设置</strong>值和对其他 bean 引用（调用 set 方法）<br>
（3）把bean的实例传递给bean后置处理器的方法 <strong>postProcessBeforeInitialization</strong><br>
（4）调用<strong>bean的初始化</strong>的方法（需要进行配置初始化的方法）<br>
（5）把bean的实例传递给bean后置处理器的方法 <strong>postProcessAfterInitialization</strong><br>
（6） bean 可以使用了（对象获取到了）<br>
（7）当<strong>容器关闭</strong>时候，调用<strong>bean的销毁</strong>的方法（需要进行配置销毁的方法）</p>
<p>5、演示添加后置处理器的效果<br>
（1）创建类，实现接口 BeanPostProcessor，创建后置处理器</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）配置后置处理器</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12、XML自动装配</h3>
<p>1、什么是自动装配<br>
（1）根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入<br>
2、演示自动装配的过程<br>
（1）根据属性名称自动注入</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）根据属性类型自动注入</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 13、外部属性文件</h3>
<p>1、直接配置数据库信息<br>
（1）配置德鲁伊连接池<br>
（2）引入德鲁伊连接池依赖jar包</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、引入外部属性文件配置数据库连接池</p>
<p>（1）创建外部属性文件，properties格式文件，写数据库信息</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）把外部properties属性文件引入到spring配置文件中</p>
<p>引入context名称空间</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在spring配置文件使用标签引入外部属性文件</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、IOC操作Bean管理（基于注解方式）</h2>
<h3> 1、什么是注解</h3>
<p>（1）注解是代码特殊标记，格式： **@注解名称(属性名称=属性值, 属性名称=属性值..) **<br>
（2）使用注解，**注解作用在类上面，方法上面，属性上面 **<br>
（3）使用注解目的：简化 xml 配置</p>
<h3> 2、Spring针对Bean管理中创建对象提供注解</h3>
<p><strong>（1）@Compnent<br>
（2）@Service<br>
（3）@Controller<br>
（4）@Repository</strong></p>
<p><strong>上面四个注解功能是一样的，都可以用来创建bean实例</strong></p>
<h3> 3、基于注解方式实现对象创建</h3>
<h4> 第一步 引入依赖</h4>
<h4> 第二步  开启组件扫描</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 第三步 创建类，在类上添加创建对象注解</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、开启组件扫描细节配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、基于注解方式实现属性注入</h3>
<p>（1） <strong>@Autowired：根据属性类型进行自动装配</strong><br>
第一步：把service和dao对象创建，在service和dao类添加创建对象注解<br>
第二步：在service注入dao对象，在service类添加dao类型属性，在属性上面使用注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<strong>@Qualifier：根据名称进行注入<br>
@Qualifier注解的使用，和上面的@Autowired一起使用</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3） <strong>@Resource：可以根据类型注入，可以根据名称注入</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4） <strong>@Value：注入普通类型属性</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、完全注解开发</h3>
<p>（1）创建配置类，替代xml配置文件</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）编写测试类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、AOP</h2>
<h3> 1、AOP相关概念</h3>
<p>（1）面向切面编程（方面）， 利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br>
（2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能<br>
（3）使用登录例子说明 AOP</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221116143148275.png" alt="image-20221116143148275" loading="lazy"></p>
<h3> 2、AOP底层原理（动态代理）</h3>
<p>AOP底层使用动态代理</p>
<h4> 1、有两种情况动态代理</h4>
<p><strong>第一种 有接口情况，使用 JDK 动态代理</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221116145007186.png" alt="image-20221116145007186" loading="lazy"></p>
<p><strong>第二种 没有接口情况，使用 CGLIB 动态代理</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221116145816875.png" alt="image-20221116145816875" loading="lazy"></p>
<h3> 3、AOP（JDK动态代理）</h3>
<p>1、使用JDK动态代理，使用Proxy类里面的方法创建代理对象</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221116191550153.png" alt="image-20221116191550153" loading="lazy"></p>
<p>（1）<strong>调用 newProxyInstance 方法</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221116191615418.png" alt="image-20221116191615418" loading="lazy"></p>
<p><strong>方法有三个参数：</strong><br>
<strong>第一个参数：类加载器</strong><br>
<strong>第二个参数：增强方法所在的类，这个类实现的接口，支持多个接口</strong><br>
<strong>第三个参数：实现这个接口InvocationHandler，创建代理对象，写增强的部分</strong></p>
<p>2、编写JDK动态代理代码</p>
<p>（1）创建接口，定义方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）创建接口实现类，实现方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）使用Proxy类创建代理对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、AOP术语</h3>
<p>1、连接点<br>
类里面哪些方法可以被增强，这些方法称为连接点</p>
<p>2、切入点<br>
实际被真正增强的方法，称为切入点</p>
<p>3、通知（增强）<br>
（1）实际增强的逻辑的部分称为通知（增强）<br>
（2）通知有多种类型<br>
前置通知<br>
后置通知<br>
环绕通知（前+后）<br>
异常通知<br>
最终通知（finally）</p>
<p>4、切面<br>
是动作<br>
（1）把通知应用到切入点过程</p>
<h3> 5、AOP操作（准备）</h3>
<p>1、Spring框架一般基于AspectJ实现AOP操作<br>
（1） AspectJ 不是 Spring 组成部分，它是独立的 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作</p>
<p>2、基于 AspectJ 实现 AOP 操作<br>
（1）基于 xml 配置文件实现<br>
（2）基于注解方式实现（使用）</p>
<p>3、在项目工程里面引入AOP依赖</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221117195034575.png" alt="image-20221117195034575" loading="lazy"></p>
<p>4、切入点表达式<br>
（1）切入点表达式作用：知道对那个类里面的那个方法进行增强<br>
（2）语法结构：<br>
<em><em>execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) ) **<br>
举例 1：对 com.atguigu.dao.BookDao 类里面的 add 进行增强 execution(</em> com.atguigu.dao.BookDao.add(..))<br>
举例 2：对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强 execution(</em> com.atguigu.dao.BookDao.* (..))<br>
举例 3：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强 execution(* com.atguigu.dao.*.* (..))</p>
<h3> 6、AspectJ注解</h3>
<h4> 1、创建类，在类里面定义方法</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、创建增强类（编写增强逻辑）</h4>
<p>（1）在增强类里面创建方法，让不同方法代表不同通知类型</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、进行通知的配置</h4>
<p>（1）在spring配置文件中，开启注解扫描</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）使用注解创建User和UserProxy对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）在增强类上面添加注解@Aspect</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）在spring配置文件中开启生成代理对象</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、配置不同类型的通知</h4>
<p>（1）在增强类里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、相同切入点抽取</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6、增强优先级</h4>
<p>有<strong>多个增强类多同一个方法进行增强</strong>，设置增强类优先级<br>
（1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7、完全注解开发</h4>
<p>创建配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7、AspectJ配置文件</h3>
<h4> 1、创建连个类，增强类和被增强类，创建方法</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、在Spring配置文件中创建两个类的对象</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、在spring配置文件中配置切入点</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、JdbcTemplate</h2>
<h3> 1、什么是JdbcTemplate</h3>
<p>（1）Spring框架对JDBC进行封装，使用 JdbcTemplate 方便实现对数据库操作</p>
<h3> 2、准备工作</h3>
<p>（1）引入相关 jar 包</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221119102945472.png" alt="image-20221119102945472" loading="lazy"></p>
<p>（2）在spring配置文件配置数据库连接池</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）配置JdbcTemplate对象，注入DataSource</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）创建service类，创建dao类，在dao注入jdbcTemplate对象</p>
<p>dao接口：对数据库的抽象方法<br>
daoImpl类：对dao接口中方法的实现<br>
service中：创建dao的对象，创建方法，内部调用dao子类的方法</p>
<p>配置文件中开启组件扫描</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Service中</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dao中</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、JdbcTemplate操作数据库</h3>
<h4> 1、添加</h4>
<p>1、对应数据库创建实体类</p>
<p>2、编写service和dao<br>
（1）在dao进行数据库添加操作</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）调用JdbcTemplate对象里的update方法实现添加操作</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221119110350096.png" alt="image-20221119110350096" loading="lazy"></p>
<p><strong>有两个参数：<br>
第一个参数：sql语句<br>
第二个参数：可变参数，设置sql语句的值</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、测试类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、修改和删除</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、查询</h4>
<h5> 1、查询返回某个值</h5>
<p>1、查询表里面有多少条记录，返回某个值<br>
2、使用JdbcTemplate实现查询返回某个值代码<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221119134145556.png" alt="image-20221119134145556" loading="lazy"></p>
<p>有两个参数：<br>
（1）sql语句<br>
（2）返回类型Class</p>
<h5> 2、查询返回对象</h5>
<p>1、场景：查询user详情<br>
2、JdbcTemplate实现查询返回对象<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221119134612167.png" alt="image-20221119134612167" loading="lazy"></p>
<p>有三个参数：<br>
（1）sql语句<br>
（2）RowMapper，是接口，返回不同类型数据，使用这个接口里面实现类完成数据封装<br>
（3）sql语句值</p>
<h5> 3、查询返回集合</h5>
<p>1、场景：查询user列表分页<br>
2、调用JdbcTemplate方法实现查询返回集合<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221119140026889.png" alt="image-20221119140026889" loading="lazy"></p>
<p>有三个参数<br>
（1）sql 语句<br>
（2）RowMapper 是接口，针对返回不同类型数据，使用这个接口里面实现类完成 数据封装<br>
（3）sql 语句值（没有可以省略不写）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、JdbcTemplate批量操作</h3>
<p>1、批量操作：操作表里面多条记录<br>
2、 JdbcTemplate 实现批量添加操作</p>
<p>有两个参数：<br>
（1）sql语句<br>
（2）List集合，添加多条记录数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、批量修改</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、批量删除</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、事务操作</h2>
<h3> 1、事务概念</h3>
<p>（1）事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操 作都失败<br>
（2）典型场景：银行转账</p>
<p>事务四个特性（ACID）<br>
（1）原子性 （2）一致性 （3）隔离性 （4）持久性</p>
<h3> 2、搭建事务操作的环境</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121081816310.png" alt="image-20221121081816310" loading="lazy"></p>
<p>1、创建数据数据库表，添加记录</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121082234231.png" alt="image-20221121082234231" loading="lazy"></p>
<p>2、创建service，搭建dao，完成对象创建和注入关系</p>
<p>（1）<strong>service注入dao，在dao注入JdbcTemplate，在JdbcTemplate注入DataSource</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、在dao创建两个方法：多钱和少钱，在service创建方法（转账的方法）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、上面代码，如果正常执行没有问题，但是如果代码执行过程中出现异常，会使数据异常</p>
<p>使用事务解决上述异常<br>
事务操作过程：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121171153711.png" alt="image-20221121171153711" loading="lazy"></p>
<h3> 3、事务操作</h3>
<p>1、事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</p>
<p>2、在Spring进行事务管理操作<br>
（1）有两种方式：<br>
<strong>编程式</strong>事务管理 （直接编写代码）<br>
<strong>声明式</strong>事务管理（使用配置文件、注解，推荐使用）</p>
<p>3、声明式事务管理<br>
（1）基于注解方式<br>
（2）基于xml配置文件方式</p>
<p>4、在Spring进行声明式事务管理，底层使用AOP原理</p>
<p>5、Spring事务管理API<br>
（1）提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121190002792.png" alt="image-20221121190002792" loading="lazy"></p>
<h3> 4、注解声明式事务管理</h3>
<p>1、在spring配置文件配置事务管理器</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在spring配置文件，开启事务注解</p>
<p>（1）在spring配置文件引入名称空间tx</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）开启事务注解</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、在service类上面（获取service类里面方法上面）添加事务注解</p>
<p>（1）@Transactional，这个注解添加到类上面，也可以添加到方法上<br>
（2）如果把这个<strong>注解添加类上面</strong>，这个<strong>类里面所有的方法都添加事务</strong><br>
（3）如果把这个<strong>注解添加方法上面</strong>，为这个<strong>方法添加事务</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、声明式事务管理参数配置</h3>
<p>在 service 类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121192313660.png" alt="image-20221121192313660" loading="lazy"></p>
<h4> 1、propagation：事务传播行为</h4>
<p>当一个事务方法被另外一个事务方法调用时，这个事务方法如何进行行为？</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121194945546.png" alt="image-20221121194945546" loading="lazy"></p>
<p>REQUIRED：方法2会开启事务A，调用方法1，<strong>方法1加入到当前事务A</strong>里面<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121195158088.png" alt="image-20221121195158088" loading="lazy"></p>
<p>REQUIRED_NEW：<strong>内层事务不依赖于外层事务</strong><br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121195640486.png" alt="image-20221121195640486" loading="lazy"></p>
<p>SUPPORTS：方法b可以单独运行，如果在事务a中，那就在事务a中运行<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221121195811523.png" alt="image-20221121195811523" loading="lazy"></p>
<h4> 2、ioslation：事务隔离级别</h4>
<p>（1）事务有特性称为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题<br>
（2）有三个读问题：脏读，不可重复读，幻读<br>
脏读：一个未提交事务读取到另一个未提交事务的数据<br>
不可重复读：一个未提交事务读取到另一提交事务修改数据<br>
幻读：一个未提交事务读取到另一提交事务添加数据</p>
<p>通过设置事务隔离级别，解读读的问题</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UMCOMMITTED（读未提交）</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>READ COMMITTED（读已提交）</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>REPEATABLE READ（可重复读）</td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td>SERIALIZABLE（串行化）</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody>
</table>
<p><strong>Mysql默认隔离级别为REPEATABLE_READ</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、timeout：超时时间</h4>
<p>（1）事务需要在一定时间内进行提交，如果不提交进行回滚<br>
（2）默认值是 -1（没有时间限制） ，设置时间以秒单位进行计算</p>
<h5> 4、readOnly：是否只读</h5>
<p>（1）读：查询操作，写：添加修改删除操作<br>
（2）readOnly默认值false，表示可以查询，也可以添加修改删除操作<br>
（3）设置readOnly值是true，设置成true之后，只能查询</p>
<h5> 5、rollbackFor：回滚</h5>
<p>（1）设置出现哪些异常进行事务回滚</p>
<h5> 6、noRollbackFor：不回滚</h5>
<p>（1）设置出现哪些异常不进行事务回滚</p>
<h3> 6、XML声明式事务操作</h3>
<p>1、在spring配置文件中进行配置<br>
第一步：配置事务管理器<br>
第二步：配置通知<br>
第三步：配置切入点和切面</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7、完全注解声明式事务管理</h3>
<p>1、创建配置类，使用配置类替代xml配置文件</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9、Spring5 框架新功能</h2>
<h3> 1、整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9， 许多不建议使用的类和方法在代码库中删除</h3>
<h3> 2、 Spring 5.0 框架自带了通用的日志封装</h3>
<p>（1） Spring5 已经移除 Log4jConfigListener，官方建议使用 **Log4j2 **<br>
（2） Spring5 框架整合 Log4j2</p>
<p>Spring5 框架整合 Log4j2：<br>
第一步：引入jar包</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221122124121656.png" alt="image-20221122124121656" loading="lazy"></p>
<p>第二步：创建log4j2.xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、spring5框架核心容器支持@Nullable注解</h3>
<p>（1）@Nullable注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空<br>
（2）注解用在方法上面，方法返回值可以为空</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221122125445610.png" alt="image-20221122125445610" loading="lazy"></p>
<p>（3）注解使用在方法参数里面，方法参数可以为空</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221122125530349.png" alt="image-20221122125530349" loading="lazy"></p>
<p>（4）注解使用在属性上面，属性值可以为空</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221122125548844.png" alt="image-20221122125548844" loading="lazy"></p>
<h3> 4、Spring5核心容器支持函数式风格GenericApplicationContext</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、Spring5 支持整合 JUnit5</h3>
<p>（1）Spring5整合JUnit4<br>
第一步 引入Spring相关针对测试依赖</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221122132456482.png" alt="image-20221122132456482" loading="lazy"></p>
<p>第二步 创建测试类，使用注解方式完成</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）Spring5整合JUnit5<br>
第一步：引入JUnit5的jar包</p>
<p>第二步：创建测试类，使用注解完成</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）使用一个复合注解替代上面两个注解完成整合</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 10、Webflux</h2>
<h3> 1、 SpringWebflux 介绍</h3>
<p>（1）是 Spring5 添加新的模块，用于 web 开发的，功能和 SpringMVC 类似的， Webflux 使用 当前一种比较流程响应式编程出现的框架。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20221123150035139.png" alt="image-20221123150035139" loading="lazy"></p>
<p>（2）使用传统 web 框架，比如 SpringMVC，这些基于 Servlet 容器， Webflux 是一种异步非阻塞的框架，异步非阻塞的框架在 Servlet3.1 以后才支持，核心是基于 Reactor 的相关 API 实现 的。</p>
<p>（3）解释什么是异步非阻塞<br>
异步和同步针对调用者，调用者发送请求，如果等着对方回应之后才去做其他事情就是同步，如果发送请求之后不等着对方回应就去做其他事情就是异步<br>
阻塞和非阻塞针对被调用者，被调用者收到请求之后，做完请求任务之后才给出反馈就是阻塞，受到请求之后马上给出反馈然后再去做事情就是非阻塞</p>
<p>（4）Webflux 特点：<br>
第一 非阻塞式：在有限资源下，提高系统吞吐量和伸缩性，以 Reactor 为基础实现响应式编程<br>
第二 函数式编程： Spring5 框架基于 java8， Webflux 使用 Java8 函数式编程方式实现路由请求</p>
<p>（5）比较SpringMVC<br>
第一 两个框架都可以使用注解方式，都运行在 Tomet 等容器中<br>
第二 SpringMVC 采用命令式编程， Webflux 采用异步响应式编程</p>
<h3> 2、响应式编程</h3>
<p>（1）什么是响应式编程<br>
响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。<br>
电子表格程序就是响应式编程的一个例子。单元格可以包含字面值或类似"=B1+C1"的公 式，而包含公式的单元格的值会依据其他单元格的值的变化而变化。</p>
<p>（2）Java8及其之前版本<br>
提供的观察者模式两个类 Observer 和 Observable</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、响应式编程（Reactor 实现）</h3>
<p>（1）响应式编程操作中， Reactor 是满足 Reactive 规范框架<br>
（2） Reactor 有两个核心类， Mono 和 Flux，这两个类实现接口 Publisher，提供丰富操作 符。<br>
Flux 对象实现发布者，返回 N 个元素；<br>
Mono 实现发布者，返回 0 或者 1 个元素<br>
（3） Flux 和 Mono 都是数据流的发布者，使用 Flux 和 Mono 都可以发出三种数据信号：元素值，错误信号，完成信号，错误信号和完成信号都代表终止信号，终止信号用于告诉 订阅者数据流结束了，错误信号终止数据流同时把错误信息传递给订阅者</p>
<h2> 11、Spring、Maven版</h2>
<h3> 1、Spring的使用</h3>
<h4> 导入依赖</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、基于XML管理bean  （IOC）</h3>
<h4> 1、获取bean</h4>
<p>①方式一：根据id获取<br>
②方式二：根据类型获取  当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个<br>
**③方式三：根据id和类型  **</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗  ：可以，前提是bean唯一<br>
如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？  不行，因为bean不唯一</p>
<h4> 2、依赖注入之setter注入</h4>
<p>property标签：<strong>通过组件类的setXxx()方法给组件对象设置属性</strong><br>
name属性：指定属性名**（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关，即通过name的值找get，set方法）**<br>
value属性：指定属性值</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、依赖注入之构造器注入</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>constructor-arg标签还有两个属性可以进一步描述构造器参数：<br>
index属性：指定参数所在位置的索引（从0开始）<br>
name属性：指定参数名</p>
<h4> 4、特殊值处理</h4>
<h5> null值 ：</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> xml实体  （&lt; &gt;）：</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> CDATA节  ：</h5>
<p>CDATA节必须放在value标签中<br>
IDEA中快捷方式：大写的CD</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、为类类型属性赋值</h4>
<h5> 方式一：外部bean</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 方式二：内部bean</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 方式三：级联属性赋值  （一般不使用）</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6、为数组类型属性赋值</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7、为集合类型属性赋值</h4>
<h5> ①为List、Set集合类型属性赋值</h5>
<p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ②为Map集合类型属性赋值</h5>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> ③引用集合类型的bean  (p标签)</h5>
<p>引入util命名空间</p>
<h4> 8、p命名空间</h4>
<p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 9、引入外部属性文件</h4>
<p>加入依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建properties<br>
引入属性文件</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置bean</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 10、bean的作用域</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
<th>创建对象的时机</th>
</tr>
</thead>
<tbody>
<tr>
<td><mark>singleton（默认）</mark></td>
<td>在IOC容器中，这个bean的对象始终为**单实例 **</td>
<td>IOC容器初始化时</td>
</tr>
<tr>
<td><mark>prototype</mark></td>
<td>这个bean在IOC容器中有<strong>多个实例</strong></td>
<td>获取bean时</td>
</tr>
</tbody>
</table>
<p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td>在一个请求范围内有效</td>
</tr>
<tr>
<td>session</td>
<td>在一个会话范围内有效</td>
</tr>
</tbody>
</table>
<h4> 11、bean的生命周期</h4>
<p>1、实例化<br>
2、依赖注入<br>
3、初始化，需要通过ben的init-method属性指定初始化方法<br>
4、IOC容器关闭时销毁，需要通过bean的destory-method属性指定销毁的方法</p>
<p><strong>注：若bean的作用域为单例时，前三个步骤会在获取IOC容器时执行<br>
若bean的作用域为多个时，前三个步骤会在获取bean的时候执行</strong></p>
<p>bean的前后置处理器可以看前面笔记</p>
<p>具体的生命周期过程：<br>
bean对象创建（调用无参构造器）<br>
给bean对象设置属性<br>
bean对象初始化之前操作（由bean的后置处理器负责）<br>
bean对象初始化（需在配置bean时指定初始化方法）<br>
bean对象初始化之后操作（由bean的后置处理器负责）<br>
bean对象就绪可以使用<br>
bean对象销毁（需在配置bean时指定销毁方法）<br>
IOC容器关闭</p>
<h4> 12、FactoryBean</h4>
<p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p>
<p>FactoryBean是一个接口，需要创建一个类实现该接口<br>
其中有三个方法：<br>
getObject()：通过一个对象交给IOC容器管理<br>
getObjectType()：设置所提供对象的类型<br>
isSingleton()：所提供的对象是否单例<br>
当把FactoryBean的实现类配置为bean时，会将当前类中getObject()所返回的对象交给IOC容器管理</p>
<h4> 13、基于xml的自动装配</h4>
<p>自动装配：根据指定的策略，在IOC容器中匹配某一个bean，**自动为指定的bean中所依赖的类类型或接口类型属性赋值 **</p>
<p>使用bean标签的<strong>autowire属性</strong>设置自动装配效果<br>
自动装配方式：<strong>byType</strong><br>
<strong>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</strong><br>
若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值null<br>
若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p>
<p>配置自动准配后不用写property标签</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动装配方式：<strong>byName</strong><br>
<strong>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</strong><br>
当类型匹配的bean有多个时，此时使用byName实现自动装配</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、基于注解管理bean  （IOC）</h3>
<p>①注解：和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是<strong>框架检测到注解标记的位置</strong>，然后针对这个位置按照注解标记的功能来执行具体操作。<br>
本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行。</p>
<p>②扫描：Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作。</p>
<h5> 1、基本注解</h5>
<p>@Component：将类标识为普通组件<br>
@Controller：将类标识为控制层组件<br>
@Service：将类标识为业务层组件<br>
@Repository：将类标识为持久层组件</p>
<p>通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。<br>
对于Spring使用IOC容器管理这些组件来说没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。<br>
注意：虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记。</p>
<h5> 2、扫描文件</h5>
<p>通过扫描，ioc就有了扫描到注解的类的bean对象</p>
<p>情况一：最基本的扫描方式</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>情况二：指定要排除的组件</p>
<p>type：设置排除或包含的依据<br>
type="annotation"，根据注解排除，expression中设置要排除的<strong>注解的全类名</strong><br>
type="assignable"，根据类型排除，expression中设置要排除的<strong>类型的全类名</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>情况三：仅扫描指定组件</p>
<p>use-default-filters="true"（默认），所设置的包下所有的类都需要扫描，此时可以使用排除扫描<br>
use-default-filters="false"，所设置的包下所有的类都不需要扫描，此时可以使用包含扫描</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 3、组件所对应的bean的id</h5>
<p>默认情况： <strong>类名首字母小写就是bean的id</strong>。例如：UserController类对应的bean的id就是userController。</p>
<p>自定义bean的id：可通过标识组件的注解的value属性设置自定义的bean的id</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5> 4、基于注解的自动装配</h5>
<p>@Autowired注解<br>
在成员变量上直接标记@Autowired注解即可完成自动装配，不需要提供setXxx()方法。</p>
<p>@Autowired注解能够标识的位置：<br>
标识在成员变量上，此时不需要设置成员变量的set方法<br>
标识在set方法上<br>
标识在成员变量赋值的有参构造上</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230106173514322.png" alt="image-20230106173514322" loading="lazy"></p>
<p>首先根据所需要的组件类型（<strong>byType</strong>）到IOC容器中查找，能够找到唯一的bean：直接执行装配<br>
如果完全找不到匹配这个类型的bean：装配失败<br>
和所需类型匹配的<strong>bean不止一个</strong><br>
没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配（<strong>byName</strong>）<br>
能够找到：执行装配<br>
找不到：装配失败<br>
使用@Qualifier注解：根据**@Qualifier注解<strong>中</strong>指定的名称作为bean的id进行匹配**<br>
能够找到：执行装配<br>
找不到：装配失败</p>
<h3> 4、AOP</h3>
<h4> 1、静态代理与动态代理</h4>
<h5> 1、静态代理</h5>
<p>创建静态代理类：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态代理确实实现了解耦，但是由于<strong>代码都写死了，完全不具备任何的灵活性</strong>。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。<br>
提出进一步的需求：将日志功能<strong>集中到一个代理类</strong>中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p>
<h5> 2、动态代理</h5>
<p>生产代理对象的工厂类 ：</p>
<p>newProxyInstance()：创建一个代理实例<br>
其中有三个参数：<br>
1、classLoader：加载动态生成的代理类的类加载器<br>
2、interfaces：目标对象实现的所有接口的class对象所组成的数组<br>
3、invocationHandler：<strong>设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、AOP概念及相关术语</h4>
<p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的<strong>面向切面编程</strong>，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术 。</p>
<p>①横切关注点 ：从每个方法中抽取出来的同一类<strong>非核心业务</strong>。（日志等）</p>
<p>②通知 ：每一个<strong>横切关注点上要做的事情都需要写一个方法来实现</strong>，这样的方法就叫通知方法。<br>
前置通知：在被代理的目标方法前执行<br>
返回通知：在被代理的目标方法成功结束后执行（寿终正寝）<br>
异常通知：在被代理的目标方法异常结束后执行（死于非命）<br>
后置通知：在被代理的目标方法最终结束后执行（盖棺定论）<br>
环绕通知：使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置</p>
<p>③切面 ：**封装通知方法的类  **</p>
<p>④目标 ：被代理的目标对象</p>
<p>⑤代理 ：向目标对象应用通知之后创建的代理对象</p>
<p>⑥连接点 ：类里面哪些方法可以被增强，这些方法称为连接点</p>
<p>⑦切入点：实际被真正增强的方法，称为切入点</p>
<h4> 3、基于注解的AOP</h4>
<p>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。<br>
cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。<br>
<strong>AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</strong></p>
<h5> 1、准备工作</h5>
<h6> ①添加依赖</h6>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> ②准备被代理的目标资源</h6>
<p>接口：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现类：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 2、创建切面类并配置</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Spring的配置文件中配置：<br>
**&lt;aop:aspectj-autoproxy /&gt;**开启注解方式的AOP</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 3、各种通知</h5>
<p>前置通知：<strong>@Before</strong>，在被代理的目标<strong>方法前</strong>执行<br>
后置通知：<strong>@After</strong>，在被代理的目标方法<strong>finally</strong>中执行<br>
返回通知：<strong>@AfterReturning</strong>，在被代理的目标方法<strong>返回值之后</strong>执行<br>
异常通知：<strong>@AfterThrowing</strong>，在被代理的目标方法<strong>catch中执行</strong><br>
环绕通知：<strong>@Around</strong>，使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置</p>
<h5> 4、切入点表达式语法</h5>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230107162255980.png" alt="image-20230107162255980" loading="lazy"></p>
<p><strong>重用切入点表达式 ：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 5、获取通知的相关信息</h5>
<p><strong>获取连接点信息  **<br>
获取连接点信息可以</strong>在通知方法的参数位置设置JoinPoint类型的形参  **</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**获取目标方法的返回值 **<br>
@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取目标方法的异常</strong><br>
@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 6、环绕通知</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 7、切面的优先级</h5>
<p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。<br>
优先级高的切面：外面<br>
优先级低的切面：里面<br>
使用@Order注解可以控制切面的优先级：<br>
@Order(较小的数)：优先级高<br>
@Order(较大的数)：优先级低</p>
<h3> 5、声明式事务</h3>
<h4> 1、JdbcTemplate</h4>
<p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p>
<h6> 1、准备工作</h6>
<p>①加入依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②创建jdbc.properties</p>
<p>③配置Spring的配置文件</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> 2、使用</h6>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、声明式事务</h4>
<p>概念：既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。（通过AOP抽取）</p>
<p>编程式：自己写代码实现功能<br>
声明式：通过配置让框架实现功能</p>
<h5> 1、基于注解的声明式事务</h5>
<h6> 准备工作：</h6>
<p>①加入依赖  (同上方依赖的加入)</p>
<p>②创建jdbc.properties （同上）</p>
<p>③配置Spring的配置文件</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④数据表的准备</p>
<p>⑤创建组件</p>
<p>BookDao：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BookDaoImpl：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BookService：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BookServiceImpl：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BookController：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类 :</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> 加入事务</h6>
<p>①添加事务配置<br>
在Spring的配置文件中添加配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：导入的名称空间需要 tx 结尾的那个。</p>
<p>②添加事务注解<br>
因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在**service层处理在BookServiceImpl的buybook()添加注解@Transactional  **</p>
<p>**@Transactional标识在方法上，咋只会影响该方法<br>
@Transactional标识的类上，则会影响类中所有的方法  **</p>
<p>事务属性：只读<br>
对一个查询操作来说，如果我们把它设置成<strong>只读</strong>，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。<br>
@Transactional(readOnly = true)<br>
例：对增删改操作设置只读会抛出异常</p>
<p>事务属性：超时（超时回滚，释放资源）<br>
例：@Transactional(timeout = 3)</p>
<p>事务属性：回滚策略<br>
可以通过@Transactional中相关属性设置回滚策略<br>
rollbackFor属性：需要设置一个Class类型的对象<br>
rollbackForClassName属性：需要设置一个字符串类型的全类名<br>
noRollbackFor属性：需要设置一个Class类型的对象<br>
rollbackFor属性：需要设置一个字符串类型的全类名<br>
例：@Transactional(noRollbackFor = ArithmeticException.class)</p>
<h5> 2、基于XML的声明式事务</h5>
<p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>001_两数之和</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_001_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_001_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html</guid>
      <source url="https://T4mako.github.io/rss.xml">001_两数之和</source>
      <description>001_两数之和</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 001_两数之和</h1>
]]></content:encoded>
    </item>
    <item>
      <title>002_两数相加</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_002_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_002_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.html</guid>
      <source url="https://T4mako.github.io/rss.xml">002_两数相加</source>
      <description>002_两数相加</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 002_两数相加</h1>
]]></content:encoded>
    </item>
    <item>
      <title>003_无重复最长子串</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_003_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_003_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.html</guid>
      <source url="https://T4mako.github.io/rss.xml">003_无重复最长子串</source>
      <description>003_无重复最长子串</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 003_无重复最长子串</h1>
]]></content:encoded>
    </item>
    <item>
      <title>004_寻找两个正序数组的中位数</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_004_%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_004_%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0.html</guid>
      <source url="https://T4mako.github.io/rss.xml">004_寻找两个正序数组的中位数</source>
      <description>004_寻找两个正序数组的中位数</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 004_寻找两个正序数组的中位数</h1>
]]></content:encoded>
    </item>
    <item>
      <title>005_最长回文子串</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_005_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_005_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html</guid>
      <source url="https://T4mako.github.io/rss.xml">005_最长回文子串</source>
      <description>005_最长回文子串</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 005_最长回文子串</h1>
]]></content:encoded>
    </item>
    <item>
      <title>006_Z字形变换</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_006_N%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_006_N%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2.html</guid>
      <source url="https://T4mako.github.io/rss.xml">006_Z字形变换</source>
      <description>006_Z字形变换</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 006_Z字形变换</h1>
]]></content:encoded>
    </item>
    <item>
      <title>007_整数反转</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_007_%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_007_%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC.html</guid>
      <source url="https://T4mako.github.io/rss.xml">007_整数反转</source>
      <description>007_整数反转</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 007_整数反转</h1>
]]></content:encoded>
    </item>
    <item>
      <title>008_字符串转换整数 (atoi)</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_008_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi).html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_008_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi).html</guid>
      <source url="https://T4mako.github.io/rss.xml">008_字符串转换整数 (atoi)</source>
      <description>008_字符串转换整数 (atoi)</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 008_字符串转换整数 (atoi)</h1>
]]></content:encoded>
    </item>
    <item>
      <title>009_回文数</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_009_%E5%9B%9E%E6%96%87%E6%95%B0.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_009_%E5%9B%9E%E6%96%87%E6%95%B0.html</guid>
      <source url="https://T4mako.github.io/rss.xml">009_回文数</source>
      <description>009_回文数</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 009_回文数</h1>
]]></content:encoded>
    </item>
    <item>
      <title>010_正则表达式匹配</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_010_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_010_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D.html</guid>
      <source url="https://T4mako.github.io/rss.xml">010_正则表达式匹配</source>
      <description>010_正则表达式匹配</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 010_正则表达式匹配</h1>
]]></content:encoded>
    </item>
    <item>
      <title>011_盛最多水的容器</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_011_%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_011_%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html</guid>
      <source url="https://T4mako.github.io/rss.xml">011_盛最多水的容器</source>
      <description>011_盛最多水的容器</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 011_盛最多水的容器</h1>
]]></content:encoded>
    </item>
    <item>
      <title>012_整数转罗马数字</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_012_%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_012_%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97.html</guid>
      <source url="https://T4mako.github.io/rss.xml">012_整数转罗马数字</source>
      <description>012_整数转罗马数字</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 012_整数转罗马数字</h1>
]]></content:encoded>
    </item>
    <item>
      <title>013_罗马数字转整数</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_013_%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_013_%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0.html</guid>
      <source url="https://T4mako.github.io/rss.xml">013_罗马数字转整数</source>
      <description>013_罗马数字转整数</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 013_罗马数字转整数</h1>
]]></content:encoded>
    </item>
    <item>
      <title>014_最长公共前缀</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_014_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_014_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80.html</guid>
      <source url="https://T4mako.github.io/rss.xml">014_最长公共前缀</source>
      <description>014_最长公共前缀</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 014_最长公共前缀</h1>
]]></content:encoded>
    </item>
    <item>
      <title>015_三数之和</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_015_%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_015_%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html</guid>
      <source url="https://T4mako.github.io/rss.xml">015_三数之和</source>
      <description>015_三数之和</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 015_三数之和</h1>
]]></content:encoded>
    </item>
    <item>
      <title>016_最接近的三数之和</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_016_%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_016_%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html</guid>
      <source url="https://T4mako.github.io/rss.xml">016_最接近的三数之和</source>
      <description>016_最接近的三数之和</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 016_最接近的三数之和</h1>
]]></content:encoded>
    </item>
    <item>
      <title>017_电话号码的字母组合</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_017_%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_017_%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html</guid>
      <source url="https://T4mako.github.io/rss.xml">017_电话号码的字母组合</source>
      <description>017_电话号码的字母组合</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 017_电话号码的字母组合</h1>
]]></content:encoded>
    </item>
    <item>
      <title>018_四数之和</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_018_%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_018_%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html</guid>
      <source url="https://T4mako.github.io/rss.xml">018_四数之和</source>
      <description>018_四数之和</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 018_四数之和</h1>
]]></content:encoded>
    </item>
    <item>
      <title>019_删除链表的倒数第 N 个结点</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_019_%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC%20N%20%E4%B8%AA%E7%BB%93%E7%82%B9.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_019_%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC%20N%20%E4%B8%AA%E7%BB%93%E7%82%B9.html</guid>
      <source url="https://T4mako.github.io/rss.xml">019_删除链表的倒数第 N 个结点</source>
      <description>019_删除链表的倒数第 N 个结点</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 019_删除链表的倒数第 N 个结点</h1>
]]></content:encoded>
    </item>
    <item>
      <title>020_有效的括号</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_020_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_020_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html</guid>
      <source url="https://T4mako.github.io/rss.xml">020_有效的括号</source>
      <description>020_有效的括号</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 020_有效的括号</h1>
]]></content:encoded>
    </item>
    <item>
      <title>021_合并两个有序链表</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_021_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_021_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html</guid>
      <source url="https://T4mako.github.io/rss.xml">021_合并两个有序链表</source>
      <description>021_合并两个有序链表</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 021_合并两个有序链表</h1>
]]></content:encoded>
    </item>
    <item>
      <title>022_括号生成</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_022_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_022_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html</guid>
      <source url="https://T4mako.github.io/rss.xml">022_括号生成</source>
      <description>022_括号生成</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 022_括号生成</h1>
]]></content:encoded>
    </item>
    <item>
      <title>023_合并 K 个升序链表</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_023_%E5%90%88%E5%B9%B6%20K%20%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_023_%E5%90%88%E5%B9%B6%20K%20%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8.html</guid>
      <source url="https://T4mako.github.io/rss.xml">023_合并 K 个升序链表</source>
      <description>023_合并 K 个升序链表</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 023_合并 K 个升序链表</h1>
]]></content:encoded>
    </item>
    <item>
      <title>024_两两交换链表中的节点</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_024_%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_024_%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html</guid>
      <source url="https://T4mako.github.io/rss.xml">024_两两交换链表中的节点</source>
      <description>024_两两交换链表中的节点</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 024_两两交换链表中的节点</h1>
]]></content:encoded>
    </item>
    <item>
      <title>025_K 个一组翻转链表</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_025_K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_025_K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html</guid>
      <source url="https://T4mako.github.io/rss.xml">025_K 个一组翻转链表</source>
      <description>025_K 个一组翻转链表</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 025_K 个一组翻转链表</h1>
]]></content:encoded>
    </item>
    <item>
      <title>026_删除有序数组中的重复项</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_026_%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_026_%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.html</guid>
      <source url="https://T4mako.github.io/rss.xml">026_删除有序数组中的重复项</source>
      <description>026_删除有序数组中的重复项</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 026_删除有序数组中的重复项</h1>
]]></content:encoded>
    </item>
    <item>
      <title>027_移除元素</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_027_%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_027_%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html</guid>
      <source url="https://T4mako.github.io/rss.xml">027_移除元素</source>
      <description>027_移除元素</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 027_移除元素</h1>
]]></content:encoded>
    </item>
    <item>
      <title>028_找出字符串中第一个匹配项的下标</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_028_%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9A%84%E4%B8%8B%E6%A0%87.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_028_%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9A%84%E4%B8%8B%E6%A0%87.html</guid>
      <source url="https://T4mako.github.io/rss.xml">028_找出字符串中第一个匹配项的下标</source>
      <description>028_找出字符串中第一个匹配项的下标</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 028_找出字符串中第一个匹配项的下标</h1>
]]></content:encoded>
    </item>
    <item>
      <title>029_两数相除</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_029_%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_029_%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4.html</guid>
      <source url="https://T4mako.github.io/rss.xml">029_两数相除</source>
      <description>029_两数相除</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 029_两数相除</h1>
]]></content:encoded>
    </item>
    <item>
      <title>030_串联所有单词的子串</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_030_%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_030_%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.html</guid>
      <source url="https://T4mako.github.io/rss.xml">030_串联所有单词的子串</source>
      <description>030_串联所有单词的子串</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 030_串联所有单词的子串</h1>
]]></content:encoded>
    </item>
    <item>
      <title>031_下一个排列</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_031_%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_031_%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97.html</guid>
      <source url="https://T4mako.github.io/rss.xml">031_下一个排列</source>
      <description>031_下一个排列</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 031_下一个排列</h1>
]]></content:encoded>
    </item>
    <item>
      <title>032_最长有效括号</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_032_%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_032_%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7.html</guid>
      <source url="https://T4mako.github.io/rss.xml">032_最长有效括号</source>
      <description>032_最长有效括号</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 032_最长有效括号</h1>
]]></content:encoded>
    </item>
    <item>
      <title>033_搜索旋转排序数组</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_033_%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_033_%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html</guid>
      <source url="https://T4mako.github.io/rss.xml">033_搜索旋转排序数组</source>
      <description>033_搜索旋转排序数组</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 033_搜索旋转排序数组</h1>
]]></content:encoded>
    </item>
    <item>
      <title>034_在排序数组中查找元素的第一个和最后一个位置</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_034_%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_034_%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE.html</guid>
      <source url="https://T4mako.github.io/rss.xml">034_在排序数组中查找元素的第一个和最后一个位置</source>
      <description>034_在排序数组中查找元素的第一个和最后一个位置</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 034_在排序数组中查找元素的第一个和最后一个位置</h1>
]]></content:encoded>
    </item>
    <item>
      <title>035_搜索插入位置</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_035_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_035_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.html</guid>
      <source url="https://T4mako.github.io/rss.xml">035_搜索插入位置</source>
      <description>035_搜索插入位置</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 035_搜索插入位置</h1>
]]></content:encoded>
    </item>
    <item>
      <title>036_有效的数独</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_036_%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_036_%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC.html</guid>
      <source url="https://T4mako.github.io/rss.xml">036_有效的数独</source>
      <description>036_有效的数独</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 036_有效的数独</h1>
]]></content:encoded>
    </item>
    <item>
      <title>038_外观数列</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_038_%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_038_%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97.html</guid>
      <source url="https://T4mako.github.io/rss.xml">038_外观数列</source>
      <description>038_外观数列</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 038_外观数列</h1>
]]></content:encoded>
    </item>
    <item>
      <title>039_组合总和</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_039_%20%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_039_%20%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html</guid>
      <source url="https://T4mako.github.io/rss.xml">039_组合总和</source>
      <description>039_组合总和</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 039_组合总和</h1>
]]></content:encoded>
    </item>
    <item>
      <title>040_组合总和II</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_040_%20%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_040_%20%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html</guid>
      <source url="https://T4mako.github.io/rss.xml">040_组合总和II</source>
      <description>040_组合总和II</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 040_组合总和II</h1>
]]></content:encoded>
    </item>
    <item>
      <title>041_缺失的第一个正数</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_041_%20%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_041_%20%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0.html</guid>
      <source url="https://T4mako.github.io/rss.xml">041_缺失的第一个正数</source>
      <description>041_缺失的第一个正数</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 041_缺失的第一个正数</h1>
]]></content:encoded>
    </item>
    <item>
      <title>042_接雨水</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_042_%E6%8E%A5%E9%9B%A8%E6%B0%B4.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_042_%E6%8E%A5%E9%9B%A8%E6%B0%B4.html</guid>
      <source url="https://T4mako.github.io/rss.xml">042_接雨水</source>
      <description>042_接雨水</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 042_接雨水</h1>
]]></content:encoded>
    </item>
    <item>
      <title>043_字符串相乘</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_043_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_043_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98.html</guid>
      <source url="https://T4mako.github.io/rss.xml">043_字符串相乘</source>
      <description>043_字符串相乘</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 043_字符串相乘</h1>
]]></content:encoded>
    </item>
    <item>
      <title>045_跳跃游戏II</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_045_%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_045_%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html</guid>
      <source url="https://T4mako.github.io/rss.xml">045_跳跃游戏II</source>
      <description>045_跳跃游戏II</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 045_跳跃游戏II</h1>
]]></content:encoded>
    </item>
    <item>
      <title>046_全排列</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_046_%E5%85%A8%E6%8E%92%E5%88%97.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_046_%E5%85%A8%E6%8E%92%E5%88%97.html</guid>
      <source url="https://T4mako.github.io/rss.xml">046_全排列</source>
      <description>046_全排列</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 046_全排列</h1>
]]></content:encoded>
    </item>
    <item>
      <title>047_全排列II</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_047_%E5%85%A8%E6%8E%92%E5%88%97II.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_047_%E5%85%A8%E6%8E%92%E5%88%97II.html</guid>
      <source url="https://T4mako.github.io/rss.xml">047_全排列II</source>
      <description>047_全排列II</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 047_全排列II</h1>
]]></content:encoded>
    </item>
    <item>
      <title>048_旋转图像</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_048_%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_048_%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F.html</guid>
      <source url="https://T4mako.github.io/rss.xml">048_旋转图像</source>
      <description>048_旋转图像</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 048_旋转图像</h1>
]]></content:encoded>
    </item>
    <item>
      <title>049_字母异位词分组</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_049_%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_049_%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.html</guid>
      <source url="https://T4mako.github.io/rss.xml">049_字母异位词分组</source>
      <description>049_字母异位词分组</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 049_字母异位词分组</h1>
]]></content:encoded>
    </item>
    <item>
      <title>050_Pow(x,n)</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_050_Pow(x_n).html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_050_Pow(x_n).html</guid>
      <source url="https://T4mako.github.io/rss.xml">050_Pow(x,n)</source>
      <description>050_Pow(x,n)</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 050_Pow(x,n)</h1>
]]></content:encoded>
    </item>
    <item>
      <title>058_最后一个单词的长度</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_058_%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_058_%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6.html</guid>
      <source url="https://T4mako.github.io/rss.xml">058_最后一个单词的长度</source>
      <description>058_最后一个单词的长度</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 058_最后一个单词的长度</h1>
]]></content:encoded>
    </item>
    <item>
      <title>066_加一</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_066_%E5%8A%A0%E4%B8%80.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_066_%E5%8A%A0%E4%B8%80.html</guid>
      <source url="https://T4mako.github.io/rss.xml">066_加一</source>
      <description>066_加一</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 066_加一</h1>
]]></content:encoded>
    </item>
    <item>
      <title>067_二进制求和</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_067_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_067_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C.html</guid>
      <source url="https://T4mako.github.io/rss.xml">067_二进制求和</source>
      <description>067_二进制求和</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 067_二进制求和</h1>
]]></content:encoded>
    </item>
    <item>
      <title>069_x的平方根</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_069_x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_069_x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9.html</guid>
      <source url="https://T4mako.github.io/rss.xml">069_x的平方根</source>
      <description>069_x的平方根</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 069_x的平方根</h1>
]]></content:encoded>
    </item>
    <item>
      <title>070_爬楼梯</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_070_%E7%88%AC%E6%A5%BC%E6%A2%AF.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_070_%E7%88%AC%E6%A5%BC%E6%A2%AF.html</guid>
      <source url="https://T4mako.github.io/rss.xml">070_爬楼梯</source>
      <description>070_爬楼梯</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 070_爬楼梯</h1>
]]></content:encoded>
    </item>
    <item>
      <title>094_二叉树的中序遍历</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_094_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_094_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.html</guid>
      <source url="https://T4mako.github.io/rss.xml">094_二叉树的中序遍历</source>
      <description>094_二叉树的中序遍历</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 094_二叉树的中序遍历</h1>
]]></content:encoded>
    </item>
    <item>
      <title>095_不同的二叉搜索树II</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_095_%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%20II.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_095_%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%20II.html</guid>
      <source url="https://T4mako.github.io/rss.xml">095_不同的二叉搜索树II</source>
      <description>095_不同的二叉搜索树II</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 095_不同的二叉搜索树II</h1>
]]></content:encoded>
    </item>
    <item>
      <title>096_不同的二叉搜索树</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_096_%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_096_%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</guid>
      <source url="https://T4mako.github.io/rss.xml">096_不同的二叉搜索树</source>
      <description>096_不同的二叉搜索树</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 096_不同的二叉搜索树</h1>
]]></content:encoded>
    </item>
    <item>
      <title>098_验证二叉搜索树</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_098_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_098_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</guid>
      <source url="https://T4mako.github.io/rss.xml">098_验证二叉搜索树</source>
      <description>098_验证二叉搜索树</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 098_验证二叉搜索树</h1>
]]></content:encoded>
    </item>
    <item>
      <title>102_二叉树的层序遍历</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_102_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_102_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html</guid>
      <source url="https://T4mako.github.io/rss.xml">102_二叉树的层序遍历</source>
      <description>102_二叉树的层序遍历</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 102_二叉树的层序遍历</h1>
]]></content:encoded>
    </item>
    <item>
      <title>103_二叉树的锯齿形层序遍历</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_103_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_103_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html</guid>
      <source url="https://T4mako.github.io/rss.xml">103_二叉树的锯齿形层序遍历</source>
      <description>103_二叉树的锯齿形层序遍历</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 103_二叉树的锯齿形层序遍历</h1>
]]></content:encoded>
    </item>
    <item>
      <title>104_二叉树的最大深度</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_104_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_104_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html</guid>
      <source url="https://T4mako.github.io/rss.xml">104_二叉树的最大深度</source>
      <description>104_二叉树的最大深度</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 104_二叉树的最大深度</h1>
]]></content:encoded>
    </item>
    <item>
      <title>105_从前序与中序遍历序列构造二叉树</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_105_%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_105_%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html</guid>
      <source url="https://T4mako.github.io/rss.xml">105_从前序与中序遍历序列构造二叉树</source>
      <description>105_从前序与中序遍历序列构造二叉树</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 105_从前序与中序遍历序列构造二叉树</h1>
]]></content:encoded>
    </item>
    <item>
      <title>107_二叉树的层序遍历 II</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_107_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%20II.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_107_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%20II.html</guid>
      <source url="https://T4mako.github.io/rss.xml">107_二叉树的层序遍历 II</source>
      <description>107_二叉树的层序遍历 II</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 107_二叉树的层序遍历 II</h1>
]]></content:encoded>
    </item>
    <item>
      <title>113_路径总和II</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_113_%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8CII.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_113_%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8CII.html</guid>
      <source url="https://T4mako.github.io/rss.xml">113_路径总和II</source>
      <description>113_路径总和II</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 113_路径总和II</h1>
]]></content:encoded>
    </item>
    <item>
      <title>144_二叉树的前序遍历</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_144_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_144_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.html</guid>
      <source url="https://T4mako.github.io/rss.xml">144_二叉树的前序遍历</source>
      <description>144_二叉树的前序遍历</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 144_二叉树的前序遍历</h1>
]]></content:encoded>
    </item>
    <item>
      <title>145_二叉树的后序遍历</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_145_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_145_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.html</guid>
      <source url="https://T4mako.github.io/rss.xml">145_二叉树的后序遍历</source>
      <description>145_二叉树的后序遍历</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> 145_二叉树的后序遍历</h1>
]]></content:encoded>
    </item>
    <item>
      <title>LCP 68_美观的花束</title>
      <link>https://T4mako.github.io/code/leetcode/leetcode_LCP68_%E7%BE%8E%E4%B8%BD%E7%9A%84%E8%8A%B1%E6%9D%9F.html</link>
      <guid>https://T4mako.github.io/code/leetcode/leetcode_LCP68_%E7%BE%8E%E4%B8%BD%E7%9A%84%E8%8A%B1%E6%9D%9F.html</guid>
      <source url="https://T4mako.github.io/rss.xml">LCP 68_美观的花束</source>
      <description>LCP 68_美观的花束</description>
      <category>算法</category>
      <content:encoded><![CDATA[<h1> LCP 68_美观的花束</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Python 基础语法</title>
      <link>https://T4mako.github.io/code/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</link>
      <guid>https://T4mako.github.io/code/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Python 基础语法</source>
      <description># 1、数据类型 Python3 中有六个标准的数据类型： Number（数字）; String（字符串）; List（列表）; Tuple（元组）; Set（集合）; Dictionary（字典）; Python3 的六个标准数据类型中： 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）（不可修改索引对应的值）;...</description>
      <content:encoded><![CDATA[<h1> </h1>
<!-- more -->
<h2> 1、数据类型</h2>
<p>Python3 中有六个标准的数据类型：</p>
<ul>
<li>Number（数字）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<p>Python3 的六个标准数据类型中：</p>
<ul>
<li>**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）（不可修改索引对应的值）</li>
<li>**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）</li>
</ul>
<h3> Number（数字）</h3>
<p><strong>int、float、bool、complex（复数）</strong>。</p>
<ul>
<li><strong>整型(Int)</strong> - 通常被称为是整型或整数，是正或负整数，不带小数点。</li>
<li><strong>长整型(long integers)</strong> - 无限大小的整数，整数最后是一个大写或小写的L。</li>
<li><strong>浮点型(floating point real values)</strong> - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li>
<li><strong>复数(complex numbers)</strong> - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li>
</ul>
<p>我们可以使用十六进制和八进制来代表整数：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>bool 是 int 的子类，True 和 False 可以和数字相加</strong></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> String（字符串）</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> List（列表）</h3>
<p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。<br>
列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用方法：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Tuple（元组）</h3>
<p>元组（tuple）与列表类似，不同之处在于元组的<strong>元素不能修改</strong>。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。<br>
元组中的元素类型也可以不相同：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>string、list 和 tuple 都属于 sequence（序列）。<br>
元祖不可以进行的操作：append，insert，pop，del，remove......</p>
<h3> Set（集合）</h3>
<p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。<br>
基本功能是进行成员关系测试和删除重复元素。<br>
可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Dictionary（字典）</h3>
<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。<br>
<strong>键(key)必须使用不可变类型。</strong><br>
在同一个字典中，<strong>键(key)必须是唯一的。</strong></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">函数及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">dict.clear() 删除字典内所有元素</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">dict.copy() 返回一个字典的浅复制</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">dict.fromkeys(seq[, val]) 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">dict.get(key, default=None)返回指定键的值，如果值不在字典中返回default值</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">dict.has_key(key) 如果键在字典dict里返回true，否则返回false</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">dict.items() 以<strong>列表返回可遍历的(键, 值) 元组数组</strong>  转换成list还需强转</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">dict.keys() 以列表返回一个字典所有的键</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left">dict.setdefault(key, default=None) 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left">dict.update(dict2)把字典dict2的键/值对更新到dict里</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">dict.values()以列表返回字典中的所有值</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">pop(key[,default])删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left">popitem()返回并删除字典中的最后一对键和值。</td>
</tr>
</tbody>
</table>
<h3> Python数据类型转换</h3>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">int(x [,base])</td>
<td style="text-align:left">将x转换为一个整数，base为该数为几进制</td>
</tr>
<tr>
<td style="text-align:left">float(x)</td>
<td style="text-align:left">将x转换到一个浮点数</td>
</tr>
<tr>
<td style="text-align:left">[complex(real <a href="https://www.runoob.com/python3/python-func-complex.html" target="_blank" rel="noopener noreferrer">,imag])</a></td>
<td style="text-align:left">创建一个复数</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-str.html" target="_blank" rel="noopener noreferrer">str(x)</a></td>
<td style="text-align:left">将对象 x 转换为字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-repr.html" target="_blank" rel="noopener noreferrer">repr(x)</a></td>
<td style="text-align:left">将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-eval.html" target="_blank" rel="noopener noreferrer">eval(str)</a></td>
<td style="text-align:left">用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-tuple.html" target="_blank" rel="noopener noreferrer">tuple(s)</a></td>
<td style="text-align:left">将序列 s 转换为一个元组</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-list.html" target="_blank" rel="noopener noreferrer">list(s)</a></td>
<td style="text-align:left">将序列 s 转换为一个列表</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-set.html" target="_blank" rel="noopener noreferrer">set(s)</a></td>
<td style="text-align:left">转换为可变集合</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-dict.html" target="_blank" rel="noopener noreferrer">dict(d)</a></td>
<td style="text-align:left">创建一个字典。d 必须是一个 (key, value)元组序列。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-frozenset.html" target="_blank" rel="noopener noreferrer">frozenset(s)</a></td>
<td style="text-align:left">转换为不可变集合</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-chr.html" target="_blank" rel="noopener noreferrer">chr(x)</a></td>
<td style="text-align:left">将一个整数转换为一个字符</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-ord.html" target="_blank" rel="noopener noreferrer">ord(x)</a></td>
<td style="text-align:left">将一个字符转换为它的整数值</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-hex.html" target="_blank" rel="noopener noreferrer">hex(x)</a></td>
<td style="text-align:left">将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-oct.html" target="_blank" rel="noopener noreferrer">oct(x)</a></td>
<td style="text-align:left">将一个整数转换为一个八进制字符串</td>
</tr>
</tbody>
</table>
<h2> 2、注释</h2>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、运算符</h2>
<h3> 逻辑运算符</h3>
<table>
<thead>
<tr>
<th>and</th>
<th>x and y</th>
<th>布尔"与" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</th>
<th>(a and b) 返回 20。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>or</strong></td>
<td><strong>x or y</strong></td>
<td><strong>布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</strong></td>
<td><strong>(a or b) 返回 10。</strong></td>
</tr>
<tr>
<td><strong>not</strong></td>
<td><strong>not x</strong></td>
<td><strong>布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</strong></td>
<td><strong>not(a and b) 返回 False</strong></td>
</tr>
</tbody>
</table>
<h3> Python成员运算符</h3>
<p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td style="text-align:left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td style="text-align:left">not in</td>
<td style="text-align:left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td style="text-align:left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody>
</table>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Python身份运算符</h3>
<p>身份运算符用于比较两个对象的存储单元<br>
<strong>id()</strong> 函数用于获取对象内存地址。</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">is</td>
<td style="text-align:left">is 是判断两个标识符是不是引用自一个对象</td>
<td style="text-align:left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left">is not</td>
<td style="text-align:left">is not 是判断两个标识符是不是引用自不同对象</td>
<td style="text-align:left"><strong>x is not y</strong> ， 类似 <strong>id(x) != id(y)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>
</tr>
</tbody>
</table>
<h2> 4、分支循环</h2>
<h3> 1、IF</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、While</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、For</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、break，continue</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、pass</h3>
<p><strong>pass</strong> 不做任何事情，一般用做占位语句。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、math模块，cmath 模块</h2>
<p>Python 中数学运算常用的函数基本都在 math 模块、cmath 模块中。<br>
Python math 模块提供了许多对浮点数的数学运算函数。<br>
Python cmath 模块包含了一些用于复数运算的函数。<br>
cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。<br>
要使用 math 或 cmath 函数必须先导入：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> Python数学函数</h3>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">返回值 ( 描述 )</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">abs(x)</td>
<td style="text-align:left">返回数字的绝对值，如abs(-10) 返回 10</td>
</tr>
<tr>
<td style="text-align:left">ceil(x)</td>
<td style="text-align:left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td>
</tr>
<tr>
<td style="text-align:left">cmp(x, y)</td>
<td style="text-align:left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</td>
</tr>
<tr>
<td style="text-align:left">exp(x)</td>
<td style="text-align:left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td>
</tr>
<tr>
<td style="text-align:left">fabs(x)</td>
<td style="text-align:left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td>
</tr>
<tr>
<td style="text-align:left">floor(x)</td>
<td style="text-align:left">返回数字的下舍整数，如math.floor(4.9)返回 4</td>
</tr>
<tr>
<td style="text-align:left">log(x)</td>
<td style="text-align:left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>
</tr>
<tr>
<td style="text-align:left">log10(x)</td>
<td style="text-align:left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>
</tr>
<tr>
<td style="text-align:left">max(x1, x2,...)</td>
<td style="text-align:left">返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td style="text-align:left">min(x1, x2,...)</td>
<td style="text-align:left">返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td style="text-align:left">modf(x)</td>
<td style="text-align:left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>
</tr>
<tr>
<td style="text-align:left">pow(x, y)</td>
<td style="text-align:left">x**y 运算后的值。</td>
</tr>
<tr>
<td style="text-align:left"><strong>round(x [,n])</strong></td>
<td style="text-align:left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td>
</tr>
<tr>
<td style="text-align:left">sqrt(x)</td>
<td style="text-align:left">返回数字x的平方根</td>
</tr>
</tbody>
</table>
<h3> Python随机数函数</h3>
<p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p>
<p>Python包含以下常用随机数函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">choice(seq)</td>
<td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td>
</tr>
<tr>
<td style="text-align:left">randrange ([start,] stop [,step])</td>
<td style="text-align:left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td>
</tr>
<tr>
<td style="text-align:left">random()</td>
<td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td>
</tr>
<tr>
<td style="text-align:left">seed([x])</td>
<td style="text-align:left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td>
</tr>
<tr>
<td style="text-align:left">shuffle(lst)</td>
<td style="text-align:left">将序列的所有元素随机排序</td>
</tr>
<tr>
<td style="text-align:left">uniform(x, y)</td>
<td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。</td>
</tr>
</tbody>
</table>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、Python 函数</h2>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、输入输出</h2>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、File方法</h2>
<h4> open() 方法</h4>
<p>Python <strong>open()</strong> 方法用于打开一个文件，并返回文件对象。<br>
在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 <strong>OSError</strong>。<br>
**注意：**使用 <strong>open()</strong> 方法一定要保证关闭文件对象，即调用 <strong>close()</strong> 方法。<br>
<strong>open()</strong> 函数常用形式是接收两个参数：文件名(file)和模式(mode)。</p>
<h2> 9、内置函数</h2>
<p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Ajax 教程</title>
      <link>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Ajax.html</link>
      <guid>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Ajax.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Ajax 教程</source>
      <description>1、原生 Ajax 1.1、 Ajax简介 Ajax 全称为 Asynchronous Javascript And XML，即 异步JS和XML 通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据 AJAX不是新的编程语言，而是一种将 现有 的 标准组合 在一起使用的新方式 1.2、 XML简介 XML：可扩展标记语言 XML：被设计用来传输和存储数据 XML和HTML类似，不同点：HTML中都是预定义标签，XML 中没有预定义标签，全是 自定义标签，用来表示一些数据 现在已被JSON取代</description>
      <content:encoded><![CDATA[<h2> 1、原生 Ajax</h2>
<h3> 1.1、 Ajax简介</h3>
<ul>
<li>Ajax 全称为 Asynchronous Javascript And XML，即 <strong>异步JS和XML</strong></li>
<li>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></li>
<li>AJAX不是新的编程语言，而是一种将 <strong>现有</strong> 的 <strong>标准组合</strong> 在一起使用的新方式</li>
</ul>
<h3> 1.2、 XML简介</h3>
<ul>
<li>XML：可扩展标记语言</li>
<li>XML：被设计用来传输和存储数据</li>
<li>XML和HTML类似，不同点：HTML中都是预定义标签，<strong>XML</strong> 中没有预定义标签，全是 <strong>自定义标签</strong>，用来表示一些数据</li>
<li>现在已被JSON取代</li>
</ul>
<h3> 1.3 、AJAX 的特点</h3>
<h4> 1.3.1 AJAX的优点</h4>
<ol>
<li>可以 <strong>无刷新页面</strong> 与 <strong>服务端进行通信</strong></li>
<li>允许你 <strong>根据用户事件</strong> 来 <strong>更新部分页面</strong> 内容</li>
</ol>
<h4> 1.3.2、 AJAX 的缺点</h4>
<ol>
<li>没有浏览历史，不能回退</li>
<li><strong>Ajax</strong> 存在 <strong>跨域问题</strong>（同源）</li>
<li>SEO不友好（爬虫获取不到信息）</li>
</ol>
<h3> 1.4、 AJAX 的使用</h3>
<h4> 1.4.1、 核心对象 XMLHttpRequest</h4>
<ol>
<li>
<p><strong>XMLHttpRequest ：</strong><br>
<code>XMLHttpRequest</code>（<strong>XHR</strong>）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。<br>
这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 AJAX 编程中被大量使用。</p>
</li>
<li>
<p><strong>构造函数：<code>XMLHttpRequest()</code></strong><br>
该构造函数用于初始化一个 <code>XMLHttpRequest</code> 实例对象。<br>
在调用下列任何其他方法之前，<strong>必须先调用该构造函数</strong>，或通过其他方式，得到一个实例对象。</p>
<p><strong>const xhr = new XMLHttpRequest();</strong></p>
</li>
<li>
<p><strong>常用属性：</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>status</td>
<td>响应状态码。<strong>200,404,5XX...</strong></td>
</tr>
<tr>
<td>readystate</td>
<td>请求的状态。<strong>0 1 2 3 4</strong><br>0：初始值<br>1：open 方法调用<br>2：send 方法调用<br>3：服务端返回部分结果<br>4：服务端返回全部结果</td>
</tr>
<tr>
<td>onreadystatechange</td>
<td>当 <code>readyState</code> 属性发生变化时，调用的事件处理器</td>
</tr>
<tr>
<td>responseType</td>
<td>指定响应的数据类型<br>如：<strong>xhr.responseType = 'json';</strong></td>
</tr>
<tr>
<td>timeout</td>
<td>设置响应超时时间，超过该时间，取消 ajax 请求</td>
</tr>
<tr>
<td>ontimeout</td>
<td>超时回调的方法<br>xhr.ontimeout = function(){}</td>
</tr>
<tr>
<td>onerror</td>
<td>网络异常回调</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>常用方法：</strong></p>
</li>
</ol>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>open()</td>
<td>初始化一个请求，设置 请求方法 和 url<br>xhr.open('GET', '<a href="http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300</a>')</td>
</tr>
<tr>
<td>send()</td>
<td>发送请求。如果请求是异步的（默认），那么该方法将在请求发送后立即返回。<br>xhr.send()</td>
</tr>
<tr>
<td>setRequestHeader()</td>
<td>设置 <strong>请求头</strong> 的值。必须在 <code>open()</code> 之后、<code>send()</code> 之前调用 该方法。</td>
</tr>
<tr>
<td>abort()</td>
<td>立刻中止请求</td>
</tr>
</tbody>
</table>
<h4> 1.4.2、GET 请求</h4>
<p>GET.html：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Server.js：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1.4.3、POST 请求</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1.4.4、 处理 JSON 响应体</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1.4.5、超时与网络异常</h4>
<p>设置服务器响应的时间，如果超过该时间，取消 ajax 请求</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1.4.6、 取消 Ajax 请求</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1.4.7、 Ajax 重复发送问题</h4>
<p>通过 节流 的方式<br>
设置一个 <strong>判断标识变量</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、Axios 发送 Ajax</h2>
<p>使用 cnd链接 引入Axios：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发送请求：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、fetch 函数发送 Ajax</h2>
<p>fetch 区别于 ajax<br>
可以直接通过 window对象 内置的 <strong>fetch</strong> 发送请求<br>
fetch 也是 promise 风格</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、 跨域</h2>
<h3> 4.1、同源策略</h3>
<p>同源策略（Same-Origin Policy）最早由 Netscape 公司提出，是浏览器的一种安全策略。<br>
<strong>同源</strong>：<strong>协议、域名、端口号</strong> 必须 <strong>完全相同</strong><br>
违背同源策略就是 <strong>跨域</strong></p>
<p>Ajax 默认遵循同源规则</p>
<h3> 4.2、 JSONP 解决跨域 （几乎不用）</h3>
<ol>
<li>
<p>JSONP是什么</p>
<p>JSONP (JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，<strong>只支持get请求</strong></p>
</li>
<li>
<p>JSONP 怎么工作的？</p>
<p>在网页有一些 <strong>标签</strong> 天生 <strong>具有跨域能力</strong>，比如：img, link, iframe, script</p>
<p>JSONP就是利用 <strong>script</strong> <strong>标签</strong> 的跨域能力来发送请求的</p>
</li>
<li>
<p>JSONP的使用</p>
<ul>
<li>动态的创建一个script标签</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>设置script的src，设置回调函数</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
</ol>
<p>JSONP 实践：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.3、CORS 解决跨域</h3>
<ol>
<li>
<p>CORS是什么？</p>
<p><strong>CORS</strong> (Cross-Origin Resource Sharing), 跨域资源共享。CORS 是 <strong>官方的跨域解决方案</strong>，它的特点是不需要在客户端做任何特殊的操作，<strong>完全在服务器中进行处理</strong>，支持 get 和 post 等请求。跨域资源共享标准 <strong>新增了一组 HTTP  首部字段</strong>（<strong>响应头</strong>），允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p>
</li>
<li>
<p>CORS怎么工作的？</p>
<p>CORS 是通过设置一个 <strong>响应头</strong> 来告诉浏览器，<strong>该请求允许跨域，浏览器收到该响应以后就会对响应放行</strong>。</p>
</li>
</ol>
<p>主要是服务端的设置<br>
在 node.js 中设置 响应头</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐阅读：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></li>
</ul>
<h3> 4.4、配置代理服务器</h3>
<p>1、借助 nginx<br>
2、借助 vue-cli （vue脚手架）见 vue 笔记</p>
]]></content:encoded>
    </item>
    <item>
      <title>Axios 教程</title>
      <link>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Axios.html</link>
      <guid>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Axios.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Axios 教程</source>
      <description>axios 引入方式：https://github.com/axios/axios#installing 1、json-server 介绍与服务搭建 json-server 介绍与服务搭建 Get a full fake REST API with zero coding in less than 30 seconds</description>
      <content:encoded><![CDATA[<p>axios 引入方式：<a href="https://github.com/axios/axios#installing" target="_blank" rel="noopener noreferrer">https://github.com/axios/axios#installing</a></p>
<h2> 1、json-server 介绍与服务搭建</h2>
<p><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener noreferrer">json-server</a> 介绍与服务搭建<br>
Get a full fake REST API with zero coding in less than 30 seconds</p>
<p>全局安装：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个 db.json 文件</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启服务（在 db.json 所在目录）</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问<br>
<a href="http://localhost:3000/posts/1" target="_blank" rel="noopener noreferrer">http://localhost:3000/posts/1</a><br>
<a href="http://localhost:3000/posts" target="_blank" rel="noopener noreferrer">http://localhost:3000/posts</a><br>
<a href="http://localhost:3000/comments" target="_blank" rel="noopener noreferrer">http://localhost:3000/comments</a><br>
<a href="http://localhost:3000/profile" target="_blank" rel="noopener noreferrer">http://localhost:3000/profile</a></p>
<h2> 2、Axios() 函数发送请求</h2>
<p>axios ：前端最流行的 ajax 请求库，react/vue 官方都推荐使用 axios 发 ajax 请求 ，基于 xhr + promise 的异步 ajax 请求库</p>
<p><strong>axios 函数返回一个 Promise 对象</strong></p>
<p>axios 可以向服务端发送 ajax 请求<br>
在 node.js 中向远端服务发送 http 请求</p>
<p>对应 <strong>Restful</strong> 风格的 增删改查 基本使用：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、Axios 对象方法发送请求</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、Axios 请求配置</h2>
<p><a href="https://github.com/axios/axios#request-config" target="_blank" rel="noopener noreferrer">Axios 请求配置</a></p>
<h3> 4.1、常用配置</h3>
<p><strong>url</strong>： 是必须的</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请求方式：默认为 GET</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>headers：设置请求头信息</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>data：请求体</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>params：传递 url 参数：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>baseUrl：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>timeout：请求超时时间，超时就取消，单位为 <strong>ms</strong></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>responseType：响应结果类型</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>proxy：代理</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2、设置默认值</h3>
<p><strong><a href="http://axios.defaults.XXX" target="_blank" rel="noopener noreferrer">axios.defaults.XXX</a> = 值</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、Axios 实例对象发送请求</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、Axios 配置拦截器</h2>
<p>使用介绍：<a href="https://github.com/axios/axios#interceptors" target="_blank" rel="noopener noreferrer">https://github.com/axios/axios#interceptors</a></p>
<p><strong>① 请求拦截器：</strong></p>
<p>通过回调对请求的参数等进行校验等功能</p>
<p><strong>② 响应拦截器：</strong></p>
<p>通过回调函数对结果进行预处理</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行顺序：请求拦截器 2，请求拦截器 1，响应拦截器 1，响应拦截器 2</p>
<h2> 7、Axios 取消请求</h2>
<p><a href="https://github.com/axios/axios#cancellation" target="_blank" rel="noopener noreferrer">https://github.com/axios/axios#cancellation</a></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、Axios 源码分析</h2>
<h3> axios.js</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>axios运行的整体流程：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230507102721089.png" alt="image-20230507102721089" loading="lazy"></p>
<p>request(config) ==&gt; dispatchRequest(config) ==&gt; xhrAdapter(config)</p>
<p>request(config):<br>
将请求拦截器 / dispatchRequest() / 响应拦截器 通过 promise 链串连起来,<br>
返回 promise<br>
dispatchRequest(config):<br>
转换请求数据 =&gt; 调用 xhrAdapter()发请求 =&gt; 请求返回后转换响应数<br>
据. 返回 promise<br>
xhrAdapter(config):<br>
创建 XHR 对象, 根据 config 进行相应设置, 发送特定请求, 并接收响应数据,<br>
返回 promise</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230507102721089.png" type="image/png"/>
    </item>
    <item>
      <title>CSS 基础</title>
      <link>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS3.html</link>
      <guid>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS3.html</guid>
      <source url="https://T4mako.github.io/rss.xml">CSS 基础</source>
      <description>1、CSS 层叠样式表 Cascading style sheets 1.1、语法规则 1.2、书写位置 head 标签中的 style 标签中 css注释为 /* */ 1.3、CSS 引入方式 引入方式 书写位置 作用范围 使用场景 -------- -------------------------- -------- ------------ ...</description>
      <content:encoded><![CDATA[<h1> </h1>
<!-- more -->
<h2> 1、CSS 层叠样式表</h2>
<p>Cascading style sheets</p>
<h3> 1.1、语法规则</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.2、书写位置</h3>
<p>head 标签中的 style 标签中</p>
<p>css注释为 <em><em>/</em> <em>/</em></em></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.3、CSS 引入方式</h3>
<table>
<thead>
<tr>
<th>引入方式</th>
<th>书写位置</th>
<th>作用范围</th>
<th>使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>内嵌式</td>
<td>style 标签</td>
<td>当前页面</td>
<td>小案例</td>
</tr>
<tr>
<td>外链式</td>
<td>link 标签引入单独 css 文件</td>
<td>多个页面</td>
<td>项目中</td>
</tr>
<tr>
<td>行内式</td>
<td>标签 style 属性中</td>
<td>当前标签</td>
<td>配合 js 使用</td>
</tr>
</tbody>
</table>
<h4> （1）内嵌式</h4>
<ul>
<li>CSS 写在 <strong>style 标签</strong>中</li>
<li>style 标签可以写在页面任意位置，<strong>一般放在 head 标签</strong>中</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> （2）外链式</h4>
<ul>
<li>CSS 写在<strong>单独的<code>.css</code>文件</strong>中</li>
<li>通过 <strong>link 标签</strong>引入到网页中</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> （3）行内式</h4>
<ul>
<li>CSS 写在标签 <strong>style 属性</strong>中</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.4、基础选择器</h3>
<ul>
<li>标签选择器</li>
<li>类选择器</li>
<li>id 选择器</li>
<li>通配符选择器</li>
</ul>
<h4> （1）标签选择器</h4>
<p>格式：<br>
标签选择器会选择所有相同标签</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> （2）类选择器</h4>
<p>格式：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>合法的<strong>类名</strong>：<strong>数字、字母、下划线、中划线</strong></li>
<li><strong>一个元素</strong>可以有<strong>多个类名</strong>，<strong>空格隔开</strong></li>
</ul>
<p>举例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> （3）id 选择器</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>页面中唯一</strong>，不能重复</li>
<li><strong>一个标签</strong>只能有<strong>一个 id</strong></li>
<li>id 选择器一般与 js 配合使用</li>
</ul>
<p>举例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> （4）通配符选择器</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>选中页面<strong>所有标签</strong></li>
<li>一般用于统一设置页面样式</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、CSS 字体和文本样式</h2>
<p>样式的层叠问题：给同一个标签设置相同的样式，此时样式会层叠（覆盖），写在最下面的会生效<br>
所谓层叠即叠加，样式一层一层层叠覆盖</p>
<h3> 2.1、字体大小</h3>
<p>浏览器默认字体大小 <strong>16px</strong><br>
修改字体大小：<strong>font-size</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.2、字体粗细</h3>
<p><strong>font-weigh</strong><br>
数值为100~900的<strong>整百</strong>数</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性值</th>
<th>数值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>400</td>
<td>正常</td>
</tr>
<tr>
<td>bold</td>
<td>700</td>
<td>加粗</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意：不是所有字体都提供了九种粗细，因此部分取值页面中无变化。<br>
实际开发中以：正常、加粗两种取值使用最多</p>
</blockquote>
<h3> 2.3、字体样式</h3>
<p><strong>font-style</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>normal</strong></td>
<td>正常</td>
</tr>
<tr>
<td><strong>italic</strong></td>
<td>倾斜</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.4、字体系列</h3>
<p><strong>font-family</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>操作系统</th>
<th>默认字体</th>
</tr>
</thead>
<tbody>
<tr>
<td>windows</td>
<td>微软雅黑</td>
</tr>
<tr>
<td>Mac</td>
<td>PingFang SC</td>
</tr>
</tbody>
</table>
<p>常见字体系列</p>
<table>
<thead>
<tr>
<th>常见字体系列</th>
<th>特点</th>
<th>场景</th>
<th>该系列常见字体</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>无衬线字体（sans-serif）</strong></td>
<td>文字笔画粗细均匀，并且首尾无装饰</td>
<td>网页</td>
<td>黑体、Arial</td>
</tr>
<tr>
<td><strong>衬线字体（serif）</strong></td>
<td>文字笔画粗细不均匀，并且首尾有装饰</td>
<td>报刊书籍</td>
<td>宋体、Times New Roman</td>
</tr>
<tr>
<td><strong>等宽字体（monospace）</strong></td>
<td>每个字母或文字的宽度相等</td>
<td>程序代码编写</td>
<td>Consolas、 fira Code</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.5、文本缩进</h3>
<p><strong>text-indent</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>取值</p>
<ul>
<li>数字 + px</li>
<li>数字 + em  (推荐：<strong>1em</strong>=当前标签的 <strong>font-size 大小</strong>)</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.6、文本水平对齐（内容对齐）方式</h3>
<p><strong>text-align（内容居中，针对字标签的内容进行居中）</strong></p>
<p>可以用<strong>text-align</strong>居中的<strong>内容标签</strong>：（inline-block，inline）<br>
<strong>文本、span、a、input、img</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左对齐（默认）</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>right</td>
<td>右对齐</td>
</tr>
</tbody>
</table>
<p>内容居中需要给 <strong>父元素</strong> 设置居中属性</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.7、文本修饰</h3>
<p><strong>清除a标签</strong>默认下划线：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>underline</td>
<td>下划线</td>
</tr>
<tr>
<td>line-through</td>
<td>删除线</td>
</tr>
<tr>
<td>overline</td>
<td>上划线</td>
</tr>
<tr>
<td>none</td>
<td>无</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.8、行高</h3>
<p><strong>line-height</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401135946.png" alt="" loading="lazy"></p>
<p><strong>文本高度</strong> = 上间距 + 文本高度 + 下间距</p>
<p>line-height 取值：<br>
<strong>数字 + px</strong><br>
<strong>倍数</strong>（当前标签 font-size 的倍数，即<strong>不算上下间距</strong>的倍数）</p>
<p>常用应用方式：<br>
单行文本垂直居中：l<strong>ine-height=元素父元素高度</strong><br>
取消上下间距：<strong>line-height=1</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.9、font 属性简写（复合属性）</h3>
<p>复合属性:<br>
<strong>font: style weight size/lh 字体</strong> <strong>分先后顺序</strong></p>
<p>只能省略前面两个，如果省略了相当于设置默认值<br>
若要同时设置<strong>单独和连写</strong>模式：单独写在连写下面（层叠）</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在线配置 font 简写-形式<br>
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font#live_sample" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/CSS/font#live_sample</a></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>关于Chrome调试工具：f12打开，选择元素，左边为html，右边为css3，<strong>css3样式</strong>可以通过<strong>键盘方向键</strong>修改，<strong>TAB键新增样式</strong><br>
<strong>查看网页源代码：ctrl+u 或者右键网页 查看源代码</strong></p>
</blockquote>
<h3> 2.10、颜色取值</h3>
<ul>
<li><strong>文字颜色 color</strong></li>
<li><strong>背景颜色 background-color</strong></li>
</ul>
<table>
<thead>
<tr>
<th>颜色表示方式</th>
<th>表示含义</th>
<th>属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td>关键词</td>
<td>预定义的颜色名</td>
<td>red、green、blue</td>
</tr>
<tr>
<td>rbg 表示法</td>
<td>红绿蓝三原色，取值 0-255</td>
<td>rgb(0,0,0)</td>
</tr>
<tr>
<td><strong>rgba 表示法</strong></td>
<td>红绿蓝三原色+透明度，取值 0-1</td>
<td>rgba(0, 0, 0, 0.5)</td>
</tr>
<tr>
<td><strong>十六进制表示法</strong></td>
<td>#开头，数字转换为16进制</td>
<td>#ff0000 简写 #f00</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.11、水平居中</h3>
<p><strong>margin</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>div、p、h（大盒子） 需要设置元素的宽度，否则会自动撑满父元素</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、CSS 选择器进阶</h2>
<h3> 3.1、后代选择器</h3>
<p>后代选择器，即<strong>后代，儿子，孙子，重孙子...都会被选中</strong></p>
<p>格式：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>选择器可以是标签、类、id......等选择器</p>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.2、子代选择器</h3>
<p><strong>只会选中儿子</strong></p>
<p>格式：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.3、并集选择器</h3>
<p>格式：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：<br>
<strong>代码规范：多个选择器，空格后回车</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.4、交集选择器</h3>
<p>交集选择器是找两个或多个选择器的交集</p>
<p>格式：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.4、相邻兄弟选择器</h3>
<p>相邻兄弟选择器是用来选取<strong>某个元素紧邻的兄弟元素</strong>,它的语法是 "选择器A + 选择器B"</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.5、通用兄弟选择器</h3>
<p>通用兄弟选择器和相邻兄弟选择器很相似,它的语法是"选择器A ~ 选择器B"，会匹配选择器A后面所有符合选择器B的元素</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.6、:hover 伪类选择器</h3>
<p>作用：<strong>鼠标悬停</strong>在元素上的样式<br>
<strong>任何标签都可以添加伪类，任何一个标签都可以鼠标悬停</strong></p>
<p>格式：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.7、结构伪类选择器</h3>
<ul>
<li>作用：根据元素在 HTML 中的**（父子）结构关系查找元素**</li>
<li>优势：减少对 HTML 中类的依赖，有利于<strong>保持代码整洁</strong></li>
<li>场景：常<strong>用于查找某父级选择器中的子元素</strong></li>
</ul>
<table>
<thead>
<tr>
<th>选择器</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>E:first-child</td>
<td>父元素中的第一个子元素 E</td>
</tr>
<tr>
<td>E:last-child</td>
<td>父元素中的最后一个子元素 E</td>
</tr>
<tr>
<td>E:nth-child(n)</td>
<td>父元素中的第 n 个子元素 E</td>
</tr>
<tr>
<td>E:nth-last-child(n)</td>
<td>父元素中的倒数第 n 个子元素 E</td>
</tr>
</tbody>
</table>
<p>n 可以写公式</p>
<p>n 可取值：0 1 2 3 4...</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>公式</th>
</tr>
</thead>
<tbody>
<tr>
<td>偶数</td>
<td>2n、even</td>
</tr>
<tr>
<td>奇数</td>
<td>2n+1、2n-1、odd</td>
</tr>
<tr>
<td>找到前 5 个</td>
<td>-n+5</td>
</tr>
<tr>
<td>找到从第 5 个往后</td>
<td>n+5</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401221325.png" alt="" loading="lazy"></p>
<h3> 3.8、伪元素</h3>
<ul>
<li>元素：HTML 标签</li>
<li>伪元素：<strong>CSS 模拟出标签效果</strong>，装饰性内容</li>
</ul>
<table>
<thead>
<tr>
<th>作用</th>
<th>伪元素</th>
</tr>
</thead>
<tbody>
<tr>
<td>在父元素内容的<strong>最前</strong>添加一个伪元素</td>
<td>::before</td>
</tr>
<tr>
<td>在父元素内容的<strong>最后</strong>添加一个伪元素</td>
<td>::after</td>
</tr>
</tbody>
</table>
<p>注意点：</p>
<ul>
<li>必须设置 <strong>content 属性</strong>才能生效</li>
<li>伪元素默认是<strong>行内元素，宽高不生效</strong></li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.9、:focus 伪类选择器</h3>
<p><code>:focus</code>表示获得焦点的元素（如<strong>表单输入</strong>）。当用户点击或触摸元素或通过键盘的“tab”键选择它时会被触发。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.10、:checked 伪类选择器</h3>
<p>任何处于选中状态的<strong>radio</strong>，<strong>checkbox</strong> 或 ("select") 元素中的<strong>option</strong> HTML 元素 ("option")。</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.11、属性选择器</h3>
<p>CSS <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors" target="_blank" rel="noopener noreferrer"><strong>属性选择器</strong></a> 匹配那些具有特定属性或属性值的元素。（常配合 <strong>自定义属性</strong> 使用）</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、Emmet 语法</h2>
<ul>
<li>简写语法，快速生成代码</li>
<li>VS Code 等代码编辑器自带</li>
</ul>
<table>
<thead>
<tr>
<th>语法</th>
<th>示例</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>标签名</td>
<td>div</td>
<td><code>&lt;div&gt;&lt;/div&gt;</code></td>
</tr>
<tr>
<td>类选择器</td>
<td><strong>.red</strong></td>
<td><code>&lt;div class="red"&gt;&lt;/div&gt;</code></td>
</tr>
<tr>
<td>id 选择器</td>
<td><strong>#one</strong></td>
<td><code>&lt;div id="one"&gt;&lt;/div&gt;</code></td>
</tr>
<tr>
<td>交集选择器</td>
<td>p.red#one</td>
<td><code>&lt;p class="red" id="one"&gt;&lt;/p&gt;</code></td>
</tr>
<tr>
<td>子代选择器</td>
<td>ul&gt;li</td>
<td><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></td>
</tr>
<tr>
<td>内部文本</td>
<td 内容="">ul&gt;li</td>
<td><code>&lt;ul&gt;&lt;li&gt;Hello&lt;/li&gt;&lt;/ul&gt;</code></td>
</tr>
<tr>
<td>创建多个</td>
<td>ul&gt;li*3</td>
<td><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></td>
</tr>
<tr>
<td>创建<strong>自增</strong></td>
<td>ul&gt;li{$}*3</td>
<td><code>&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;</code></td>
</tr>
<tr>
<td>同级</td>
<td>div+p</td>
<td><code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</code></td>
</tr>
</tbody>
</table>
<p>css 提示</p>
<table>
<thead>
<tr>
<th>单词首字母</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>fw</td>
<td>font-weight</td>
</tr>
<tr>
<td>w</td>
<td>width</td>
</tr>
<tr>
<td>h</td>
<td>height</td>
</tr>
<tr>
<td>bgc</td>
<td>backgroud-color</td>
</tr>
<tr>
<td>lh</td>
<td>line-height</td>
</tr>
<tr>
<td>w300+h200</td>
<td><code>width: 300px;height: 200px;</code></td>
</tr>
</tbody>
</table>
<h2> 5、CSS 背景相关属性</h2>
<h3> 5.1、背景颜色</h3>
<p><strong>background-color</strong><br>
<strong>Emment：gbc</strong></p>
<p>默认背景色是透明；背景色在背景图之下</p>
<p><strong>transparent</strong>：透明</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.2、背景图片</h3>
<p><strong>background-image</strong><br>
<strong>Emment：bgi</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.3、背景平铺</h3>
<p><strong>background-repeat</strong><br>
<strong>Emment：bgr</strong></p>
<table>
<thead>
<tr>
<th>取值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>repeat</td>
<td>（默认值）水平和垂直方向都平铺</td>
</tr>
<tr>
<td><strong>no-repeat</strong></td>
<td>（最常用）<strong>不平铺</strong></td>
</tr>
<tr>
<td>repeat-x</td>
<td>水平方向平铺（x 轴）</td>
</tr>
<tr>
<td>repeat-y</td>
<td>垂直方向平铺（y 轴）</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.4、背景位置</h3>
<p><strong>background-position</strong><br>
<strong>Emment：bgp</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401153740.png" alt="" loading="lazy"></p>
<p>属性值</p>
<p>方位名词（最多只能表示 9 个位置）<br>
水平方向：left center right<br>
垂直方向：top center bottom</p>
<p>数字+px（坐标）<br>
坐标轴 原点**(0,0)** 盒子的<strong>左上角</strong><br>
x 轴 水平方向<br>
y 轴 垂直方向<br>
图片左上角与坐标原点重合</p>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意：正数：向右向下移动，负数：向左向右移动<br>
背景色和背景图只显示在盒子里面</p>
</blockquote>
<h3> 5.5、背景属性连写</h3>
<p><strong>background</strong><br>
<strong>Emment：bg</strong></p>
<p>格式：<br>
<strong>不分先后顺序</strong><br>
对于position：背景图位置如果是英文单词可以颠倒顺序<br>
测试背景图位置如果是数值 不能颠倒顺序</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.6、img 标签和背景图片区别</h3>
<p>需求：需要在网页中展示一一张图片效果：<br>
方法一：直接写上img标签即可<br>
方法二：div标签+背景图片<br>
<strong>必须设置div的宽高</strong>，因为背景图片只是装饰CSS样式，不能撑开div标签</p>
<p><strong>img：</strong><br>
不设置高宽会默认显示<br>
<strong>重要突出的图，产品图</strong>使用 img</p>
<p><strong>background-image：</strong><br>
需要设置元素尺寸<br>
<strong>装饰性图片</strong>使用背景图</p>
<h2> 6、CSS 盒模型</h2>
<h3> 6.1、元素显示模式</h3>
<p>块级、行内、行内块</p>
<h3> 6.2、块级元素</h3>
<ul>
<li><strong>独占一行</strong></li>
<li><strong>宽度</strong>默认为<strong>父元素 100%</strong>；<strong>高度</strong>默认由<strong>元素撑开</strong></li>
<li><strong>设置宽度和高度生效</strong>，但仍然独占一行</li>
</ul>
<p>代表标签</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 6.3、行内元素</h3>
<ul>
<li><strong>不换行，一行显示多个</strong></li>
<li><strong>宽度和高度</strong>默认<strong>由内容撑开</strong></li>
<li><strong>设置宽度和高度不生效</strong></li>
</ul>
<p>代表标签</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 6.4、行内块元素</h3>
<ul>
<li><strong>不换行</strong>，一行显示多个</li>
<li><strong>设置宽度和高度生效</strong></li>
</ul>
<p>代表标签</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong>：<strong>img标签</strong>有行内元素的特点，但是chrome调试工具中显式结果是<strong>inline</strong></p>
<h3> 6.5、元素显示模式转换</h3>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>block</td>
<td><strong>块</strong>级元素（常用）</td>
</tr>
<tr>
<td>inline-block</td>
<td><strong>行内块</strong>元素（常用）</td>
</tr>
<tr>
<td>inline</td>
<td><strong>行内</strong>元素（不常用）</td>
</tr>
</tbody>
</table>
<p>举例：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.6、HTML 嵌套规范注意点</h3>
<p>元素之间的关系：<strong>父子</strong>关系，<strong>并列</strong>关系</p>
<ul>
<li><strong>块级</strong>元素一般作为<strong>大容器</strong></li>
<li>可以嵌套文本、块级元素、行内元素、行内块元素</li>
</ul>
<blockquote>
<p><strong>p</strong> 标签中<strong>不要嵌套 div p h</strong> 等块级元素</p>
</blockquote>
<ul>
<li><strong>a 标签</strong>内部可以<strong>嵌套任意内容（除了a）</strong></li>
</ul>
<blockquote>
<p>a 标签<strong>不能嵌套 a</strong> 标签</p>
</blockquote>
<h3> 6.7、盒子模型</h3>
<p>（1）盒子</p>
<p>标签可以看做是一个盒子</p>
<p>（2）盒子模型：</p>
<ul>
<li><strong>外边距</strong>区域 <strong>margin</strong></li>
<li><strong>边框</strong>区域 <strong>border</strong></li>
<li><strong>内边距</strong>区域 <strong>padding</strong></li>
<li><strong>内容</strong>区域 <strong>content</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401203350.png" alt="" loading="lazy"></p>
<p>（3）盒子内容的宽高</p>
<ul>
<li>width</li>
<li>height</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.8、边框 border</h3>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线条可选样式<br>
<strong>solid 实线</strong><br>
<strong>dashed 虚线</strong><br>
<strong>dotted 点线</strong></p>
<p><strong>布局顺序：从外到内，从上到下</strong></p>
<h3> 6.9、内边距 padding</h3>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>规律：顺时针，值不够看对边</p>
<h3> 6.10、练习：导航实例</h3>
<p>注意：可以<strong>使用padding替代width</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.11、盒子尺寸计算</h3>
<p>给盒子设置border或padding时，盒子会被撑大，不想盒子撑大的方法：</p>
<p>①手动内减：<br>
自己计算多余大小，手动在content中减去<br>
缺点：项目中计算量太大，很麻烦</p>
<p>②<strong>自动内减：</strong>（内减模式）<br>
给盒子设置 <strong>box-sizing: border-box;</strong> 即可<br>
优点：浏览器自动计算多余大小，自动在内容中减去</p>
<p>box-sizing: content-box 默认<br>
盒子最终宽度 = width(content) + padding + border</p>
<p><strong>box-sizing: border-box</strong><br>
<strong>盒子最终宽度 = width</strong> = padding + border + content<br>
适用于inline-block，block</p>
<h3> 6.12、外边距 margin</h3>
<p>设置值的方式<strong>和 padding 类似</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 margin 让元素居中</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.13、清除浏览器默认样式</h3>
<p>浏览器会默认给部分标签设置默认的margin和padding，但一般在项目开始前要先<strong>清除这些默认的margin和padding</strong>，后续自己设置<br>
（比如：body有margin：8px、p有margin，ul有margin和padding）</p>
<p>京东</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>淘宝</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常用的清除样式</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>去掉列表前的符号</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>版心居中</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.14、外边距折叠现象</h3>
<ul>
<li>合并现象</li>
<li>塌陷现象</li>
</ul>
<h4> （1）合并现象</h4>
<ul>
<li>场景：<strong>垂直</strong>布局的块级元素，<strong>上下的 margin 会合并</strong></li>
<li>结果：<strong>最终</strong>两者距离为 <strong>margin 的最大值</strong></li>
<li>解决方法：<strong>只给其中一个盒子设置 margin</strong></li>
</ul>
<p>下面代码div间隔只有100px</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> （2）塌陷现象</h4>
<ul>
<li>场景：相互嵌套的块级元素，<strong>子元素的 margin-top 会作用在父元素上</strong></li>
<li>结果：导致父元素一起往下移动</li>
<li>解决方法：</li>
</ul>
<ol>
<li>给父元素设置 border-top 或者 padding-top(分隔父子元素的 margin-top)</li>
<li>给父元素设置 <strong>overflow:hidden</strong></li>
<li>转换为 行内块元素</li>
<li>设置浮动</li>
</ol>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.15、行内标签的 margin/pading</h3>
<p><strong>行内标签的 margin/pading 垂直方向不生效</strong>，使用行高 <strong>line-height</strong> 实现</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、CSS 特性</h2>
<ul>
<li>继承性</li>
<li>层叠性</li>
<li>优先级</li>
</ul>
<h3> 7.1、继承性 inherited</h3>
<p>（1）子元素有默认继承父元素样式的特点</p>
<p>可继承的常见属性（<strong>文字属性都可以继承，非文字属性不能继承</strong>）：<br>
color font-style font-weight font-size font-family text-align text-indent<br>
line-height</p>
<p>（2）继承失效的特殊情况</p>
<p>如果元素有浏览器默认样式，就不继承父元素属性：<br>
a 标签的 color 会继承时效<br>
h 系列标签的 font-size 会继承失效</p>
<p>示例 ：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给body赋值，子元素也会别继承<br>
若子元素有属性（h，a）用子元素的</p>
<h3> 7.2、层叠性</h3>
<p>同一个标签设置<strong>不同</strong>的样式<br>
样式<code>层叠叠加</code>，共同作用在标签上</p>
<p>同一个标签设置<strong>相同</strong>的样式<br>
样式会<code>层叠覆盖</code>，最终写在最后的样式生效</p>
<p>当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果</p>
<blockquote>
<p>技巧: 编辑器多行输入</p>
</blockquote>
<p>示例 ：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.3、优先级</h3>
<p><strong>不同选择器具有不同的优先级，</strong></p>
<p><strong>优先级高</strong>的选择器样式会<strong>覆盖优先级低</strong>的选择器</p>
<h4> 7.3.1、优先级公式（由低到高）</h4>
<p>​	继承<br>
​	通配符选择器<br>
​	标签选择器<br>
​	类选择器<br>
​	id 选择器<br>
​	行内样式（style=""）<br>
​	!important（慎重使用）</p>
<p>总结：选择范围越小，优先级越高</p>
<p>!important使用示例<br>
注：!important 不要给继承的添加，自己有样式无法继承父级样式</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7.3.2、复合选择器权重叠加</h4>
<p>如果是符合选择器，此时需要通过权重叠加计算方法，判断最终哪个选择器优先级最高会生效</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401173923.png" alt="" loading="lazy"></p>
<p>计算公式，每级之间不进位</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一级 行内样式个数<br>
第二级 id 选择器个数<br>
第三级 类选择器个数<br>
第四级 标签选择器个数<br>
继承最低</p>
<p>需要注意：<br>
!important 权重最高<br>
继承权重最低</p>
<blockquote>
<p>chrome 调试: 元素右键 -&gt; 检查元素</p>
</blockquote>
<p>工具：PxCook <a href="https://www.fancynode.com.cn/pxcook" target="_blank" rel="noopener noreferrer">https://www.fancynode.com.cn/pxcook</a> （像素大厨）</p>
<p>示例 ：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.4、常见问题</h3>
<p>熟练掌握chrome调试工具</p>
<p>css语法出错后，后面的css样式都不执行</p>
<h2> 8、CSS 浮动</h2>
<h3> 8.1、标准流</h3>
<p>标准流：又称为<strong>文档流</strong>，浏览器排列元素的规则</p>
<p>常见标准流的排版规则</p>
<ul>
<li>块级元素：从上往下，垂直布局，独占一行</li>
<li>行内元素或行内块元素：从左往右，水平布局，空间不够自动折行</li>
</ul>
<p>浏览器解析 <strong>行内元素 或 行内块元素</strong> <strong>换行书写会产生一个空格</strong><br>
但在书写是，转行内块后不可能全书写在一列上，因此需要浮动</p>
<h3> 8.2、浮动</h3>
<p>浮动的作用：</p>
<ul>
<li>早期：图文环绕</li>
<li>现在：网页布局</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>fll、flr</strong></p>
<p>浮动的特点：</p>
<ul>
<li>
<p>浮动的标签默认<strong>顶对齐</strong>（<strong>相较于父标签</strong>），可使用 margin-top 修改距离顶部距离</p>
</li>
<li>
<p>浮动元素会<strong>脱离标准流</strong>（脱标），在标准流中不占用位置（飘到空中）</p>
</li>
<li>
<p>浮动元素比标准流<strong>高半个级别</strong>，可以覆盖标准流中的元素（盖不住文字）</p>
</li>
<li>
<p><strong>浮动找浮动</strong>，下一个浮动元素会在上一个浮动元素后面，左右浮动</p>
</li>
<li>
<p><strong>浮动标签</strong>具备<strong>行内块</strong>特点：</p>
<ol>
<li>一行<strong>显示多个</strong></li>
<li>可<strong>设置宽高</strong></li>
</ol>
</li>
<li>
<p><strong>浮动之后盒子水平居中不生效 margin: 0 auto;</strong></p>
</li>
</ul>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CSS 书写顺序</strong></p>
<ul>
<li><strong>浮动 / display</strong></li>
<li><strong>盒子模型 margin border padding 宽度高度背景色</strong></li>
<li><strong>文字样式</strong></li>
</ul>
<p>常用 css</p>
<ul>
<li>内减模式：box-sizing: border-box;</li>
<li>版心居中： margin: 0 auto;</li>
</ul>
<h3> 8.3、清除浮动</h3>
<p><strong>清除浮动给别的元素带来的影响</strong></p>
<p>影响：如果子元素浮动了，此时子元素不能撑开标准流的块级父元素（父子级标签，父级没有设置高度，后面的标准流盒子会受影响）</p>
<p><strong>清除浮动的方法</strong></p>
<h4> 8.3.1、直接设置父元素高度（不用）</h4>
<p>缺点：太麻烦</p>
<h4> 8.3.2、额外标签（有缺点）</h4>
<ul>
<li>在父元素css内容的最后添加一个块级元素</li>
<li>给添加的块级元素设置 <strong>clear:both;</strong></li>
</ul>
<p>缺点：需要额外加标签</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8.3.3、单伪元素清除法</h4>
<p>用<strong>伪元素替代</strong>了<strong>额外标签</strong></p>
<p>优点：<strong>直接给标签加类即可清除浮动</strong></p>
<p>（1）基本写法</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）补充写法</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8.3.4、双伪元素清除法（常用）</h4>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8.3.5、父元素设置overflow</h4>
<p>直接给父元素设置overflow：hidden<br>
优点：方便</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9、Flex 布局</h2>
<h3> 9.1、Flex 布局介绍</h3>
<p><strong>Flex布局</strong>也叫<strong>弹性布局</strong>，是浏览器提倡的布局模型，非常适合结构化布局，提供了强大的<strong>空间分布</strong>和<strong>对齐</strong>能力。<br>
Flex模型<strong>不会</strong>产生浮动布局中<strong>脱标</strong>现象，布局网页更简单灵活</p>
<h3> 9.2、Flex 组成</h3>
<p>设置方式：给 <strong>父</strong> 元素设置 <strong>display: flex</strong> ，<strong>子</strong> 元素可以自动挤压或拉伸</p>
<p><strong>父级：弹性容器</strong><br>
<strong>子级：弹性盒子</strong></p>
<p>组成部分：<br>
弹性容器<br>
弹性盒子<br>
主轴：默认在<strong>水平</strong>方向<br>
侧抽/交叉轴：默认在<strong>垂直</strong>方向</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.3、主轴对齐方式</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230407212933.png" alt="" loading="lazy"></p>
<p><strong>属性名：justify-content：</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start</td>
<td>默认值，弹性盒子从<strong>起点</strong>开始依此排列</td>
</tr>
<tr>
<td>flex-end</td>
<td>弹性盒子<strong>终点</strong>开始一次排列</td>
</tr>
<tr>
<td><strong>center</strong></td>
<td>弹性盒子沿主轴<strong>居中</strong>排列</td>
</tr>
<tr>
<td><strong>space-between</strong></td>
<td>弹性盒子沿主轴均匀排列，<strong>间距</strong>均分盒子<strong>之间</strong></td>
</tr>
<tr>
<td><strong>space-around</strong></td>
<td>弹性盒子沿主轴均匀排列，<strong>间距</strong>均分盒子<strong>两侧</strong></td>
</tr>
<tr>
<td><strong>spce-evenly</strong></td>
<td>弹性盒子沿主轴均匀排列，弹性盒子与容器之间间距相等</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.4、侧轴对齐方式</h3>
<p>属性名：<br>
<strong>align-items</strong>：当前弹性容器内所有弹性盒子对齐方式（给<strong>弹性容器设置</strong>）<br>
<strong>align-self</strong>：单独控制某个弹性盒子的侧轴对齐方式（给<strong>弹性盒子设置</strong>）</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>stretch</td>
<td>弹性盒子沿侧轴线被拉伸至<strong>铺满容器</strong>（弹性盒子无高度则默认拉伸，有高度不生效）</td>
</tr>
<tr>
<td>center</td>
<td>弹性盒子沿侧轴<strong>居中</strong>排列</td>
</tr>
<tr>
<td>flex-start</td>
<td>弹性盒子从<strong>起点</strong>开始依此排列</td>
</tr>
<tr>
<td>flex-end</td>
<td>弹性盒子从<strong>终点</strong>开始依此排列</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.5、修改主轴方向</h3>
<p>主轴默认水平方向，侧轴默认垂直方向</p>
<p>属性名：flex-direction</p>
<p>属性值:</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>row</td>
<td>水平方向，从左向右（默认）</td>
</tr>
<tr>
<td><strong>column</strong></td>
<td><strong>垂直方向，从上向下</strong></td>
</tr>
<tr>
<td>row-reverse</td>
<td>水平方向，从右往左</td>
</tr>
<tr>
<td>column-reverse</td>
<td>垂直方向，从上向下</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.6、弹性伸缩比</h3>
<p><strong>默认</strong>情况下，<strong>主轴</strong>方向的尺寸是<strong>靠内容撑开</strong>，<strong>侧轴</strong>默认是<strong>拉伸</strong>的效果</p>
<p>作用：控制弹性盒子的 <strong>主轴</strong> 方向的 <strong>尺寸</strong><br>
属性名：flex<br>
属性值：整数数字，表示占用父级<strong>剩余</strong>尺寸的<strong>份数</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.7、弹性盒子换行</h3>
<p>弹性盒子可以自<strong>动挤压或拉伸</strong>，默认情况下，所有弹性盒子<strong>在一行显示</strong></p>
<p>属性名：<strong>flex-wrap</strong></p>
<p>属性值：<br>
<strong>wrap：换行</strong><br>
<strong>nowrap：不换行</strong>（默认值）</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.8、行对齐方式</h3>
<p>属性名：<strong>align-content</strong></p>
<p>属性值：（与主轴对齐方式相同）</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start</td>
<td>默认值，弹性盒子从<strong>起点</strong>开始依此排列</td>
</tr>
<tr>
<td>flex-end</td>
<td>弹性盒子<strong>终点</strong>开始一次排列</td>
</tr>
<tr>
<td><strong>center</strong></td>
<td>弹性盒子沿主轴<strong>居中</strong>排列</td>
</tr>
<tr>
<td><strong>space-between</strong></td>
<td>弹性盒子沿主轴均匀排列，<strong>间距</strong>均分盒子<strong>之间</strong></td>
</tr>
<tr>
<td><strong>space-around</strong></td>
<td>弹性盒子沿主轴均匀排列，<strong>间距</strong>均分盒子<strong>两侧</strong></td>
</tr>
<tr>
<td><strong>spce-evenly</strong></td>
<td>弹性盒子沿主轴均匀排列，弹性盒子与容器之间间距相等</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注：align-content 对单行弹性盒子不生效</p>
</blockquote>
<h2> 10、CSS 定位</h2>
<h3> 10.1、网页常见布局方式</h3>
<p>1、标准流：<br>
块级元素独占一行 -&gt; 垂直布局<br>
行内元素/行内块元素一行显示多个 -&gt; 水平布局</p>
<p>2、浮动<br>
原本垂直布局的块级元素变成水平布局</p>
<p>3、定位<br>
可以让元素<strong>自由的摆放在网页的任意位置</strong><br>
一般用于<strong>盒子之间</strong>的<strong>层叠</strong>情况<br>
让盒子<strong>固定</strong>在页面某一位置</p>
<h3> 10.2、使用定位的步骤</h3>
<p><strong>1、设置定位方式</strong></p>
<p>属性名: <strong>position</strong></p>
<table>
<thead>
<tr>
<th>定位方式</th>
<th>属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td>静态定位</td>
<td>static（默认，不定为，就是文档流）</td>
</tr>
<tr>
<td>相对定位</td>
<td>relative</td>
</tr>
<tr>
<td>绝对定位</td>
<td>absolute</td>
</tr>
<tr>
<td>固定定位</td>
<td>fixed</td>
</tr>
</tbody>
</table>
<p><strong>2、设置偏移值</strong><br>
偏移值可以设置水平和垂直方向<br>
选取原则：<strong>就近原则</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230402201907.png" alt="" loading="lazy"></p>
<h3> 10.3、相对定位</h3>
<ul>
<li><strong>相对于自己</strong>之前的位置</li>
<li><strong>占有原来的位置</strong>（原来处在的位置不会被填充）</li>
<li><strong>不改变显示模式</strong>（块还是块）</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong>Tips: 如果 4 个定位都有，以 top 和 left 为准</strong><br>
<strong>相对定位只加position，还是原来的位置</strong></p>
</blockquote>
<h3> 10.4、绝对定位</h3>
<p>绝对定位：<br>
先找已经定位的父级，如果有这样的父级就以这个父级为参照物进行定位<br>
有父级，但父级没有定位，以浏览器窗口为参照进行定位</p>
<ul>
<li><strong>相对于非静态定位的父元素定位</strong></li>
<li>脱标，<strong>不占</strong>有<strong>原</strong>来的<strong>位</strong>置</li>
<li>改变显示模式（行内块特点，行内共存，宽高生效）</li>
<li>默认以浏览器 body 定位</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><em><strong>子绝父相</strong></em>：<strong>父级相对定位，子级绝对定位</strong></li>
<li>绝对定位查找父级的方法：逐级向上，最终是浏览器窗口</li>
</ul>
<p>1绝对定位的盒子<strong>不能使用margin 0 auto居中</strong><br>
解决方式：</p>
<p>① 手动修改（耦合性高）</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②位移 <strong>transform</strong>（常用）</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10.5、固定定位</h3>
<p><strong>fixed</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>特点：</p>
<ul>
<li>脱标-<strong>不占位置</strong></li>
<li><strong>相对于浏览器</strong>定位</li>
<li>具备<strong>行内块</strong>特点</li>
</ul>
<h3> 10.6、元素层级关系</h3>
<ol>
<li>不同布局方式元素的层级关系：</li>
</ol>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol>
<li><strong>同层级</strong>，<strong>后写</strong>的会<strong>覆盖</strong>在<strong>先写</strong>的元素</li>
<li><strong>设置元素层级</strong></li>
</ol>
<p><strong>z-index</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 11、CSS 装饰</h2>
<h3> 11.1. 垂直对齐 vertical-align</h3>
<p><strong>基线</strong>(baseline)：浏览器<strong>文字</strong>类型元素排版中存在<strong>用于对齐的基线</strong><br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230403143444.png" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>baseline</td>
<td>默认，基线对齐</td>
</tr>
<tr>
<td>top</td>
<td>顶部对齐</td>
</tr>
<tr>
<td>middle</td>
<td>中部对齐</td>
</tr>
<tr>
<td>bottom</td>
<td>底部对齐</td>
</tr>
</tbody>
</table>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>处理行内块和文字对齐，或行内块和行内块对齐都用 vertical-align: middle; <strong>|<br>
浏览器把</strong>行内</strong>和<strong>行内块</strong>当做文字处理，文字默认基线对齐（有时可以改为块状元素解决问题）</p>
<p>示例一：输入框垂直居中对齐</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230403145733.png" alt="" loading="lazy"></p>
<p>示例二：图片垂直居中对齐</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例三：图片水平垂直居中</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11.2、cursor</h3>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>默认，箭头</td>
</tr>
<tr>
<td><strong>pointer</strong></td>
<td>小手，提示可点击</td>
</tr>
<tr>
<td><strong>text</strong></td>
<td>工字型，提示可选择</td>
</tr>
<tr>
<td><strong>move</strong></td>
<td>十字光标，提示可移动</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11.3、border-radius</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230403152739.png" alt="" loading="lazy"></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）正圆</p>
<ul>
<li>盒子必须是正方形</li>
<li>设置边框圆角为盒子宽高的一半</li>
</ul>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）胶囊按钮</p>
<ul>
<li>盒子设置为长方形</li>
<li>设置边框圆角为高度的一半</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11.4、 溢出部分效果 overflow</h3>
<p>溢出部分：盒子内容部分<strong>超出盒子范围的区域</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>visible （ovv）</td>
<td>默认，溢出部分可见</td>
</tr>
<tr>
<td>hidden （ovh）</td>
<td>溢出部分隐藏</td>
</tr>
<tr>
<td>scroll</td>
<td>无论是否溢出都显示滚动条</td>
</tr>
<tr>
<td>auto （ova）</td>
<td>根据是否溢出，自动显示或隐藏滚动条</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11.5、 元素本身隐藏</h3>
<p>让某个元素本身在屏幕中不可见，如：鼠标:hover之后元素隐藏<br>
常见属性：<br>
1、visibility：hidden （不常用，占位的隐藏）<br>
2、<strong>display：none （常用，不占位的隐藏）</strong></p>
<p>示例：默认隐藏，鼠标悬停显示</p>
<p>box鼠标悬停，修改box2的显示模式：.box:hover .box2</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11.6、 opacity</h3>
<p>属性值：<br>
0-1 之间的数字；<br>
0 完全透明，1 完全不透明</p>
<p>示例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>半透明：rgba(0, 0, 0, 0.5);</p>
<h3> 11.7、精灵图</h3>
<p>将多张小图合并成一张大图，这张<strong>大图称为精灵图</strong><br>
优点：减少服务器发送次数，减轻服务器压力，提高页面加载速度<br>
缺点：修改起来比较麻烦</p>
<p>精灵图使用步骤<br>
1、创建一个盒子，设置盒子尺寸和小图尺寸相同<br>
2、将精灵图设置为盒子的背景图片<br>
3、修改背景图位置</p>
<p>一般<strong>精灵图的标签</strong>都用<strong>行内标签</strong></p>
<p><strong>修改背景图片的位置：  background-position: 0 0</strong>（往左往上给负值）</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11.8、background-size</h3>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>取值</th>
<th>场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>数字+px</td>
<td>简单方便，常用</td>
</tr>
<tr>
<td>百分比</td>
<td>相对于当前<strong>盒子自身</strong>的<strong>宽高百分比</strong></td>
</tr>
<tr>
<td>contain</td>
<td>包含，背景图等比缩放，<strong>直到不会超出盒子的最大</strong>，可能有留白</td>
</tr>
<tr>
<td>cover</td>
<td>覆盖，背景图等比缩放，直到刚好填满整个盒子<strong>没有空白</strong>，图片可能显示不全</td>
</tr>
</tbody>
</table>
<p>background连写拓展：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 11.9、盒子阴影 box-shadow</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>h-shadow</td>
<td>必须，水平偏移量，允许负值</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必须，垂直偏移量，允许负值</td>
</tr>
<tr>
<td>blur</td>
<td>可选，模糊度</td>
</tr>
<tr>
<td>spread</td>
<td>可选，阴影扩大</td>
</tr>
<tr>
<td>color</td>
<td>可选，阴影颜色</td>
</tr>
<tr>
<td>inset</td>
<td>可选，将阴影改为内部阴影</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意：外阴影不能添加outside，添加了会导致属性报错</p>
</blockquote>
<h3> 11.10、过渡 transition</h3>
<p><strong>transition （trs）</strong></p>
<ul>
<li>让元素样式慢慢变化</li>
<li>常配合 hover 使用</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>参数</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>过渡属性</td>
<td>所有属性 all；具体属性 width...</td>
</tr>
<tr>
<td>过渡时长</td>
<td>数字 + s(秒)</td>
</tr>
</tbody>
</table>
<p>注意：</p>
<ul>
<li><strong>transition</strong> 属性给需要过渡的<strong>元素本身加</strong></li>
<li>transition 属性设置在不同状态中，效果不同
<ul>
<li>给<strong>默认状态设置</strong>，鼠标<strong>移入移出</strong>都有过渡效果</li>
<li>给 <strong>hover 状态</strong>设置，鼠标<strong>移入</strong>有过渡效果，<strong>移出没有</strong>过渡效果</li>
</ul>
</li>
</ul>
<p>如果变化的属性多，直接写all，表示所有</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11.11、scroll-behavior</h3>
<p>当用户手动导航或者 CSSOM scrolling API 触发滚动操作时，让滚动条丝滑滚动</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 12、CSS 常用代码/实战</h2>
<h3> 1、项目结构</h3>
<p><em><strong>根目录：</strong></em><br>
<strong>index.html</strong>  首页<br>
<strong>css /</strong>  base.css   基本公共的样式 清除浏览器默认样式<br>
common.css 重复使用样式，网页头与尾<br>
index.css  页面单独的样式<br>
<strong>favicon.ico</strong><br>
<strong>images/</strong>       固定使用的图片素材<br>
**uploads/ **     非固定使用的图片素材</p>
<h3> 2、常用CSS</h3>
<h4> 2.1、base.css 清除默认样式</h4>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.2、 common.css 版心</h4>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.3、CSS样式引入顺序：</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.4、控制 input placeholder 样式</h4>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.4、调节图片垂直对齐方式（上下居中）</h4>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.5、通栏盒子（与浏览器宽度相同的盒子）</h4>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.6、小圆点</h4>
<p>通过ol li增加宽高，设置border-radius：50px</p>
<h3> 2、骨架标签解读</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、SEO</h3>
<h4> SEO</h4>
<p><strong>Search Engine Optimization 搜索引擎优化</strong><br>
作用：让网站在搜索引擎上的排名靠前</p>
<p>提升SEO的常见方法：<br>
1、竞价排名<br>
2、将网页制作成 html 后缀<br>
3、标签语义化，适合的地方使用合适的标签</p>
<h4> SEO 三大标签</h4>
<p>​	1、title 标题<br>
​	2、description 描述<br>
​	3、keywords 关键词，英文逗号分隔</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、icon 图标</h3>
<p>favicon.ico 文件放<strong>根目录</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、对齐方式</h3>
<ol>
<li>vertical-align</li>
<li>行高</li>
<li>定位</li>
</ol>
<h3> 6、常用类名</h3>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401135946.png" type="image/png"/>
    </item>
    <item>
      <title>HTML 基础</title>
      <link>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/HTML.html</link>
      <guid>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/HTML.html</guid>
      <source url="https://T4mako.github.io/rss.xml">HTML 基础</source>
      <description># 1、前导概念 WEB标准： 1.结构（HTML） 2.表现 （CSS3） 3.行为（JavaScript） HTML语法规范： HTML基本结构标签： VSCode的基础用法： 输入感叹号！回车创建基本骨架 必装插件：中文包，open in browser，AUTO Rename Tag，CSS peek 感叹号输入默认代码解析： **HTML标签...</description>
      <content:encoded><![CDATA[<h1> </h1>
<!-- more -->
<h2> 1、前导概念</h2>
<p><strong>WEB标准：</strong><br>
1.结构（HTML）<br>
2.表现 （CSS3）<br>
3.行为（JavaScript）</p>
<p><strong>HTML语法规范：</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>HTML基本结构标签：</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>VSCode的基础用法：</strong></p>
<p>输入感叹号！回车创建基本骨架<br>
必装插件：中文包，open in browser，AUTO Rename Tag，CSS peek</p>
<p><strong>感叹号输入默认代码解析：</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>HTML标签名大小写不敏感<br>
标签拥有自己的属性（分为基本属性和时间属性）<br>
标签分为单标签和双标签</strong></p>
<p>标签属性卸载开始标签内部<br>
属性之间以<strong>空格隔开</strong><br>
<strong>标签名与属性名</strong>之间必须以<strong>空格隔开</strong><br>
属性之间没有顺序之分</p>
<h1> 1、h1 标题标签</h1>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标题标签<strong>加大加粗，独占一行</strong><br>
属性：align 对齐属性（默认left 左对齐）</p>
<h2> 2、p 段落标签</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>paragraph段落标签<br>
（1）根据浏览器窗口自动换行<br>
（2）段落与段落有空隙</p>
<h2> 3、hr br 换行、水平线标签</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（1）break，打断，强制换行<br>
（2）是单标签</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>水平线标签</p>
<h2> 4、文本格式化标签</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要突出重要性，使用左边一排标签，语义更加强烈（标签语义化）</p>
<h2> 5、div、span 语义化标签</h2>
<p><strong>（1）一个div独占一行 大盒子</strong><br>
<strong>（2）一行可放多个span 小盒子</strong></p>
<p>手机端使用较多：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401113629.png" alt="" loading="lazy"></p>
<h1> 6、img图象标签</h1>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>属性：<br>
src	路径 <strong>必须</strong>的属性<br>
alt	 用于图象不显示的<strong>文字替换</strong><br>
title=“aaa”	 提示文本<br>
width=“500” 	宽度500px<br>
height=“500” 	高度500px	<br>
border="15" 	边框15px</p>
<blockquote>
<p>注：宽度高度只修改一个是等比缩放，绝对路径与相对路径(<strong>./</strong> 与 <strong>../</strong>)</p>
</blockquote>
<h2> 7、音、视频标签</h2>
<h3> 音频标签</h3>
<p>属性：<br>
src	路径<br>
controls	显示播放控件<br>
autoplay	自动播放（部分浏览器不支持）<br>
loop	循环播放</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 视频标签</h3>
<p>属性：<br>
src	路径<br>
controls	显示播放的控件<br>
autoplay	自动播放（谷歌浏览器中需要配合muted实现静音播放）<br>
loop	循环播放</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、a 超链接标签</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）herf为必须的属性，目标url地址<br>
（2）target中<br>
<strong>_self</strong>		为默认值当前页面打开<br>
**_blank	 **为在新窗口中打开</p>
<h2> 9、注释</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>快捷键 ctrl+/快速创建</p>
<h2> 10、字符实体</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401114019.png" alt="" loading="lazy"></p>
<h2> 11、table 表格标签</h2>
<p><strong>table &gt; tr &gt; td</strong></p>
<h3> 1、结构，单元格标签</h3>
<p><strong>表格样式使用css样式</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>table 标签是表格标签<br>
border 设置表格边框<br>
width 设置表格宽度<br>
height 设置表格高度<br>
aline 设置表格相对于页面的对齐方式<br>
cellspacing 设置单元格间距<br>
border-collapse collapse <strong>合并边框</strong></p>
<p>tr 是行标签<br>
th 是<strong>表头</strong>标签（thead）<br>
tbody、tfoot （了解）<br>
td 是<strong>单元格</strong>标签<br>
align 设置单元格文本对齐方式</p>
<p><strong>caption</strong> 表格大标题，默认在表格整体顶部居中显示<br>
captioin标签书写在table标签内部</p>
<p><strong>th表头单元格 td单元格</strong><br>
thead 表头部标签 tbody表格主题区域<br>
table标签不可省</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过css样式修改表格样式</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220612181816313.png" alt="image-20220612181816313" loading="lazy"></p>
<h3> 2、合并单元格</h3>
<p>跨行合并：rowspan=-“合并单元格的个数”</p>
<p>跨列合并：colspan=“合并单元格的个数”</p>
<p><strong>目标单元格：</strong></p>
<p>跨行：最上侧单元格为目标单元格<br>
跨列：最左边单元格为目标单元格<br>
合并单元格三部曲：<br>
（1）确定跨行还是跨列（2）找目标单元格写上合并方式（3）删除多余单元格</p>
<p>不能<strong>跨结构标签</strong>合并（不能跨thead、tbody、tfoot）</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 12、列表</h2>
<h3> 1、无序列表</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）无序列表各列表项之间没有顺序级别之分，是并列的<br>
（2）<strong>ul中只能有li标签</strong>，不能有其他标签或文字。<br>
（3）<strong>type属性</strong>可以修改列表项前面的符号</p>
<h3> 2、有序列表</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）<strong>ol中只能放li</strong>，其他标签或文字是不被允许的<br>
（2）li相当于一个容器，可以容纳所有元素<br>
（3）<strong>type属性</strong>可以修改列表项前面的符号</p>
<h3> 3、自定义列表</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）<strong>dl中只能有dt和dd</strong><br>
（2）dt和dd个数没有限制，通常是1对多</p>
<h2> 13、form 表单标签</h2>
<h3> 1、表单域</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表单域的属性</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20220614152819557.png" alt="image-20220614152819557" loading="lazy"></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/autocomplete" target="_blank" rel="noopener noreferrer">autocomplete</a>属性：可用于以文本或数字作为输入的 <code>input</code> 、<code>textarea</code>、<code>select</code> 、<code>form</code> 元素，指定<strong>浏览器</strong>是否有权限在填写表单字段值时<strong>提供自动帮助</strong>，常用值：<strong>off</strong></p>
<p>表单提交时，数据没有发送给服务器的三种情况：<br>
1、表单项没有name属性值<br>
2、单选，复选(下拉列表中的option标签)都需要添加value属性，以便发送给服务器<br>
3、表单项不在提交的form标签中</p>
<p>get请求的的特点：<br>
1、浏览器地址栏中的地址是：action属性[+?+请求参数]<br>
请求参数的格式是：name=value&amp;name=value<br>
2、不安全<br>
3、有数据长度的限制</p>
<p>post请求的特点：<br>
1、浏览器地址中只有action属性<br>
2、相对于get安全<br>
3、理论上没有数据长度限制</p>
<h3> 2、input表单元素</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（1）input是单标签，用于收集用户信息<br>
（2）input标签中包含<strong>type属性</strong>用于确定input的形式</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401110532.png" alt="" loading="lazy"></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>input的其他属性：</strong><br>
（1）<strong>placeholder</strong>属性，占位符，提示用户输入内容的文本<br>
（2）name是表单元素名字，<strong>单选按钮的name要相同</strong><br>
（3）value中的数据会传给后台<br>
（4）<strong>checked</strong>属性用于单选按钮和复选按钮，当页面打开时就可以默认选中这个按钮<br>
（5）maxlength 正整数，规定字符中的字符的最大长度<br>
（6）type="file" <strong>nultiple</strong>：上传多个文件</p>
<h3> 3、label标签</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lebel标签用于绑定一个表单元素，当<strong>点击</strong>label标签内<strong>文本</strong>时，<strong>单选框会被选中</strong></p>
<p><strong>label标签中的for属性应当与相关元素id属性</strong></p>
<h3> 4、select下拉表单</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）select中至少包含一对option<br>
（2）在option中定义selected="<strong>selected</strong>"时，为默认选中项</p>
<h3> 5、textarea文本域元素</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>起始标签和结束标签中的内容是默认值<br>
rows 属性设置可以显示几行的高度<br>
cols 属性设置每行可以显示几个字符宽度</p>
<h2> 14、iframe框架标签</h2>
<p>iframe标签可以在页面上开辟一个小区域显示一个单独的页面<br>
iframe和a标签组合使用的步骤：<br>
1、在iframe标签中使用name属性定义一个名称<br>
2、在a标签的target属性上设置iframe的name属性值</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230401113629.png" type="image/png"/>
    </item>
    <item>
      <title>Node.js 教程</title>
      <link>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Node.js%E7%AC%94%E8%AE%B0.html</link>
      <guid>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Node.js%E7%AC%94%E8%AE%B0.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Node.js 教程</source>
      <description>node.js API 1、Node.js介绍 1.1、Node.js 概念 Node.js 是一个开源的，跨平台的 JavaScript 运行环境 通俗来讲，Node.js 就是一款应用程序，是一款软件，它可以运行JS</description>
      <content:encoded><![CDATA[<p><a href="https://nodejs.cn/api-v16/" target="_blank" rel="noopener noreferrer">node.js API</a></p>
<h2> 1、Node.js介绍</h2>
<h3> 1.1、Node.js 概念</h3>
<p><strong>Node.js</strong> 是一个<strong>开源</strong>的，<strong>跨平台</strong>的 JavaScript 运行环境<br>
通俗来讲，Node.js 就是一款<strong>应用程序</strong>，是一款<strong>软件</strong>，它可以运行JS</p>
<p><strong>Node.js 作用：</strong></p>
<ul>
<li>开发服务器应用</li>
<li>开发工具类应用</li>
<li>开发桌面端应用</li>
</ul>
<h3> 1.2、Node.js 的安装</h3>
<p><a href="https://nodejs.org/en" target="_blank" rel="noopener noreferrer">Node.js 官网</a> 下载LTS版本</p>
<p>打开cmd，输入 <code>node -v</code> 查看安装情况<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230420185728.png" alt="" loading="lazy"></p>
<blockquote>
<p>注：<a href="https://www.jianshu.com/p/e8c29211fba9" target="_blank" rel="noopener noreferrer">注册表配置使用VSCode打开文件与文件夹</a></p>
</blockquote>
<h2> 2、Node.js 入门</h2>
<h3> 2.1、NodeJS 初体验</h3>
<p>新建一个js文件，通过vs使用终端运行文件</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230420192316.png" alt="" loading="lazy"></p>
<p>使用 <code>node hello.js</code> 运行文件</p>
<blockquote>
<p>注意：Node.js 中<strong>不能使用 BOM 和 DOM 的 API</strong><br>
Node.js 中的顶级对象为 <strong>global</strong>（相当于浏览器中的windows）<br>
<strong>console，定时器</strong> 的API可以使用</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230420192544.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230420192620431.png" alt="image-20230420192620431" loading="lazy"></p>
<h2> 3、Buffer</h2>
<h3> 3.1、概念</h3>
<p>Buffer 是一个类似于数组的 <strong>对象</strong> ，用于表示固定长度的字节序列<br>
Buffer 本质是一段内存空间，专门用来处理 <strong>二进制数据</strong> 。</p>
<h3> 3.2、特点</h3>
<ol>
<li>Buffer 大小固定且无法调整</li>
<li>Buffer 性能较好，可以直接对计算机内存进行操作</li>
<li>每个元素的大小为 1 字节（byte）</li>
</ol>
<h3> 3.3、创建 Buffer</h3>
<p>Node.js 中创建 Buffer 的方式主要如下几种：</p>
<ol>
<li>Buffer.alloc</li>
<li>Buffer.allocUnsafe</li>
<li>Buffer.from</li>
</ol>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.4、Buffer 与字符串的转化</h3>
<p>可以借助 <strong>toString</strong> 方法将 Buffer 转为字符串</p>
<p>toString 默认是按照 utf-8 编码方式进行转换的。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.5、Buffer 的读写</h3>
<p>Buffer 可以直接通过 <strong>[ ]</strong> 的方式对数据进行处理</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意:<br>
如果修改的数值<strong>超过 255</strong> ，则超过 8 位数据会被舍弃<br>
一个 utf-8 的字符 一般占 <strong>3</strong> 个字节</p>
</blockquote>
<h2> 4、fs 模块</h2>
<p>fs 全称为 <strong>file system</strong> ，称之为 文件系统 ，是 Node.js 中的 内置模块 ，可以对计算机中的磁盘进行操作。</p>
<h4> <em><strong>fs模块的导入：</strong></em></h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4.1、文件写入</h3>
<p>文件写入就是将 数据 保存到 文件 中，我们可以使用如下几个方法来实现该效果</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>writeFile()</td>
<td>异步写入</td>
</tr>
<tr>
<td>writeFileSync()</td>
<td>同步写入</td>
</tr>
<tr>
<td>appendFile() / appendFileSync()</td>
<td>追加写入</td>
</tr>
<tr>
<td>createWriteStream()</td>
<td>流式写入</td>
</tr>
</tbody>
</table>
<h4> 4.1.1、writeFile 异步写入</h4>
<p><strong>主线程 不会等待 其他线程的执行结果，直接执行后续的主线程代码，效率较好</strong></p>
<p><strong>语法</strong>： <strong>fs.writeFile(file, data[, options], callback)</strong></p>
<blockquote>
<p>注：<strong>callback（回调函数）</strong></p>
</blockquote>
<p><strong>参数</strong>说明：<br>
file 文件名<br>
data 待写入的数据<br>
options 选项设置 （可选）<br>
callback 写入回调</p>
<p><strong>返回值</strong>： undefined</p>
<p>案例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.1.2、writeFileSync 同步写入</h4>
<p>**主线程等待写入完成后继续执行，效率较低  **</p>
<p><strong>语法</strong>: fs.writeFileSync(file, data[, options])</p>
<p><strong>参数</strong>与 fs.writeFile 大体一致，只是没有 callback 参数</p>
<p><strong>返回值</strong>： undefined</p>
<p>示例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.1.3、appendFile / appendFileSync 追加写入</h4>
<p><strong>appendFile</strong> 作用是在文件尾部追加内容，appendFile 语法与 writeFile 语法完全相同</p>
<p><strong>语法:</strong><br>
fs.appendFile(file, data[, options], callback)<br>
fs.appendFileSync(file, data[, options])</p>
<p><strong>返回值</strong>： 都为 undefined</p>
<p>案例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <strong>writeFile 实现追加写入</strong></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.1.4、createWriteStream 流式写入</h4>
<p><strong>语法</strong>： fs.createWriteStream(path[, options])</p>
<p><strong>参数</strong>说明：<br>
path 文件路径<br>
options 选项配置（ 可选 ）</p>
<p><strong>返回值</strong>： Object</p>
<p>案例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序打开一个文件是需要消耗资源的 ，流式写入可以<strong>减少打开关闭文件的次数</strong>。<br>
<strong>流式写入</strong>方式 <strong>适用于大文件写入或者频繁写入</strong> 的场景, writeFile 适合于写入频率较低的场景</p>
<h3> 4.2、文件读取</h3>
<p>通过程序从文件中取出其中的数据，有如下几种方式：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>readFile()</td>
<td>异步读取</td>
</tr>
<tr>
<td>readFileSync()</td>
<td>同步读取</td>
</tr>
<tr>
<td>createReadStream()</td>
<td>流式读取</td>
</tr>
</tbody>
</table>
<h4> 4.2.1、readFile 异步读取</h4>
<p><strong>语法</strong>： fs.readFile(path[, options], callback)</p>
<p><strong>参数</strong>说明：<br>
path 文件路径<br>
options 选项配置<br>
callback 回调函数</p>
<p><strong>返回值</strong>： undefined</p>
<p>案例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.2.2、readFileSync 同步读取</h4>
<p><strong>语法</strong>： fs.readFileSync(path[, options])</p>
<p><strong>参数</strong>说明：<br>
path 文件路径<br>
options 选项配置</p>
<p><strong>返回值</strong>： string | Buffer</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.2.3、createReadStream 流式读取</h4>
<p>流式读取 为 <strong>一块一块读取</strong><br>
每次从文件中读取数据 <strong>64K</strong></p>
<p><strong>语法</strong>： fs.createReadStream(path[, options])</p>
<p><strong>参数</strong>说明：<br>
path 文件路径<br>
options 选项配置（ 可选 ）</p>
<p><strong>返回值</strong>： Object</p>
<p>案例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.3、复制文件</h3>
<p>方式一：readFile</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：流式操作</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式三：pip（不常用）</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.4、文件移动与重命名</h3>
<p>在 Node.js 中，我们可以使用 <strong>rename</strong> 或 <strong>renameSync</strong> 来移动或<strong>重命名 文件或文件夹</strong></p>
<p><strong>语法</strong>：<br>
fs.rename(oldPath, newPath, callback)<br>
fs.renameSync(oldPath, newPath)</p>
<p><strong>参数</strong>说明：<br>
oldPath 文件当前的路径<br>
newPath 文件新的路径（可以用于移动文件）<br>
callback 操作后的回调</p>
<p>案例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.5、文件删除</h3>
<p>在 Node.js 中，我们可以使用 <strong>unlink</strong> 或 <strong>unlinkSync</strong> 或 <strong>rm</strong> 来删除文件</p>
<p><strong>语法</strong>：<br>
fs.unlink(path, callback)<br>
fs.unlinkSync(path)<br>
fs.rm(path,callback)</p>
<p><strong>参数</strong>说明：<br>
path 文件路径<br>
callback 操作后的回调</p>
<p>示例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.6、文件夹操作</h3>
<p>借助 Node.js 的能力，我们可以对文件夹进行 <strong>创建 、 读取 、 删除</strong> 等操作</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>mkdir / mkdirSync</td>
<td>创建文件夹</td>
</tr>
<tr>
<td>readdir / readdirSync</td>
<td>读取文件夹</td>
</tr>
<tr>
<td>rmdir / rmdirSync</td>
<td>删除文件夹</td>
</tr>
</tbody>
</table>
<h4> 4.6.1、mkdir 创建文件夹</h4>
<p>在 Node.js 中，我们可以使用 <strong>mkdir</strong> 或 <strong>mkdirSync</strong> 来创建文件夹</p>
<p><strong>语法</strong>：<br>
fs.mkdir(path[, options], callback)<br>
fs.mkdirSync(path[, options])</p>
<p>参数说明：<br>
path 文件夹路径<br>
options 选项配置（ 可选 ）<br>
callback 操作后的回调</p>
<p>示例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归创建：<br>
<strong>recursive:true</strong> 表示递归创建</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.6.2、readdir 读取文件夹</h4>
<p>在 Node.js 中，我们可以使用 <strong>readdir</strong> 或 <strong>readdirSync</strong> 来读取文件夹</p>
<p><strong>语法</strong>：<br>
fs.readdir(path[, options], callback)<br>
fs.readdirSync(path[, options])</p>
<p><strong>参数</strong>说明：<br>
path 文件夹路径<br>
options 选项配置（ 可选 ）<br>
callback 操作后的回调</p>
<p>示例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.6.3、 rmdir 删除文件夹</h4>
<p>在 Node.js 中，我们可以使用 <strong>rm</strong> ， <strong>rmdir</strong> 或 <strong>rmdirSync</strong> 来删除文件夹</p>
<p><strong>语法</strong>：<br>
fs.rmdir(path[, options], callback)<br>
fs.rmdirSync(path[, options])</p>
<p><strong>参数</strong>说明：<br>
path 文件夹路径<br>
options 选项配置（ 可选 ）<br>
callback 操作后的回调</p>
<p><strong>示例</strong>：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归删除：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议使用 <strong>rm</strong> 方法：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.7、查看资源状态</h3>
<p>在 Node.js 中，我们可以使用 <strong>stat</strong> 或 <strong>statSync</strong> 来查看资源的详细信息</p>
<p><strong>语法</strong>：<br>
fs.stat(path[, options], callback)<br>
fs.statSync(path[, options])</p>
<p><strong>参数</strong>说明：<br>
path 文件夹路径<br>
options 选项配置（ 可选 ）<br>
callback 操作后的回调</p>
<p><strong>示例</strong>：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.8、__dirname</h3>
<p><strong>相对路径存在的问题：</strong><br>
fs模块<strong>相对路径</strong>的<strong>参照</strong>为：<strong>命令行的工作目录</strong>，并非是文件的所在目录</p>
<p><strong>__dirname</strong> 与 <strong>require</strong> 类似，都是 Node.js 环境中的 <strong>'全局变量'</strong><br>
__dirname 保存着 当前<strong>文件</strong>所在目录的<strong>绝对路径</strong> ，可以使用 __dirname 与文件名拼接成绝对路径</p>
<p>作用：通过 <strong>__dirname</strong> 拼接 绝对路径</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.9、批量重命名</h3>
<p>案例：批量重命名</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、path 模块</h2>
<p>path模块的导入：<strong>const path = require('path')</strong></p>
<p>path 模块提供了 操作路径 的功能，如下为几个较常用的API：</p>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>path.resolve</td>
<td>拼接规范的绝对路径 常用</td>
</tr>
<tr>
<td>path.sep</td>
<td>获取操作系统的路径分隔符</td>
</tr>
<tr>
<td>path.parse</td>
<td>解析路径并返回对象</td>
</tr>
<tr>
<td>path.basename</td>
<td>获取路径的基础名称</td>
</tr>
<tr>
<td>path.dirname</td>
<td>获取路径的目录名</td>
</tr>
<tr>
<td>path.extname</td>
<td>获得路径的扩展名</td>
</tr>
</tbody>
</table>
<p>为 <strong>规范化</strong> 绝对路径 （将路径中的斜线都改为 <code>/</code> ）可以使用 <strong>path.resolve</strong></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、http 模块</h2>
<p>HTTP（hypertext transport protocol）协议；中文叫超文本传输协议<br>
是一种基于TCP/IP的应用层通信协议<br>
这个协议详细规定了 浏览器 和万维网 服务器 之间互相通信的规则。</p>
<p>协议中主要规定了两个方面的内容<br>
客户端：用来向服务器发送数据，可以被称之为<strong>请求报文</strong><br>
服务端：向客户端返回数据，可以被称之为<strong>响应报文</strong></p>
<h3> 6.1、请求报文</h3>
<p>请求报文的组成：请求行、请求头、空行、请求体</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422090654.png" alt="" loading="lazy"></p>
<h4> 6.1.1、请求行</h4>
<p>请求行的组成：<br>
请求方法（get、post、put、delete等），请求URL（统一资源定位器）</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422090923.png" alt="" loading="lazy"></p>
<h4> 6.1.2、请求头</h4>
<p>请求头为<strong>键值对</strong>类型</p>
<p>格式：『头名：头值』</p>
<p>常见的请求头有：</p>
<table>
<thead>
<tr>
<th>请求头</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Host</td>
<td>主机名</td>
</tr>
<tr>
<td>Connection</td>
<td>连接的设置 keep-alive（保持连接）；close（关闭连接）</td>
</tr>
<tr>
<td>Cache-Control</td>
<td>缓存控制 max-age = 0 （没有缓存）</td>
</tr>
<tr>
<td>Upgrade Insecure Requests</td>
<td>将网页中的http请求转化为https请求（很少用）老网站升级</td>
</tr>
<tr>
<td>User-Agent</td>
<td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自 哪个客户端 ，一般在PC端和手机端的区分</td>
</tr>
<tr>
<td>Accept</td>
<td>设置浏览器接收的数据类型</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>设置接收的压缩方式</td>
</tr>
<tr>
<td>Accept Language</td>
<td>设置接收的语言 q=0.7 为喜好系数，满分为1</td>
</tr>
<tr>
<td>Cookie</td>
<td>cookie</td>
</tr>
</tbody>
</table>
<h4> 6.1.3、请求体</h4>
<p>请求体内容的格式是非常灵活的，</p>
<p>（可以是空）=&gt; GET请求，<br>
（也可以是字符串，还可以是JSON）=&gt; POST请求</p>
<h3> 6.2、响应报文</h3>
<p>响应报文组成：</p>
<p>响应行：<br>
HTTP协议版本号 、状态码、响应状态描述  <code>例如 HTTP/1.1 200 OK  </code><br>
响应状态码和响应字符串关系是一一对应的。</p>
<p>响应头</p>
<p>空行</p>
<p>响应体:<br>
响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON</p>
<h3> 6.3、创建 HTTP 服务</h3>
<p>使用 nodejs 创建 HTTP 服务</p>
<p>操作步骤：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>http.createServer 里的回调函数的执行时机： 当接收到 HTTP 请求的时候，就会执行</p>
</blockquote>
<p>使用浏览器访问：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422095002.png" alt="" loading="lazy"></p>
<p>停止服务的方式：<strong>ctrl+c</strong></p>
<p>响应内容<strong>中文乱码</strong>的<strong>解决办法</strong> ：response.setHeader('content-type','text/html;charset=utf-8');</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443, HTTP 服务开发常用端口有 3000，8080，8090，9000 等<br>
端口号被占用 的报错：Error: listen EADDRINUSE: address already in use :::9000</p>
<p>如果端口被其他程序占用，可以使用 资源监视器 找到占用端口的程序，然后使用 任务管理器 关闭对应的程序</p>
<h3> 6.4、查看 HTTP 报文</h3>
<p>查看请求行，请求头</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422101448.png" alt="" loading="lazy"></p>
<p>查看请求体</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422101526.png" alt="" loading="lazy"></p>
<p>查看响应行，响应头</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422101053.png" alt="" loading="lazy"></p>
<p>查看响应体</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230422101148.png" alt="" loading="lazy"></p>
<h3> 6.5、获取 HTTP 请求报文</h3>
<p>想要获取请求的数据，需要通过 <strong>request</strong> 对象</p>
<table>
<thead>
<tr>
<th>含义</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>请求方法</strong></td>
<td><strong>request.method</strong></td>
</tr>
<tr>
<td>请求版本</td>
<td>request.httpVersion</td>
</tr>
<tr>
<td><strong>请求路径</strong></td>
<td><strong>request.url</strong></td>
</tr>
<tr>
<td><strong>URL 路径</strong></td>
<td><strong>require('url').parse(request.url).pathname</strong></td>
</tr>
<tr>
<td><strong>URL 查询字符串</strong></td>
<td><strong>require('url').parse(request.url, true).query</strong></td>
</tr>
<tr>
<td><strong>请求头</strong></td>
<td><strong>request.headers</strong></td>
</tr>
<tr>
<td>请求体</td>
<td>request.on('data', function(chunk){}) request.on('end', function(){});</td>
</tr>
</tbody>
</table>
<p>注意：</p>
<p>1、<strong>request.url</strong> 只能获取<strong>路径以及查询字符串</strong>，无法获取 URL 中的域名以及协议的内容（如 <code>/search?name=A</code>）<br>
2、 <strong>request.headers</strong> 将请求信息转化成一个<strong>对象</strong>，并将<strong>属性名</strong>都转化成了『<strong>小写</strong>』<br>
3、favicon.ico：这个请求是属于浏览器自动发送的请求</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6.5.1、提取请求体</h4>
<p>请求为POST才有请求体，GET没有请求体</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6.5.2、获取请求路径和查询字符串</h4>
<p>方式一：</p>
<p>const res =  <strong>url.parse(request.url,true)</strong><br>
该方法用于解析request.url （<code>比如解析/search?name=A</code>）<br>
第二个参数用于将返回结果 res 的 <strong>query</strong> 属性设置为对象<br>
参数二默认为 false ，query对象为数组</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p>
<p>实例化 UR L对象 url<br>
通过 url 的 <strong>pathname</strong> 属性 和 <strong>searchParams.get()</strong> 方法 获取请求路径和查询字符串</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6.5.3、练习：获取请求报文</h4>
<table>
<thead>
<tr>
<th>请求类型(方法)</th>
<th>请求地址</th>
<th>响应体结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td>/login</td>
<td>登录页面</td>
</tr>
<tr>
<td>get</td>
<td>/reg</td>
<td>注册页面</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.6、获取 HTTP 响应报文</h3>
<table>
<thead>
<tr>
<th>作用</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr>
<td>设置响应状态码</td>
<td>response.statusCode</td>
</tr>
<tr>
<td>设置响应状态描述</td>
<td>response.statusMessage （ 用的非常少 ）</td>
</tr>
<tr>
<td>设置响应头信息</td>
<td>response.setHeader('头名', '头值')</td>
</tr>
<tr>
<td>设置响应体</td>
<td>response.write('xx') response.end('xxx')</td>
</tr>
<tr>
<td>返回对 <code>ClientRequest</code> 的引用</td>
<td>response.end(字符串 或 <strong>buffer</strong>)</td>
</tr>
</tbody>
</table>
<p>注意：setHeader() 可以<strong>多次调用</strong>，使用了该方法一般不在 end() 方法中写值，end() 方法只能<strong>调用一次</strong></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 响应文件内容</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注：网页资源加载的基本过程：浏览器向服务器先发送访问 html 的请求，解析 html 文件中的其他文件，发送的请求包括请求 css，js，图片等等，这些请求许多是并行的。</p>
</blockquote>
<h4> 实现网页引入外部资源</h4>
<p>根据不同的请求路径，获取不同的文件</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码仍然存在麻烦的问题<br>
因此引入静态资源服务</p>
<h3> 6.7、静态资源服务</h3>
<p>静态资源：图片，视频，css，js，html文件，字体文件<br>
动态资源：内容常更新的资源，例如列表搜索页面等</p>
<h4> 6.7.1、网站根目录或静态资源目录</h4>
<p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 <strong>静态资源目录</strong> ，也称之为网站 <strong>根目录</strong></p>
<p>vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是vs打开的当前目录</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.8、网页中的URL</h3>
<p>网页中的 URL 主要分为两大类：相对路径与绝对路径</p>
<h4> 6.8.1 绝对路径</h4>
<p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p>
<table>
<thead>
<tr>
<th>形式</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><a href="http://bilibli.com/web" target="_blank" rel="noopener noreferrer">http://bilibli.com/web</a></strong></td>
<td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td>
</tr>
<tr>
<td><a href="//bilibili.com/web" target="_blank" rel="noopener noreferrer">//bilibili.com/web</a></td>
<td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td>
</tr>
<tr>
<td><strong>/web</strong></td>
<td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小 型网站（<strong>常用</strong>，方便在修改域名时防止大规模修改代码url）</td>
</tr>
</tbody>
</table>
<h4> 6.8.2 相对路径</h4>
<p>相对路径在发送请求时，需要<strong>与当前页面 URL</strong> 路径进行 <strong>计算</strong> ，得到完整 URL 后，再发送请求，学习阶段用的较多<br>
例如当前网页 url 为 <a href="http://www.bilibili.com/course/h5.html" target="_blank" rel="noopener noreferrer">http://www.bilibili.com/course/h5.html</a></p>
<table>
<thead>
<tr>
<th>形式</th>
<th>最终的 URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>./css/app.css</td>
<td><a href="http://www.bilibili.com/course/css/app.css" target="_blank" rel="noopener noreferrer">http://www.bilibili.com/course/css/app.css</a></td>
</tr>
<tr>
<td>js/app.js</td>
<td><a href="http://www.bilibili.com/course/js/app.js" target="_blank" rel="noopener noreferrer">http://www.bilibili.com/course/js/app.js</a></td>
</tr>
<tr>
<td>../img/logo.png</td>
<td><a href="http://www.bilibili.com/img/logo.png" target="_blank" rel="noopener noreferrer">http://www.bilibili.com/img/logo.png</a></td>
</tr>
<tr>
<td>../../mp4/show.mp4</td>
<td><a href="http://www.bilibili.com/mp4/show.mp4" target="_blank" rel="noopener noreferrer">http://www.bilibili.com/mp4/show.mp4</a></td>
</tr>
</tbody>
</table>
<p>网页中使用 URL ：a 标签 href、link 标签 href、script 标签 src、img 标签 src、video audio 标签 src、form 中的 action、AJAX 请求中的 URL  等</p>
<h3> 6.9、设置资源类型  （MIME类型）</h3>
<p>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP 服务可以<strong>设置响应头</strong> <strong>Content-Type</strong> 来表明响应体的 <strong>MIME 类型</strong>，浏览器会根据该类型决定如何处理资源</p>
<p>下面是常见文件对应的 mime 类型<br>
可以根据请求文件路径<strong>后缀名</strong>获取对应类型（便于规范）（如果获取不到可选application/octet-stream类型）</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>对于未知的资源类型，可以选择 <strong>application/octet-stream</strong> 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 <strong>下载</strong> 效果</p>
</blockquote>
<p>解决乱码问题：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注：响应头的字符集优先级大于 html 中的 meta 标签</p>
<p>网页字符集为utf-8，所以一般不需要设置字符集</p>
</blockquote>
<h2> 7、Node.js 模块化</h2>
<h3> 7.1、模块化介绍</h3>
<p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 <strong>模块化</strong><br>
其中拆分出的 <strong>每个文件就是一个模块</strong> ，模块的<strong>内部数据</strong>是<strong>私有</strong>的，不过模块可以<strong>暴露内部数据</strong>以便其他模块使用</p>
<p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p>
<p>模块化好处：防止命名冲突、高复用性、高维护性</p>
<h3> 7.2、模块暴露数据</h3>
<h4> 7.2.1、暴露数据</h4>
<p>模块暴露数据的方式有两种：</p>
<ol>
<li><strong>module.exports = value</strong></li>
<li><strong><a href="http://exports.name" target="_blank" rel="noopener noreferrer">exports.name</a> = value</strong></li>
</ol>
<p>注：<br>
① module.exports 可以暴露 <strong>任意</strong> 数据<br>
② 不能使用 exports = value 的形式暴露数据<br>
模块内部 module 与 exports 的隐式关系：<strong>exports = module.exports = {}</strong> ，<strong>require()</strong> 函数返回的是<strong>目标模块</strong>中 <strong>module.exports 的值</strong></p>
<p>exports 与 module.exports地址关系：<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230423093420.png" alt="" loading="lazy"></p>
<p>案例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.3、require() 函数</h3>
<p>在模块中使用 <strong>require()</strong> 传入<strong>文件路径</strong>即可引入文件</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>require 使用的一些注意事项：</p>
<ol>
<li>对于<strong>自己创建的模块</strong>，导入时路径建议写 <strong>相对路径</strong> ，且<strong>不能省略 ./ 和 ../</strong></li>
<li><strong>js</strong> 和 <strong>json</strong> 文件导入时可以<strong>不用写后缀</strong>，c/c++编写的 node 扩展文件也可以不写后缀，但是一般用不到</li>
<li>如果导入其他类型的文件，会以 <strong>js</strong> 文件进行处理</li>
<li>如果<strong>导入</strong>的路径是个<strong>文件夹</strong>，则会 <strong>首先</strong> 检测该文件夹下 <strong>package.json</strong> 文件中 <strong>main</strong> 属性<strong>对应的文件</strong>，如果存在则导入，反之如果文件不存在会报错。<br>
如果 main 属性<strong>不存在</strong>，或者 package.json 不存在，则会尝试<strong>导入</strong>文件夹下的 i<strong>ndex.js 和index.json</strong> ，如果还是没找到，就会报错</li>
<li>导入 <strong>node.js 内置模块</strong>时，直接 <strong>require</strong> <strong>模块</strong>的<strong>名</strong>字即可，<strong>无需加 ./ 和 ../</strong></li>
</ol>
<h3> 7.4、require 导入的基本流程</h3>
<p><strong>require</strong> 导入 <strong>自定义模块</strong> 的基本流程</p>
<ol>
<li>将相对路径转为绝对路径，定位目标文件</li>
<li>缓存检测</li>
<li>读取目标文件代码</li>
<li>将代码包裹为一个函数并执行（自执行函数）。可以通过 <strong>arguments.callee.toString()</strong> 查看自执行函数</li>
<li>缓存模块的值</li>
<li>返回 <strong>module.exports</strong> 的值</li>
</ol>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230423100033.png" alt="" loading="lazy"></p>
<h3> 7.5、 CommonJS 规范</h3>
<p>module.exports 、 exports 以及 require 这些都是 CommonJS 模块化规范中的内容。<br>
而 Node.js 是实现了 CommonJS 模块化规范，二者关系有点像 JavaScript 与 ECMAScript</p>
<h2> 8、npm 包管理工具</h2>
<p>『包』package ，代表了一组特定功能的源码集合</p>
<p>管理『包』的应用软件，可以对「包」进行 <strong>下载安装 ， 更新 ， 删除 ， 上传</strong> 等操作<br>
借助包管理工具，可以快速开发项目，提升开发效率<br>
包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 掌握好包管理工具非常重要</p>
<p>常用的包管理工具：<strong>npm</strong>、yarn、cnpm</p>
<p>npm 全称 <strong>Node Package Manager</strong> ，翻译为中文意思是Node 的包管理工具<br>
npm 是 node.js 官方内置的包管理工具，是 必须要掌握住的工具</p>
<h3> 8.1、npm 的安装</h3>
<p>node.js 在安装时会 自动安装 npm ，安装了 node.js，可以直接使用 npm<br>
在 cmd 通过 <strong>npm -v</strong> 查看版本号测试，如果显示版本号说明安装成功</p>
<h3> 8.2、npm 初始化</h3>
<p>创建一个空目录，然后以此目录作为工作目录 启动命令行工具 ，执行 <strong>npm init</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230423101809069.png" alt="image-20230423101809069" loading="lazy"></p>
<p>输入一些值（没有直接回车，括号中的为默认）</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230423102006.png" alt="" loading="lazy"></p>
<p><strong>npm init</strong> 命令的作用是将文件夹初始化为一个包， 交互式创建 <strong>package.json</strong> 文件<br>
package.json 是包的配置文件，<strong>每个包都必须要有 package.json</strong></p>
<p>初始化的过程中还有一些<strong>注意事项</strong>：</p>
<ol>
<li><strong>package name</strong> ( 包名 ) <strong>不能使用中文、大写</strong>，默认值是 文件夹的名称 ，所以文件夹名称也不能使用中文和大写</li>
<li>version ( 版本号 )要求 x.x.x 的形式定义， x 必须是数字，默认值是 1.0.0</li>
<li>ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></li>
<li>package.json 可以手动创建与修改</li>
<li>使用 npm init -y 或者 npm init --yes 极速创建 package.json</li>
</ol>
<p>package.json 讲解：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8.3、npm 搜索包</h3>
<p>搜索包的方式有两种</p>
<ol>
<li>命令行 <strong>npm s/search</strong> 关键字</li>
<li>网站搜索 网址是 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/</a>  （常用）</li>
</ol>
<h3> 8.4、npm 下载包</h3>
<p>可以通过 <strong>npm install</strong> 和 <strong>npm i</strong> 命令安装包</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载包之后会增加两个资源：<br>
<strong>node_modules</strong> 文件夹 存放 <strong>下载的包</strong><br>
<strong>package-lock.json</strong> 包的锁文件 ，用来<strong>锁定包的版本</strong></p>
<p>依赖的概念：<br>
创建一个包名字为 A，A 中安装了包名字是 B，我们就说 B 是 A 的一个依赖包，也会说A 依赖 B</p>
<h3> 8.5、npm 包使用</h3>
<p>通过 <strong>require</strong> 导入 npm 包</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>require</strong> 导入 npm 包<strong>基本流程</strong>：<br>
① 在当前文件夹下 node_modules 中寻找同名的文件夹<br>
② 在上级目录中下的 node_modules 中寻找同名的文件夹，直至找到磁盘根目录</p>
<h3> 8.6、 生产依赖与开发依赖</h3>
<p>生产环境与开发环境 对应 生产依赖与开发依赖</p>
<p>可以在安装时设置选项来 <strong>区分依赖的类型</strong> ，目前分为两类：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>命令</th>
<th>补充</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>生产</strong>依赖</td>
<td>npm i -S uniq npm i --save uniq</td>
<td>-S 等效于 --save， -S 是<strong>默认选项</strong> 包信息保存在 package.json 中 <strong>dependencies</strong> 属性下</td>
</tr>
<tr>
<td><strong>开发</strong>依赖</td>
<td>npm i -D less npm i --save-dev less</td>
<td>-D 等效于 --save-dev 包信息保存在 package.json 中 <strong>devDependencies</strong> 属性下</td>
</tr>
</tbody>
</table>
<p>开发依赖 是只在开发阶段使用的依赖包 	-D<br>
生产依赖 是开发阶段和最终上线运行阶段都用到的依赖包  	-S（默认选项）</p>
<h3> 8.7、npm 全局安装</h3>
<p>可以执行安装选项 <strong>npm i -g 包名</strong> 进行全局安装</p>
<p>安装 <strong>nodemon</strong> 包：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nodemon 该命令的作用是 <strong>自动重启 node 应用程序</strong> （文件保存后自动重启）<br>
全局安装后可以在命令行的任何位置运行 nodemon  命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>全局安装的命令不受工作目录位置影响<br>
可以通过 <strong>npm root -g</strong> 可以查看<strong>全局安装包的位置</strong><br>
不是所有的包都适合全局安装 ， 只有全局类的工具才适合，可以通过 查看包的官方文档来确定安装方式</p>
<blockquote>
<p>注：windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略：<br>
① 以管理员身份打开PowerShell<br>
② 键入命令 set-ExecutionPolicy remoteSigned<br>
③ 键入 A 然后敲回车<br>
④ 重启 vscode</p>
<p>方法二：修改默认配置文件，使用cmd运行<br>
<img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230423111538.png" alt="" loading="lazy"></p>
</blockquote>
<h3> 8.8、npm 安装包所有依赖</h3>
<p>在项目协作中有一个常用的命令就是 <strong>npm i</strong> ，通过该命令可以<strong>依据</strong> <strong>package.json</strong> 和 <strong>packagelock.json</strong> 的依赖声明安装项目依赖</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>node_modules 文件夹大多数情况都不会存入版本库 （文件大，数量多）</p>
<h3> 8.9、npm 安装指定版本包</h3>
<p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令的</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8.10、npm 删除包</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8.11、npm 配置命令别名</h3>
<p>通过配置命令别名可以更简单的执行命令<br>
配置 package.json 中的 <strong>scripts</strong> 属性<br>
配置完成后，可以使用 <strong>npm run 别名</strong> 执行别名</p>
<p>案例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用别名执行命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过 <strong>start</strong> 别名比较特别，使用时可以省略 run</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>npm start</strong> 是项目中常用的一个命令，一般用来启动项目<br>
<strong>npm run</strong> 有自动向上级目录查找的特性，跟 require 函数也一样<br>
对于陌生的项目，我们可以通过查看 <strong>scripts</strong> 属性来参考项目的一些操作</p>
<h3> 8.12、npm 配置淘宝镜像</h3>
<p>方式一：直接配置</p>
<p>​	执行如下命令即可完成配置</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：工具配置（推荐）</p>
<p>​	使用 <strong>nrm</strong> 配置 npm 的镜像地址 （nrm：<strong>npm registry manager</strong>）：</p>
<p>​	① 安装nrm：<br>
（最新的open版本变成了ES Module版本）</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​	② 修改镜像 ：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​	③ 检查是否配置成功：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查 registry 地址是否为 <a href="https://registry.npmmirror.com/" target="_blank" rel="noopener noreferrer">https://registry.npmmirror.com/</a> , 如果 是 则表明成功</p>
<p>建议使用第二种方式 进行镜像配置，因为后续修改起来会比较方便</p>
<h2> 9、cnpm</h2>
<h3> 9.1、介绍</h3>
<p>cnpm 是一个淘宝构建的 <strong><a href="http://npmjs.com" target="_blank" rel="noopener noreferrer">npmjs.com</a></strong> 的完整镜像，也称为 淘宝镜像，网址<a href="https://npmmirror.com/" target="_blank" rel="noopener noreferrer">https://npmmirror.com/</a><br>
cnpm 服务部署在国内 阿里云服务器上 ， 可以提高包的下载速度<br>
官方也提供了一个全局工具包 <strong>cnpm</strong> ，操作命令与 npm 大体相同</p>
<h3> 9.2、安装</h3>
<p>可以通过 npm 来安装 cnpm 工具</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 9.3、命令</h3>
<table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化</td>
<td>cnpm init</td>
</tr>
<tr>
<td>安装包</td>
<td>cnpm i uniq<br>cnpm i -S uniq<br> cnpm i -D uniq <br>cnpm i -g nodemon</td>
</tr>
<tr>
<td>安装项目依赖</td>
<td>cnpm i</td>
</tr>
<tr>
<td>删除</td>
<td>cnpm r uniq</td>
</tr>
</tbody>
</table>
<p>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 npm 的使用率还是高于 cnpm</p>
<h2> 10、yarn</h2>
<h3> 10.1、yarn 介绍</h3>
<p><a href="https://yarnpkg.com/" target="_blank" rel="noopener noreferrer">yarn</a> 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具</p>
<p>yarn 官方宣称的一些特点 ：<br>
速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快<br>
超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性<br>
超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的<br>
工作</p>
<h3> 10.2、yarn 安装</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 10.3、yarn 常用命令</h3>
<table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化</td>
<td>yarn init / yarn init -y</td>
</tr>
<tr>
<td>安装包</td>
<td>yarn add uniq 生产依赖 <br>yarn add less --dev 开发依赖 <br>yarn global add nodemon 全局安装</td>
</tr>
<tr>
<td>删除包</td>
<td>yarn remove uniq 删除项目依赖包 yarn global remove nodemon 全局删除包</td>
</tr>
<tr>
<td>安装项目依赖</td>
<td>yarn</td>
</tr>
<tr>
<td>运行命令别名</td>
<td>yarn &lt;别名&gt; # 不需要添加 run<br>(yarn start / yarn server)</td>
</tr>
</tbody>
</table>
<p>这里有个小问题就是 全局安装的包（ nodemon）不可用 ，yarn 全局安装包的位置可以通过 yarn global bin 来查看，将查看到的文件夹配置到环境变量即可解决问题</p>
<h3> 10.4、yarn 配置淘宝镜像</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 <strong>yarn config list</strong> 查看 yarn 的配置项</p>
<h3> 10.5、npm 和 yarn 选择</h3>
<p>哪个工具都可以</p>
<p>他人的项目可以通过<strong>锁文件</strong>判断 项目的包管理工具</p>
<p>npm 的锁文件为 package-lock.json<br>
yarn 的锁文件为 yarn.lock</p>
<p>包管理工具 <strong>不要混着用</strong>，切记，切记，切记</p>
<h2> 11、nvm</h2>
<p>nvm 全称 Node Version Manager 顾名思义它是用来管理 node 版本的工具，方便 <strong>切换不同版本的Node.js</strong></p>
<p>nvm 的使用非常的简单，跟 npm 的使用方法类似</p>
<p>首先先下载 nvm，下载地址 <a href="https://github.com/coreybutler/nvm-windows/releases%EF%BC%8C" target="_blank" rel="noopener noreferrer">https://github.com/coreybutler/nvm-windows/releases，</a>  选择 nvm-setup.exe 下载即可</p>
<p>nvm 常用命令（cmd下）：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>nvm list available</td>
<td>显示所有可以下载的 Node.js 版本</td>
</tr>
<tr>
<td>nvm list</td>
<td>显示已安装的版本</td>
</tr>
<tr>
<td>nvm install 18.12.1</td>
<td>安装 18.12.1 版本的 Node.js</td>
</tr>
<tr>
<td>nvm install latest</td>
<td>安装最新版的 Node.js</td>
</tr>
<tr>
<td>nvm uninstall 18.12.1</td>
<td>删除某个版本的 Node.js</td>
</tr>
<tr>
<td>nvm use 18.12.1</td>
<td>切换 18.12.1 的 Node.js</td>
</tr>
</tbody>
</table>
<h2> 12、Express JS</h2>
<h3> 12.1、express 介绍</h3>
<p>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址：<a href="https://www.expressjs.com.cn/" target="_blank" rel="noopener noreferrer">https://www.expressjs.com.cn/</a><br>
简单来说，express 是一个<strong>封装好的工具包</strong>，封装了很多功能，便于我们<strong>开发 WEB 应用（HTTP 服务）</strong></p>
<h3> 12.2、express 使用</h3>
<p>express 本身是一个 npm 包，所以可以通过 npm 安装</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行下执行该脚本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器就可以访问 <a href="http://127.0.0.1:3000/home" target="_blank" rel="noopener noreferrer">http://127.0.0.1:3000/home</a></p>
<h3> 12.3、express  路由</h3>
<p><strong>路由</strong>的概念：路由确定了<strong>应用程序（服务端）<strong>如何 <strong>响应客户端</strong> 对</strong>特定端点</strong>的请求</p>
<h4> 12.3.1、路由的使用</h4>
<p>一个路由的组成有 <strong>请求方法</strong> ， <strong>路径</strong> 和 <strong>回调函数</strong> 组成</p>
<p>express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 12.3.2、获取请求参数</h4>
<p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 12.3.3、获取路由参数</h4>
<p>路由参数指的是 <strong>URL 路径中的参数（数据）</strong></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12.4、express 响应设置</h3>
<p>express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12.5、express 中间件</h3>
<p>中间件（Middleware）本质是一个回调函数</p>
<p>中间件函数 可以像路由回调一样访问 请求对象（request） ， 响应对象（response）</p>
<p>中间件的作用 就是 <strong>使用函数封装公共操作，简化代码</strong></p>
<p>中间件的类型：全局中间件， 路由中间件</p>
<h4> 12.5.1、全局中间件</h4>
<p>（拦截）<strong>每一个请求</strong> 到达服务端之后 都会<strong>执行全局中间件函数</strong></p>
<p>声明全局中间件函数：<br>
函数： function(request,response,next)	<code>（公共部分提取）</code><br>
next：调用后续的路由回调函数</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用中间件</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>声明时可以直接将匿名函数传递给 <strong>use</strong></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230425170744017.png" alt="image-20230425170744017" loading="lazy"></p>
<p>多个全局中间件：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 15.2.2、路由中间件</h4>
<p>如果 只需要对某一些路由进行功能封装 ，则就需要路由中间件</p>
<p>调用格式如下</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 15.2.3、静态资源中间件</h4>
<p>express 内置处理静态资源的中间件</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注：<br>
index.html 文件为<strong>默认打开</strong>的资源<br>
如果静态资源与路由规则同时匹配，谁<strong>先</strong>匹配谁就响应<br>
<strong>路由</strong>响应<strong>动态资源</strong>，<strong>静态</strong>资源中间件响应<strong>静态资源</strong></p>
</blockquote>
<h3> 12.6、获取请求体数据 body-parser</h3>
<p>express 可以使用 <strong>body-parser</strong> 包处理请求体</p>
<p>安装：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导入 body-parser 包 ：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取中间件函数</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置路由中间件，然后使用 <strong>request.body</strong> 来获取请求体数据</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12.7、防盗链实现</h3>
<p>防盗链：禁止其他网站访问非此域名下的资源（图片，css等）</p>
<p>防盗链实现：通过 请求头中 <strong>referer</strong>（参考页）判断是否为当前域名下的访问，如果不是返回404</p>
<p>实现：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12.8、Router 路由模块化</h3>
<p>express 中的 <strong>Router</strong> 是一个完整的中间件和路由系统，可以看做是一个<strong>小型的 app 对象</strong>。</p>
<p>Router 的作用：对路由进行模块化，更好的 <strong>管理路由</strong></p>
<p>使用案例：</p>
<p>创建独立的 JS 文件（homeRouter.js）</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主文件</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 12.9、express generator工具</h3>
<p>使用应用程序生成器工具 <a href="http://expressjs.com/en/starter/generator.html#express-application-generator" target="_blank" rel="noopener noreferrer">express-generator</a> 快速创建应用程序框架。</p>
<p>可以使用命令运行应用程序生成器<code>npx</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>npm start 开启服务</p>
<h2> 13、接口</h2>
<h3> 13.1、介绍</h3>
<p>接口API (Application Program Interface)  是 前后端通信的桥梁  ，这里的接口指的是 <strong>数据接口</strong></p>
<p>一个接口就是 服务中的一个路由规则 ，根据请求响应结果</p>
<h3> 13.2、Restful</h3>
<p>RESTful API 是一种特殊风格的接口</p>
<p>规则示例：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>请求类型</th>
<th>URL</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>新增歌曲</td>
<td>POST</td>
<td>/song</td>
<td>返回新生成的歌曲信息</td>
</tr>
<tr>
<td>删除歌曲</td>
<td>DELETE</td>
<td>/song/10</td>
<td>返回一个空文档</td>
</tr>
<tr>
<td>修改歌曲</td>
<td>PUT</td>
<td>/song/10</td>
<td>返回更新后的歌曲信息</td>
</tr>
<tr>
<td>修改歌曲</td>
<td>PATCH</td>
<td>/song/10</td>
<td>返回更新后的歌曲信息</td>
</tr>
<tr>
<td>获取所有歌曲</td>
<td>GET</td>
<td>/song</td>
<td>返回歌曲列表数组</td>
</tr>
<tr>
<td>获取单个歌曲</td>
<td>GET</td>
<td>/song/10</td>
<td>返回单个歌曲信息</td>
</tr>
</tbody>
</table>
<h3> 13.3、json-server</h3>
<p><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener noreferrer">json-server</a> 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务</p>
<p>全局安装 json-server  ：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用：</p>
<p>创建 JSON 文件（db.json），编写基本结构</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 JSON 文件所在文件夹作为工作目录 ，执行如下命令 ，默认监听端口为 3000</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试访问：<br>
127.0.0.1:3000/song<br>
127.0.0.1:3000/song/2</p>
<h2> 14、会话控制</h2>
<p>HTTP 是一种 <strong>无状态</strong> 协议，它没有办法区分多次的请求是否来自于同一个客户端， <strong>无法区分用户</strong>，所以我们需要通过 <strong>会话控制</strong> 来解决该问题</p>
<p>常见的会话控制技术有三种：<br>
<strong>cookie  ，session  ，token</strong></p>
<h3> 14.1、cookie</h3>
<p>cookie 是 **保存在 浏览器端 **（本地）的一小块数据<br>
cookie 是按照域名划分保存的</p>
<p>浏览器向服务器发送请求时，会自动将 当前域名下 <strong>可用的 cookie 设置在请求头中</strong>，然后传递给服务器<br>
这个请求头的名字也叫 cookie ，所以将 cookie 理解为一个 HTTP 的请求头也是可以的</p>
<p>不同浏览器中的 cookie 是相互独立的，不共享<br>
浏览器限制单个 cookie 保存的数据不能超过 4K</p>
<p>express 中可以使用 cookie-parser 进行处理  （使用较少）：<br>
向cookie中添加，读取，删除数据，设置数据的时效性</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 14.2、session</h3>
<p>session 是<strong>保存在 服务器端</strong> 的一块儿数据 ，保存当前访问用户的相关信息</p>
<p>填写账号和密码校验身份，校验通过后创建 session 信息 ，然后将 session_id 的值通过响应头返回给浏览器<br>
有了 cookie，下次发送请求时会自动携带 cookie，服务器通过 cookie 中的 session_id 的值确定用户的身份</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230430123721044.png" alt="image-20230430123721044" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230430123752.png" alt="" loading="lazy"></p>
<p>express 中可以使用 express-session 对 session 进行操作</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cookie 和 session 的区别：<br>
① 存储位置：<br>
cookie：浏览器端<br>
session：服务端</p>
<p>②  安全性：<br>
cookie 是以<strong>明文</strong>的方式存放在客户端的，安全性相对较低<br>
session 存放于服务器中，所以安全性 相对 较好</p>
<p>③  网络传输量<br>
cookie 设置内容过多会增大报文体积， 会影响传输效率<br>
session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</p>
<p>④  存储限制<br>
浏览器限制单个 cookie 保存的数据不能超过 4K ，且单个域名下的存储数量也有限制<br>
session 数据存储在服务器中，所以没有这些限制</p>
<h3> 14.3、token</h3>
<p><strong>token 保存在客户端</strong></p>
<p><strong>token</strong> 是 <strong>服务端生成</strong> 并 <strong>返回给 HTTP 客户端</strong> 的一串<strong>加密字符串</strong>， token 中保存着 用户信息</p>
<p>token 可以实现会话控制，识别用户的身份，主要用于<strong>移动端 APP</strong></p>
<p>token 工作流程：<br>
填写账号和密码校验身份，<strong>服务端</strong> 校验通过后创建并<strong>响应 token</strong>，token 一般是在 <strong>响应体</strong> 中返回给客户端的</p>
<p>后续 <strong>客户端</strong> 发送请求时，需要 <strong>手动</strong>将 <strong>token 添加在</strong> 请求报文** 中，一般是放在 <strong>请求头</strong> 中</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230430135704524.png" alt="image-20230430135704524" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230430135727.png" alt="" loading="lazy"></p>
<p>token特点：<br>
① 数据存储在客户端<br>
② 数据加密  ，可以避免 CSRF（跨站请求伪造）<br>
③ 扩展性更强  ，服务间可以共享  ，增加服务节点更简单</p>
<h4> JWT 工具</h4>
<p>JWT（JSON Web Token ）是目前最流行的跨域认证解决方案，可用于基于 token 的身份验证<br>
JWT 使 <strong>token 的生成与校验更规范</strong><br>
可以使用 jsonwebtoken 包 来操作 token</p>
<p>安装 jsonwebtoken ：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建（生成）token：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 15、EJS（不常用）</h2>
<p>EJS 是一个高效的 Javascript 的模板引擎  ，文件后缀名 .ejs</p>
<p>官网: <a href="https://ejs.co/" target="_blank" rel="noopener noreferrer">https://ejs.co/</a><br>
中文站：<a href="https://ejs.bootcss.com/" target="_blank" rel="noopener noreferrer">https://ejs.bootcss.com/</a></p>
<h2> 16、扩展：配置HTTPS证书</h2>
<p>https = http + ssl<br>
https 可以加密 http 报文</p>
<p>工具官网：<a href="https://certbot.eff.org" target="_blank" rel="noopener noreferrer">https://certbot.eff.org</a></p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230420185728.png" type="image/png"/>
    </item>
    <item>
      <title>Promise 基础</title>
      <link>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Promise.html</link>
      <guid>https://T4mako.github.io/code/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Promise.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Promise 基础</source>
      <description>1、Promise 介绍 1.1、Promise 是什么 1.1.1、概念 Promise 是一门新的技术(ES6 规范) Promise 是 JS 中进行 异步编程 的新解决方案 （旧方案是单纯使用 回调函数 ） 从语法上来说: Promise 是一个构造函数 从功能上来说: promise 对象用来封装（包裹）一个异步操作并可以获取其成功/失败的结果值</description>
      <content:encoded><![CDATA[<h2> 1、Promise 介绍</h2>
<h3> 1.1、Promise 是什么</h3>
<h4> 1.1.1、概念</h4>
<p>Promise 是一门新的技术(ES6 规范)<br>
Promise 是 JS 中进行 <strong>异步编程</strong> 的新解决方案  （旧方案是单纯使用 <strong>回调函数</strong>  ）</p>
<p>从语法上来说: Promise 是一个<strong>构造函数</strong><br>
从功能上来说: promise 对象用来<strong>封装（包裹）一个异步操作</strong>并可以获取其成功/失败的结果值</p>
<h4> 1.1.2、promise 的状态</h4>
<ol>
<li>pending 变为 <strong>resolved</strong></li>
<li>pending 变为 <strong>rejected</strong></li>
</ol>
<p>说明: 只有这 2 种, 且一个 promise 对象<strong>只改变一次</strong><br>
无论变为成功还是失败, 都会有一个结果数据<br>
成功的结果数据一般称为 <strong>value</strong>, 失败的结果数据一般称为 <strong>reason</strong></p>
<h3> 1.2、promise 工作流程</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230503142157.png" alt="" loading="lazy"></p>
<h3> 1.3、Promise 的优点</h3>
<p>① 指定回调函数的方式更加灵活</p>
<p>旧回调：必须在启动异步任务前指定</p>
<p>promise: 启动异步任务 =&gt; 返回promie对象 =&gt; 给promise对象绑定回调函<br>
数(甚至可以在异步任务结束后指定/多个)</p>
<p>② 支持<strong>链式调用</strong>, 可以解决回调地狱问题</p>
<p>回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件</p>
<p>回调地狱不便于阅读和异常处理</p>
<p>解决方案：promise 链式调用，async/await</p>
<h3> 1.4、Promise API</h3>
<h4> 1、构造函数</h4>
<p>Promise <strong>构造函数</strong>: <strong>Promise (excutor) {}</strong><br>
executor 函数: 执行器 <strong>(resolve, reject) =&gt; {}</strong><br>
resolve 函数: 内部定义 <strong>成功时的回调</strong> <strong>value =&gt; {}</strong><br>
reject 函数: 内部定义 <strong>失败时的回调</strong> <strong>reason =&gt; {}</strong><br>
说明: executor 会在 Promise 内部立即 <em><strong>同步</strong></em> 调用,异步操作在执行器中执行</p>
<h4> 2、PromiseState 属性</h4>
<p>Promise 内置 <strong>属性</strong>：<strong>PromiseState</strong><br>
<strong>pending</strong>：未决定的<br>
<strong>resolved / fullfilled</strong> 成功<br>
<strong>rejected</strong> 失败</p>
<h4> 3、PromiseResult 属性</h4>
<p>Promise 内置 <strong>属性</strong>：<strong>PromiseResult</strong><br>
该属性保存对象 成功 / 失败 的结果<br>
resolve() 和 reject() 两个函数 可以修改 PromiseResult 的值</p>
<h4> 4、then() 方法</h4>
<p>Promise.prototype.<strong>then</strong>(onResolved, [onRejected]) =&gt; {} 方法:</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(1) onResolved 函数: <strong>成功</strong> 的回调函数 <strong>(value) =&gt; {}</strong><br>
(2) onRejected 函数: <strong>失败</strong> 的回调函数 <strong>(reason) =&gt; {}</strong><br>
说明: 指定用于得到成功 value 的成功回调 和 用于得到失败 reason 的失败回调<br>
返回一个新的 promise 对象</p>
<h4> 5、catch() 方法</h4>
<p>Promise.prototype.catch (onRejected) =&gt; {} 方法:</p>
<p>catch 只能指定 <strong>失败</strong> 的回调<br>
onRejected 函数:  (reason) =&gt; {}<br>
说明: then()的语法糖, 相当于: then(undefined, onRejected)</p>
<h4> 6、resolve() 方法</h4>
<p>Promise.resolve(value) =&gt; {} 方法:</p>
<p>value: 数据 或 promise 对象<br>
说明: 快速返回一个成功/失败的 promise 对象</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7、reject() 方法</h4>
<p>Promise.reject(reason) =&gt; {} 方法:</p>
<p>reason: 失败的原因<br>
说明: 快速返回一个失败的 promise 对象</p>
<h4> 8、all() 方法</h4>
<p>Promise.<strong>all</strong>(promises) =&gt; {} 方法:</p>
<p>(1) promises: 包含 n 个 promise 的 <strong>数组</strong><br>
说明: 返回一个新的 promise, 只有<strong>所有的 promise 都成功才成功</strong>, 只要有一个失败了就 直接失败</p>
<h4> 9、race() 方法</h4>
<p>Promise.<strong>race</strong>(promises) =&gt; {} 方法:</p>
<p>(1) promises: 包含 n 个 promise 的 <strong>数组</strong><br>
说明: 返回一个新的 promise, <strong>第一个完成的 promise</strong> 的结果状态就是最终的结果状态</p>
<h3> 1.5、几个关键问题</h3>
<p>1、如何改变 promise 的状态：<br>
(1) resolve(value): 如果当前是 pending 就会变为 resolved<br>
(2) reject(reason): 如果当前是 pending 就会变为 rejected<br>
(3) 抛出异常 <code>throw '出问题了'</code>: 如果当前是 pending 就会变为 rejected</p>
<p>2、一个 promise 调用 then 方法 指定多个成功/失败回调函数, 都会调用（当 promise 改变为对应状态时都会调用  ）</p>
<p>3、改变 promise 状态改变 和 then方法 的先后顺序<br>
(1) 都有可能, 正常情况下是先指定回调（then）再 改变状态, 但也可以先改状态再指定回调<br>
(2) 如何先改状态再指定回调?<br>
① 在执行器中直接调用 resolve()/reject()<br>
② 延迟更长时间才调用 then()<br>
(3) 什么时候才能得到数据?<br>
① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据<br>
② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</p>
<p>4、promise.then()返回的 <strong>新 promise 的结果状态</strong> 由什么决定?<br>
由 then()指定的回调函数执行的结果决定<br>
① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常<br>
② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值<br>
③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新  promise 的结果</p>
<p>5、promise 如何串连多个操作任务?（<strong>链式</strong>操作）<br>
(1) promise 的 then()返回一个新的 promise, 可以看成 then()的链式调用<br>
(2) 通过 then 的链式调用串连多个同步/异步任务</p>
<p>6、promise <strong>异常传透</strong><br>
(1) 当使用 promise 的 then 链式调用时, 可以 <strong>在最后指定失败的回调,</strong><br>
(2) 前面任何操作出了异常, 都会传到最后失败的回调中处理 （类似异常处理 catch）</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7、<strong>中断</strong> promise <strong>链</strong><br>
(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数<br>
(2) 办法: 在回调函数中<strong>返回一个 pendding 状态的 promise 对象</strong></p>
<h2> 2、Promise 使用</h2>
<h3> 2.1、promise 初体验</h3>
<p>需求： 点击按钮,  1s 后显示是否中奖(30%概率中奖)<br>
若中奖弹出   恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券<br>
若未中奖弹出  再接再厉</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.2、fs 模块使用 Promise</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3、Ajax 操作 Promise</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.4、util.promise</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.5、Promise 封装 Ajax 请求</h3>
<p>封装一个函数 sendAJAX 发送 GET AJAX 请求</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、Promise 自定义（手写）</h2>
<h3> Promise 自定义封装</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Class 版本封装</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、async 和 await</h2>
<p>MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener noreferrer">async</a><br>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener noreferrer">await</a></p>
<h3> 4.1、async 函数</h3>
<p>async 函数的返回值是一个 Promise 对象<br>
返回的 promise 对象的结果由 async 函数执行的返回值决定</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2、await 表达式</h3>
<p><strong>await 右侧</strong> 的表达式一般为 <strong>promise 对象</strong>, 但也可以是其它的值<br>
如果表达式是 promise 对象, await 返回的是 promise 成功的值<br>
如果表达式是其它值, 直接将此值作为 await 的返回值</p>
<blockquote>
<p>注：<strong>await 必须写在 async 函数中</strong>，但 async 函数中可以没有 await<br>
如果表达式是其它值, 直接将此值作为 await 的返回值</p>
</blockquote>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.3、使用案例</h3>
<h4> 读取三个文件的内容</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> async + await 发送 Ajax 请求</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230503142157.png" type="image/png"/>
    </item>
    <item>
      <title>git 基础</title>
      <link>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Git.html</link>
      <guid>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Git.html</guid>
      <source url="https://T4mako.github.io/rss.xml">git 基础</source>
      <description>0、常用命令速览： ①git工作机制： 工作区（写代码）git add → 暂存区（临时存储）git commit → 本地库（会生成对应的历史版本）push→ 远程库 ②在本地使用的git命令： 命令 解释 git add 文件名(*) 添加到暂存区 git commit -m &amp;quot;日志信息&amp;quot; 文件名(*) 提交到本地库 git reflog 查看历史记录 git reset --hard 版本号 版本穿梭 git log 查看版本详细信息 git config --list 查看配置信息 git config --global user.name 用户名 git config --global user.email 邮箱</description>
      <category>基础</category>
      <content:encoded><![CDATA[<h2> 0、常用命令速览：</h2>
<h3> ①git工作机制：</h3>
<p><strong>工作区（写代码）<code>git add</code> → 暂存区（临时存储）<code>git commit</code> → 本地库（会生成对应的历史版本）<code>push</code>→ 远程库</strong></p>
<h3> ②在本地使用的git命令：</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>git add 文件名(*)</td>
<td>添加到暂存区</td>
</tr>
<tr>
<td>git commit -m "日志信息" 文件名(*)</td>
<td>提交到本地库</td>
</tr>
<tr>
<td>git reflog</td>
<td>查看历史记录</td>
</tr>
<tr>
<td>git reset --hard 版本号</td>
<td>版本穿梭</td>
</tr>
<tr>
<td>git log</td>
<td>查看版本详细信息</td>
</tr>
<tr>
<td>git config --list</td>
<td>查看配置信息</td>
</tr>
<tr>
<td>git config --global <a href="http://user.name" target="_blank" rel="noopener noreferrer">user.name</a></td>
<td>用户名</td>
</tr>
<tr>
<td>git config --global user.email</td>
<td>邮箱</td>
</tr>
</tbody>
</table>
<h3> ③远程仓库操作</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>git remote</td>
<td>查看远程仓库</td>
</tr>
<tr>
<td>git remote -v</td>
<td>查看当前所有远程地址别名</td>
</tr>
<tr>
<td>git remote add 别名 远程地址</td>
<td>关联/添加远程仓库（用于push,pull），添加一个新的远程git仓库，同时可以起别名</td>
</tr>
<tr>
<td>git remote remove 别名</td>
<td>取消关联远程仓库</td>
</tr>
<tr>
<td>git clone 远程地址</td>
<td>将远程仓库的内容克隆到本地</td>
</tr>
<tr>
<td>git pull 远程库地址别名 远程分支名</td>
<td>将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td>
</tr>
<tr>
<td>git push 别名 分支</td>
<td>推送本地分支上的内容到远程仓库</td>
</tr>
</tbody>
</table>
<h3> ④分支操作</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>git branch 分支名</td>
<td>创建分支</td>
</tr>
<tr>
<td>git branch</td>
<td>查看分支</td>
</tr>
<tr>
<td>git branch -v</td>
<td>查看分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
<tr>
<td>git merge 分支名</td>
<td>把指定的分支合并到当前分支上</td>
</tr>
</tbody>
</table>
<h3> ⑤标签操作</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>git tag</td>
<td>列出已有标签</td>
</tr>
<tr>
<td>git tag 标签名</td>
<td>创建标签</td>
</tr>
<tr>
<td>git push 远程仓库别名 标签名</td>
<td>将标签推送至远程仓库</td>
</tr>
<tr>
<td>git checkout -b 新分支名 标签名</td>
<td>检出标签（将当前标签的状态下载下来）</td>
</tr>
</tbody>
</table>
<h2> 1、Git 概述</h2>
<p>Git 是一个免费的、开源的<strong>分布式版本控制系统</strong>，可以快速高效地处理从小型到大型的各种项目</p>
<p>Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库(在磁盘上)，方便的暂存区域和多个工作分支等特性。 其性能优于 Subversion、 CVS、 Perforce 和 ClearCase 等版本控制工具。</p>
<h3> 1.1 何为版本控制</h3>
<p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。<br>
版本控制其实最重要的是可以<strong>记录文件修改历史记录</strong>，从而让<strong>用户能够查看历史版本，方便版本切换</strong>。</p>
<p>为什么需要版本控制：协作开发</p>
<h3> 1.2 版本控制工具</h3>
<h4> ①集中式版本控制工具</h4>
<p>CVS、 SVN(Subversion)、 VSS……<br>
集中化的版本控制系统诸如 CVS、 SVN 等，都有一个<strong>单一的集中管理的服务器</strong>，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。<br>
这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而<strong>管理员也可以轻松掌控每个开发者的权限</strong>，并且管理一个集中化的版本控制系统， 要远<strong>比在各个客户端上维护本地数据库来得轻松容易</strong>。<br>
这么做显而易见的缺点是<strong>中央服务器的单点故障</strong>。如果服务器宕机一小时，那么在这一小时内，<strong>谁都无法提交更新，也就无法协同工作</strong> 。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208144134.png" alt="" loading="lazy"></p>
<h4> ②分布式版本控制工具</h4>
<p>Git、 Mercurial、 Bazaar、 Darcs……<br>
像 Git 这种分布式版本控制工具，<strong>客户端</strong>提取的不是最新版本的文件快照，而是<strong>把代码仓库完整地镜像下来（本地库）</strong>。这样任何一处协同工作用的文件发生故障，事后都可以用<strong>其他客户端的本地仓库进行恢复</strong>。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。<br>
分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:<br>
<strong>服务器断网的情况下也可以进行开发</strong>（因为版本控制是在本地进行的）<br>
<strong>每个客户端保存的也都是整个完整的项目</strong>（包含历史记录， 更加安全）</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230207181938977.png" alt="image-20230207181938977" loading="lazy"></p>
<h3> 1.3 Git 简史</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230207183809424.png" alt="" loading="lazy"></p>
<h3> 1.4 Git 工作机制</h3>
<p><mark><strong>工作区（写代码）<code>git add</code> → 暂存区（临时存储）<code>git commit</code> → 本地库（会生成对应的历史版本）<code>push</code>→ 远程库</strong></mark></p>
<h3> 1.5 Git 和代码托管中心</h3>
<p><strong>代码托管中心</strong>是基于网络服务器的<strong>远程代码仓库</strong>，一般我们简单称为<strong>远程库</strong></p>
<p>局域网：GitLab<br>
互联网：GitHub（外网）、Gitee 码云（国内网站）</p>
<h2> 2、Git 安装</h2>
<p>修改安装路径和是否修改环境变量，其他保持默认</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230207185923544.png" alt="" loading="lazy"></p>
<h2> 3、Git本地命令</h2>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208131542077.png" alt="" loading="lazy"></p>
<p><strong>快捷键：</strong><br>
<strong>ctrl+l：清屏</strong><br>
<strong>ctrl+insert 复制</strong><br>
<strong>shift+insert 粘贴</strong><br>
<strong>选中+鼠标中键：复制</strong></p>
<p><strong>重要概念：<br>
commit：提交，将本地文件和版本信息保存到本地仓库<br>
push：推送，将本地仓库文件和版本信息上传到远程仓库<br>
pull：拉取，将远程仓库文件和版本信息下载到本地仓库<br>
clone：从远程服务器克隆整个版本到本地（下载）</strong></p>
<h3> 3.1 设置用户签名</h3>
<p>基本语法：<br>
git config --global <a href="http://user.name" target="_blank" rel="noopener noreferrer">user.name</a> 用户名<br>
git config --global user.email 邮箱<br>
git config --list 查看配置信息</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208135606324.png" alt="" loading="lazy"></p>
<p>签名的作用是区分不同操作者身份。<strong>用户的签名信息在每一个版本的提交信息中能够看到</strong>，以此确认本次提交是谁做的。 Git 首次安装<strong>必须设置一下用户签名</strong>，否则无法提交代码。<br>
注意： 这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。</p>
<h3> 3.2 初始化本地库</h3>
<p>未跟踪：没有git add<br>
已跟踪：已git add</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230314202301.png" alt="" loading="lazy"></p>
<p>基本语法：git init</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208140317884.png" alt="image-20230208140317884" loading="lazy"></p>
<h3> 3.3 查看本地库状态</h3>
<p>基本语法：git status</p>
<h3> 3.4 添加暂存区</h3>
<h4> 3.4.1 将工作区的文件添加到暂存区</h4>
<p>基本语法：git add 文件名</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208141427049.png" alt="" loading="lazy"></p>
<h3> 3.5 提交本地库</h3>
<p>基本语法：git commit -m "日志信息" 文件名</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208141853101.png" alt="" loading="lazy"></p>
<h3> 3.6 历史版本</h3>
<h4> 3.6.1 查看历史版本</h4>
<p>基本语法：<br>
git reflog 查看版本信息<br>
git log 查看版本详细信息</p>
<h4> 3.6.2 版本穿梭</h4>
<p>基本语法：git reset --hard 版本号</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208143353.png" alt="" loading="lazy"></p>
<p>Git 切换版本， 底层其实是移动的 HEAD 指针，具体原理如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208144344.png" alt="" loading="lazy"></p>
<h2> 4、Git 分支操作</h2>
<h3> 4.1 什么是分支</h3>
<p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作<em><strong>从开发主线上分离开来</strong>， <strong>发自己分支的时候，不会影响主线分支的运行</strong>。对于初学者而言，<strong>分支可以简单理解为副本</strong>，一个分支就是一个单独的副本。（分支底层其实也是</em><em>指针的引用</em>*）</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208144807.png" alt="" loading="lazy"></p>
<h3> 4.2 分支的好处</h3>
<p>同时<strong>并行推进多个功能开发</strong>，提高开发效率。<br>
各个分支在开发过程中，如果某一个分支开发失败，<strong>不会对其他分支有任何影响</strong>。失败的分支删除重新开始即可。</p>
<h3> 4.3 分支的操作</h3>
<table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>git branch 分支名</td>
<td>创建分支</td>
</tr>
<tr>
<td>git branch -v</td>
<td>查看分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
<tr>
<td>git merge 分支名</td>
<td>把指定的分支合并到当前分支上</td>
</tr>
</tbody>
</table>
<h4> 4.3.1 查看分支</h4>
<p>基本语法：git branch -v</p>
<h4> 4.3.2 创建分支</h4>
<p>基本语法：git branch 分支名</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208150636020.png" alt="" loading="lazy"></p>
<h4> 4.3.3 修改分支</h4>
<p>先切换到分支</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208151114.png" alt="" loading="lazy"></p>
<h4> 4.3.4 切换分支</h4>
<p>基本语法：git checkout 分支名</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208150846.png" alt="" loading="lazy"></p>
<h4> 4.3.5 合并分支</h4>
<p>基本语法：git merge 分支名</p>
<p><strong>合并到master主分支</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208151426.png" alt="" loading="lazy"></p>
<h4> 4.3.6 产生冲突</h4>
<p>冲突产生的表现： 后面状态为 **MERGING  **</p>
<div class="language-git line-numbers-mode" data-ext="git"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>冲突产生的原因：<br>
合并分支时，两个分支在<strong>同一个文件的同一个位置有两套完全不同的修改</strong>。 Git 无法替我们决定使用哪一个。必须人为决定新代码内容。</p>
<p>查看状态（检测到有文件有两处修改）</p>
<h4> 4.3.7 解决冲突</h4>
<p><strong>编辑有冲突的文件，删除特殊符号</strong>，决定要使用的内容</p>
<p>​	特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>
​	当前分支的代码：=======<br>
​	合并过来的代码：&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</p>
<p>**添加到暂存区  **</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208152657.png" alt="" loading="lazy"></p>
<p><strong>执行提交（注意： 此时使用 git commit 命令时</strong><mark>不能带文件名</mark><strong>）</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208152726.png" alt="" loading="lazy"></p>
<p>注：<strong>合并分支只会修改被合并的那个分支</strong></p>
<h3> 4.4 创建分支和切换分支图解</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208152913324.png" alt="" loading="lazy"></p>
<p>master、 hot-fix 其实都是指向具体版本记录的指针。<strong>当前所在的分支</strong>，其实是由 <strong>HEAD决定的</strong>。所以创建分支的本质就是多创建一个指针。<br>
HEAD 如果指向 master，那么我们现在就在 master 分支上。<br>
HEAD 如果执行 hotfix，那么我们现在就在 hotfix 分支上。<br>
所以切换分支的本质就是移动 HEAD 指针</p>
<h2> 5、Git 团队协作机制</h2>
<h3> 5.1 团队内协作</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208153723251.png" alt="" loading="lazy"></p>
<h3> 5.2 跨团队协作</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208153915.png" alt="" loading="lazy"></p>
<h2> 6、GitHub/git远程命令</h2>
<h3> 6.1 创建远程仓库</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208160941.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208161047.png" alt="" loading="lazy"></p>
<h3> 6.2 远程仓库操作</h3>
<table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>git remote -v</td>
<td>查看当前所有远程地址别名</td>
</tr>
<tr>
<td>git remote add 别名 远程地址</td>
<td>起别名</td>
</tr>
<tr>
<td>git push 别名 分支</td>
<td>推送本地分支上的内容到远程仓库</td>
</tr>
<tr>
<td>git clone 远程地址</td>
<td>将远程仓库的内容克隆到本地</td>
</tr>
<tr>
<td>git pull 远程库地址别名 远程分支名</td>
<td>将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td>
</tr>
</tbody>
</table>
<p><strong>git  clone与git pull的区别：</strong><br>
git clone是在<strong>没有版本</strong>库的时候，从远程服务器克隆整个版本到本地（下载），是一个本地从无到有的过程<br>
git pull是在本地<strong>有版本库</strong>的情况下，从远程库获取最新commit数据并且merge到本地</p>
<p>注意：如果当前本地仓库不是远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉去文件时会宝座（fastal：refusing to merge histories）<code>本地有远程库没有的文件</code><br>
|解决方法：在git pull命令后加入参数--allow-unterlate-histories</p>
<p>适用场景：<br>
通常情况下，远程操作的第一步是先使用git clone从远程主机克隆一个到本地<br>
本地修改代码后，<strong>每次从本地仓库push到远程仓库前都要先进行git pull操作，保证push到远程仓库时没有版本冲突</strong></p>
<h4> 6.2.1 创建远程仓库别名</h4>
<p>基本语法：<br>
git remote -v 查看当前所有远程地址别名<br>
git remote add 别名 远程地址</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208163110.png" alt="" loading="lazy"></p>
<h4> 6.2.2 推送本地分支到远程仓库</h4>
<p>基本语法：git push 别名 分支</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208170934154.png" alt="image-20230208170934154" loading="lazy"></p>
<p><em><strong>注意使用token登录</strong></em></p>
<h4> 6.2.3 拉取远程库内容</h4>
<p>基本语法：git pull 远程库地址别名 远程分支名</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208174717409.png" alt="image-20230208174717409" loading="lazy"></p>
<h4> 6.2.4 克隆远程仓库到本地</h4>
<p>基本语法：git clone 远程地址</p>
<p>例如：git clone <a href="https://github.com/atguiguyueyue/git-shTest.git" target="_blank" rel="noopener noreferrer">https://github.com/atguiguyueyue/git-shTest.git</a></p>
<p><strong>克隆代码不需要登录账号</strong></p>
<p>clone 会做如下操作：<br>
1、拉取代码。 2、初始化本地仓库。 3、创建别名</p>
<h4> 6.2.5 邀请加入团队</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208180634.png" alt="" loading="lazy"></p>
<p>生成邀请函，发给别人<br>
然后同意邀请</p>
<h3> 6.3 跨团队协作</h3>
<p>找到他人的项目，点击folk</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181210.png" alt="" loading="lazy"></p>
<p>编辑完后提交。</p>
<p>可以创建一个新的请求：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181337.png" alt="" loading="lazy"></p>
<p>还可以聊天</p>
<p>如果代码没有问题，可以点击 Merge pull request 合并代码。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181551.png" alt="" loading="lazy"></p>
<h3> 6.4 SSH 免密登录</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181656.png" alt="" loading="lazy"></p>
<p>生成ssh文件（用户文件夹下）</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208181925.png" alt="" loading="lazy"></p>
<p>复制公钥</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230208182104368.png" alt="image-20230208182104368" loading="lazy"></p>
<p>添加ssh</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208182303.png" alt="" loading="lazy"></p>
<p><em><strong>可以通过ssh来pull，push	不用多次输入密码</strong></em></p>
<h2> 7、IDEA 集成 Git</h2>
<h3> 7.1 配置 Git 忽略文件</h3>
<p>eclipse，Idea都有一定的无关配置文件（.iml，target文件）</p>
<p>为什么要忽略他们：<br>
与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之间的差异。</p>
<p>怎么忽略：<br>
1） 创建忽略规则文件 xxxx.ignore（前缀名随便起，<strong>建议是 git.ignore</strong>）<br>
这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用户家目录下</p>
<p>git.ignore文件模板内容如下：</p>
<div class="language-txt line-numbers-mode" data-ext="txt"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2） 在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）</p>
<div class="language-txt line-numbers-mode" data-ext="txt"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.2 定位 Git 程序</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209141311.png" alt="" loading="lazy"></p>
<h3> 7.3 初始化本地库</h3>
<p>在窗体栏选择==<strong>VCS</strong>==(版本控制)：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209141528.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209141619.png" alt="" loading="lazy"></p>
<h3> 7.4 添加到暂存区、提交到本地库</h3>
<p>右键点击项目选择 Git -&gt; Add 将项目添加到暂存区。<br>
右键点击项目选择 Git -&gt; Commit Directory 将项目添加到暂存区。</p>
<h3> 7.5 切换版本</h3>
<p>在 IDEA 的左下角，点击Git，然后点击 Log 查看版本</p>
<p>右键选择要切换的版本，然后在菜单里点击 Checkout Revision。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209143755.png" alt="" loading="lazy"></p>
<h3> 7.6 创建分支</h3>
<p>创建方式：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144140.png" alt="" loading="lazy"></p>
<p>或：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144201.png" alt="" loading="lazy"></p>
<h3> 7.7 切换分支</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144309.png" alt="" loading="lazy"></p>
<h3> 7.8 合并分支</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144646.png" alt="" loading="lazy"></p>
<h3> 7.9 解决冲突</h3>
<p>手动合并代码：<br>
点击 Conflicts 框里的 Merge 按钮，进行手动合并代码<br>
手动合并完代码以后，点击右下角的 Apply 按钮<br>
代码冲突解决，自动提交本地库。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209144949.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209145042.png" alt="" loading="lazy"></p>
<h2> 8、IDEA 集成 GitHub</h2>
<h3> 8.1 设置 GitHub 账号</h3>
<p>密码或token登录</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209145418.png" alt="" loading="lazy"></p>
<h3> 8.2 分享工程到 GitHub</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209145819.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209150159.png" alt="" loading="lazy"></p>
<h3> 8.3 push 推送本地库到远程库</h3>
<p>右键点击项目，可以将当前分支的内容 push 到 GitHub 的远程仓库中</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209150425.png" alt="" loading="lazy"></p>
<p>或者</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209150455.png" alt="" loading="lazy"></p>
<p>默认使用https来push<br>
也可以用ssh push：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209150649.png" alt="" loading="lazy"></p>
<p>注意： push 是将本地库代码推送到远程库，如果<strong>本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的</strong>。也就是说， 要想 push 成功，一定要<strong>保证本地库的版本要比远程库的版本高</strong>！ 因此一个成熟的程序员在动手改本地代码之前，一定会<strong>先检查下远程库跟本地代码的区别</strong>！如果本地的<strong>代码版本</strong>已经<strong>落后</strong>，切记要<strong>先 pull 拉取一下远程库的代码</strong>，将本地代码更新到最新以后，然后再修改，提交，推送！</p>
<h3> 8.4 pull 拉取远程库到本地库</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209151108.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209151236.png" alt="" loading="lazy"></p>
<p>注意： pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手动解决冲突的问题。</p>
<h3> 8.5 clone 克隆远程库到本地</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230314213440.png" alt="" loading="lazy"></p>
<p>或者<br>
<strong>在idea初始化界面点击Get from VCSl通过url克隆代码</strong></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230209152200957.png" alt="image-20230209152200957" loading="lazy"></p>
<p>设置打开idea为初始化界面：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209152424.png" alt="" loading="lazy"></p>
<h2> 9、码云</h2>
<h3> 9.1 码云创建远程库</h3>
<p>点击首页右上角的加号，选择下面的新建仓库<br>
填写仓库名称，路径和选择是否开源（共开库或私有库）<br>
最后根据需求选择分支模型，然后点击创建按钮。<br>
远程库创建好以后，就可以看到 HTTPS 和 SSH 的链接。</p>
<h3> 9.2 IDEA 集成码云</h3>
<p>Idea 默认不带码云插件，我们第一步要安装 Gitee 插件</p>
<p>添加码云账号：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209202215.png" alt="" loading="lazy"></p>
<p>分享项目到码云上：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209202655.png" alt="" loading="lazy"></p>
<p>push、pull与github操作差不多（注意ssh或https链接地址</p>
<h3> 9.3 码云复制 GitHub 项目</h3>
<p>新建仓库时导入</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209203418.png" alt="" loading="lazy"></p>
<h2> 10、自建代码托管平台-GitLab</h2>
<h3> 10.1 GitLab 简介</h3>
<p>​	GitLab 是由 GitLabInc.开发，使用 MIT 许可证的基于网络的 Git 仓库管理工具，且具有wiki 和 issue 跟踪功能。使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务。<br>
​	GitLab 由乌克兰程序员 DmitriyZaporozhets 和 ValerySizov 开发，它使用 Ruby 语言写成。后来，一些部分用 Go 语言重写。截止 2018 年 5 月，该公司约有 290 名团队成员，以及 2000 多名开源贡献者。 GitLab 被 IBM， Sony， JülichResearchCenter， NASA， Alibaba，<br>
Invincea， O’ReillyMedia， Leibniz-Rechenzentrum(LRZ)， CERN， SpaceX 等组织使用。</p>
<h3> 10.2 GitLab 官网地址</h3>
<p>官网地址： <a href="https://about.gitlab.com/" target="_blank" rel="noopener noreferrer">https://about.gitlab.com/</a><br>
安装说明： <a href="https://about.gitlab.com/installation/" target="_blank" rel="noopener noreferrer">https://about.gitlab.com/installation/</a></p>
<h3> 10.3 GitLab 安装</h3>
<h4> 10.3.1 服务器准备</h4>
<p>准备一个系统为 CentOS7 以上版本的服务器， 要求内存 4G，磁盘 50G。<br>
关闭防火墙， 并且配置好主机名和 IP，保证服务器可以上网。<br>
此教程使用虚拟机：主机名： gitlab-server<br>
IP 地址： 192.168.6.200</p>
<h4> 10.3.2 安装包准备</h4>
<p>​	Yum 在线安装 gitlab- ce 时，需要下载几百 M 的安装文件，非常耗时，所以最好提前把所需 RPM 包下载到本地，然后使用离线 rpm 的方式安装。</p>
<p>下载地址：<br>
<a href="https://packages.gitlab.com/gitlab/gitlabce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm" target="_blank" rel="noopener noreferrer">https://packages.gitlab.com/gitlab/gitlabce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm</a></p>
<h4> 10.3.3 编写安装脚本</h4>
<p>安装 gitlab 步骤比较繁琐，因此我们可以参考官网编写 gitlab 的安装脚本。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230209215654883.png" alt="image-20230209215654883" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209215709.png" alt="" loading="lazy"></p>
<p>给脚本增加执行权限</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209215726.png" alt="" loading="lazy"></p>
<p>然后执行该脚本，开始安装 gitlab-ce。注意一定要保证服务器可以上网</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209215747.png" alt="" loading="lazy"></p>
<h4> 10.3.4 初始化 GitLab 服务</h4>
<p>执行以下命令初始化 GitLab 服务，过程大概需要几分钟，耐心等待</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230209215813902.png" alt="image-20230209215813902" loading="lazy"></p>
<h4> 10.3.5 启动 GitLab 服务</h4>
<p>执行以下命令启动 GitLab 服务：gitlab-ctl start<br>
如需停止：执行 gitlab-ctl stop</p>
<h4> 10.3.6 使用浏览器访问 GitLab</h4>
<p>使用主机名或者 IP 地址即可访问 GitLab 服务。需要提前配一下 windows 的 hosts 文件。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209215915.png" alt="" loading="lazy"></p>
<p>首次登陆之前，需要修改下 GitLab 提供的 root 账户的密码，要求 8 位以上，包含大小写子母和特殊符号。因此我们修改密码<br>
然后使用修改后的密码登录 GitLab</p>
<h4> 10.3.7 GitLab 创建远程库</h4>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220007.png" alt="" loading="lazy"></p>
<h4> 10.3.8 IDEA 集成 GitLab</h4>
<p>1） 安装 GitLab 插件</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220030.png" alt="" loading="lazy"></p>
<p>2）设置 GitLab 插件</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220053.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220108.png" alt="" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220123.png" alt="" loading="lazy"></p>
<p>3） push 本地代码到 GitLab 远程库</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220146.png" alt="" loading="lazy"></p>
<p>自定义远程连接</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220208.png" alt="" loading="lazy"></p>
<p>注意： gitlab 网页上复制过来的连接是： <a href="http://gitlab.example.com/root/git-test.git%EF%BC%8C" target="_blank" rel="noopener noreferrer">http://gitlab.example.com/root/git-test.git，</a><br>
需要手动修改为： <a href="http://gitlab-server/root/git-test.git" target="_blank" rel="noopener noreferrer">http://gitlab-server/root/git-test.git</a><br>
选择 gitlab 远程连接，进行 push。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230209220238.png" alt="" loading="lazy"></p>
<p>只要 GitLab 的远程库连接定义好以后， 对 GitLab 远程库进行 pull 和 clone 的操作和 Github 和码云一致</p>
<h2> 11、Git标签操作</h2>
<p>Git中的标签是指<strong>某个分支某个特定时间点的状态</strong>（快照？），通过标签，可以很方便的切换到标记时的状态</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230314211432.png" alt="" loading="lazy"></p>
<p>git tag				列出已有标签<br>
git tag 标签名	创建标签<br>
git push 远程仓库别名 标签名	将标签推送至远程仓库<br>
git checkout -b 新分支名 标签名	检出标签（将当前标签的状态下载下来）</p>
<p><strong>标签是一个静态的概念，标签打好了，就不会变了</strong><br>
<strong>分支可以修改，是动态的</strong></p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230208144134.png" type="image/png"/>
    </item>
    <item>
      <title>Markdown 语法基础</title>
      <link>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Markdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80.html</link>
      <guid>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Markdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Markdown 语法基础</source>
      <description>Markdown 语法基础 Markdown官方教程 编辑器推荐：Typora 概述 Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Markdown 的目标是实现「易读易写」</description>
      <category>基础知识</category>
      <content:encoded><![CDATA[<h1> Markdown 语法基础</h1>
<p><a href="https://markdown.com.cn/" target="_blank" rel="noopener noreferrer">Markdown官方教程</a><br>
编辑器推荐：<a href="https://www.typora.io/" target="_blank" rel="noopener noreferrer">Typora</a></p>
<h2> 概述</h2>
<p>Markdown 是一种可以使用普通文本编辑器编写的 <strong>标记语言</strong>，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>
Markdown 的目标是实现「易读易写」</p>
<h2> 行内 HTML</h2>
<p>不在 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>举例来说，在 Markdown 文件里加上一段 HTML 表格:</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 换行</h2>
<p>想要插入 <code>&lt;br /&gt;</code> 标签或者换行的话，在行尾加上两个以上的空格 () 然后按 Enter</p>
<h2> 标题</h2>
<p>在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 块引言</h2>
<p>Markdown 使用 email 形式的块引言<br>
在每行的最前面加上<code>&gt;</code><br>
或只在整个段落的第一行最前面加上<code>&gt;</code><br>
块引言可以有阶层 (例如: 引言内的引言)<br>
引言的块内也可以使用其他的 Markdown 语法，包括标题、列表、代码块等</p>
<p>演示：</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>
<blockquote>
<h2> This is a header.</h2>
<ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol>
<p>Here's some example code:</p>

</blockquote>
<h2> 列表</h2>
<p>无序列表使用减号作为列表标记(也可使用星号、加号):</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p>有序列表则使用数字接着一个英文句点:</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
<h2> 代码块</h2>
<p>和代码相关的写作或是标签语言原始码通常会有已经排版好的代码块，通常这些块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码块包起来。<br>
如果你想要在代码块里输入用 Markdown 表示的代码库，你可以进行嵌套。(使用多个)</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 代码段</h2>
<p>如果要标记一小段行内代码，你可以用反引号把它包起来 (`)</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>const a = 10</code></p>
<h2> 分隔线</h2>
<p>你可以在一行中用三个或以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号中间插入空白。下面每种写法都可以建立分隔线:</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>
<h2> 链接</h2>
<p>Markdown支持行内和参考两种方式，在此仅展示行内方式</p>
<p>在方块括号后面马上接着括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>相对路径链接到同样主机的资源:</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 强调与删除</h2>
<p>使用星号 (*) 和底线 (_) 作为标记强调字词的符号<br>
被单个 * 或 _ 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围<br>
用两个 * 或 _ 包起来的话，则会被转成 <code>&lt;strong&gt;</code></p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>em</em><br>
<strong>strong</strong><br>
删除:<code>~~delete~~</code>  <s>delete</s></p>
<h2> 图片</h2>
<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式: 行内 和 参考。再次仅展示行内方式。</p>
<p>行内图片的语法:</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<h2> 自动链接</h2>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://example.com/" target="_blank" rel="noopener noreferrer">http://example.com/</a><br>
<a href="http://example.com/" target="_blank" rel="noopener noreferrer">http://example.com/</a></p>
<h2> 转义字符</h2>
<p>使用 <code>\</code> 用于对字符转义</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 表格</h2>
<p>要添加表，请使用三个或多个连字符（---）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<p>对齐方式:<br>
居中使用<code>:-:</code>  ，右对齐使用<code>-:	</code>  ，左对齐使用<code>:-</code></p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th style="text-align:left">Syntax</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Test Text</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Header</td>
<td style="text-align:center">Title</td>
<td style="text-align:right">Here's this</td>
</tr>
<tr>
<td style="text-align:left">Paragraph</td>
<td style="text-align:center">Text</td>
<td style="text-align:right">And more</td>
</tr>
</tbody>
</table>
<h2> Emoji</h2>
<p><code>:emoji名称:</code><br>
<code>:smile:</code> 😄<br>
<a href="https://gist.github.com/rxaviers/7360908" target="_blank" rel="noopener noreferrer">Emoji列表</a><br>
<a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/emoji/" target="_blank" rel="noopener noreferrer">Emoji列表分类版</a></p>
]]></content:encoded>
      <enclosure url="https://T4mako.github.io/path/to/img.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>操作系统</title>
      <link>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html</link>
      <guid>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html</guid>
      <source url="https://T4mako.github.io/rss.xml">操作系统</source>
      <category>基础知识</category>
    </item>
    <item>
      <title>数据结构</title>
      <link>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</link>
      <guid>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</guid>
      <source url="https://T4mako.github.io/rss.xml">数据结构</source>
      <category>基础知识</category>
    </item>
    <item>
      <title>正则表达式</title>
      <link>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
      <guid>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
      <source url="https://T4mako.github.io/rss.xml">正则表达式</source>
      <description>正则表达式 正则表达式的使用三步骤： 1、定义正则表达式的对象 2、定义带校验字符串 3、校验</description>
      <category>基础</category>
      <content:encoded><![CDATA[<h2> 正则表达式</h2>
<p><strong>正则表达式的使用三步骤：<br>
1、定义正则表达式的对象<br>
2、定义带校验字符串<br>
3、校验</strong></p>
<!-- more -->
<h2> 1.1 正则表达式的概念</h2>
<p><strong>正则表达式用来校验字符串是否满足一定的规则的公式</strong><br>
正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑</p>
<h2> 1.2 正则表达式的用途</h2>
<p>所以正则表达式有三个主要用途：</p>
<ul>
<li>模式验证: 检测某个字符串是否符合规则，例如检测手机号、身份证号等等是否符合规范</li>
<li>匹配读取:  将目标字符串中满足规则的部分<strong>读取</strong>出来，例如将整段文本中的邮箱地址读取出来</li>
<li>匹配替换:  将目标字符串中满足标准的部分<strong>替换</strong>为其他字符串,例如将整段文本中的"hello"替换成"haha"</li>
</ul>
<h2> 1.3 正则表达式的语法</h2>
<h3> 1.3.1 创建正则表达式对象</h3>
<ul>
<li><strong>对象形式：<code>var reg = new RegExp("正则表达式")</code> 当正则表达式中有"/"那么就使用这种</strong></li>
<li><strong>直接量形式：<code>var reg = /正则表达式/</code>一般使用这种声明方式</strong></li>
</ul>
<h3> 2.3.2 正则表达式入门案例</h3>
<h4> 2.3.2.1 模式验证</h4>
<p>校验字符串中 <strong>是否包含o</strong> 字母</p>
<p><strong>注意</strong>：这里是使用<strong>正则表达式对象</strong>来<strong>调用</strong>方法。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.3.2.2 匹配读取</h4>
<p>读取字符串中的<strong>所有</strong>'o'<em>（全局匹配，对应所有匹配到的字符）</em></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.3.2.3 匹配替换:</h4>
<p>将字符串中的第一个'o'<strong>替换</strong>==成'@'</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3.3 正则表达式的匹配模式</h3>
<h4> 2.3.3.1 全文查找</h4>
<p>如果<strong>不使用g</strong>对正则表达式对象进行修饰，则使用正则表达式进行查找时，<strong>仅返回第一个匹配</strong>；使用g后，返回所有匹配。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比代码：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> 2.3.3.2 忽略大小写（i）</h6>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比代码：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> 2.3.3.3 多行查找（m）</h6>
<p><em><strong>不使用多行查找模式，目标字符串中不管有没有换行符都会被当作一行。</strong></em></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比代码：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3.4 元字符</h3>
<p>在正则表达式中被赋予特殊含义的字符，不能被直接当做普通字符使用。如果要匹配元字符本身，需要对元字符进行转义，转义的方式是在元字符前面加上“\”，例如：^</p>
<h4> 2.3.4.1 常用的元字符</h4>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配除换行字符以外的任意字符。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线等价于[a-zA-Z0-9_]</td>
</tr>
<tr>
<td>\W</td>
<td>匹配任何非单词字符。等价于[^A-Za-z0-9_]</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意的空白符，包括空格、制表符、换页符等等。等价于[\f\n\r\t\v]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于[^\f\n\r\t\v]。</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字。等价于[0-9]。</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符。等价于[^0-9]</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的开始或结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始，但在[]中使用表示取反</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
</tr>
</tbody>
</table>
<h4> 2.3.4.2 例子一</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.3.4.3 例子二</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.3.4.4 例子三</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.3.4.5 例子四</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3.5 字符集合</h3>
<table>
<thead>
<tr>
<th>语法格式</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>[字符列表]</td>
<td>[abc] 含义：目标字符串包含abc中的任何一个字符 <br>目标字符串：plain 是否匹配：是 <br>原因：plain中的“a”在列表“abc”中</td>
<td>目标字符串中任何一个字符出现在字符列表中就算匹配。</td>
</tr>
<tr>
<td>[^字符列表]</td>
<td>[^abc] 含义：目标字符串包含abc以外的任何一个字符 <br>目标字符串：plain 是否匹配：是 <br>原因：plain中包含“p”、“l”、“i”、“n”</td>
<td>匹配字符列表中未包含的任意字符。</td>
</tr>
<tr>
<td>[字符范围]</td>
<td>[a-z] 含义：所有小写英文字符组成的字符列表 <br>正则表达式：[A-Z] <br>含义：所有大写英文字符组成的字符列表</td>
<td>匹配指定范围内的任意字符。匹配指定范围内的任意字符。</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3.6 出现次数</h3>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3.7 在正则表达式中表达『或者』</h3>
<p>使用符号：|</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.4 常用正则表达式</h2>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>计算机组成原理</title>
      <link>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.html</link>
      <guid>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.html</guid>
      <source url="https://T4mako.github.io/rss.xml">计算机组成原理</source>
      <category>基础知识</category>
    </item>
    <item>
      <title>计算机网络</title>
      <link>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html</link>
      <guid>https://T4mako.github.io/code/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html</guid>
      <source url="https://T4mako.github.io/rss.xml">计算机网络</source>
      <category>基础知识</category>
    </item>
    <item>
      <title>Elasticsearch</title>
      <link>https://T4mako.github.io/code/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch.html</link>
      <guid>https://T4mako.github.io/code/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch.html</guid>
      <source url="https://T4mako.github.io/rss.xml">Elasticsearch</source>
      <description>elasticsearch分布式搜索引擎</description>
      <content:encoded><![CDATA[<p>elasticsearch分布式搜索引擎</p>
<!-- more -->
<h2> 1、初识elasticsearch</h2>
<h3> 1.1、了解ES</h3>
<h4> 1.1.1、elasticsearch的作用</h4>
<p>elasticsearch是一款非常强大的<strong>开源搜索引擎</strong>，具备非常多强大功能，可以帮助我们<strong>从海量数据中快速找到需要的内容</strong>，可以用来实现搜索、日志统计、分析、系统监控等功能</p>
<h4> 1.1.2、ELK技术栈</h4>
<p>elasticsearch结合kibana、Logstash、Beats，也就是<strong>elastic stack（ELK）</strong>。被广泛应用在日志数据分析、实时监控等领域</p>
<p>而elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329134229.png" alt="" loading="lazy"></p>
<h4> 1.1.3、elasticsearch的发展</h4>
<p>elasticsearch底层是基于<strong>lucene</strong>来实现的。</p>
<p>**<a href="https://lucene.apache.org/" target="_blank" rel="noopener noreferrer">Lucene</a>**是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发。</p>
<p>Lucene的优势：易扩展，高性能（基于倒排索引）<br>
Lucene的缺点：只限于Java语言开发，学习曲线陡峭，不支持水平扩展</p>
<p>**<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener noreferrer">elasticsearch</a>**的发展历史：<br>
2004年Shay Banon基于Lucene开发了Compass<br>
2010年Shay Banon 重写了Compass，取名为Elasticsearch。</p>
<h3> 1.2、倒排索引</h3>
<p>倒排索引的概念是基于MySQL这样的正向索引而言的。</p>
<h4> 1.2.1、正向索引</h4>
<p>如果是根据<strong>id查询</strong>，那么直接走索引，查询<strong>速度非常快</strong></p>
<p>但如果是基于title做<strong>模糊查询</strong>，只能是逐行扫描数据，流程如下：<br>
1）用户搜索数据，条件是title符合<code>"%手机%"</code><br>
2）逐行获取数据，比如id为1的数据<br>
3）判断数据中的title是否符合用户搜索条件<br>
4）如果符合则放入结果集，不符合则丢弃。回到步骤1</p>
<p><strong>逐行扫描</strong>，也就是全表扫描，随着数据量增加，其查询效率也会越来越低。当数据量达到数百万时，就是一场灾难。</p>
<h4> 1.2.2、倒排索引</h4>
<p>倒排索引中两个非常重要的概念：</p>
<ul>
<li><strong>文档（<code>Document</code>）</strong>：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li>
<li><strong>词条（<code>Term</code>）</strong>：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li>
</ul>
<p><strong>创建倒排索引</strong>是对正向索引的一种特殊处理，流程如下：</p>
<ul>
<li>将每一个文档的数据利用算法分词，得到一个个词条</li>
<li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li>
<li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li>
</ul>
<p>如图：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329140151.png" alt="" loading="lazy"></p>
<p>举例：倒排索引的<strong>搜索流程</strong>如下（以搜索"华为手机"为例）：</p>
<p>1）用户输入条件<code>"华为手机"</code>进行搜索。<br>
2）对用户输入内容<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。<br>
3）拿着词条在倒排索引中查找，可以得到包含词条的文档id：1、2、3。<br>
4）拿着文档id到正向索引中查找具体文档。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329140231.png" alt="" loading="lazy"></p>
<h4> 1.2.3、正向和倒排</h4>
<ul>
<li>
<p><strong>正向索引</strong>是最传统的，根据<strong>id索引</strong>的方式。但根据词条查询时，必须<strong>先逐条获取每个文档</strong>，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条</strong>的过程。</p>
</li>
<li>
<p><strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是<strong>根据词条找文档</strong>的过程。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>正向索引</th>
<th><strong>倒排索引</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>优点</strong></td>
<td>可以给多个字段创建索引<br>根据索引字段搜索、排序速度非常快</td>
<td>根据词条搜索、模糊搜索时，速度非常快</td>
</tr>
<tr>
<td><strong>缺点</strong></td>
<td>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</td>
<td>只能给词条创建索引，而不是字段 <br>无法根据字段做排序</td>
</tr>
</tbody>
</table>
<h3> 1.3、es中的概念</h3>
<h4> 1.3.1、文档和字段</h4>
<p>elasticserch是<strong>面向文档</strong>存储的，可以是数据库的一条商品数据，一个订单信息。<br>
文档数据会被序列化为<strong>json格式</strong>后存储在elasticsearch中</p>
<p>而Json文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列。</p>
<h4> 1.3.2、索引和映射</h4>
<p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p>
<p>例如：<br>
所有用户文档，就可以组织在一起，称为用户的索引；<br>
所有商品的文档，可以组织在一起，称为商品的索引；<br>
所有订单的文档，可以组织在一起，称为订单的索引；</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329141204.png" alt="" loading="lazy"></p>
<p>因此，我们可以把<strong>索引</strong>当做是数据库中的<strong>表</strong>。</p>
<p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，<strong>类似表的结构约束</strong>。</p>
<h4> 1.3.3、mysql与elasticsearch</h4>
<table>
<thead>
<tr>
<th><strong>MySQL</strong></th>
<th><strong>Elasticsearch</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Table</td>
<td>Index</td>
<td>索引(index)，就是文档的集合，类似数据库的表(table)</td>
</tr>
<tr>
<td>Row</td>
<td>Document</td>
<td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td>
</tr>
<tr>
<td>Column</td>
<td>Field</td>
<td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td>
</tr>
<tr>
<td>Schema</td>
<td>Mapping</td>
<td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td>
</tr>
<tr>
<td>SQL</td>
<td>DSL</td>
<td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td>
</tr>
</tbody>
</table>
<p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性<br>
Elasticsearch：擅长海量数据的搜索、分析、计算</p>
<p>因此在企业中，往往是两者结合使用：<br>
对安全性要求较高的写操作，使用mysql实现<br>
对查询性能要求较高的搜索需求，使用elasticsearch实现<br>
两者再基于某种方式，实现数据的同步，保证一致性</p>
<h2> 2、安装、部署es、kibana</h2>
<h3> 2.1.创建网络</h3>
<p>因为我们还需要部署<strong>kibana容器</strong>，因此需要让es和kibana容器互联。这里先<strong>创建一个网络</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 2.2、加载镜像</h3>
<p>采用elasticsearch的7.12.1版本的镜像，这个镜像体积非常大，接近1G。不建议大家自己pull</p>
<p>将课前资料中的es.tar，kibana.tar上传到虚拟机中，然后运行命令加载即可</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3、部署ES</h3>
<p>运行docker命令，部署单点es：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令解释：</p>
<ul>
<li><code>-e "cluster.name=es-docker-cluster"</code>：设置集群名称</li>
<li><code>-e "http.host=0.0.0.0"</code>：监听的地址，可以外网访问</li>
<li><code>-e "ES_JAVA_OPTS=-Xms512m -Xmx512m"</code>：内存大小</li>
<li><code>-e "discovery.type=single-node"</code>：非集群模式</li>
<li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li>
<li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li>
<li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li>
<li><code>--privileged</code>：授予逻辑卷访问权</li>
<li><code>--network es-net</code> ：加入一个名为es-net的网络中</li>
<li><code>-p 9200:9200</code>：端口映射配置</li>
</ul>
<p>在浏览器中输入：<a href="http://192.168.80.130:9200" target="_blank" rel="noopener noreferrer">http://192.168.80.130:9200</a> 即可看到elasticsearch的响应结果：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329151453.png" alt="" loading="lazy"></p>
<h3> 2.4、部署kibana</h3>
<p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。</p>
<h4> 2.4.1、部署</h4>
<p>运行docker命令，部署kibana</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li>
<li><code>-e ELASTICSEARCH_HOSTS=http://es:9200"</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li>
<li><code>-p 5601:5601</code>：端口映射配置</li>
</ul>
<p>kibana启动一般比较慢，需要多等待一会，可以通过命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看运行日志，当查看到下面的日志，说明成功：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230329151658886.png" alt="image-20230329151658886" loading="lazy"></p>
<p>此时，在浏览器输入地址访问：<a href="http://192.168.80.130:5601" target="_blank" rel="noopener noreferrer">http://192.168.80.130:5601</a>，即可看到结果</p>
<h4> 2.4.2、DevTools</h4>
<p>kibana中提供了一个DevTools界面，这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20230330194248676.png" alt="image-20230330194248676" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329151743.png" alt="" loading="lazy"></p>
<div class="language-dsl line-numbers-mode" data-ext="dsl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、安装IK分词器</h2>
<p>es在创建倒排索引时需要对文档分词，在搜索时，需要对用户输入内容分词。但默认的分词规则对中文处理并不友好。</p>
<p>因此，一般会使用IK分词器</p>
<h3> 3.1、在线安装ik插件（较慢）</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.2、离线安装ik插件（推荐）</h3>
<h4> 1）查看数据卷目录</h4>
<p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示结果：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中。</p>
<h4> 2）解压缩分词器安装包</h4>
<p>把课前资料中的ik分词器解压缩，重命名为ik</p>
<h4> 3）上传到es容器的插件数据卷中</h4>
<p>也就是<code>/var/lib/docker/volumes/es-plugins/_data </code>：</p>
<h4> 4）重启容器</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5）测试</h4>
<p>IK分词器包含两种模式：<br>
<strong><code>ik_smart</code>：智能切分，组粒度<br>
<code>ik_max_word</code>：最细切分，细粒度</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.3、扩展、停用词词典</h3>
<p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。<br>
所以我们的<strong>词汇</strong>字典也需要<strong>不断的更新</strong>，IK分词器提供了<strong>扩展词汇</strong>的功能。</p>
<p>1）打开IK分词器config目录：</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329153523.png" alt="" loading="lazy"></p>
<p>2）在IKAnalyzer.cfg.xml配置文件内容添加：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）<strong>新建ext.dic，stopword.dic</strong>可以参考config目录下复制一个配置文件进行修改</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4）重启elasticsearch</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志中已经成功加载ext.dic配置文件</p>
<p>5）测试效果：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意当前文件的编码必须是 <strong>UTF-8</strong> 格式，严禁使用Windows记事本编辑</p>
</blockquote>
<h2> 4、索引库操作</h2>
<p><strong>索引库</strong>就类似<strong>数据库表</strong>，<strong>mapping映射</strong>就类似<strong>表的结构</strong>。<br>
我们要向es中存储数据，必须先创建“库”和“表”。</p>
<h3> 4.1、mapping属性</h3>
<p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p>
<ul>
<li><strong>type</strong>：字段<strong>数据类型</strong>，常见的简单类型有：
<ul>
<li><strong>字符串</strong>：<br>
<strong>text</strong>（可分词的文本）<br>
<strong>keyword</strong>（不分词，是精确值，例如：品牌、国家、ip地址）</li>
<li><strong>数值</strong>：<br>
<strong>long、integer、short、byte、double、float</strong></li>
<li>布尔：<br>
boolean</li>
<li>日期：<br>
date</li>
<li>对象：<br>
object</li>
</ul>
</li>
<li><strong>index</strong>：是否创建<strong>倒排索引</strong>，默认为true，false：将来不会参与搜索</li>
<li><strong>analyzer</strong>：使用哪种<strong>分词器</strong></li>
<li><strong>properties</strong>：该字段的<strong>子字段</strong></li>
</ul>
<p>例如：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2、创建索引库</h3>
<p>ES中通过<strong>Restful请求操作索引库、文档</strong>。请求内容用DSL语句来表示。创建索引库和mapping的DSL语法如下：</p>
<p>请求方式：PUT<br>
请求路径：/索引库名，可以自定义<br>
请求参数：mapping映射</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2、修改索引库</h3>
<p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改mapping</strong>。</p>
<p>虽然无法修改mapping中已有的字段，但是却<strong>允许添加新的字段</strong>到mapping中，因为不会对倒排索引产生影响。</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.3、查询索引库</h3>
<p><strong>基本语法</strong>：</p>
<ul>
<li>
<p>请求方式：GET</p>
</li>
<li>
<p>请求路径：/索引库名</p>
</li>
<li>
<p>请求参数：无</p>
</li>
</ul>
<p><strong>格式</strong>：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4.4、总结</h3>
<p>索引库的操作：<br>
创建索引库：PUT /索引库名<br>
查询索引库：GET /索引库名<br>
删除索引库：DELETE /索引库名<br>
添加字段：PUT /索引库名/_mapping</p>
<h2> 5、文档操作</h2>
<h3> 5.1、新增文档</h3>
<p><strong>POST</strong></p>
<p><strong>语法：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210720212933362.png" alt="" loading="lazy"></p>
<h3> 5.2、查询文档</h3>
<p>根据rest风格，查询是<strong>GET</strong>，不过查询一般都需要条件，这里我们把文档id带上。</p>
<p><strong>语法：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>通过kibana查看数据：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 5.3、删除文档</h3>
<p>删除使用<strong>DELETE</strong>请求，同样，需要根据id进行删除：</p>
<p><strong>语法：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.4、修改文档</h3>
<p>修改有两种方式：</p>
<ul>
<li>全量修改：直接覆盖原来的文档</li>
<li>增量修改：修改文档中的部分字段</li>
</ul>
<h4> 5.4.1、全量修改</h4>
<p>全量修改是覆盖原来的文档，其本质是：</p>
<ul>
<li>根据指定的id删除文档</li>
<li>新增一个相同id的文档</li>
</ul>
<blockquote>
<p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会<strong>执行</strong>，也就<strong>从修改变成了新增</strong>操作了。</p>
</blockquote>
<p><strong>语法：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5.4.2、增量修改</h4>
<p>增量修改是只修改指定id匹配的文档中的部分字段。</p>
<p><strong>语法：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.5、总结</h3>
<p>文档操作有哪些？</p>
<ul>
<li json文档="">创建文档：POST /{索引库名}/_doc/文档id  </li>
<li>查询文档：GET /{索引库名}/_doc/文档id</li>
<li>删除文档：DELETE /{索引库名}/_doc/文档id</li>
<li>修改文档：
<ul>
<li json文档="">全量修改：PUT /{索引库名}/_doc/文档id</li>
<li>增量修改：POST /{索引库名}/_update/文档id { "doc": {字段}}</li>
</ul>
</li>
</ul>
<h2> 6、RestAPI</h2>
<p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener noreferrer">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p>
<p>其中的Java Rest Client又包括两种：</p>
<ul>
<li>Java Low Level Rest Client</li>
<li>Java High Level Rest Client</li>
</ul>
<p>我们学习的是Java HighLevel Rest Client客户端API</p>
<p>利用JavaRestClient实现创建、删除索引库，判断索引是否存在<br>
根据课前资料提供的数据创建索引库，名称为hotel，mapping属性根据数据库结构定义。<br>
基本步骤入下：<br>
1、导入课前资料Demo<br>
2、分析数据结构，定义mapping属性<br>
3、初始化JavaRestClient<br>
4、利用JavaRestClient创建索引库<br>
5、利用JavaRestClient删除索引库<br>
6、利用JavaRestClient判断索引库是否存在</p>
<h3> 6.0、导入、配置Demo工程</h3>
<h4> 6.0.1、导入工程</h4>
<p>首先导入课前资料提供的数据库数据（tb_hotel.sql）</p>
<p>然后导入课前资料提供的项目（hotel-demo）</p>
<h4> 6.0.2、mapping映射分析</h4>
<p>创建索引库，最关键的是mapping映射，而mapping映射要考虑的信息包括：</p>
<ul>
<li>字段名</li>
<li>字段数据类型</li>
<li>是否参与搜索</li>
<li>是否需要分词</li>
<li>如果分词，分词器是什么？</li>
</ul>
<p>其中：</p>
<ul>
<li>字段名、字段数据类型，可以参考数据表结构的名称和类型</li>
<li>是否参与搜索要分析业务来判断，例如图片地址，就无需参与搜索</li>
<li>是否分词呢要看内容，内容如果是一个整体就无需分词，反之则要分词</li>
<li>分词器，我们可以统一使用ik_max_word</li>
</ul>
<p>酒店数据的<strong>索引库结构</strong>:</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特殊字段说明：<br>
location：地理坐标，里面包含精度、纬度<br>
<strong>all</strong>：一个<strong>组合字段</strong>，其目的是将多字段的值 <strong>利用copy_to合并</strong>，提供给用户搜索（多字段搜索）</p>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210720222110126.png" alt="" loading="lazy"></p>
<p>字段拷贝可以使用<strong>copy_to</strong>属性<strong>将当前字段拷贝到指定字段</strong></p>
<h4> 6.0.3、初始化JavaRestClient</h4>
<p>1、导入es的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、因为SpringBoot默认的ES版本是7.6.2，所以我们需要覆盖默认的ES版本：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、初始化RestHighLevelClient：</p>
<p>初始化核心代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：为了单元测试方便，我们创建一个测试类HotelIndexTest，然后将初始化的代码编写在@BeforeEach方法中：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.1、创建索引库</h3>
<p><img src="https://raw.githubusercontent.com/T4mako/ImageBed/main/image-20210720223049408.png" alt="" loading="lazy"></p>
<p>代码分为三步：<br>
1、创建Request对象。Request是<strong>CreateIndexRequest</strong><br>
2、添加请求参数，其实就是<strong>DSL的JSON参数</strong>部分。因为json字符串很长，这里是定义了<strong>静态字符串常量</strong>MAPPING_TEMPLATE，让代码看起来更加优雅。<br>
3、发送请求，**client.indices()**方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。</p>
<h3> 6.2、删除索引库</h3>
<p>与删除的Java代码流程是类似的。依然是三步走：<br>
1、创建Request对象。这次是<strong>GetIndexRequest</strong>对象<br>
2、准备参数。这里是<strong>无参</strong><br>
3、<strong>发送请求。改用exists方法</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.3、判断索引库是否存在</h3>
<p>判断索引库是否存在，本质就是查询，对应的DSL：GET /hotel</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、RestClient操作文档</h2>
<p>利用JavaRestClient事项文档的CRUD</p>
<p>数据库查询酒店数据，导入到hotel索引库，实现酒店数据的CRUD</p>
<p>基本步骤：<br>
1、初始化JavaRestClient<br>
2、利用JavaRestClient新增酒店数据<br>
3、利用哦JavaRestClient根据id查询酒店数据<br>
4、利用JavaRestClient删除酒店数据<br>
5、利用JavaRestClient修改酒店数据</p>
<h3> 7.1、新增文档</h3>
<p>将数据库的酒店数据查询出来，写入elasticsearch中</p>
<p>注意准备<strong>两个实体类</strong>，Hotel，HotelDoc<br>
Hotel类型与<strong>索引库结构存在差异</strong>：<br>
longitude和latitude需要合并为location<br>
因此，我们需要定义一个新的类型，与索引库结构吻合</p>
<p>新增文档的DSL语句如下：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的java代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三步走：<br>
1）创建Request对象<br>
2）准备请求参数，也就是DSL中的JSON文档<br>
3）发送请求<br>
变化的地方在于，<a href="http://xn--client-vt9in98k266am0d6y0gd5e.xxx" target="_blank" rel="noopener noreferrer">这里直接使用client.xxx</a>()的API</p>
<h3> 7.2、查询文档</h3>
<p>根据id查询到文档数据时json，需要反序列化为java对象</p>
<p>查询的DSL语句如下：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与之前类似，也是三步走：<br>
1）准备Request对象。这次是查询，所以是GetRequest<br>
2）发送请求，得到结果。因为是查询，这里调用client.get()方法<br>
3）解析结果，就是对JSON做反序列化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.3、修改文档</h3>
<p>根据id修改数据的方式有两种：<br>
方式一：全量修改：本质是先根据id删除，再新增<br>
方式二：增量修改：修改文档中的指定字段值</p>
<p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：<br>
如果新增时，ID已经存在，则修改<br>
如果新增时，ID不存在，则新增</p>
<p>增量修改：<br>
与之前类似，也是三步走：<br>
1）准备Request对象。这次是修改，所以是UpdateRequest<br>
2）准备参数。也就是JSON文档，里面包含要修改的字段<br>
3）更新文档。这里调用client.update()方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.4、删除文档</h3>
<p>删除的DSL为是这样的：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>依然是三步走：<br>
1）准备Request对象，因为是删除，这次是DeleteRequest对象。要指定索引库名和id<br>
2）准备参数，无参<br>
3）发送请求。因为是删除，所以是client.delete()方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.5、批量导入文档</h3>
<p>批量查询数据，然后批量导入索引库中：<br>
思路：<br>
1、利用mybatis-plus查询酒店数据<br>
2、将查询到的数据（Bean）装换为文档数据类型（BeanDOC）<br>
3、利用JavaRequestClient的Bulk批处理，实现批量新增文档</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/T4mako/ImageBed/main/20230329134229.png" type="image/png"/>
    </item>
  </channel>
</rss>